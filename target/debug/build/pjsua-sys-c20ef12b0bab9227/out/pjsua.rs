/* automatically generated by rust-bindgen 0.57.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const PJ_CC_NAME: &'static [u8; 4usize] = b"gcc\0";
pub const PJ_HAS_INT64: u32 = 1;
pub const PJ_INT64_FMT: &'static [u8; 2usize] = b"L\0";
pub const PJ_HAS_BZERO: u32 = 1;
pub const PJ_LINUX: u32 = 1;
pub const PJ_OS_NAME: &'static [u8; 6usize] = b"linux\0";
pub const PJ_HAS_ARPA_INET_H: u32 = 1;
pub const PJ_HAS_ASSERT_H: u32 = 1;
pub const PJ_HAS_CTYPE_H: u32 = 1;
pub const PJ_HAS_ERRNO_H: u32 = 1;
pub const PJ_HAS_LINUX_SOCKET_H: u32 = 0;
pub const PJ_HAS_MALLOC_H: u32 = 1;
pub const PJ_HAS_NETDB_H: u32 = 1;
pub const PJ_HAS_NETINET_IN_H: u32 = 1;
pub const PJ_HAS_SETJMP_H: u32 = 1;
pub const PJ_HAS_STDARG_H: u32 = 1;
pub const PJ_HAS_STDDEF_H: u32 = 1;
pub const PJ_HAS_STDIO_H: u32 = 1;
pub const PJ_HAS_STDLIB_H: u32 = 1;
pub const PJ_HAS_STRING_H: u32 = 1;
pub const PJ_HAS_SYS_IOCTL_H: u32 = 1;
pub const PJ_HAS_SYS_SELECT_H: u32 = 1;
pub const PJ_HAS_SYS_SOCKET_H: u32 = 1;
pub const PJ_HAS_SYS_TIME_H: u32 = 1;
pub const PJ_HAS_SYS_TIMEB_H: u32 = 1;
pub const PJ_HAS_SYS_TYPES_H: u32 = 1;
pub const PJ_HAS_TIME_H: u32 = 1;
pub const PJ_HAS_UNISTD_H: u32 = 1;
pub const PJ_HAS_SEMAPHORE_H: u32 = 1;
pub const PJ_HAS_MSWSOCK_H: u32 = 0;
pub const PJ_HAS_WINSOCK_H: u32 = 0;
pub const PJ_HAS_WINSOCK2_H: u32 = 0;
pub const PJ_HAS_LOCALTIME_R: u32 = 1;
pub const PJ_SOCK_HAS_INET_ATON: u32 = 1;
pub const PJ_SOCKADDR_HAS_LEN: u32 = 0;
pub const PJ_SELECT_NEEDS_NFDS: u32 = 0;
pub const PJ_HAS_ERRNO_VAR: u32 = 1;
pub const PJ_HAS_SO_ERROR: u32 = 1;
pub const PJ_HAS_THREADS: u32 = 1;
pub const PJ_HAS_HIGH_RES_TIMER: u32 = 1;
pub const PJ_HAS_MALLOC: u32 = 1;
pub const PJ_OS_HAS_CHECK_STACK: u32 = 0;
pub const PJ_NATIVE_STRING_IS_UNICODE: u32 = 0;
pub const PJ_EMULATE_RWMUTEX: u32 = 0;
pub const PJ_THREAD_SET_STACK_SIZE: u32 = 0;
pub const PJ_THREAD_ALLOCATE_STACK: u32 = 0;
pub const PJ_HAS_SOCKLEN_T: u32 = 1;
pub const PJ_M_X86_64: u32 = 1;
pub const PJ_M_NAME: &'static [u8; 7usize] = b"x86_64\0";
pub const PJ_HAS_PENTIUM: u32 = 1;
pub const PJ_IS_LITTLE_ENDIAN: u32 = 1;
pub const PJ_IS_BIG_ENDIAN: u32 = 0;
pub const PJ_DEBUG: u32 = 1;
pub const PJ_DEBUG_MUTEX: u32 = 0;
pub const PJ_FUNCTIONS_ARE_INLINED: u32 = 0;
pub const PJ_HAS_FLOATING_POINT: u32 = 1;
pub const PJ_LOG_MAX_LEVEL: u32 = 5;
pub const PJ_LOG_MAX_SIZE: u32 = 4000;
pub const PJ_LOG_USE_STACK_BUFFER: u32 = 1;
pub const PJ_LOG_ENABLE_INDENT: u32 = 1;
pub const PJ_LOG_INDENT_SIZE: u32 = 1;
pub const PJ_LOG_INDENT_CHAR: u8 = 46u8;
pub const PJ_LOG_SENDER_WIDTH: u32 = 14;
pub const PJ_LOG_THREAD_WIDTH: u32 = 12;
pub const PJ_TERM_HAS_COLOR: u32 = 1;
pub const PJ_SAFE_POOL: u32 = 0;
pub const PJ_POOL_DEBUG: u32 = 0;
pub const PJ_POOL_RELEASE_WIPE_DATA: u32 = 0;
pub const PJ_TIMER_DEBUG: u32 = 1;
pub const PJ_TIMER_USE_COPY: u32 = 1;
pub const PJ_TIMER_USE_LINKED_LIST: u32 = 0;
pub const PJ_GRP_LOCK_DEBUG: u32 = 0;
pub const PJ_THREAD_DEFAULT_STACK_SIZE: u32 = 8192;
pub const PJ_HAS_POOL_ALT_API: u32 = 0;
pub const PJ_HAS_TCP: u32 = 1;
pub const PJ_HAS_IPV6: u32 = 0;
pub const PJ_MAX_HOSTNAME: u32 = 128;
pub const PJ_ACTIVESOCK_MAX_CONSECUTIVE_ACCEPT_ERROR: u32 = 50;
pub const PJ_IOQUEUE_MAX_HANDLES: u32 = 64;
pub const PJ_IOQUEUE_HAS_SAFE_UNREG: u32 = 1;
pub const PJ_IOQUEUE_DEFAULT_ALLOW_CONCURRENCY: u32 = 1;
pub const PJ_IOQUEUE_KEY_FREE_DELAY: u32 = 500;
pub const PJ_FD_SETSIZE_SETABLE: u32 = 0;
pub const PJ_IP_HELPER_IGNORE_LOOPBACK_IF: u32 = 1;
pub const PJ_HAS_SEMAPHORE: u32 = 1;
pub const PJ_SEMAPHORE_USE_DISPATCH_SEM: u32 = 0;
pub const PJ_HAS_EVENT_OBJ: u32 = 1;
pub const PJ_MAXPATH: u32 = 260;
pub const PJ_ENABLE_EXTRA_CHECK: u32 = 1;
pub const PJ_HAS_EXCEPTION_NAMES: u32 = 1;
pub const PJ_MAX_EXCEPTION_ID: u32 = 16;
pub const PJ_EXCEPTION_USE_WIN32_SEH: u32 = 0;
pub const PJ_TIMESTAMP_USE_RDTSC: u32 = 0;
pub const PJ_NATIVE_ERR_POSITIVE: u32 = 1;
pub const PJ_HAS_ERROR_STRING: u32 = 1;
pub const PJ_HAS_STRICMP_ALNUM: u32 = 0;
pub const PJ_QOS_DUMMY: u32 = 1;
pub const PJ_QOS_BSD: u32 = 2;
pub const PJ_QOS_WM: u32 = 3;
pub const PJ_QOS_SYMBIAN: u32 = 4;
pub const PJ_QOS_DARWIN: u32 = 5;
pub const PJ_HAS_SSL_SOCK: u32 = 0;
pub const PJ_SSL_SOCK_IMP_NONE: u32 = 0;
pub const PJ_SSL_SOCK_IMP_OPENSSL: u32 = 1;
pub const PJ_SSL_SOCK_IMP_GNUTLS: u32 = 2;
pub const PJ_SSL_SOCK_IMP_DARWIN: u32 = 3;
pub const PJ_SSL_SOCK_IMP_APPLE: u32 = 4;
pub const PJ_SSL_SOCK_IMP: u32 = 0;
pub const PJ_SSL_SOCK_MAX_CIPHERS: u32 = 256;
pub const PJ_SSL_SOCK_OSSL_CIPHERS: &'static [u8; 26usize] = b"HIGH:-COMPLEMENTOFDEFAULT\0";
pub const PJ_SSL_SOCK_MAX_CURVES: u32 = 32;
pub const PJ_SSL_SOCK_OSSL_USE_THREAD_CB: u32 = 1;
pub const PJ_SOCK_DISABLE_WSAECONNRESET: u32 = 1;
pub const PJ_MAX_SOCKOPT_PARAMS: u32 = 4;
pub const PJ_VERSION_NUM_MAJOR: u32 = 2;
pub const PJ_VERSION_NUM_MINOR: u32 = 10;
pub const PJ_VERSION_NUM_REV: u32 = 0;
pub const PJ_VERSION_NUM_EXTRA: &'static [u8; 5usize] = b"-dev\0";
pub const PJ_VERSION_NUM: u32 = 34209792;
pub const PJ_MAX_OBJ_NAME: u32 = 32;
pub const PJSIP_MAX_TSX_COUNT: u32 = 1023;
pub const PJSIP_MAX_DIALOG_COUNT: u32 = 511;
pub const PJSIP_MAX_TRANSPORTS: u32 = 64;
pub const PJSIP_TPMGR_HTABLE_SIZE: u32 = 31;
pub const PJSIP_MAX_URL_SIZE: u32 = 256;
pub const PJSIP_MAX_MODULE: u32 = 32;
pub const PJSIP_MAX_PKT_LEN: u32 = 4000;
pub const PJSIP_DONT_SWITCH_TO_TCP: u32 = 0;
pub const PJSIP_DONT_SWITCH_TO_TLS: u32 = 0;
pub const PJSIP_HANDLE_EVENTS_HAS_SLEEP_ON_ERR: u32 = 1;
pub const PJSIP_ACCEPT_REPLACE_IN_EARLY_STATE: u32 = 0;
pub const PJSIP_UDP_SIZE_THRESHOLD: u32 = 1300;
pub const PJSIP_ENCODE_SHORT_HNAME: u32 = 0;
pub const PJSIP_INCLUDE_ALLOW_HDR_IN_DLG: u32 = 1;
pub const PJSIP_SAFE_MODULE: u32 = 1;
pub const PJSIP_CHECK_VIA_SENT_BY: u32 = 0;
pub const PJSIP_UNESCAPE_IN_PLACE: u32 = 0;
pub const PJSIP_ALLOW_PORT_IN_FROMTO_HDR: u32 = 0;
pub const PJSIP_MAX_NET_EVENTS: u32 = 1;
pub const PJSIP_MAX_TIMED_OUT_ENTRIES: u32 = 10;
pub const PJSIP_TRANSPORT_IDLE_TIME: u32 = 33;
pub const PJSIP_TRANSPORT_SERVER_IDLE_TIME: u32 = 600;
pub const PJSIP_TCP_TRANSPORT_BACKLOG: u32 = 5;
pub const PJSIP_TCP_TRANSPORT_REUSEADDR: u32 = 1;
pub const PJSIP_TCP_TRANSPORT_DONT_CREATE_LISTENER: u32 = 0;
pub const PJSIP_TLS_TRANSPORT_DONT_CREATE_LISTENER: u32 = 0;
pub const PJSIP_TCP_KEEP_ALIVE_INTERVAL: u32 = 90;
pub const PJSIP_TCP_INITIAL_TIMEOUT: u32 = 0;
pub const PJSIP_TLS_KEEP_ALIVE_INTERVAL: u32 = 90;
pub const PJSIP_HAS_RESOLVER: u32 = 1;
pub const PJSIP_MAX_RESOLVED_ADDRESSES: u32 = 16;
pub const PJSIP_HAS_TLS_TRANSPORT: u32 = 0;
pub const PJSIP_TLS_TRANSPORT_BACKLOG: u32 = 5;
pub const PJSIP_TLS_TRANSPORT_REUSEADDR: u32 = 1;
pub const PJSIP_POOL_LEN_ENDPT: u32 = 4000;
pub const PJSIP_POOL_INC_ENDPT: u32 = 4000;
pub const PJSIP_POOL_RDATA_LEN: u32 = 4000;
pub const PJSIP_POOL_RDATA_INC: u32 = 4000;
pub const PJSIP_POOL_LEN_TRANSPORT: u32 = 512;
pub const PJSIP_POOL_INC_TRANSPORT: u32 = 512;
pub const PJSIP_POOL_LEN_TDATA: u32 = 4000;
pub const PJSIP_POOL_INC_TDATA: u32 = 4000;
pub const PJSIP_POOL_LEN_UA: u32 = 512;
pub const PJSIP_POOL_INC_UA: u32 = 512;
pub const PJSIP_POOL_EVSUB_LEN: u32 = 512;
pub const PJSIP_POOL_EVSUB_INC: u32 = 512;
pub const PJSIP_MAX_FORWARDS_VALUE: u32 = 70;
pub const PJSIP_RFC3261_BRANCH_ID: &'static [u8; 8usize] = b"z9hG4bK\0";
pub const PJSIP_RFC3261_BRANCH_LEN: u32 = 7;
pub const PJSIP_POOL_TSX_LAYER_LEN: u32 = 512;
pub const PJSIP_POOL_TSX_LAYER_INC: u32 = 512;
pub const PJSIP_POOL_TSX_LEN: u32 = 1536;
pub const PJSIP_POOL_TSX_INC: u32 = 256;
pub const PJSIP_TSX_1XX_RETRANS_DELAY: u32 = 60;
pub const PJSIP_MAX_TSX_KEY_LEN: u32 = 512;
pub const PJSIP_POOL_LEN_USER_AGENT: u32 = 1024;
pub const PJSIP_POOL_INC_USER_AGENT: u32 = 1024;
pub const PJSIP_MAX_HNAME_LEN: u32 = 64;
pub const PJSIP_POOL_LEN_DIALOG: u32 = 1200;
pub const PJSIP_POOL_INC_DIALOG: u32 = 512;
pub const PJSIP_MAX_HEADER_TYPES: u32 = 72;
pub const PJSIP_MAX_URI_TYPES: u32 = 4;
pub const PJSIP_T1_TIMEOUT: u32 = 500;
pub const PJSIP_T2_TIMEOUT: u32 = 4000;
pub const PJSIP_T4_TIMEOUT: u32 = 5000;
pub const PJSIP_TD_TIMEOUT: u32 = 32000;
pub const PJSIP_AUTH_HEADER_CACHING: u32 = 0;
pub const PJSIP_AUTH_AUTO_SEND_NEXT: u32 = 0;
pub const PJSIP_AUTH_QOP_SUPPORT: u32 = 1;
pub const PJSIP_MAX_STALE_COUNT: u32 = 3;
pub const PJSIP_HAS_DIGEST_AKA_AUTH: u32 = 0;
pub const PJSIP_REGISTER_CLIENT_DELAY_BEFORE_REFRESH: u32 = 5;
pub const PJSIP_REGISTER_CLIENT_CHECK_CONTACT: u32 = 1;
pub const PJSIP_REGISTER_CLIENT_ADD_XUID_PARAM: u32 = 0;
pub const PJSIP_AUTH_CACHED_POOL_MAX_SIZE: u32 = 20480;
pub const PJSIP_AUTH_CNONCE_USE_DIGITS_ONLY: u32 = 1;
pub const PJSIP_EVSUB_TIME_UAC_REFRESH: u32 = 5;
pub const PJSIP_PUBLISHC_DELAY_BEFORE_REFRESH: u32 = 5;
pub const PJSIP_EVSUB_TIME_UAC_TERMINATE: u32 = 5;
pub const PJSIP_EVSUB_TIME_UAC_WAIT_NOTIFY: u32 = 5;
pub const PJSIP_PRES_DEFAULT_EXPIRES: u32 = 600;
pub const PJSIP_PRES_BAD_CONTENT_RESPONSE: u32 = 488;
pub const PJSIP_PRES_PIDF_ADD_TIMESTAMP: u32 = 1;
pub const PJSIP_SESS_TIMER_DEF_SE: u32 = 1800;
pub const PJSIP_SESS_TIMER_RETRY_DELAY: u32 = 10;
pub const PJSIP_PUBLISHC_QUEUE_REQUEST: u32 = 1;
pub const PJSIP_MWI_DEFAULT_EXPIRES: u32 = 3600;
pub const PJSIP_HAS_TX_DATA_LIST: u32 = 0;
pub const PJ_ERR_MSG_SIZE: u32 = 80;
pub const PJ_PERROR_TITLE_BUF_SIZE: u32 = 120;
pub const PJ_ERRNO_START: u32 = 20000;
pub const PJ_ERRNO_SPACE_SIZE: u32 = 50000;
pub const PJ_ERRNO_START_STATUS: u32 = 70000;
pub const PJ_ERRNO_START_SYS: u32 = 120000;
pub const PJ_ERRNO_START_USER: u32 = 170000;
pub const PJSIP_ERRNO_START: u32 = 170000;
pub const PJSIP_ERRNO_START_PJSIP: u32 = 171000;
pub const PJSIP_EBUSY: u32 = 171001;
pub const PJSIP_ETYPEEXISTS: u32 = 171002;
pub const PJSIP_ESHUTDOWN: u32 = 171003;
pub const PJSIP_ENOTINITIALIZED: u32 = 171004;
pub const PJSIP_ENOROUTESET: u32 = 171005;
pub const PJSIP_EINVALIDMSG: u32 = 171020;
pub const PJSIP_ENOTREQUESTMSG: u32 = 171021;
pub const PJSIP_ENOTRESPONSEMSG: u32 = 171022;
pub const PJSIP_EMSGTOOLONG: u32 = 171023;
pub const PJSIP_EPARTIALMSG: u32 = 171024;
pub const PJSIP_EINVALIDSTATUS: u32 = 171030;
pub const PJSIP_EINVALIDURI: u32 = 171039;
pub const PJSIP_EINVALIDSCHEME: u32 = 171040;
pub const PJSIP_EMISSINGREQURI: u32 = 171041;
pub const PJSIP_EINVALIDREQURI: u32 = 171042;
pub const PJSIP_EURITOOLONG: u32 = 171043;
pub const PJSIP_EMISSINGHDR: u32 = 171050;
pub const PJSIP_EINVALIDHDR: u32 = 171051;
pub const PJSIP_EINVALIDVIA: u32 = 171052;
pub const PJSIP_EMULTIPLEVIA: u32 = 171053;
pub const PJSIP_EMISSINGBODY: u32 = 171054;
pub const PJSIP_EINVALIDMETHOD: u32 = 171055;
pub const PJSIP_EUNSUPTRANSPORT: u32 = 171060;
pub const PJSIP_EPENDINGTX: u32 = 171061;
pub const PJSIP_ERXOVERFLOW: u32 = 171062;
pub const PJSIP_EBUFDESTROYED: u32 = 171063;
pub const PJSIP_ETPNOTSUITABLE: u32 = 171064;
pub const PJSIP_ETPNOTAVAIL: u32 = 171065;
pub const PJSIP_ETSXDESTROYED: u32 = 171070;
pub const PJSIP_ENOTSX: u32 = 171071;
pub const PJSIP_ECMPSCHEME: u32 = 171080;
pub const PJSIP_ECMPUSER: u32 = 171081;
pub const PJSIP_ECMPPASSWD: u32 = 171082;
pub const PJSIP_ECMPHOST: u32 = 171083;
pub const PJSIP_ECMPPORT: u32 = 171084;
pub const PJSIP_ECMPTRANSPORTPRM: u32 = 171085;
pub const PJSIP_ECMPTTLPARAM: u32 = 171086;
pub const PJSIP_ECMPUSERPARAM: u32 = 171087;
pub const PJSIP_ECMPMETHODPARAM: u32 = 171088;
pub const PJSIP_ECMPMADDRPARAM: u32 = 171089;
pub const PJSIP_ECMPOTHERPARAM: u32 = 171090;
pub const PJSIP_ECMPHEADERPARAM: u32 = 171091;
pub const PJSIP_EFAILEDCREDENTIAL: u32 = 171100;
pub const PJSIP_ENOCREDENTIAL: u32 = 171101;
pub const PJSIP_EINVALIDALGORITHM: u32 = 171102;
pub const PJSIP_EINVALIDQOP: u32 = 171103;
pub const PJSIP_EINVALIDAUTHSCHEME: u32 = 171104;
pub const PJSIP_EAUTHNOPREVCHAL: u32 = 171105;
pub const PJSIP_EAUTHNOAUTH: u32 = 171106;
pub const PJSIP_EAUTHACCNOTFOUND: u32 = 171107;
pub const PJSIP_EAUTHACCDISABLED: u32 = 171108;
pub const PJSIP_EAUTHINVALIDREALM: u32 = 171109;
pub const PJSIP_EAUTHINVALIDDIGEST: u32 = 171110;
pub const PJSIP_EAUTHSTALECOUNT: u32 = 171111;
pub const PJSIP_EAUTHINNONCE: u32 = 171112;
pub const PJSIP_EAUTHINAKACRED: u32 = 171113;
pub const PJSIP_EAUTHNOCHAL: u32 = 171114;
pub const PJSIP_EMISSINGTAG: u32 = 171120;
pub const PJSIP_ENOTREFER: u32 = 171121;
pub const PJSIP_ENOREFERSESSION: u32 = 171122;
pub const PJSIP_ESESSIONTERMINATED: u32 = 171140;
pub const PJSIP_ESESSIONSTATE: u32 = 171141;
pub const PJSIP_ESESSIONINSECURE: u32 = 171142;
pub const PJSIP_TLS_EUNKNOWN: u32 = 171160;
pub const PJSIP_TLS_EINVMETHOD: u32 = 171161;
pub const PJSIP_TLS_ECACERT: u32 = 171162;
pub const PJSIP_TLS_ECERTFILE: u32 = 171163;
pub const PJSIP_TLS_EKEYFILE: u32 = 171164;
pub const PJSIP_TLS_ECIPHER: u32 = 171165;
pub const PJSIP_TLS_ECTX: u32 = 171166;
pub const PJSIP_TLS_ESSLCONN: u32 = 171167;
pub const PJSIP_TLS_ECONNECT: u32 = 171168;
pub const PJSIP_TLS_EACCEPT: u32 = 171169;
pub const PJSIP_TLS_ESEND: u32 = 171170;
pub const PJSIP_TLS_EREAD: u32 = 171171;
pub const PJSIP_TLS_ETIMEDOUT: u32 = 171172;
pub const PJSIP_TLS_ECERTVERIF: u32 = 171173;
pub const PJ_DNS_MAX_IP_IN_A_REC: u32 = 8;
pub const PJ_DNS_SRV_MAX_ADDR: u32 = 8;
pub const PJ_DNS_MAX_NAMES_IN_NAMETABLE: u32 = 16;
pub const PJ_DNS_RESOLVER_MAX_NS: u32 = 16;
pub const PJ_DNS_RESOLVER_QUERY_RETRANSMIT_DELAY: u32 = 2000;
pub const PJ_DNS_RESOLVER_QUERY_RETRANSMIT_COUNT: u32 = 5;
pub const PJ_DNS_RESOLVER_MAX_TTL: u32 = 300;
pub const PJ_DNS_RESOLVER_INVALID_TTL: u32 = 60;
pub const PJ_DNS_RESOLVER_GOOD_NS_TTL: u32 = 600;
pub const PJ_DNS_RESOLVER_BAD_NS_TTL: u32 = 60;
pub const PJ_DNS_RESOLVER_MAX_UDP_SIZE: u32 = 512;
pub const PJ_DNS_RESOLVER_RES_BUF_SIZE: u32 = 512;
pub const PJ_DNS_RESOLVER_TMP_BUF_SIZE: u32 = 4000;
pub const PJ_SCANNER_USE_BITWISE: u32 = 1;
pub const PJSTUN_MAX_ATTR: u32 = 16;
pub const PJ_STUN_MAX_ATTR: u32 = 16;
pub const PJ_CRC32_HAS_TABLES: u32 = 1;
pub const PJ_HTTP_DEFAULT_TIMEOUT: u32 = 60000;
pub const PJ_CLI_POOL_SIZE: u32 = 1024;
pub const PJ_CLI_POOL_INC: u32 = 512;
pub const PJ_CLI_MAX_CMDBUF: u32 = 512;
pub const PJ_CLI_MAX_ARGS: u32 = 8;
pub const PJ_CLI_MAX_HINTS: u32 = 32;
pub const PJ_CLI_MAX_SHORTCUTS: u32 = 4;
pub const PJ_CLI_CONSOLE_POOL_SIZE: u32 = 256;
pub const PJ_CLI_CONSOLE_POOL_INC: u32 = 256;
pub const PJ_CLI_TELNET_POOL_SIZE: u32 = 1024;
pub const PJ_CLI_TELNET_POOL_INC: u32 = 512;
pub const PJ_CLI_MAX_CHOICE_VAL: u32 = 64;
pub const PJ_CLI_MAX_CMD_HISTORY: u32 = 16;
pub const PJSIP_GENERIC_ARRAY_MAX_COUNT: u32 = 32;
pub const PJSIP_MAX_ACCEPT_COUNT: u32 = 32;
pub const PJSIP_MIN_CONTENT_LENGTH: u32 = 0;
pub const PJSIP_MIN_PORT: u32 = 0;
pub const PJSIP_MIN_TTL: u32 = 0;
pub const PJSIP_MIN_STATUS_CODE: u32 = 100;
pub const PJSIP_MAX_STATUS_CODE: u32 = 999;
pub const PJSIP_MIN_Q1000: u32 = 0;
pub const PJSIP_MIN_EXPIRES: u32 = 0;
pub const PJSIP_MIN_CSEQ: u32 = 0;
pub const PJSIP_MIN_RETRY_AFTER: u32 = 0;
pub const PJ_SOMAXCONN: u32 = 5;
pub const PJ_INVALID_SOCKET: i32 = -1;
pub const PJ_INET_ADDRSTRLEN: u32 = 16;
pub const PJ_INET6_ADDRSTRLEN: u32 = 46;
pub const PJ_SOCKADDR_IN_SIN_ZERO_LEN: u32 = 8;
pub const PJ_IOQUEUE_MAX_EVENTS_IN_SINGLE_POLL: u32 = 16;
pub const PJ_IOQUEUE_MAX_CAND_EVENTS: u32 = 16;
pub const PJ_POOL_ALIGNMENT: u32 = 4;
pub const PJ_CACHING_POOL_ARRAY_SIZE: u32 = 16;
pub const PJSIP_MD5STRLEN: u32 = 32;
pub const PJSIP_AUTH_SRV_IS_PROXY: u32 = 1;
pub const PJSIP_AKA_AKLEN: u32 = 6;
pub const PJSIP_AKA_AMFLEN: u32 = 2;
pub const PJSIP_AKA_AUTNLEN: u32 = 16;
pub const PJSIP_AKA_CKLEN: u32 = 16;
pub const PJSIP_AKA_IKLEN: u32 = 16;
pub const PJSIP_AKA_KLEN: u32 = 16;
pub const PJSIP_AKA_MACLEN: u32 = 8;
pub const PJSIP_AKA_OPLEN: u32 = 16;
pub const PJSIP_AKA_RANDLEN: u32 = 16;
pub const PJSIP_AKA_RESLEN: u32 = 8;
pub const PJSIP_AKA_SQNLEN: u32 = 6;
pub const PJMEDIA_POOL_LEN_ENDPT: u32 = 512;
pub const PJMEDIA_POOL_INC_ENDPT: u32 = 512;
pub const PJMEDIA_POOL_LEN_EVTMGR: u32 = 500;
pub const PJMEDIA_POOL_INC_EVTMGR: u32 = 500;
pub const PJMEDIA_CONF_USE_SWITCH_BOARD: u32 = 0;
pub const PJMEDIA_CONF_USE_AGC: u32 = 1;
pub const PJMEDIA_HAS_LEGACY_SOUND_API: u32 = 1;
pub const PJMEDIA_SND_DEFAULT_REC_LATENCY: u32 = 100;
pub const PJMEDIA_SND_DEFAULT_PLAY_LATENCY: u32 = 140;
pub const PJMEDIA_WSOLA_IMP_NULL: u32 = 0;
pub const PJMEDIA_WSOLA_IMP_WSOLA: u32 = 1;
pub const PJMEDIA_WSOLA_IMP_WSOLA_LITE: u32 = 2;
pub const PJMEDIA_WSOLA_IMP: u32 = 1;
pub const PJMEDIA_WSOLA_MAX_EXPAND_MSEC: u32 = 80;
pub const PJMEDIA_WSOLA_TEMPLATE_LENGTH_MSEC: u32 = 5;
pub const PJMEDIA_WSOLA_DELAY_MSEC: u32 = 5;
pub const PJMEDIA_WSOLA_PLC_NO_FADING: u32 = 0;
pub const PJMEDIA_MAX_PLC_DURATION_MSEC: u32 = 240;
pub const PJMEDIA_SOUND_BUFFER_COUNT: u32 = 8;
pub const PJMEDIA_HAS_ALAW_ULAW_TABLE: u32 = 1;
pub const PJMEDIA_HAS_G711_CODEC: u32 = 1;
pub const PJMEDIA_RESAMPLE_NONE: u32 = 1;
pub const PJMEDIA_RESAMPLE_LIBRESAMPLE: u32 = 2;
pub const PJMEDIA_RESAMPLE_SPEEX: u32 = 3;
pub const PJMEDIA_RESAMPLE_LIBSAMPLERATE: u32 = 4;
pub const PJMEDIA_RESAMPLE_IMP: u32 = 2;
pub const PJMEDIA_FILE_PORT_BUFSIZE: u32 = 4000;
pub const PJMEDIA_MAX_FRAME_DURATION_MS: u32 = 200;
pub const PJMEDIA_MAX_MTU: u32 = 1500;
pub const PJMEDIA_MAX_MRU: u32 = 2000;
pub const PJMEDIA_DTMF_DURATION: u32 = 1600;
pub const PJMEDIA_DTMF_DURATION_MSEC: u32 = 0;
pub const PJMEDIA_RTP_NAT_PROBATION_CNT: u32 = 10;
pub const PJMEDIA_RTCP_NAT_PROBATION_CNT: u32 = 3;
pub const PJMEDIA_ADVERTISE_RTCP: u32 = 1;
pub const PJMEDIA_RTCP_INTERVAL: u32 = 5000;
pub const PJMEDIA_RTCP_FB_INTERVAL: u32 = 50;
pub const PJMEDIA_RTCP_IGNORE_FIRST_PACKETS: u32 = 25;
pub const PJMEDIA_RTCP_STAT_HAS_RAW_JITTER: u32 = 0;
pub const PJMEDIA_RTCP_NORMALIZE_FACTOR: u32 = 3;
pub const PJMEDIA_RTCP_STAT_HAS_IPDV: u32 = 0;
pub const PJMEDIA_HAS_RTCP_XR: u32 = 0;
pub const PJMEDIA_STREAM_ENABLE_XR: u32 = 0;
pub const PJMEDIA_RTCP_RX_SDES_BUF_LEN: u32 = 64;
pub const PJMEDIA_RTCP_FB_MAX_CAP: u32 = 16;
pub const PJMEDIA_STREAM_VAD_SUSPEND_MSEC: u32 = 600;
pub const PJMEDIA_STREAM_CHECK_RTP_PT: u32 = 1;
pub const PJMEDIA_STREAM_RESV_PAYLOAD_LEN: u32 = 20;
pub const PJMEDIA_CODEC_MAX_SILENCE_PERIOD: u32 = 5000;
pub const PJMEDIA_SILENCE_DET_THRESHOLD: u32 = 4;
pub const PJMEDIA_SILENCE_DET_MAX_THRESHOLD: u32 = 65536;
pub const PJMEDIA_HAS_SPEEX_AEC: u32 = 1;
pub const PJMEDIA_SPEEX_AEC_USE_AGC: u32 = 1;
pub const PJMEDIA_SPEEX_AEC_USE_DENOISE: u32 = 1;
pub const PJMEDIA_HAS_WEBRTC_AEC: u32 = 0;
pub const PJMEDIA_WEBRTC_AEC_USE_MOBILE: u32 = 0;
pub const PJMEDIA_CODEC_MAX_FMTP_CNT: u32 = 16;
pub const PJMEDIA_SDP_NEG_PREFER_REMOTE_CODEC_ORDER: u32 = 1;
pub const PJMEDIA_SDP_NEG_ANSWER_MULTIPLE_CODECS: u32 = 0;
pub const PJMEDIA_SDP_NEG_MAX_CUSTOM_FMT_NEG_CB: u32 = 8;
pub const PJMEDIA_SDP_NEG_ANSWER_SYMMETRIC_PT: u32 = 1;
pub const PJMEDIA_SDP_NEG_COMPARE_BEFORE_INC_VERSION: u32 = 0;
pub const PJMEDIA_HAS_RTCP_IN_SDP: u32 = 1;
pub const PJMEDIA_ADD_BANDWIDTH_TIAS_IN_SDP: u32 = 1;
pub const PJMEDIA_ADD_RTPMAP_FOR_STATIC_PT: u32 = 1;
pub const PJMEDIA_RTP_PT_TELEPHONE_EVENTS: u32 = 120;
pub const PJMEDIA_TELEPHONE_EVENT_ALL_CLOCKRATES: u32 = 1;
pub const PJMEDIA_TONEGEN_MAX_DIGITS: u32 = 32;
pub const PJMEDIA_TONEGEN_SINE: u32 = 1;
pub const PJMEDIA_TONEGEN_FLOATING_POINT: u32 = 2;
pub const PJMEDIA_TONEGEN_FIXED_POINT_CORDIC: u32 = 3;
pub const PJMEDIA_TONEGEN_FAST_FIXED_POINT: u32 = 4;
pub const PJMEDIA_TONEGEN_ALG: u32 = 2;
pub const PJMEDIA_TONEGEN_FIXED_POINT_CORDIC_LOOP: u32 = 10;
pub const PJMEDIA_TONEGEN_FADE_IN_TIME: u32 = 1;
pub const PJMEDIA_TONEGEN_FADE_OUT_TIME: u32 = 2;
pub const PJMEDIA_TONEGEN_VOLUME: u32 = 12288;
pub const PJMEDIA_HAS_SRTP: u32 = 1;
pub const PJMEDIA_SRTP_HAS_SDES: u32 = 1;
pub const PJMEDIA_SRTP_HAS_DTLS: u32 = 0;
pub const PJMEDIA_SRTP_DTLS_OSSL_CIPHERS: &'static [u8; 8usize] = b"DEFAULT\0";
pub const PJMEDIA_SRTP_MAX_CRYPTOS: u32 = 16;
pub const PJMEDIA_SRTP_HAS_AES_CM_256: u32 = 1;
pub const PJMEDIA_SRTP_HAS_AES_CM_192: u32 = 0;
pub const PJMEDIA_SRTP_HAS_AES_CM_128: u32 = 1;
pub const PJMEDIA_SRTP_HAS_AES_GCM_256: u32 = 0;
pub const PJMEDIA_SRTP_HAS_AES_GCM_128: u32 = 0;
pub const PJMEDIA_LIBSRTP_AUTO_INIT_DEINIT: u32 = 1;
pub const PJMEDIA_HANDLE_G722_MPEG_BUG: u32 = 1;
pub const PJMEDIA_TRANSPORT_SWITCH_REMOTE_ADDR: u32 = 1;
pub const PJMEDIA_TRANSPORT_SPECIFIC_INFO_MAXCNT: u32 = 4;
pub const PJMEDIA_STREAM_KA_EMPTY_RTP: u32 = 1;
pub const PJMEDIA_STREAM_KA_USER: u32 = 2;
pub const PJMEDIA_STREAM_ENABLE_KA: u32 = 0;
pub const PJMEDIA_STREAM_KA_INTERVAL: u32 = 5;
pub const PJMEDIA_STREAM_START_KA_CNT: u32 = 2;
pub const PJMEDIA_STREAM_START_KA_INTERVAL_MSEC: u32 = 1000;
pub const PJMEDIA_IGNORE_RECV_ERR_CNT: u32 = 20;
pub const PJMEDIA_HAS_VIDEO: u32 = 0;
pub const PJMEDIA_HAS_FFMPEG: u32 = 0;
pub const PJMEDIA_HAS_LIBAVFORMAT: u32 = 0;
pub const PJMEDIA_HAS_LIBAVCODEC: u32 = 0;
pub const PJMEDIA_HAS_LIBAVUTIL: u32 = 0;
pub const PJMEDIA_HAS_LIBSWSCALE: u32 = 0;
pub const PJMEDIA_HAS_LIBAVDEVICE: u32 = 0;
pub const PJMEDIA_MAX_VIDEO_PLANES: u32 = 4;
pub const PJMEDIA_MAX_VIDEO_FORMATS: u32 = 32;
pub const PJMEDIA_CLOCK_SYNC_MAX_SYNC_MSEC: u32 = 20000;
pub const PJMEDIA_MAX_VIDEO_ENC_FRAME_SIZE: u32 = 131072;
pub const PJMEDIA_CLOCK_SYNC_MAX_RESYNC_DURATION: u32 = 2000;
pub const PJMEDIA_JBUF_DISC_MIN_GAP: u32 = 200;
pub const PJMEDIA_JBUF_PRO_DISC_MIN_BURST: u32 = 1;
pub const PJMEDIA_JBUF_PRO_DISC_MAX_BURST: u32 = 100;
pub const PJMEDIA_JBUF_PRO_DISC_T1: u32 = 2000;
pub const PJMEDIA_JBUF_PRO_DISC_T2: u32 = 10000;
pub const PJMEDIA_STREAM_SOFT_START: u32 = 1;
pub const PJMEDIA_VID_STREAM_SKIP_PACKETS_TO_REDUCE_LATENCY: u32 = 0;
pub const PJMEDIA_MAX_VID_PAYLOAD_SIZE: u32 = 1336;
pub const PJMEDIA_TRANSPORT_SO_RCVBUF_SIZE: u32 = 0;
pub const PJMEDIA_TRANSPORT_SO_SNDBUF_SIZE: u32 = 0;
pub const PJMEDIA_HAS_LIBYUV: u32 = 0;
pub const PJMEDIA_HAS_DTMF_FLASH: u32 = 1;
pub const PJMEDIA_VID_STREAM_START_KEYFRAME_CNT: u32 = 5;
pub const PJMEDIA_VID_STREAM_START_KEYFRAME_INTERVAL_MSEC: u32 = 1000;
pub const PJMEDIA_VID_STREAM_MIN_KEYFRAME_INTERVAL_MSEC: u32 = 1000;
pub const PJMEDIA_VID_STREAM_DECODE_MIN_DELAY_MSEC: u32 = 100;
pub const PJMEDIA_AUD_DEV_INFO_NAME_LEN: u32 = 64;
pub const PJMEDIA_AUDIO_DEV_HAS_PORTAUDIO: u32 = 0;
pub const PJMEDIA_AUDIO_DEV_HAS_OPENSL: u32 = 0;
pub const PJMEDIA_AUDIO_DEV_HAS_BB10: u32 = 0;
pub const PJMEDIA_AUDIO_DEV_HAS_ALSA: u32 = 0;
pub const PJMEDIA_AUDIO_DEV_HAS_NULL_AUDIO: u32 = 0;
pub const PJMEDIA_AUDIO_DEV_HAS_COREAUDIO: u32 = 0;
pub const PJMEDIA_AUDIO_DEV_HAS_WMME: u32 = 1;
pub const PJMEDIA_AUDIO_DEV_HAS_WASAPI: u32 = 0;
pub const PJMEDIA_AUDIO_DEV_HAS_BDIMAD: u32 = 0;
pub const PJMEDIA_AUDIO_DEV_HAS_SYMB_APS: u32 = 0;
pub const PJMEDIA_AUDIO_DEV_SYMB_APS_DETECTS_CODEC: u32 = 1;
pub const PJMEDIA_AUDIO_DEV_HAS_SYMB_VAS: u32 = 0;
pub const PJMEDIA_AUDIO_DEV_SYMB_VAS_VERSION: u32 = 1;
pub const PJMEDIA_AUDIO_DEV_MDA_USE_SYNC_START: u32 = 1;
pub const PJMEDIA_AUDIO_DEV_HAS_LEGACY_DEVICE: u32 = 0;
pub const PJMEDIA_AUDIODEV_ERRNO_START: u32 = 420000;
pub const PJMEDIA_AUDIODEV_ERRNO_END: u32 = 469999;
pub const PJMEDIA_AUDIODEV_PORTAUDIO_ERRNO_START: u32 = 459999;
pub const PJMEDIA_AUDIODEV_PORTAUDIO_ERRNO_END: u32 = 469998;
pub const PJMEDIA_AUDIODEV_WMME_IN_ERROR_START: u32 = 450000;
pub const PJMEDIA_AUDIODEV_WMME_IN_ERROR_END: u32 = 450999;
pub const PJMEDIA_AUDIODEV_WMME_OUT_ERROR_START: u32 = 451999;
pub const PJMEDIA_AUDIODEV_WMME_OUT_ERROR_END: u32 = 452999;
pub const PJMEDIA_AUDIODEV_COREAUDIO_ERRNO_START: u32 = 440000;
pub const PJMEDIA_AUDIODEV_COREAUDIO_ERRNO_END: u32 = 459999;
pub const PJMEDIA_AUDIODEV_BDIMAD_ERROR_START: u32 = 460000;
pub const PJMEDIA_AUDIODEV_BDIMAD_ERROR_END: u32 = 461999;
pub const PJMEDIA_EAUD_ERR: u32 = 420001;
pub const PJMEDIA_EAUD_SYSERR: u32 = 420002;
pub const PJMEDIA_EAUD_INIT: u32 = 420003;
pub const PJMEDIA_EAUD_INVDEV: u32 = 420004;
pub const PJMEDIA_EAUD_NODEV: u32 = 420005;
pub const PJMEDIA_EAUD_NODEFDEV: u32 = 420006;
pub const PJMEDIA_EAUD_NOTREADY: u32 = 420007;
pub const PJMEDIA_EAUD_INVCAP: u32 = 420008;
pub const PJMEDIA_EAUD_INVOP: u32 = 420009;
pub const PJMEDIA_EAUD_BADFORMAT: u32 = 420010;
pub const PJMEDIA_EAUD_SAMPFORMAT: u32 = 420011;
pub const PJMEDIA_EAUD_BADLATENCY: u32 = 420012;
pub const PJMEDIA_EAUD_WASAPI_ERROR: u32 = 420013;
pub const PJMEDIA_FORMAT_DETAIL_USER_SIZE: u32 = 1;
pub const PJMEDIA_AUD_DEFAULT_CAPTURE_DEV: i32 = -1;
pub const PJMEDIA_AUD_DEFAULT_PLAYBACK_DEV: i32 = -2;
pub const PJMEDIA_AUD_INVALID_DEV: i32 = -3;
pub const PJMEDIA_AUD_MAX_DRIVERS: u32 = 16;
pub const PJMEDIA_AUD_MAX_DEVS: u32 = 64;
pub const PJ_PI: f64 = 3.141592653589793;
pub const PJ_1_PI: f64 = 0.3183098861837907;
pub const PJMEDIA_RTP_DTMF_EVENT_END_MASK: u32 = 128;
pub const PJMEDIA_RTP_DTMF_EVENT_VOLUME_MASK: u32 = 63;
pub const PJMEDIA_MAX_SDP_FMT: u32 = 32;
pub const PJMEDIA_MAX_SDP_BANDW: u32 = 4;
pub const PJMEDIA_MAX_SDP_ATTR: u32 = 68;
pub const PJMEDIA_MAX_SDP_MEDIA: u32 = 16;
pub const PJMEDIA_VID_DEV_INFO_FMT_CNT: u32 = 64;
pub const PJMEDIA_VID_DEV_MAX_DRIVERS: u32 = 8;
pub const PJMEDIA_VID_DEV_MAX_DEVS: u32 = 16;
pub const PJMEDIA_VIDEODEV_ERRNO_START: u32 = 520000;
pub const PJMEDIA_VIDEODEV_ERRNO_END: u32 = 569999;
pub const PJMEDIA_EVID_ERR: u32 = 520001;
pub const PJMEDIA_EVID_SYSERR: u32 = 520002;
pub const PJMEDIA_EVID_INIT: u32 = 520003;
pub const PJMEDIA_EVID_INVDEV: u32 = 520004;
pub const PJMEDIA_EVID_NODEV: u32 = 520005;
pub const PJMEDIA_EVID_NODEFDEV: u32 = 520006;
pub const PJMEDIA_EVID_NOTREADY: u32 = 520007;
pub const PJMEDIA_EVID_INVCAP: u32 = 520008;
pub const PJMEDIA_EVID_INVOP: u32 = 520009;
pub const PJMEDIA_EVID_BADFORMAT: u32 = 520010;
pub const PJMEDIA_EVID_SAMPFORMAT: u32 = 520011;
pub const PJMEDIA_EVID_BADLATENCY: u32 = 520012;
pub const PJMEDIA_EVID_BADSIZE: u32 = 520013;
pub const PJ_THREAD_DESC_SIZE: u32 = 64;
pub const PJMEDIA_CODEC_MGR_MAX_CODECS: u32 = 32;
pub const PJMEDIA_ECHO_STAT_NOT_SPECIFIED: u32 = 999999;
pub const PJMEDIA_ERRNO_START: u32 = 220000;
pub const PJMEDIA_ERRNO_END: u32 = 269999;
pub const PJMEDIA_PORTAUDIO_ERRNO_START: u32 = 259999;
pub const PJMEDIA_PORTAUDIO_ERRNO_END: u32 = 269998;
pub const PJMEDIA_LIBSRTP_ERRNO_START: u32 = 259799;
pub const PJMEDIA_LIBSRTP_ERRNO_END: u32 = 259998;
pub const PJMEDIA_ERROR: u32 = 220001;
pub const PJMEDIA_SDP_EINSDP: u32 = 220020;
pub const PJMEDIA_SDP_EINVER: u32 = 220021;
pub const PJMEDIA_SDP_EINORIGIN: u32 = 220022;
pub const PJMEDIA_SDP_EINTIME: u32 = 220023;
pub const PJMEDIA_SDP_EINNAME: u32 = 220024;
pub const PJMEDIA_SDP_EINCONN: u32 = 220025;
pub const PJMEDIA_SDP_EMISSINGCONN: u32 = 220026;
pub const PJMEDIA_SDP_EINATTR: u32 = 220027;
pub const PJMEDIA_SDP_EINRTPMAP: u32 = 220028;
pub const PJMEDIA_SDP_ERTPMAPTOOLONG: u32 = 220029;
pub const PJMEDIA_SDP_EMISSINGRTPMAP: u32 = 220030;
pub const PJMEDIA_SDP_EINMEDIA: u32 = 220031;
pub const PJMEDIA_SDP_ENOFMT: u32 = 220032;
pub const PJMEDIA_SDP_EINPT: u32 = 220033;
pub const PJMEDIA_SDP_EINFMTP: u32 = 220034;
pub const PJMEDIA_SDP_EINRTCP: u32 = 220035;
pub const PJMEDIA_SDP_EINPROTO: u32 = 220036;
pub const PJMEDIA_SDP_EINBANDW: u32 = 220037;
pub const PJMEDIA_SDP_EINSSRC: u32 = 220038;
pub const PJMEDIA_SDPNEG_EINSTATE: u32 = 220040;
pub const PJMEDIA_SDPNEG_ENOINITIAL: u32 = 220041;
pub const PJMEDIA_SDPNEG_ENOACTIVE: u32 = 220042;
pub const PJMEDIA_SDPNEG_ENONEG: u32 = 220043;
pub const PJMEDIA_SDPNEG_EMISMEDIA: u32 = 220044;
pub const PJMEDIA_SDPNEG_EINVANSMEDIA: u32 = 220045;
pub const PJMEDIA_SDPNEG_EINVANSTP: u32 = 220046;
pub const PJMEDIA_SDPNEG_EANSNOMEDIA: u32 = 220047;
pub const PJMEDIA_SDPNEG_ENOMEDIA: u32 = 220048;
pub const PJMEDIA_SDPNEG_NOANSCODEC: u32 = 220049;
pub const PJMEDIA_SDPNEG_NOANSTELEVENT: u32 = 220050;
pub const PJMEDIA_SDPNEG_NOANSUNKNOWN: u32 = 220051;
pub const PJMEDIA_SDP_EMEDIANOTEQUAL: u32 = 220060;
pub const PJMEDIA_SDP_EPORTNOTEQUAL: u32 = 220061;
pub const PJMEDIA_SDP_ETPORTNOTEQUAL: u32 = 220062;
pub const PJMEDIA_SDP_EFORMATNOTEQUAL: u32 = 220063;
pub const PJMEDIA_SDP_ECONNNOTEQUAL: u32 = 220064;
pub const PJMEDIA_SDP_EATTRNOTEQUAL: u32 = 220065;
pub const PJMEDIA_SDP_EDIRNOTEQUAL: u32 = 220066;
pub const PJMEDIA_SDP_EFMTPNOTEQUAL: u32 = 220067;
pub const PJMEDIA_SDP_ERTPMAPNOTEQUAL: u32 = 220068;
pub const PJMEDIA_SDP_ESESSNOTEQUAL: u32 = 220069;
pub const PJMEDIA_SDP_EORIGINNOTEQUAL: u32 = 220070;
pub const PJMEDIA_SDP_ENAMENOTEQUAL: u32 = 220071;
pub const PJMEDIA_SDP_ETIMENOTEQUAL: u32 = 220072;
pub const PJMEDIA_CODEC_EUNSUP: u32 = 220080;
pub const PJMEDIA_CODEC_EFAILED: u32 = 220081;
pub const PJMEDIA_CODEC_EFRMTOOSHORT: u32 = 220082;
pub const PJMEDIA_CODEC_EPCMTOOSHORT: u32 = 220083;
pub const PJMEDIA_CODEC_EFRMINLEN: u32 = 220084;
pub const PJMEDIA_CODEC_EPCMFRMINLEN: u32 = 220085;
pub const PJMEDIA_CODEC_EINMODE: u32 = 220086;
pub const PJMEDIA_CODEC_EBADBITSTREAM: u32 = 220087;
pub const PJMEDIA_EINVALIDIP: u32 = 220100;
pub const PJMEDIA_EASYMCODEC: u32 = 220101;
pub const PJMEDIA_EINVALIDPT: u32 = 220102;
pub const PJMEDIA_EMISSINGRTPMAP: u32 = 220103;
pub const PJMEDIA_EINVALIMEDIATYPE: u32 = 220104;
pub const PJMEDIA_EREMOTENODTMF: u32 = 220105;
pub const PJMEDIA_RTP_EINDTMF: u32 = 220106;
pub const PJMEDIA_RTP_EREMNORFC2833: u32 = 220107;
pub const PJMEDIA_EBADFMT: u32 = 220108;
pub const PJMEDIA_EUNSUPMEDIATYPE: u32 = 220109;
pub const PJMEDIA_RTP_EINPKT: u32 = 220120;
pub const PJMEDIA_RTP_EINPACK: u32 = 220121;
pub const PJMEDIA_RTP_EINVER: u32 = 220122;
pub const PJMEDIA_RTP_EINSSRC: u32 = 220123;
pub const PJMEDIA_RTP_EINPT: u32 = 220124;
pub const PJMEDIA_RTP_EINLEN: u32 = 220125;
pub const PJMEDIA_RTP_ESESSRESTART: u32 = 220130;
pub const PJMEDIA_RTP_ESESSPROBATION: u32 = 220131;
pub const PJMEDIA_RTP_EBADSEQ: u32 = 220132;
pub const PJMEDIA_RTP_EBADDEST: u32 = 220133;
pub const PJMEDIA_RTP_ENOCONFIG: u32 = 220134;
pub const PJMEDIA_ENOTCOMPATIBLE: u32 = 220160;
pub const PJMEDIA_ENCCLOCKRATE: u32 = 220161;
pub const PJMEDIA_ENCSAMPLESPFRAME: u32 = 220162;
pub const PJMEDIA_ENCTYPE: u32 = 220163;
pub const PJMEDIA_ENCBITS: u32 = 220164;
pub const PJMEDIA_ENCBYTES: u32 = 220165;
pub const PJMEDIA_ENCCHANNEL: u32 = 220166;
pub const PJMEDIA_ENOTVALIDWAVE: u32 = 220180;
pub const PJMEDIA_EWAVEUNSUPP: u32 = 220181;
pub const PJMEDIA_EWAVETOOSHORT: u32 = 220182;
pub const PJMEDIA_EFRMFILETOOBIG: u32 = 220183;
pub const PJMEDIA_EAVIUNSUPP: u32 = 220191;
pub const PJMEDIA_ENOSNDREC: u32 = 220200;
pub const PJMEDIA_ENOSNDPLAY: u32 = 220201;
pub const PJMEDIA_ESNDINDEVID: u32 = 220202;
pub const PJMEDIA_ESNDINSAMPLEFMT: u32 = 220203;
pub const PJMEDIA_SRTP_ECRYPTONOTMATCH: u32 = 220220;
pub const PJMEDIA_SRTP_EINKEYLEN: u32 = 220221;
pub const PJMEDIA_SRTP_ENOTSUPCRYPTO: u32 = 220222;
pub const PJMEDIA_SRTP_ESDPAMBIGUEANS: u32 = 220223;
pub const PJMEDIA_SRTP_ESDPDUPCRYPTOTAG: u32 = 220224;
pub const PJMEDIA_SRTP_ESDPINCRYPTO: u32 = 220225;
pub const PJMEDIA_SRTP_ESDPINCRYPTOTAG: u32 = 220226;
pub const PJMEDIA_SRTP_ESDPINTRANSPORT: u32 = 220227;
pub const PJMEDIA_SRTP_ESDPREQCRYPTO: u32 = 220228;
pub const PJMEDIA_SRTP_ESDPREQSECTP: u32 = 220229;
pub const PJMEDIA_SRTP_EKEYNOTREADY: u32 = 220230;
pub const PJMEDIA_SRTP_DTLS_ENOCRYPTO: u32 = 220240;
pub const PJMEDIA_SRTP_DTLS_EPEERNOCERT: u32 = 220241;
pub const PJMEDIA_SRTP_DTLS_EFPNOTMATCH: u32 = 220242;
pub const PJMEDIA_SRTP_DTLS_ENOFPRINT: u32 = 220243;
pub const PJMEDIA_SRTP_DTLS_ENOPROFILE: u32 = 220244;
pub const PJMEDIA_HAS_L16_CODEC: u32 = 1;
pub const PJMEDIA_CODEC_L16_HAS_8KHZ_MONO: u32 = 0;
pub const PJMEDIA_CODEC_L16_HAS_8KHZ_STEREO: u32 = 0;
pub const PJMEDIA_CODEC_L16_HAS_16KHZ_MONO: u32 = 0;
pub const PJMEDIA_CODEC_L16_HAS_16KHZ_STEREO: u32 = 0;
pub const PJMEDIA_CODEC_L16_HAS_48KHZ_MONO: u32 = 0;
pub const PJMEDIA_CODEC_L16_HAS_48KHZ_STEREO: u32 = 0;
pub const PJMEDIA_HAS_GSM_CODEC: u32 = 1;
pub const PJMEDIA_HAS_SPEEX_CODEC: u32 = 1;
pub const PJMEDIA_CODEC_SPEEX_DEFAULT_COMPLEXITY: u32 = 2;
pub const PJMEDIA_CODEC_SPEEX_DEFAULT_QUALITY: u32 = 8;
pub const PJMEDIA_HAS_ILBC_CODEC: u32 = 1;
pub const PJMEDIA_HAS_G722_CODEC: u32 = 1;
pub const PJMEDIA_POOL_LEN_G722_CODEC: u32 = 1000;
pub const PJMEDIA_POOL_INC_G722_CODEC: u32 = 1000;
pub const PJMEDIA_G722_DEFAULT_PCM_SHIFT: u32 = 2;
pub const PJMEDIA_G722_STOP_PCM_SHIFT_ON_CLIPPING: u32 = 1;
pub const PJMEDIA_HAS_INTEL_IPP: u32 = 0;
pub const PJMEDIA_AUTO_LINK_IPP_LIBS: u32 = 1;
pub const PJMEDIA_HAS_INTEL_IPP_CODEC_AMR: u32 = 1;
pub const PJMEDIA_HAS_INTEL_IPP_CODEC_AMRWB: u32 = 1;
pub const PJMEDIA_HAS_INTEL_IPP_CODEC_G729: u32 = 1;
pub const PJMEDIA_HAS_INTEL_IPP_CODEC_G723_1: u32 = 1;
pub const PJMEDIA_HAS_INTEL_IPP_CODEC_G726: u32 = 1;
pub const PJMEDIA_HAS_INTEL_IPP_CODEC_G728: u32 = 1;
pub const PJMEDIA_HAS_INTEL_IPP_CODEC_G722_1: u32 = 1;
pub const PJMEDIA_HAS_PASSTHROUGH_CODECS: u32 = 0;
pub const PJMEDIA_HAS_PASSTHROUGH_CODEC_AMR: u32 = 1;
pub const PJMEDIA_HAS_PASSTHROUGH_CODEC_G729: u32 = 1;
pub const PJMEDIA_HAS_PASSTHROUGH_CODEC_ILBC: u32 = 1;
pub const PJMEDIA_HAS_PASSTHROUGH_CODEC_PCMU: u32 = 1;
pub const PJMEDIA_HAS_PASSTHROUGH_CODEC_PCMA: u32 = 1;
pub const PJMEDIA_HAS_G7221_CODEC: u32 = 0;
pub const PJMEDIA_HAS_OPENCORE_AMRNB_CODEC: u32 = 0;
pub const PJMEDIA_HAS_OPENCORE_AMRWB_CODEC: u32 = 0;
pub const PJMEDIA_AUTO_LINK_OPENCORE_AMR_LIBS: u32 = 1;
pub const PJMEDIA_OPENCORE_AMR_BUILT_WITH_GCC: u32 = 1;
pub const PJMEDIA_G7221_DEFAULT_PCM_SHIFT: u32 = 1;
pub const PJMEDIA_HAS_SILK_CODEC: u32 = 0;
pub const PJMEDIA_CODEC_SILK_DEFAULT_COMPLEXITY: u32 = 2;
pub const PJMEDIA_CODEC_SILK_DEFAULT_QUALITY: u32 = 10;
pub const PJMEDIA_HAS_OPUS_CODEC: u32 = 0;
pub const PJMEDIA_CODEC_OPUS_DEFAULT_SAMPLE_RATE: u32 = 48000;
pub const PJMEDIA_CODEC_OPUS_DEFAULT_BIT_RATE: u32 = 0;
pub const PJMEDIA_CODEC_OPUS_DEFAULT_COMPLEXITY: u32 = 5;
pub const PJMEDIA_HAS_BCG729: u32 = 0;
pub const PJMEDIA_HAS_FFMPEG_CODEC: u32 = 0;
pub const PJMEDIA_HAS_FFMPEG_VID_CODEC: u32 = 0;
pub const PJMEDIA_HAS_FFMPEG_CODEC_H263P: u32 = 0;
pub const PJMEDIA_HAS_FFMPEG_CODEC_H264: u32 = 0;
pub const PJMEDIA_HAS_VPX_CODEC_VP8: u32 = 1;
pub const PJMEDIA_HAS_VPX_CODEC_VP9: u32 = 0;
pub const PJMEDIA_JB_DEFAULT_INIT_DELAY: u32 = 15;
pub const PJMEDIA_VID_CODEC_MAX_DEC_FMT_CNT: u32 = 8;
pub const PJMEDIA_VID_CODEC_MAX_FPS_CNT: u32 = 16;
pub const PJMEDIA_VID_CODEC_MGR_MAX_CODECS: u32 = 32;
pub const PJNATH_ERROR_LEVEL: u32 = 1;
pub const PJ_STUN_RTO_VALUE: u32 = 100;
pub const PJ_STUN_TIMEOUT_VALUE: u32 = 1600;
pub const PJ_STUN_MAX_TRANSMIT_COUNT: u32 = 7;
pub const PJ_STUN_RES_CACHE_DURATION: u32 = 10000;
pub const PJ_STUN_MAX_PKT_LEN: u32 = 800;
pub const PJ_STUN_PORT: u32 = 3478;
pub const PJ_STUN_STRING_ATTR_PAD_CHR: u32 = 0;
pub const PJ_STUN_OLD_STYLE_MI_FINGERPRINT: u32 = 0;
pub const PJ_STUN_SOCK_PKT_LEN: u32 = 2000;
pub const PJ_STUN_KEEP_ALIVE_SEC: u32 = 15;
pub const PJ_TURN_MAX_DNS_SRV_CNT: u32 = 4;
pub const PJ_TURN_MAX_PKT_LEN: u32 = 3000;
pub const PJ_TURN_PERM_TIMEOUT: u32 = 300;
pub const PJ_TURN_CHANNEL_TIMEOUT: u32 = 600;
pub const PJ_TURN_REFRESH_SEC_BEFORE: u32 = 60;
pub const PJ_TURN_KEEP_ALIVE_SEC: u32 = 15;
pub const PJ_TURN_MAX_TCP_CONN_CNT: u32 = 8;
pub const PJ_ICE_MAX_CAND: u32 = 16;
pub const PJ_ICE_ST_MAX_CAND: u32 = 8;
pub const PJ_ICE_MAX_STUN: u32 = 2;
pub const PJ_ICE_MAX_TURN: u32 = 3;
pub const PJ_ICE_COMP_BITS: u32 = 1;
pub const PJ_ICE_MAX_COMP: u32 = 2;
pub const PJNATH_ICE_PRIO_STD: u32 = 1;
pub const PJ_ICE_CAND_TYPE_PREF_BITS: u32 = 8;
pub const PJ_ICE_LOCAL_PREF_BITS: u32 = 0;
pub const PJ_ICE_MAX_CHECKS: u32 = 32;
pub const PJ_ICE_TA_VAL: u32 = 20;
pub const PJ_ICE_CANCEL_ALL: u32 = 1;
pub const PJ_ICE_NOMINATED_CHECK_DELAY: u32 = 400;
pub const PJ_ICE_SESS_KEEP_ALIVE_MIN: u32 = 20;
pub const PJ_ICE_SESS_KEEP_ALIVE_MAX_RAND: u32 = 5;
pub const PJ_ICE_UFRAG_LEN: u32 = 8;
pub const PJ_ICE_PWD_LEN: u32 = 24;
pub const PJNATH_POOL_LEN_ICE_SESS: u32 = 512;
pub const PJNATH_POOL_INC_ICE_SESS: u32 = 512;
pub const PJNATH_POOL_LEN_ICE_STRANS: u32 = 1000;
pub const PJNATH_POOL_INC_ICE_STRANS: u32 = 512;
pub const PJNATH_POOL_LEN_NATCK: u32 = 512;
pub const PJNATH_POOL_INC_NATCK: u32 = 512;
pub const PJNATH_POOL_LEN_STUN_SESS: u32 = 1000;
pub const PJNATH_POOL_INC_STUN_SESS: u32 = 1000;
pub const PJNATH_POOL_LEN_STUN_TDATA: u32 = 1000;
pub const PJNATH_POOL_INC_STUN_TDATA: u32 = 1000;
pub const PJNATH_POOL_LEN_TURN_SESS: u32 = 1000;
pub const PJNATH_POOL_INC_TURN_SESS: u32 = 1000;
pub const PJNATH_POOL_LEN_TURN_SOCK: u32 = 1000;
pub const PJNATH_POOL_INC_TURN_SOCK: u32 = 1000;
pub const PJ_TURN_INVALID_CHANNEL: u32 = 65535;
pub const PJ_STUN_MAGIC: u32 = 554869826;
pub const PJ_STUN_SUCCESS_RESPONSE_BIT: u32 = 256;
pub const PJ_STUN_ERROR_RESPONSE_BIT: u32 = 272;
pub const PJ_STUN_INDICATION_BIT: u32 = 16;
pub const PJNATH_ERRNO_START: u32 = 370000;
pub const PJNATH_EINSTUNMSG: u32 = 370001;
pub const PJNATH_EINSTUNMSGLEN: u32 = 370002;
pub const PJNATH_EINSTUNMSGTYPE: u32 = 370003;
pub const PJNATH_ESTUNTIMEDOUT: u32 = 370004;
pub const PJNATH_ESTUNTOOMANYATTR: u32 = 370021;
pub const PJNATH_ESTUNINATTRLEN: u32 = 370022;
pub const PJNATH_ESTUNDUPATTR: u32 = 370023;
pub const PJNATH_ESTUNFINGERPRINT: u32 = 370030;
pub const PJNATH_ESTUNMSGINTPOS: u32 = 370031;
pub const PJNATH_ESTUNFINGERPOS: u32 = 370033;
pub const PJNATH_ESTUNNOMAPPEDADDR: u32 = 370040;
pub const PJNATH_ESTUNIPV6NOTSUPP: u32 = 370041;
pub const PJNATH_EINVAF: u32 = 370042;
pub const PJNATH_ESTUNINSERVER: u32 = 370050;
pub const PJNATH_ESTUNDESTROYED: u32 = 370060;
pub const PJNATH_ENOICE: u32 = 370080;
pub const PJNATH_EICEINPROGRESS: u32 = 370081;
pub const PJNATH_EICEFAILED: u32 = 370082;
pub const PJNATH_EICEMISMATCH: u32 = 370083;
pub const PJNATH_EICEINCOMPID: u32 = 370086;
pub const PJNATH_EICEINCANDID: u32 = 370087;
pub const PJNATH_EICEINSRCADDR: u32 = 370088;
pub const PJNATH_EICEMISSINGSDP: u32 = 370090;
pub const PJNATH_EICEINCANDSDP: u32 = 370091;
pub const PJNATH_EICENOHOSTCAND: u32 = 370092;
pub const PJNATH_EICENOMTIMEOUT: u32 = 370093;
pub const PJNATH_ETURNINTP: u32 = 370120;
pub const PJSIP_REGC_MAX_CONTACT: u32 = 10;
pub const PJSIP_REGC_CONTACT_BUF_SIZE: u32 = 512;
pub const PJSIP_EVSUB_POOL_LEN: u32 = 4000;
pub const PJSIP_EVSUB_POOL_INC: u32 = 4000;
pub const PJSIP_MAX_ALLOW_EVENTS: u32 = 16;
pub const PJSIP_PRES_STATUS_MAX_INFO: u32 = 8;
pub const PJLIB_UTIL_ERRNO_START: u32 = 320000;
pub const PJLIB_UTIL_ESTUNRESOLVE: u32 = 320001;
pub const PJLIB_UTIL_ESTUNINMSGTYPE: u32 = 320002;
pub const PJLIB_UTIL_ESTUNINMSGLEN: u32 = 320003;
pub const PJLIB_UTIL_ESTUNINATTRLEN: u32 = 320004;
pub const PJLIB_UTIL_ESTUNINATTRTYPE: u32 = 320005;
pub const PJLIB_UTIL_ESTUNININDEX: u32 = 320006;
pub const PJLIB_UTIL_ESTUNNOBINDRES: u32 = 320007;
pub const PJLIB_UTIL_ESTUNRECVERRATTR: u32 = 320008;
pub const PJLIB_UTIL_ESTUNNOMAP: u32 = 320009;
pub const PJLIB_UTIL_ESTUNNOTRESPOND: u32 = 320010;
pub const PJLIB_UTIL_ESTUNSYMMETRIC: u32 = 320011;
pub const PJLIB_UTIL_ESTUNNOTMAGIC: u32 = 320012;
pub const PJLIB_UTIL_ESTUNFINGERPRINT: u32 = 320013;
pub const PJLIB_UTIL_EINXML: u32 = 320020;
pub const PJLIB_UTIL_EINJSON: u32 = 320030;
pub const PJLIB_UTIL_EDNSQRYTOOSMALL: u32 = 320040;
pub const PJLIB_UTIL_EDNSINSIZE: u32 = 320041;
pub const PJLIB_UTIL_EDNSINCLASS: u32 = 320042;
pub const PJLIB_UTIL_EDNSINNAMEPTR: u32 = 320043;
pub const PJLIB_UTIL_EDNSINNSADDR: u32 = 320044;
pub const PJLIB_UTIL_EDNSNONS: u32 = 320045;
pub const PJLIB_UTIL_EDNSNOWORKINGNS: u32 = 320046;
pub const PJLIB_UTIL_EDNSNOANSWERREC: u32 = 320047;
pub const PJLIB_UTIL_EDNSINANSWER: u32 = 320048;
pub const PJLIB_UTIL_DNS_RCODE_START: u32 = 320050;
pub const PJLIB_UTIL_ESTUNTOOMANYATTR: u32 = 320110;
pub const PJLIB_UTIL_ESTUNUNKNOWNATTR: u32 = 320111;
pub const PJLIB_UTIL_ESTUNINADDRLEN: u32 = 320112;
pub const PJLIB_UTIL_ESTUNIPV6NOTSUPP: u32 = 320113;
pub const PJLIB_UTIL_ESTUNNOTRESPONSE: u32 = 320114;
pub const PJLIB_UTIL_ESTUNINVALIDID: u32 = 320115;
pub const PJLIB_UTIL_ESTUNNOHANDLER: u32 = 320116;
pub const PJLIB_UTIL_ESTUNMSGINTPOS: u32 = 320118;
pub const PJLIB_UTIL_ESTUNFINGERPOS: u32 = 320119;
pub const PJLIB_UTIL_ESTUNNOUSERNAME: u32 = 320120;
pub const PJLIB_UTIL_ESTUNUSERNAME: u32 = 320121;
pub const PJLIB_UTIL_ESTUNMSGINT: u32 = 320122;
pub const PJLIB_UTIL_ESTUNDUPATTR: u32 = 320123;
pub const PJLIB_UTIL_ESTUNNOREALM: u32 = 320124;
pub const PJLIB_UTIL_ESTUNNONCE: u32 = 320125;
pub const PJLIB_UTIL_ESTUNTSXFAILED: u32 = 320126;
pub const PJLIB_UTIL_EHTTPINURL: u32 = 320151;
pub const PJLIB_UTIL_EHTTPINPORT: u32 = 320152;
pub const PJLIB_UTIL_EHTTPINCHDR: u32 = 320153;
pub const PJLIB_UTIL_EHTTPINSBUF: u32 = 320154;
pub const PJLIB_UTIL_EHTTPLOST: u32 = 320155;
pub const PJ_CLI_EEXIT: u32 = 320201;
pub const PJ_CLI_EMISSINGARG: u32 = 320202;
pub const PJ_CLI_ETOOMANYARGS: u32 = 320203;
pub const PJ_CLI_EINVARG: u32 = 320204;
pub const PJ_CLI_EBADNAME: u32 = 320205;
pub const PJ_CLI_EBADID: u32 = 320206;
pub const PJ_CLI_EBADXML: u32 = 320207;
pub const PJ_CLI_EAMBIGUOUS: u32 = 320208;
pub const PJ_CLI_ETELNETLOST: u32 = 320211;
pub const PJ_SHA1_DIGEST_SIZE: u32 = 20;
pub const PJ_HTTP_HEADER_SIZE: u32 = 32;
pub const PJ_CLI_CONSOLE_LOG_LEVEL: u32 = 5;
pub const PJ_CLI_TELNET_LOG_LEVEL: u32 = 4;
pub const PJ_CLI_TELNET_PORT: u32 = 0;
pub const pj_hex_digits: &'static [u8; 17usize] = b"0123456789abcdef\0";
pub const PJ_GUID_MAX_LENGTH: u32 = 36;
pub const PJSUA_POOL_LEN: u32 = 1000;
pub const PJSUA_POOL_INC: u32 = 1000;
pub const PJSUA_POOL_LEN_ACC: u32 = 512;
pub const PJSUA_POOL_INC_ACC: u32 = 256;
pub const PJSUA_ACC_MAX_PROXIES: u32 = 8;
pub const PJSUA_DEFAULT_SRTP_SECURE_SIGNALING: u32 = 1;
pub const PJSUA_ADD_ICE_TAGS: u32 = 1;
pub const PJSUA_ACQUIRE_CALL_TIMEOUT: u32 = 2000;
pub const PJSUA_HAS_VIDEO: u32 = 0;
pub const PJSUA_VID_REQ_KEYFRAME_INTERVAL: u32 = 3000;
pub const PJSUA_SEPARATE_WORKER_FOR_TIMER: u32 = 0;
pub const PJSUA_ICE_TRANSPORT_OPTION: u32 = 0;
pub const PJSUA_TRICKLE_ICE_NEW_CAND_CHECK_INTERVAL: u32 = 100;
pub const PJSUA_MAX_ACC: u32 = 8;
pub const PJSUA_REG_INTERVAL: u32 = 300;
pub const PJSUA_UNREG_TIMEOUT: u32 = 4000;
pub const PJSUA_DEFAULT_ACC_PRIORITY: u32 = 0;
pub const PJSUA_UNPUBLISH_MAX_WAIT_TIME_MSEC: u32 = 2000;
pub const PJSUA_REG_RETRY_INTERVAL: u32 = 300;
pub const PJSUA_REG_USE_OUTBOUND_PROXY: u32 = 1;
pub const PJSUA_REG_USE_ACC_PROXY: u32 = 2;
pub const PJSUA_MAX_CALLS: u32 = 32;
pub const PJSUA_MAX_VID_WINS: u32 = 16;
pub const PJSUA_CALL_SEND_DTMF_DURATION_DEFAULT: u32 = 160;
pub const PJSUA_XFER_NO_REQUIRE_REPLACES: u32 = 1;
pub const PJSUA_MAX_BUDDIES: u32 = 256;
pub const PJSUA_PRES_TIMER: u32 = 300;
pub const PJSUA_MEDIA_HAS_PJMEDIA: u32 = 1;
pub const PJSUA_THIRD_PARTY_STREAM_HAS_GET_INFO: u32 = 0;
pub const PJSUA_THIRD_PARTY_STREAM_HAS_GET_STAT: u32 = 0;
pub const PJSUA_MAX_CONF_PORTS: u32 = 254;
pub const PJSUA_DEFAULT_CLOCK_RATE: u32 = 16000;
pub const PJSUA_DEFAULT_AUDIO_FRAME_PTIME: u32 = 20;
pub const PJSUA_DEFAULT_CODEC_QUALITY: u32 = 8;
pub const PJSUA_DEFAULT_ILBC_MODE: u32 = 30;
pub const PJSUA_DEFAULT_EC_TAIL_LEN: u32 = 200;
pub const PJSUA_MAX_PLAYERS: u32 = 32;
pub const PJSUA_MAX_RECORDERS: u32 = 32;
pub const PJSUA_SDP_SESS_HAS_CONN: u32 = 0;
pub const PJSUA_TRANSPORT_RESTART_DELAY_TIME: u32 = 10;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type size_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type pj_int64_t = ::std::os::raw::c_longlong;
pub type pj_uint64_t = ::std::os::raw::c_ulonglong;
pub type wchar_t = ::std::os::raw::c_int;
extern "C" {
    pub static mut PJ_VERSION: *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_get_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_dump_config();
}
pub type pj_int32_t = ::std::os::raw::c_int;
pub type pj_uint32_t = ::std::os::raw::c_uint;
pub type pj_int16_t = ::std::os::raw::c_short;
pub type pj_uint16_t = ::std::os::raw::c_ushort;
pub type pj_int8_t = ::std::os::raw::c_schar;
pub type pj_uint8_t = ::std::os::raw::c_uchar;
pub type pj_size_t = size_t;
pub type pj_ssize_t = ::std::os::raw::c_long;
pub type pj_status_t = ::std::os::raw::c_int;
pub type pj_bool_t = ::std::os::raw::c_int;
pub type pj_char_t = ::std::os::raw::c_char;
pub const pj_constants__PJ_SUCCESS: pj_constants_ = 0;
pub const pj_constants__PJ_TRUE: pj_constants_ = 1;
pub const pj_constants__PJ_FALSE: pj_constants_ = 0;
pub type pj_constants_ = ::std::os::raw::c_uint;
pub type pj_off_t = pj_int64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_str_t {
    pub ptr: *mut ::std::os::raw::c_char,
    pub slen: pj_ssize_t,
}
#[test]
fn bindgen_test_layout_pj_str_t() {
    assert_eq!(
        ::std::mem::size_of::<pj_str_t>(),
        16usize,
        concat!("Size of: ", stringify!(pj_str_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_str_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_str_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_str_t>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_str_t),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_str_t>())).slen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_str_t),
            "::",
            stringify!(slen)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pj_timestamp {
    pub u32_: pj_timestamp__bindgen_ty_1,
    pub u64_: pj_uint64_t,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_timestamp__bindgen_ty_1 {
    pub lo: pj_uint32_t,
    pub hi: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pj_timestamp__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pj_timestamp__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(pj_timestamp__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_timestamp__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_timestamp__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_timestamp__bindgen_ty_1>())).lo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_timestamp__bindgen_ty_1),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_timestamp__bindgen_ty_1>())).hi as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_timestamp__bindgen_ty_1),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_pj_timestamp() {
    assert_eq!(
        ::std::mem::size_of::<pj_timestamp>(),
        8usize,
        concat!("Size of: ", stringify!(pj_timestamp))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_timestamp>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_timestamp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_timestamp>())).u32_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_timestamp),
            "::",
            stringify!(u32_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_timestamp>())).u64_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_timestamp),
            "::",
            stringify!(u64_)
        )
    );
}
pub type pj_list_type = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_hash_table_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_hash_entry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_hash_iterator_t {
    pub index: pj_uint32_t,
    pub entry: *mut pj_hash_entry,
}
#[test]
fn bindgen_test_layout_pj_hash_iterator_t() {
    assert_eq!(
        ::std::mem::size_of::<pj_hash_iterator_t>(),
        16usize,
        concat!("Size of: ", stringify!(pj_hash_iterator_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_hash_iterator_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_hash_iterator_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_hash_iterator_t>())).index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_hash_iterator_t),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_hash_iterator_t>())).entry as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_hash_iterator_t),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ioqueue_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ioqueue_key_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_timer_heap_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_atomic_t {
    _unused: [u8; 0],
}
pub type pj_atomic_value_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_thread_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_lock_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_grp_lock_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_mutex_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_sem_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_event_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_pipe_t {
    _unused: [u8; 0],
}
pub type pj_oshandle_t = *mut ::std::os::raw::c_void;
pub type pj_sock_t = ::std::os::raw::c_long;
pub type pj_sockaddr_t = ::std::os::raw::c_void;
pub type pj_color_t = ::std::os::raw::c_uint;
pub type pj_exception_id_t = ::std::os::raw::c_int;
extern "C" {
    pub fn pj_init() -> pj_status_t;
}
extern "C" {
    pub fn pj_shutdown();
}
pub type pj_exit_callback = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn pj_atexit(func: pj_exit_callback) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_time_val {
    pub sec: ::std::os::raw::c_long,
    pub msec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pj_time_val() {
    assert_eq!(
        ::std::mem::size_of::<pj_time_val>(),
        16usize,
        concat!("Size of: ", stringify!(pj_time_val))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_time_val>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_time_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_time_val>())).sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_time_val),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_time_val>())).msec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_time_val),
            "::",
            stringify!(msec)
        )
    );
}
extern "C" {
    pub fn pj_time_val_normalize(t: *mut pj_time_val);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_parsed_time {
    pub wday: ::std::os::raw::c_int,
    pub day: ::std::os::raw::c_int,
    pub mon: ::std::os::raw::c_int,
    pub year: ::std::os::raw::c_int,
    pub sec: ::std::os::raw::c_int,
    pub min: ::std::os::raw::c_int,
    pub hour: ::std::os::raw::c_int,
    pub msec: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pj_parsed_time() {
    assert_eq!(
        ::std::mem::size_of::<pj_parsed_time>(),
        32usize,
        concat!("Size of: ", stringify!(pj_parsed_time))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_parsed_time>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_parsed_time))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_parsed_time>())).wday as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_parsed_time),
            "::",
            stringify!(wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_parsed_time>())).day as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_parsed_time),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_parsed_time>())).mon as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_parsed_time),
            "::",
            stringify!(mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_parsed_time>())).year as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_parsed_time),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_parsed_time>())).sec as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_parsed_time),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_parsed_time>())).min as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_parsed_time),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_parsed_time>())).hour as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_parsed_time),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_parsed_time>())).msec as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_parsed_time),
            "::",
            stringify!(msec)
        )
    );
}
pub const PJ_TERM_COLOR_R: ::std::os::raw::c_uint = 2;
pub const PJ_TERM_COLOR_G: ::std::os::raw::c_uint = 4;
pub const PJ_TERM_COLOR_B: ::std::os::raw::c_uint = 1;
pub const PJ_TERM_COLOR_BRIGHT: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_cfg_t {
    pub endpt: pjsip_cfg_t__bindgen_ty_1,
    pub tsx: pjsip_cfg_t__bindgen_ty_2,
    pub regc: pjsip_cfg_t__bindgen_ty_3,
    pub tcp: pjsip_cfg_t__bindgen_ty_4,
    pub tls: pjsip_cfg_t__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_cfg_t__bindgen_ty_1 {
    pub allow_port_in_fromto_hdr: pj_bool_t,
    pub accept_replace_in_early_state: pj_bool_t,
    pub allow_tx_hash_in_uri: pj_bool_t,
    pub disable_rport: pj_bool_t,
    pub disable_tcp_switch: pj_bool_t,
    pub disable_tls_switch: pj_bool_t,
    pub follow_early_media_fork: pj_bool_t,
    pub req_has_via_alias: pj_bool_t,
    pub resolve_hostname_to_get_interface: pj_bool_t,
    pub disable_secure_dlg_check: pj_bool_t,
    pub use_compact_form: pj_bool_t,
    pub accept_multiple_sdp_answers: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjsip_cfg_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_cfg_t__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(pjsip_cfg_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_cfg_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(pjsip_cfg_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_1>())).allow_port_in_fromto_hdr
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_1),
            "::",
            stringify!(allow_port_in_fromto_hdr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_1>())).accept_replace_in_early_state
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_1),
            "::",
            stringify!(accept_replace_in_early_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_1>())).allow_tx_hash_in_uri as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_1),
            "::",
            stringify!(allow_tx_hash_in_uri)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_1>())).disable_rport as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_1),
            "::",
            stringify!(disable_rport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_1>())).disable_tcp_switch as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_1),
            "::",
            stringify!(disable_tcp_switch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_1>())).disable_tls_switch as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_1),
            "::",
            stringify!(disable_tls_switch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_1>())).follow_early_media_fork
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_1),
            "::",
            stringify!(follow_early_media_fork)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_1>())).req_has_via_alias as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_1),
            "::",
            stringify!(req_has_via_alias)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_1>())).resolve_hostname_to_get_interface
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_1),
            "::",
            stringify!(resolve_hostname_to_get_interface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_1>())).disable_secure_dlg_check
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_1),
            "::",
            stringify!(disable_secure_dlg_check)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_1>())).use_compact_form as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_1),
            "::",
            stringify!(use_compact_form)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_1>())).accept_multiple_sdp_answers
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_1),
            "::",
            stringify!(accept_multiple_sdp_answers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_cfg_t__bindgen_ty_2 {
    pub max_count: ::std::os::raw::c_uint,
    pub t1: ::std::os::raw::c_uint,
    pub t2: ::std::os::raw::c_uint,
    pub t4: ::std::os::raw::c_uint,
    pub td: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjsip_cfg_t__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_cfg_t__bindgen_ty_2>(),
        20usize,
        concat!("Size of: ", stringify!(pjsip_cfg_t__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_cfg_t__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(pjsip_cfg_t__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_2>())).max_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_2),
            "::",
            stringify!(max_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_2>())).t1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_2),
            "::",
            stringify!(t1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_2>())).t2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_2),
            "::",
            stringify!(t2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_2>())).t4 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_2),
            "::",
            stringify!(t4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_2>())).td as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_2),
            "::",
            stringify!(td)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_cfg_t__bindgen_ty_3 {
    pub check_contact: pj_bool_t,
    pub add_xuid_param: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjsip_cfg_t__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_cfg_t__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(pjsip_cfg_t__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_cfg_t__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(pjsip_cfg_t__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_3>())).check_contact as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_3),
            "::",
            stringify!(check_contact)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_3>())).add_xuid_param as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_3),
            "::",
            stringify!(add_xuid_param)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_cfg_t__bindgen_ty_4 {
    pub keep_alive_interval: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pjsip_cfg_t__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_cfg_t__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(pjsip_cfg_t__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_cfg_t__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_cfg_t__bindgen_ty_4))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_4>())).keep_alive_interval as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_4),
            "::",
            stringify!(keep_alive_interval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_cfg_t__bindgen_ty_5 {
    pub keep_alive_interval: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pjsip_cfg_t__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_cfg_t__bindgen_ty_5>(),
        8usize,
        concat!("Size of: ", stringify!(pjsip_cfg_t__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_cfg_t__bindgen_ty_5>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_cfg_t__bindgen_ty_5))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cfg_t__bindgen_ty_5>())).keep_alive_interval as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t__bindgen_ty_5),
            "::",
            stringify!(keep_alive_interval)
        )
    );
}
#[test]
fn bindgen_test_layout_pjsip_cfg_t() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_cfg_t>(),
        96usize,
        concat!("Size of: ", stringify!(pjsip_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_cfg_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_cfg_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cfg_t>())).endpt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t),
            "::",
            stringify!(endpt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cfg_t>())).tsx as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t),
            "::",
            stringify!(tsx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cfg_t>())).regc as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t),
            "::",
            stringify!(regc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cfg_t>())).tcp as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t),
            "::",
            stringify!(tcp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cfg_t>())).tls as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cfg_t),
            "::",
            stringify!(tls)
        )
    );
}
extern "C" {
    pub static mut pjsip_sip_cfg_var: pjsip_cfg_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_tpmgr {
    _unused: [u8; 0],
}
pub const pjsip_transport_type_e_PJSIP_TRANSPORT_UNSPECIFIED: pjsip_transport_type_e = 0;
pub const pjsip_transport_type_e_PJSIP_TRANSPORT_UDP: pjsip_transport_type_e = 1;
pub const pjsip_transport_type_e_PJSIP_TRANSPORT_TCP: pjsip_transport_type_e = 2;
pub const pjsip_transport_type_e_PJSIP_TRANSPORT_TLS: pjsip_transport_type_e = 3;
pub const pjsip_transport_type_e_PJSIP_TRANSPORT_DTLS: pjsip_transport_type_e = 4;
pub const pjsip_transport_type_e_PJSIP_TRANSPORT_SCTP: pjsip_transport_type_e = 5;
pub const pjsip_transport_type_e_PJSIP_TRANSPORT_LOOP: pjsip_transport_type_e = 6;
pub const pjsip_transport_type_e_PJSIP_TRANSPORT_LOOP_DGRAM: pjsip_transport_type_e = 7;
pub const pjsip_transport_type_e_PJSIP_TRANSPORT_START_OTHER: pjsip_transport_type_e = 8;
pub const pjsip_transport_type_e_PJSIP_TRANSPORT_IPV6: pjsip_transport_type_e = 128;
pub const pjsip_transport_type_e_PJSIP_TRANSPORT_UDP6: pjsip_transport_type_e = 129;
pub const pjsip_transport_type_e_PJSIP_TRANSPORT_TCP6: pjsip_transport_type_e = 130;
pub const pjsip_transport_type_e_PJSIP_TRANSPORT_TLS6: pjsip_transport_type_e = 131;
pub const pjsip_transport_type_e_PJSIP_TRANSPORT_DTLS6: pjsip_transport_type_e = 132;
pub type pjsip_transport_type_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_endpoint {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_resolver_t {
    _unused: [u8; 0],
}
pub type pjsip_user_agent = pjsip_module;
pub const pjsip_role_e_PJSIP_ROLE_UAC: pjsip_role_e = 0;
pub const pjsip_role_e_PJSIP_ROLE_UAS: pjsip_role_e = 1;
pub const pjsip_role_e_PJSIP_UAC_ROLE: pjsip_role_e = 0;
pub const pjsip_role_e_PJSIP_UAS_ROLE: pjsip_role_e = 1;
pub type pjsip_role_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_buffer {
    pub start: *mut ::std::os::raw::c_char,
    pub cur: *mut ::std::os::raw::c_char,
    pub end: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_pjsip_buffer() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_buffer>(),
        24usize,
        concat!("Size of: ", stringify!(pjsip_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_buffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_buffer>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_buffer),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_buffer>())).cur as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_buffer),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_buffer>())).end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_buffer),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_host_port {
    pub host: pj_str_t,
    pub port: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pjsip_host_port() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_host_port>(),
        24usize,
        concat!("Size of: ", stringify!(pjsip_host_port))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_host_port>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_host_port))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_host_port>())).host as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_host_port),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_host_port>())).port as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_host_port),
            "::",
            stringify!(port)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_host_info {
    pub flag: ::std::os::raw::c_uint,
    pub type_: pjsip_transport_type_e,
    pub addr: pjsip_host_port,
}
#[test]
fn bindgen_test_layout_pjsip_host_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_host_info>(),
        32usize,
        concat!("Size of: ", stringify!(pjsip_host_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_host_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_host_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_host_info>())).flag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_host_info),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_host_info>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_host_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_host_info>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_host_info),
            "::",
            stringify!(addr)
        )
    );
}
extern "C" {
    pub fn pjsip_exception_to_status(exception_id: ::std::os::raw::c_int) -> pj_status_t;
}
pub type pj_os_err_type = ::std::os::raw::c_int;
pub type va_list = __builtin_va_list;
extern "C" {
    pub fn pj_get_os_error() -> pj_status_t;
}
extern "C" {
    pub fn pj_set_os_error(code: pj_status_t);
}
extern "C" {
    pub fn pj_get_netos_error() -> pj_status_t;
}
extern "C" {
    pub fn pj_set_netos_error(code: pj_status_t);
}
extern "C" {
    pub fn pj_strerror(
        statcode: pj_status_t,
        buf: *mut ::std::os::raw::c_char,
        bufsize: pj_size_t,
    ) -> pj_str_t;
}
extern "C" {
    pub fn pj_perror(
        log_level: ::std::os::raw::c_int,
        sender: *const ::std::os::raw::c_char,
        status: pj_status_t,
        title_fmt: *const ::std::os::raw::c_char,
        ...
    );
}
pub type pj_error_callback = ::std::option::Option<
    unsafe extern "C" fn(
        e: pj_status_t,
        msg: *mut ::std::os::raw::c_char,
        max: pj_size_t,
    ) -> pj_str_t,
>;
extern "C" {
    pub fn pj_register_strerror(
        start_code: pj_status_t,
        err_space: pj_status_t,
        f: pj_error_callback,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_errno_clear_handlers();
}
extern "C" {
    pub fn pj_perror_1(
        sender: *const ::std::os::raw::c_char,
        status: pj_status_t,
        title_fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn pj_perror_2(
        sender: *const ::std::os::raw::c_char,
        status: pj_status_t,
        title_fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn pj_perror_3(
        sender: *const ::std::os::raw::c_char,
        status: pj_status_t,
        title_fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn pj_perror_4(
        sender: *const ::std::os::raw::c_char,
        status: pj_status_t,
        title_fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn pj_perror_5(
        sender: *const ::std::os::raw::c_char,
        status: pj_status_t,
        title_fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn pjsip_strerror(
        status: pj_status_t,
        buffer: *mut ::std::os::raw::c_char,
        bufsize: pj_size_t,
    ) -> pj_str_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_list {
    pub prev: *mut ::std::os::raw::c_void,
    pub next: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pj_list() {
    assert_eq!(
        ::std::mem::size_of::<pj_list>(),
        16usize,
        concat!("Size of: ", stringify!(pj_list))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_list>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_list>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_list),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_list>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_list),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    pub fn pj_list_insert_before(pos: *mut pj_list_type, node: *mut pj_list_type);
}
extern "C" {
    pub fn pj_list_insert_nodes_before(lst: *mut pj_list_type, nodes: *mut pj_list_type);
}
extern "C" {
    pub fn pj_list_insert_after(pos: *mut pj_list_type, node: *mut pj_list_type);
}
extern "C" {
    pub fn pj_list_insert_nodes_after(lst: *mut pj_list_type, nodes: *mut pj_list_type);
}
extern "C" {
    pub fn pj_list_merge_first(list1: *mut pj_list_type, list2: *mut pj_list_type);
}
extern "C" {
    pub fn pj_list_merge_last(list1: *mut pj_list_type, list2: *mut pj_list_type);
}
extern "C" {
    pub fn pj_list_erase(node: *mut pj_list_type);
}
extern "C" {
    pub fn pj_list_find_node(list: *mut pj_list_type, node: *mut pj_list_type)
        -> *mut pj_list_type;
}
extern "C" {
    pub fn pj_list_search(
        list: *mut pj_list_type,
        value: *mut ::std::os::raw::c_void,
        comp: ::std::option::Option<
            unsafe extern "C" fn(
                value: *mut ::std::os::raw::c_void,
                node: *const pj_list_type,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut pj_list_type;
}
extern "C" {
    pub fn pj_list_size(list: *const pj_list_type) -> pj_size_t;
}
extern "C" {
    pub fn pjlib_util_init() -> pj_status_t;
}
pub type pj_cis_elem_t = pj_uint32_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_cis_buf_t {
    pub cis_buf: [pj_cis_elem_t; 256usize],
    pub use_mask: pj_cis_elem_t,
}
#[test]
fn bindgen_test_layout_pj_cis_buf_t() {
    assert_eq!(
        ::std::mem::size_of::<pj_cis_buf_t>(),
        1028usize,
        concat!("Size of: ", stringify!(pj_cis_buf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_cis_buf_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_cis_buf_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cis_buf_t>())).cis_buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cis_buf_t),
            "::",
            stringify!(cis_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cis_buf_t>())).use_mask as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cis_buf_t),
            "::",
            stringify!(use_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_cis_t {
    pub cis_buf: *mut pj_cis_elem_t,
    pub cis_id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pj_cis_t() {
    assert_eq!(
        ::std::mem::size_of::<pj_cis_t>(),
        16usize,
        concat!("Size of: ", stringify!(pj_cis_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_cis_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_cis_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cis_t>())).cis_buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cis_t),
            "::",
            stringify!(cis_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cis_t>())).cis_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cis_t),
            "::",
            stringify!(cis_id)
        )
    );
}
extern "C" {
    pub fn pj_cis_buf_init(cs_buf: *mut pj_cis_buf_t);
}
extern "C" {
    pub fn pj_cis_init(cs_buf: *mut pj_cis_buf_t, cis: *mut pj_cis_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_cis_dup(new_cis: *mut pj_cis_t, existing: *mut pj_cis_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_cis_add_range(
        cis: *mut pj_cis_t,
        cstart: ::std::os::raw::c_int,
        cend: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pj_cis_add_alpha(cis: *mut pj_cis_t);
}
extern "C" {
    pub fn pj_cis_add_num(cis: *mut pj_cis_t);
}
extern "C" {
    pub fn pj_cis_add_str(cis: *mut pj_cis_t, str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn pj_cis_add_cis(cis: *mut pj_cis_t, rhs: *const pj_cis_t);
}
extern "C" {
    pub fn pj_cis_del_range(
        cis: *mut pj_cis_t,
        cstart: ::std::os::raw::c_int,
        cend: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pj_cis_del_str(cis: *mut pj_cis_t, str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn pj_cis_invert(cis: *mut pj_cis_t);
}
pub const PJ_SCAN_AUTOSKIP_WS: ::std::os::raw::c_uint = 1;
pub const PJ_SCAN_AUTOSKIP_WS_HEADER: ::std::os::raw::c_uint = 3;
pub const PJ_SCAN_AUTOSKIP_NEWLINE: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub type pj_syn_err_func_ptr =
    ::std::option::Option<unsafe extern "C" fn(scanner: *mut pj_scanner)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_scanner {
    pub begin: *mut ::std::os::raw::c_char,
    pub end: *mut ::std::os::raw::c_char,
    pub curptr: *mut ::std::os::raw::c_char,
    pub line: ::std::os::raw::c_int,
    pub start_line: *mut ::std::os::raw::c_char,
    pub skip_ws: ::std::os::raw::c_int,
    pub callback: pj_syn_err_func_ptr,
}
#[test]
fn bindgen_test_layout_pj_scanner() {
    assert_eq!(
        ::std::mem::size_of::<pj_scanner>(),
        56usize,
        concat!("Size of: ", stringify!(pj_scanner))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_scanner>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_scanner))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_scanner>())).begin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_scanner),
            "::",
            stringify!(begin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_scanner>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_scanner),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_scanner>())).curptr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_scanner),
            "::",
            stringify!(curptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_scanner>())).line as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_scanner),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_scanner>())).start_line as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_scanner),
            "::",
            stringify!(start_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_scanner>())).skip_ws as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_scanner),
            "::",
            stringify!(skip_ws)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_scanner>())).callback as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_scanner),
            "::",
            stringify!(callback)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_scan_state {
    pub curptr: *mut ::std::os::raw::c_char,
    pub line: ::std::os::raw::c_int,
    pub start_line: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_pj_scan_state() {
    assert_eq!(
        ::std::mem::size_of::<pj_scan_state>(),
        24usize,
        concat!("Size of: ", stringify!(pj_scan_state))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_scan_state>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_scan_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_scan_state>())).curptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_scan_state),
            "::",
            stringify!(curptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_scan_state>())).line as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_scan_state),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_scan_state>())).start_line as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_scan_state),
            "::",
            stringify!(start_line)
        )
    );
}
extern "C" {
    pub fn pj_scan_init(
        scanner: *mut pj_scanner,
        bufstart: *mut ::std::os::raw::c_char,
        buflen: pj_size_t,
        options: ::std::os::raw::c_uint,
        callback: pj_syn_err_func_ptr,
    );
}
extern "C" {
    pub fn pj_scan_fini(scanner: *mut pj_scanner);
}
extern "C" {
    pub fn pj_scan_peek(
        scanner: *mut pj_scanner,
        spec: *const pj_cis_t,
        out: *mut pj_str_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_scan_peek_n(
        scanner: *mut pj_scanner,
        len: pj_size_t,
        out: *mut pj_str_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_scan_peek_until(
        scanner: *mut pj_scanner,
        spec: *const pj_cis_t,
        out: *mut pj_str_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_scan_get(scanner: *mut pj_scanner, spec: *const pj_cis_t, out: *mut pj_str_t);
}
extern "C" {
    pub fn pj_scan_get_unescape(
        scanner: *mut pj_scanner,
        spec: *const pj_cis_t,
        out: *mut pj_str_t,
    );
}
extern "C" {
    pub fn pj_scan_get_quote(
        scanner: *mut pj_scanner,
        begin_quote: ::std::os::raw::c_int,
        end_quote: ::std::os::raw::c_int,
        out: *mut pj_str_t,
    );
}
extern "C" {
    pub fn pj_scan_get_quotes(
        scanner: *mut pj_scanner,
        begin_quotes: *const ::std::os::raw::c_char,
        end_quotes: *const ::std::os::raw::c_char,
        qsize: ::std::os::raw::c_int,
        out: *mut pj_str_t,
    );
}
extern "C" {
    pub fn pj_scan_get_n(scanner: *mut pj_scanner, N: ::std::os::raw::c_uint, out: *mut pj_str_t);
}
extern "C" {
    pub fn pj_scan_get_char(scanner: *mut pj_scanner) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_scan_get_until(scanner: *mut pj_scanner, spec: *const pj_cis_t, out: *mut pj_str_t);
}
extern "C" {
    pub fn pj_scan_get_until_ch(
        scanner: *mut pj_scanner,
        until_char: ::std::os::raw::c_int,
        out: *mut pj_str_t,
    );
}
extern "C" {
    pub fn pj_scan_get_until_chr(
        scanner: *mut pj_scanner,
        until_spec: *const ::std::os::raw::c_char,
        out: *mut pj_str_t,
    );
}
extern "C" {
    pub fn pj_scan_advance_n(scanner: *mut pj_scanner, N: ::std::os::raw::c_uint, skip: pj_bool_t);
}
extern "C" {
    pub fn pj_scan_strcmp(
        scanner: *mut pj_scanner,
        s: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_scan_stricmp(
        scanner: *mut pj_scanner,
        s: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_scan_stricmp_alnum(
        scanner: *mut pj_scanner,
        s: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_scan_get_newline(scanner: *mut pj_scanner);
}
extern "C" {
    pub fn pj_scan_skip_whitespace(scanner: *mut pj_scanner);
}
extern "C" {
    pub fn pj_scan_skip_line(scanner: *mut pj_scanner);
}
extern "C" {
    pub fn pj_scan_save_state(scanner: *const pj_scanner, state: *mut pj_scan_state);
}
extern "C" {
    pub fn pj_scan_restore_state(scanner: *mut pj_scanner, state: *mut pj_scan_state);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_param {
    pub prev: *mut pjsip_param,
    pub next: *mut pjsip_param,
    pub name: pj_str_t,
    pub value: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjsip_param() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_param>(),
        48usize,
        concat!("Size of: ", stringify!(pjsip_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_param>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_param),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_param>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_param),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_param>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_param),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_param>())).value as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_param),
            "::",
            stringify!(value)
        )
    );
}
extern "C" {
    pub fn pjsip_param_find(
        param_list: *const pjsip_param,
        name: *const pj_str_t,
    ) -> *mut pjsip_param;
}
extern "C" {
    pub fn pjsip_param_cmp(
        param_list1: *const pjsip_param,
        param_list2: *const pjsip_param,
        ig_nf: pj_bool_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pjsip_param_clone(
        pool: *mut pj_pool_t,
        dst_list: *mut pjsip_param,
        src_list: *const pjsip_param,
    );
}
extern "C" {
    pub fn pjsip_param_shallow_clone(
        pool: *mut pj_pool_t,
        dst_list: *mut pjsip_param,
        src_list: *const pjsip_param,
    );
}
extern "C" {
    pub fn pjsip_param_print_on(
        param_list: *const pjsip_param,
        buf: *mut ::std::os::raw::c_char,
        size: pj_size_t,
        pname_unres: *const pj_cis_t,
        pvalue_unres: *const pj_cis_t,
        sep: ::std::os::raw::c_int,
    ) -> pj_ssize_t;
}
pub const pjsip_uri_context_e_PJSIP_URI_IN_REQ_URI: pjsip_uri_context_e = 0;
pub const pjsip_uri_context_e_PJSIP_URI_IN_FROMTO_HDR: pjsip_uri_context_e = 1;
pub const pjsip_uri_context_e_PJSIP_URI_IN_CONTACT_HDR: pjsip_uri_context_e = 2;
pub const pjsip_uri_context_e_PJSIP_URI_IN_ROUTING_HDR: pjsip_uri_context_e = 3;
pub const pjsip_uri_context_e_PJSIP_URI_IN_OTHER: pjsip_uri_context_e = 4;
pub type pjsip_uri_context_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_uri_vptr {
    pub p_get_scheme: ::std::option::Option<
        unsafe extern "C" fn(uri: *const ::std::os::raw::c_void) -> *const pj_str_t,
    >,
    pub p_get_uri: ::std::option::Option<
        unsafe extern "C" fn(uri: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub p_print: ::std::option::Option<
        unsafe extern "C" fn(
            context: pjsip_uri_context_e,
            uri: *const ::std::os::raw::c_void,
            buf: *mut ::std::os::raw::c_char,
            size: pj_size_t,
        ) -> pj_ssize_t,
    >,
    pub p_compare: ::std::option::Option<
        unsafe extern "C" fn(
            context: pjsip_uri_context_e,
            uri1: *const ::std::os::raw::c_void,
            uri2: *const ::std::os::raw::c_void,
        ) -> pj_status_t,
    >,
    pub p_clone: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut pj_pool_t,
            uri: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
#[test]
fn bindgen_test_layout_pjsip_uri_vptr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_uri_vptr>(),
        40usize,
        concat!("Size of: ", stringify!(pjsip_uri_vptr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_uri_vptr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_uri_vptr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_uri_vptr>())).p_get_scheme as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_uri_vptr),
            "::",
            stringify!(p_get_scheme)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_uri_vptr>())).p_get_uri as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_uri_vptr),
            "::",
            stringify!(p_get_uri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_uri_vptr>())).p_print as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_uri_vptr),
            "::",
            stringify!(p_print)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_uri_vptr>())).p_compare as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_uri_vptr),
            "::",
            stringify!(p_compare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_uri_vptr>())).p_clone as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_uri_vptr),
            "::",
            stringify!(p_clone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_uri {
    pub vptr: *mut pjsip_uri_vptr,
}
#[test]
fn bindgen_test_layout_pjsip_uri() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_uri>(),
        8usize,
        concat!("Size of: ", stringify!(pjsip_uri))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_uri>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_uri))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_uri>())).vptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_uri),
            "::",
            stringify!(vptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_sip_uri {
    pub vptr: *mut pjsip_uri_vptr,
    pub user: pj_str_t,
    pub passwd: pj_str_t,
    pub host: pj_str_t,
    pub port: ::std::os::raw::c_int,
    pub user_param: pj_str_t,
    pub method_param: pj_str_t,
    pub transport_param: pj_str_t,
    pub ttl_param: ::std::os::raw::c_int,
    pub lr_param: ::std::os::raw::c_int,
    pub maddr_param: pj_str_t,
    pub other_param: pjsip_param,
    pub header_param: pjsip_param,
}
#[test]
fn bindgen_test_layout_pjsip_sip_uri() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_sip_uri>(),
        232usize,
        concat!("Size of: ", stringify!(pjsip_sip_uri))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_sip_uri>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_sip_uri))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sip_uri>())).vptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sip_uri),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sip_uri>())).user as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sip_uri),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sip_uri>())).passwd as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sip_uri),
            "::",
            stringify!(passwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sip_uri>())).host as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sip_uri),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sip_uri>())).port as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sip_uri),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sip_uri>())).user_param as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sip_uri),
            "::",
            stringify!(user_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sip_uri>())).method_param as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sip_uri),
            "::",
            stringify!(method_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sip_uri>())).transport_param as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sip_uri),
            "::",
            stringify!(transport_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sip_uri>())).ttl_param as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sip_uri),
            "::",
            stringify!(ttl_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sip_uri>())).lr_param as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sip_uri),
            "::",
            stringify!(lr_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sip_uri>())).maddr_param as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sip_uri),
            "::",
            stringify!(maddr_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sip_uri>())).other_param as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sip_uri),
            "::",
            stringify!(other_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sip_uri>())).header_param as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sip_uri),
            "::",
            stringify!(header_param)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_name_addr {
    pub vptr: *mut pjsip_uri_vptr,
    pub display: pj_str_t,
    pub uri: *mut pjsip_uri,
}
#[test]
fn bindgen_test_layout_pjsip_name_addr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_name_addr>(),
        32usize,
        concat!("Size of: ", stringify!(pjsip_name_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_name_addr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_name_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_name_addr>())).vptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_name_addr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_name_addr>())).display as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_name_addr),
            "::",
            stringify!(display)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_name_addr>())).uri as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_name_addr),
            "::",
            stringify!(uri)
        )
    );
}
extern "C" {
    pub fn pjsip_sip_uri_create(pool: *mut pj_pool_t, secure: pj_bool_t) -> *mut pjsip_sip_uri;
}
extern "C" {
    pub fn pjsip_sip_uri_set_secure(uri: *mut pjsip_sip_uri, secure: pj_bool_t);
}
extern "C" {
    pub fn pjsip_sip_uri_init(url: *mut pjsip_sip_uri, secure: pj_bool_t);
}
extern "C" {
    pub fn pjsip_sip_uri_assign(
        pool: *mut pj_pool_t,
        url: *mut pjsip_sip_uri,
        rhs: *const pjsip_sip_uri,
    );
}
extern "C" {
    pub fn pjsip_name_addr_create(pool: *mut pj_pool_t) -> *mut pjsip_name_addr;
}
extern "C" {
    pub fn pjsip_name_addr_init(name_addr: *mut pjsip_name_addr);
}
extern "C" {
    pub fn pjsip_name_addr_assign(
        pool: *mut pj_pool_t,
        addr: *mut pjsip_name_addr,
        rhs: *const pjsip_name_addr,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_other_uri {
    pub vptr: *mut pjsip_uri_vptr,
    pub scheme: pj_str_t,
    pub content: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjsip_other_uri() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_other_uri>(),
        40usize,
        concat!("Size of: ", stringify!(pjsip_other_uri))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_other_uri>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_other_uri))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_other_uri>())).vptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_other_uri),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_other_uri>())).scheme as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_other_uri),
            "::",
            stringify!(scheme)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_other_uri>())).content as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_other_uri),
            "::",
            stringify!(content)
        )
    );
}
extern "C" {
    pub fn pjsip_other_uri_create(pool: *mut pj_pool_t) -> *mut pjsip_other_uri;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_tel_uri {
    pub vptr: *mut pjsip_uri_vptr,
    pub number: pj_str_t,
    pub context: pj_str_t,
    pub ext_param: pj_str_t,
    pub isub_param: pj_str_t,
    pub other_param: pjsip_param,
}
#[test]
fn bindgen_test_layout_pjsip_tel_uri() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_tel_uri>(),
        120usize,
        concat!("Size of: ", stringify!(pjsip_tel_uri))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_tel_uri>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_tel_uri))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tel_uri>())).vptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tel_uri),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tel_uri>())).number as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tel_uri),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tel_uri>())).context as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tel_uri),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tel_uri>())).ext_param as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tel_uri),
            "::",
            stringify!(ext_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tel_uri>())).isub_param as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tel_uri),
            "::",
            stringify!(isub_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tel_uri>())).other_param as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tel_uri),
            "::",
            stringify!(other_param)
        )
    );
}
extern "C" {
    pub fn pjsip_tel_uri_create(pool: *mut pj_pool_t) -> *mut pjsip_tel_uri;
}
extern "C" {
    pub fn pjsip_tel_nb_cmp(nb1: *const pj_str_t, nb2: *const pj_str_t) -> ::std::os::raw::c_int;
}
pub const pjsip_method_e_PJSIP_INVITE_METHOD: pjsip_method_e = 0;
pub const pjsip_method_e_PJSIP_CANCEL_METHOD: pjsip_method_e = 1;
pub const pjsip_method_e_PJSIP_ACK_METHOD: pjsip_method_e = 2;
pub const pjsip_method_e_PJSIP_BYE_METHOD: pjsip_method_e = 3;
pub const pjsip_method_e_PJSIP_REGISTER_METHOD: pjsip_method_e = 4;
pub const pjsip_method_e_PJSIP_OPTIONS_METHOD: pjsip_method_e = 5;
pub const pjsip_method_e_PJSIP_OTHER_METHOD: pjsip_method_e = 6;
pub type pjsip_method_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_method {
    pub id: pjsip_method_e,
    pub name: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjsip_method() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_method>(),
        24usize,
        concat!("Size of: ", stringify!(pjsip_method))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_method>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_method))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_method>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_method),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_method>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_method),
            "::",
            stringify!(name)
        )
    );
}
extern "C" {
    pub static pjsip_invite_method: pjsip_method;
}
extern "C" {
    pub static pjsip_cancel_method: pjsip_method;
}
extern "C" {
    pub static pjsip_ack_method: pjsip_method;
}
extern "C" {
    pub static pjsip_bye_method: pjsip_method;
}
extern "C" {
    pub static pjsip_register_method: pjsip_method;
}
extern "C" {
    pub static pjsip_options_method: pjsip_method;
}
extern "C" {
    pub fn pjsip_get_invite_method() -> *const pjsip_method;
}
extern "C" {
    pub fn pjsip_get_cancel_method() -> *const pjsip_method;
}
extern "C" {
    pub fn pjsip_get_ack_method() -> *const pjsip_method;
}
extern "C" {
    pub fn pjsip_get_bye_method() -> *const pjsip_method;
}
extern "C" {
    pub fn pjsip_get_register_method() -> *const pjsip_method;
}
extern "C" {
    pub fn pjsip_get_options_method() -> *const pjsip_method;
}
extern "C" {
    pub fn pjsip_method_init(m: *mut pjsip_method, pool: *mut pj_pool_t, str_: *const pj_str_t);
}
extern "C" {
    pub fn pjsip_method_init_np(m: *mut pjsip_method, str_: *mut pj_str_t);
}
extern "C" {
    pub fn pjsip_method_set(m: *mut pjsip_method, id: pjsip_method_e);
}
extern "C" {
    pub fn pjsip_method_copy(
        pool: *mut pj_pool_t,
        method: *mut pjsip_method,
        rhs: *const pjsip_method,
    );
}
extern "C" {
    pub fn pjsip_method_cmp(
        m1: *const pjsip_method,
        m2: *const pjsip_method,
    ) -> ::std::os::raw::c_int;
}
pub const pjsip_hdr_e_PJSIP_H_ACCEPT: pjsip_hdr_e = 0;
pub const pjsip_hdr_e_PJSIP_H_ACCEPT_ENCODING_UNIMP: pjsip_hdr_e = 1;
pub const pjsip_hdr_e_PJSIP_H_ACCEPT_LANGUAGE_UNIMP: pjsip_hdr_e = 2;
pub const pjsip_hdr_e_PJSIP_H_ALERT_INFO_UNIMP: pjsip_hdr_e = 3;
pub const pjsip_hdr_e_PJSIP_H_ALLOW: pjsip_hdr_e = 4;
pub const pjsip_hdr_e_PJSIP_H_AUTHENTICATION_INFO_UNIMP: pjsip_hdr_e = 5;
pub const pjsip_hdr_e_PJSIP_H_AUTHORIZATION: pjsip_hdr_e = 6;
pub const pjsip_hdr_e_PJSIP_H_CALL_ID: pjsip_hdr_e = 7;
pub const pjsip_hdr_e_PJSIP_H_CALL_INFO_UNIMP: pjsip_hdr_e = 8;
pub const pjsip_hdr_e_PJSIP_H_CONTACT: pjsip_hdr_e = 9;
pub const pjsip_hdr_e_PJSIP_H_CONTENT_DISPOSITION_UNIMP: pjsip_hdr_e = 10;
pub const pjsip_hdr_e_PJSIP_H_CONTENT_ENCODING_UNIMP: pjsip_hdr_e = 11;
pub const pjsip_hdr_e_PJSIP_H_CONTENT_LANGUAGE_UNIMP: pjsip_hdr_e = 12;
pub const pjsip_hdr_e_PJSIP_H_CONTENT_LENGTH: pjsip_hdr_e = 13;
pub const pjsip_hdr_e_PJSIP_H_CONTENT_TYPE: pjsip_hdr_e = 14;
pub const pjsip_hdr_e_PJSIP_H_CSEQ: pjsip_hdr_e = 15;
pub const pjsip_hdr_e_PJSIP_H_DATE_UNIMP: pjsip_hdr_e = 16;
pub const pjsip_hdr_e_PJSIP_H_ERROR_INFO_UNIMP: pjsip_hdr_e = 17;
pub const pjsip_hdr_e_PJSIP_H_EXPIRES: pjsip_hdr_e = 18;
pub const pjsip_hdr_e_PJSIP_H_FROM: pjsip_hdr_e = 19;
pub const pjsip_hdr_e_PJSIP_H_IN_REPLY_TO_UNIMP: pjsip_hdr_e = 20;
pub const pjsip_hdr_e_PJSIP_H_MAX_FORWARDS: pjsip_hdr_e = 21;
pub const pjsip_hdr_e_PJSIP_H_MIME_VERSION_UNIMP: pjsip_hdr_e = 22;
pub const pjsip_hdr_e_PJSIP_H_MIN_EXPIRES: pjsip_hdr_e = 23;
pub const pjsip_hdr_e_PJSIP_H_ORGANIZATION_UNIMP: pjsip_hdr_e = 24;
pub const pjsip_hdr_e_PJSIP_H_PRIORITY_UNIMP: pjsip_hdr_e = 25;
pub const pjsip_hdr_e_PJSIP_H_PROXY_AUTHENTICATE: pjsip_hdr_e = 26;
pub const pjsip_hdr_e_PJSIP_H_PROXY_AUTHORIZATION: pjsip_hdr_e = 27;
pub const pjsip_hdr_e_PJSIP_H_PROXY_REQUIRE_UNIMP: pjsip_hdr_e = 28;
pub const pjsip_hdr_e_PJSIP_H_RECORD_ROUTE: pjsip_hdr_e = 29;
pub const pjsip_hdr_e_PJSIP_H_REPLY_TO_UNIMP: pjsip_hdr_e = 30;
pub const pjsip_hdr_e_PJSIP_H_REQUIRE: pjsip_hdr_e = 31;
pub const pjsip_hdr_e_PJSIP_H_RETRY_AFTER: pjsip_hdr_e = 32;
pub const pjsip_hdr_e_PJSIP_H_ROUTE: pjsip_hdr_e = 33;
pub const pjsip_hdr_e_PJSIP_H_SERVER_UNIMP: pjsip_hdr_e = 34;
pub const pjsip_hdr_e_PJSIP_H_SUBJECT_UNIMP: pjsip_hdr_e = 35;
pub const pjsip_hdr_e_PJSIP_H_SUPPORTED: pjsip_hdr_e = 36;
pub const pjsip_hdr_e_PJSIP_H_TIMESTAMP_UNIMP: pjsip_hdr_e = 37;
pub const pjsip_hdr_e_PJSIP_H_TO: pjsip_hdr_e = 38;
pub const pjsip_hdr_e_PJSIP_H_UNSUPPORTED: pjsip_hdr_e = 39;
pub const pjsip_hdr_e_PJSIP_H_USER_AGENT_UNIMP: pjsip_hdr_e = 40;
pub const pjsip_hdr_e_PJSIP_H_VIA: pjsip_hdr_e = 41;
pub const pjsip_hdr_e_PJSIP_H_WARNING_UNIMP: pjsip_hdr_e = 42;
pub const pjsip_hdr_e_PJSIP_H_WWW_AUTHENTICATE: pjsip_hdr_e = 43;
pub const pjsip_hdr_e_PJSIP_H_OTHER: pjsip_hdr_e = 44;
pub type pjsip_hdr_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_hdr_vptr {
    pub clone: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut pj_pool_t,
            hdr: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub shallow_clone: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut pj_pool_t,
            hdr: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub print_on: ::std::option::Option<
        unsafe extern "C" fn(
            hdr: *mut ::std::os::raw::c_void,
            buf: *mut ::std::os::raw::c_char,
            len: pj_size_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_pjsip_hdr_vptr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_hdr_vptr>(),
        24usize,
        concat!("Size of: ", stringify!(pjsip_hdr_vptr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_hdr_vptr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_hdr_vptr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_hdr_vptr>())).clone as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_hdr_vptr),
            "::",
            stringify!(clone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_hdr_vptr>())).shallow_clone as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_hdr_vptr),
            "::",
            stringify!(shallow_clone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_hdr_vptr>())).print_on as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_hdr_vptr),
            "::",
            stringify!(print_on)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_hdr {
    pub prev: *mut pjsip_hdr,
    pub next: *mut pjsip_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
}
#[test]
fn bindgen_test_layout_pjsip_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_hdr>(),
        64usize,
        concat!("Size of: ", stringify!(pjsip_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_hdr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_hdr>())).sname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_hdr),
            "::",
            stringify!(vptr)
        )
    );
}
extern "C" {
    pub fn pjsip_hdr_clone(
        pool: *mut pj_pool_t,
        hdr: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pjsip_hdr_shallow_clone(
        pool: *mut pj_pool_t,
        hdr: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pjsip_hdr_print_on(
        hdr: *mut ::std::os::raw::c_void,
        buf: *mut ::std::os::raw::c_char,
        len: pj_size_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_request_line {
    pub method: pjsip_method,
    pub uri: *mut pjsip_uri,
}
#[test]
fn bindgen_test_layout_pjsip_request_line() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_request_line>(),
        32usize,
        concat!("Size of: ", stringify!(pjsip_request_line))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_request_line>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_request_line))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_request_line>())).method as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_request_line),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_request_line>())).uri as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_request_line),
            "::",
            stringify!(uri)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_status_line {
    pub code: ::std::os::raw::c_int,
    pub reason: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjsip_status_line() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_status_line>(),
        24usize,
        concat!("Size of: ", stringify!(pjsip_status_line))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_status_line>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_status_line))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_status_line>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_status_line),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_status_line>())).reason as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_status_line),
            "::",
            stringify!(reason)
        )
    );
}
pub const pjsip_status_code_PJSIP_SC_NULL: pjsip_status_code = 0;
pub const pjsip_status_code_PJSIP_SC_TRYING: pjsip_status_code = 100;
pub const pjsip_status_code_PJSIP_SC_RINGING: pjsip_status_code = 180;
pub const pjsip_status_code_PJSIP_SC_CALL_BEING_FORWARDED: pjsip_status_code = 181;
pub const pjsip_status_code_PJSIP_SC_QUEUED: pjsip_status_code = 182;
pub const pjsip_status_code_PJSIP_SC_PROGRESS: pjsip_status_code = 183;
pub const pjsip_status_code_PJSIP_SC_EARLY_DIALOG_TERMINATED: pjsip_status_code = 199;
pub const pjsip_status_code_PJSIP_SC_OK: pjsip_status_code = 200;
pub const pjsip_status_code_PJSIP_SC_ACCEPTED: pjsip_status_code = 202;
pub const pjsip_status_code_PJSIP_SC_NO_NOTIFICATION: pjsip_status_code = 204;
pub const pjsip_status_code_PJSIP_SC_MULTIPLE_CHOICES: pjsip_status_code = 300;
pub const pjsip_status_code_PJSIP_SC_MOVED_PERMANENTLY: pjsip_status_code = 301;
pub const pjsip_status_code_PJSIP_SC_MOVED_TEMPORARILY: pjsip_status_code = 302;
pub const pjsip_status_code_PJSIP_SC_USE_PROXY: pjsip_status_code = 305;
pub const pjsip_status_code_PJSIP_SC_ALTERNATIVE_SERVICE: pjsip_status_code = 380;
pub const pjsip_status_code_PJSIP_SC_BAD_REQUEST: pjsip_status_code = 400;
pub const pjsip_status_code_PJSIP_SC_UNAUTHORIZED: pjsip_status_code = 401;
pub const pjsip_status_code_PJSIP_SC_PAYMENT_REQUIRED: pjsip_status_code = 402;
pub const pjsip_status_code_PJSIP_SC_FORBIDDEN: pjsip_status_code = 403;
pub const pjsip_status_code_PJSIP_SC_NOT_FOUND: pjsip_status_code = 404;
pub const pjsip_status_code_PJSIP_SC_METHOD_NOT_ALLOWED: pjsip_status_code = 405;
pub const pjsip_status_code_PJSIP_SC_NOT_ACCEPTABLE: pjsip_status_code = 406;
pub const pjsip_status_code_PJSIP_SC_PROXY_AUTHENTICATION_REQUIRED: pjsip_status_code = 407;
pub const pjsip_status_code_PJSIP_SC_REQUEST_TIMEOUT: pjsip_status_code = 408;
pub const pjsip_status_code_PJSIP_SC_CONFLICT: pjsip_status_code = 409;
pub const pjsip_status_code_PJSIP_SC_GONE: pjsip_status_code = 410;
pub const pjsip_status_code_PJSIP_SC_LENGTH_REQUIRED: pjsip_status_code = 411;
pub const pjsip_status_code_PJSIP_SC_CONDITIONAL_REQUEST_FAILED: pjsip_status_code = 412;
pub const pjsip_status_code_PJSIP_SC_REQUEST_ENTITY_TOO_LARGE: pjsip_status_code = 413;
pub const pjsip_status_code_PJSIP_SC_REQUEST_URI_TOO_LONG: pjsip_status_code = 414;
pub const pjsip_status_code_PJSIP_SC_UNSUPPORTED_MEDIA_TYPE: pjsip_status_code = 415;
pub const pjsip_status_code_PJSIP_SC_UNSUPPORTED_URI_SCHEME: pjsip_status_code = 416;
pub const pjsip_status_code_PJSIP_SC_UNKNOWN_RESOURCE_PRIORITY: pjsip_status_code = 417;
pub const pjsip_status_code_PJSIP_SC_BAD_EXTENSION: pjsip_status_code = 420;
pub const pjsip_status_code_PJSIP_SC_EXTENSION_REQUIRED: pjsip_status_code = 421;
pub const pjsip_status_code_PJSIP_SC_SESSION_TIMER_TOO_SMALL: pjsip_status_code = 422;
pub const pjsip_status_code_PJSIP_SC_INTERVAL_TOO_BRIEF: pjsip_status_code = 423;
pub const pjsip_status_code_PJSIP_SC_BAD_LOCATION_INFORMATION: pjsip_status_code = 424;
pub const pjsip_status_code_PJSIP_SC_USE_IDENTITY_HEADER: pjsip_status_code = 428;
pub const pjsip_status_code_PJSIP_SC_PROVIDE_REFERRER_HEADER: pjsip_status_code = 429;
pub const pjsip_status_code_PJSIP_SC_FLOW_FAILED: pjsip_status_code = 430;
pub const pjsip_status_code_PJSIP_SC_ANONIMITY_DISALLOWED: pjsip_status_code = 433;
pub const pjsip_status_code_PJSIP_SC_BAD_IDENTITY_INFO: pjsip_status_code = 436;
pub const pjsip_status_code_PJSIP_SC_UNSUPPORTED_CERTIFICATE: pjsip_status_code = 437;
pub const pjsip_status_code_PJSIP_SC_INVALID_IDENTITY_HEADER: pjsip_status_code = 438;
pub const pjsip_status_code_PJSIP_SC_FIRST_HOP_LACKS_OUTBOUND_SUPPORT: pjsip_status_code = 439;
pub const pjsip_status_code_PJSIP_SC_MAX_BREADTH_EXCEEDED: pjsip_status_code = 440;
pub const pjsip_status_code_PJSIP_SC_BAD_INFO_PACKAGE: pjsip_status_code = 469;
pub const pjsip_status_code_PJSIP_SC_CONSENT_NEEDED: pjsip_status_code = 470;
pub const pjsip_status_code_PJSIP_SC_TEMPORARILY_UNAVAILABLE: pjsip_status_code = 480;
pub const pjsip_status_code_PJSIP_SC_CALL_TSX_DOES_NOT_EXIST: pjsip_status_code = 481;
pub const pjsip_status_code_PJSIP_SC_LOOP_DETECTED: pjsip_status_code = 482;
pub const pjsip_status_code_PJSIP_SC_TOO_MANY_HOPS: pjsip_status_code = 483;
pub const pjsip_status_code_PJSIP_SC_ADDRESS_INCOMPLETE: pjsip_status_code = 484;
pub const pjsip_status_code_PJSIP_AC_AMBIGUOUS: pjsip_status_code = 485;
pub const pjsip_status_code_PJSIP_SC_BUSY_HERE: pjsip_status_code = 486;
pub const pjsip_status_code_PJSIP_SC_REQUEST_TERMINATED: pjsip_status_code = 487;
pub const pjsip_status_code_PJSIP_SC_NOT_ACCEPTABLE_HERE: pjsip_status_code = 488;
pub const pjsip_status_code_PJSIP_SC_BAD_EVENT: pjsip_status_code = 489;
pub const pjsip_status_code_PJSIP_SC_REQUEST_UPDATED: pjsip_status_code = 490;
pub const pjsip_status_code_PJSIP_SC_REQUEST_PENDING: pjsip_status_code = 491;
pub const pjsip_status_code_PJSIP_SC_UNDECIPHERABLE: pjsip_status_code = 493;
pub const pjsip_status_code_PJSIP_SC_SECURITY_AGREEMENT_NEEDED: pjsip_status_code = 494;
pub const pjsip_status_code_PJSIP_SC_INTERNAL_SERVER_ERROR: pjsip_status_code = 500;
pub const pjsip_status_code_PJSIP_SC_NOT_IMPLEMENTED: pjsip_status_code = 501;
pub const pjsip_status_code_PJSIP_SC_BAD_GATEWAY: pjsip_status_code = 502;
pub const pjsip_status_code_PJSIP_SC_SERVICE_UNAVAILABLE: pjsip_status_code = 503;
pub const pjsip_status_code_PJSIP_SC_SERVER_TIMEOUT: pjsip_status_code = 504;
pub const pjsip_status_code_PJSIP_SC_VERSION_NOT_SUPPORTED: pjsip_status_code = 505;
pub const pjsip_status_code_PJSIP_SC_MESSAGE_TOO_LARGE: pjsip_status_code = 513;
pub const pjsip_status_code_PJSIP_SC_PUSH_NOTIFICATION_SERVICE_NOT_SUPPORTED: pjsip_status_code =
    555;
pub const pjsip_status_code_PJSIP_SC_PRECONDITION_FAILURE: pjsip_status_code = 580;
pub const pjsip_status_code_PJSIP_SC_BUSY_EVERYWHERE: pjsip_status_code = 600;
pub const pjsip_status_code_PJSIP_SC_DECLINE: pjsip_status_code = 603;
pub const pjsip_status_code_PJSIP_SC_DOES_NOT_EXIST_ANYWHERE: pjsip_status_code = 604;
pub const pjsip_status_code_PJSIP_SC_NOT_ACCEPTABLE_ANYWHERE: pjsip_status_code = 606;
pub const pjsip_status_code_PJSIP_SC_UNWANTED: pjsip_status_code = 607;
pub const pjsip_status_code_PJSIP_SC_REJECTED: pjsip_status_code = 608;
pub const pjsip_status_code_PJSIP_SC_TSX_TIMEOUT: pjsip_status_code = 408;
pub const pjsip_status_code_PJSIP_SC_TSX_TRANSPORT_ERROR: pjsip_status_code = 503;
pub const pjsip_status_code_PJSIP_SC__force_32bit: pjsip_status_code = 2147483647;
pub type pjsip_status_code = ::std::os::raw::c_uint;
extern "C" {
    pub fn pjsip_get_status_text(status_code: ::std::os::raw::c_int) -> *const pj_str_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_media_type {
    pub type_: pj_str_t,
    pub subtype: pj_str_t,
    pub param: pjsip_param,
}
#[test]
fn bindgen_test_layout_pjsip_media_type() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_media_type>(),
        80usize,
        concat!("Size of: ", stringify!(pjsip_media_type))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_media_type>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_media_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_media_type>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_media_type),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_media_type>())).subtype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_media_type),
            "::",
            stringify!(subtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_media_type>())).param as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_media_type),
            "::",
            stringify!(param)
        )
    );
}
extern "C" {
    pub fn pjsip_media_type_init(
        mt: *mut pjsip_media_type,
        type_: *mut pj_str_t,
        subtype: *mut pj_str_t,
    );
}
extern "C" {
    pub fn pjsip_media_type_init2(
        mt: *mut pjsip_media_type,
        type_: *mut ::std::os::raw::c_char,
        subtype: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pjsip_media_type_cmp(
        mt1: *const pjsip_media_type,
        mt2: *const pjsip_media_type,
        cmp_param: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pjsip_media_type_cp(
        pool: *mut pj_pool_t,
        dst: *mut pjsip_media_type,
        src: *const pjsip_media_type,
    );
}
extern "C" {
    pub fn pjsip_media_type_print(
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_uint,
        mt: *const pjsip_media_type,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_msg_body {
    pub content_type: pjsip_media_type,
    pub data: *mut ::std::os::raw::c_void,
    pub len: ::std::os::raw::c_uint,
    pub print_body: ::std::option::Option<
        unsafe extern "C" fn(
            msg_body: *mut pjsip_msg_body,
            buf: *mut ::std::os::raw::c_char,
            size: pj_size_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub clone_data: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut pj_pool_t,
            data: *const ::std::os::raw::c_void,
            len: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
#[test]
fn bindgen_test_layout_pjsip_msg_body() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_msg_body>(),
        112usize,
        concat!("Size of: ", stringify!(pjsip_msg_body))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_msg_body>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_msg_body))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_msg_body>())).content_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_msg_body),
            "::",
            stringify!(content_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_msg_body>())).data as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_msg_body),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_msg_body>())).len as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_msg_body),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_msg_body>())).print_body as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_msg_body),
            "::",
            stringify!(print_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_msg_body>())).clone_data as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_msg_body),
            "::",
            stringify!(clone_data)
        )
    );
}
extern "C" {
    pub fn pjsip_print_text_body(
        msg_body: *mut pjsip_msg_body,
        buf: *mut ::std::os::raw::c_char,
        size: pj_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pjsip_clone_text_data(
        pool: *mut pj_pool_t,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pjsip_msg_body_copy(
        pool: *mut pj_pool_t,
        dst_body: *mut pjsip_msg_body,
        src_body: *const pjsip_msg_body,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_msg_body_clone(
        pool: *mut pj_pool_t,
        body: *const pjsip_msg_body,
    ) -> *mut pjsip_msg_body;
}
extern "C" {
    pub fn pjsip_msg_body_create(
        pool: *mut pj_pool_t,
        type_: *const pj_str_t,
        subtype: *const pj_str_t,
        text: *const pj_str_t,
    ) -> *mut pjsip_msg_body;
}
pub const pjsip_msg_type_e_PJSIP_REQUEST_MSG: pjsip_msg_type_e = 0;
pub const pjsip_msg_type_e_PJSIP_RESPONSE_MSG: pjsip_msg_type_e = 1;
pub type pjsip_msg_type_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_msg {
    pub type_: pjsip_msg_type_e,
    pub line: pjsip_msg__bindgen_ty_1,
    pub hdr: pjsip_hdr,
    pub body: *mut pjsip_msg_body,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjsip_msg__bindgen_ty_1 {
    pub req: pjsip_request_line,
    pub status: pjsip_status_line,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pjsip_msg__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_msg__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(pjsip_msg__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_msg__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_msg__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_msg__bindgen_ty_1>())).req as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_msg__bindgen_ty_1),
            "::",
            stringify!(req)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_msg__bindgen_ty_1>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_msg__bindgen_ty_1),
            "::",
            stringify!(status)
        )
    );
}
#[test]
fn bindgen_test_layout_pjsip_msg() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_msg>(),
        112usize,
        concat!("Size of: ", stringify!(pjsip_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_msg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_msg>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_msg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_msg>())).line as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_msg),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_msg>())).hdr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_msg),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_msg>())).body as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_msg),
            "::",
            stringify!(body)
        )
    );
}
extern "C" {
    pub fn pjsip_msg_create(pool: *mut pj_pool_t, type_: pjsip_msg_type_e) -> *mut pjsip_msg;
}
extern "C" {
    pub fn pjsip_msg_clone(pool: *mut pj_pool_t, msg: *const pjsip_msg) -> *mut pjsip_msg;
}
extern "C" {
    pub fn pjsip_msg_find_hdr(
        msg: *const pjsip_msg,
        type_: pjsip_hdr_e,
        start: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pjsip_msg_find_hdr_by_name(
        msg: *const pjsip_msg,
        name: *const pj_str_t,
        start: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pjsip_msg_find_hdr_by_names(
        msg: *const pjsip_msg,
        name: *const pj_str_t,
        sname: *const pj_str_t,
        start: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pjsip_msg_find_remove_hdr(
        msg: *mut pjsip_msg,
        hdr: pjsip_hdr_e,
        start: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pjsip_msg_print(
        msg: *const pjsip_msg,
        buf: *mut ::std::os::raw::c_char,
        size: pj_size_t,
    ) -> pj_ssize_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_generic_string_hdr {
    pub prev: *mut pjsip_generic_string_hdr,
    pub next: *mut pjsip_generic_string_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub hvalue: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjsip_generic_string_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_generic_string_hdr>(),
        80usize,
        concat!("Size of: ", stringify!(pjsip_generic_string_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_generic_string_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_generic_string_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_string_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_string_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_string_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_string_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_string_hdr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_string_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_string_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_string_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_string_hdr>())).sname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_string_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_string_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_string_hdr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_string_hdr>())).hvalue as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_string_hdr),
            "::",
            stringify!(hvalue)
        )
    );
}
extern "C" {
    pub fn pjsip_generic_string_hdr_create(
        pool: *mut pj_pool_t,
        hname: *const pj_str_t,
        hvalue: *const pj_str_t,
    ) -> *mut pjsip_generic_string_hdr;
}
extern "C" {
    pub fn pjsip_generic_string_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
        hname: *const pj_str_t,
        hvalue: *const pj_str_t,
    ) -> *mut pjsip_generic_string_hdr;
}
extern "C" {
    pub fn pjsip_generic_string_hdr_init2(
        h: *mut pjsip_generic_string_hdr,
        hname: *mut pj_str_t,
        hvalue: *mut pj_str_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_generic_int_hdr {
    pub prev: *mut pjsip_generic_int_hdr,
    pub next: *mut pjsip_generic_int_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub ivalue: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjsip_generic_int_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_generic_int_hdr>(),
        72usize,
        concat!("Size of: ", stringify!(pjsip_generic_int_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_generic_int_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_generic_int_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_int_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_int_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_int_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_int_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_int_hdr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_int_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_int_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_int_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_int_hdr>())).sname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_int_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_int_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_int_hdr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_int_hdr>())).ivalue as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_int_hdr),
            "::",
            stringify!(ivalue)
        )
    );
}
extern "C" {
    pub fn pjsip_generic_int_hdr_create(
        pool: *mut pj_pool_t,
        hname: *const pj_str_t,
        hvalue: ::std::os::raw::c_uint,
    ) -> *mut pjsip_generic_int_hdr;
}
extern "C" {
    pub fn pjsip_generic_int_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
        hname: *const pj_str_t,
        value: ::std::os::raw::c_uint,
    ) -> *mut pjsip_generic_int_hdr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_generic_array_hdr {
    pub prev: *mut pjsip_generic_array_hdr,
    pub next: *mut pjsip_generic_array_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub count: ::std::os::raw::c_uint,
    pub values: [pj_str_t; 32usize],
}
#[test]
fn bindgen_test_layout_pjsip_generic_array_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_generic_array_hdr>(),
        584usize,
        concat!("Size of: ", stringify!(pjsip_generic_array_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_generic_array_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_generic_array_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_array_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_array_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_array_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_array_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_array_hdr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_array_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_array_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_array_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_array_hdr>())).sname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_array_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_array_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_array_hdr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_array_hdr>())).count as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_array_hdr),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_generic_array_hdr>())).values as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_generic_array_hdr),
            "::",
            stringify!(values)
        )
    );
}
extern "C" {
    pub fn pjsip_generic_array_hdr_create(
        pool: *mut pj_pool_t,
        hname: *const pj_str_t,
    ) -> *mut pjsip_generic_array_hdr;
}
extern "C" {
    pub fn pjsip_generic_array_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
        hname: *const pj_str_t,
    ) -> *mut pjsip_generic_array_hdr;
}
pub type pjsip_accept_hdr = pjsip_generic_array_hdr;
extern "C" {
    pub fn pjsip_accept_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_accept_hdr;
}
extern "C" {
    pub fn pjsip_accept_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
    ) -> *mut pjsip_accept_hdr;
}
pub type pjsip_allow_hdr = pjsip_generic_array_hdr;
extern "C" {
    pub fn pjsip_allow_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_allow_hdr;
}
extern "C" {
    pub fn pjsip_allow_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
    ) -> *mut pjsip_allow_hdr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_cid_hdr {
    pub prev: *mut pjsip_cid_hdr,
    pub next: *mut pjsip_cid_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub id: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjsip_cid_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_cid_hdr>(),
        80usize,
        concat!("Size of: ", stringify!(pjsip_cid_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_cid_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_cid_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cid_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cid_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cid_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cid_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cid_hdr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cid_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cid_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cid_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cid_hdr>())).sname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cid_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cid_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cid_hdr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cid_hdr>())).id as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cid_hdr),
            "::",
            stringify!(id)
        )
    );
}
extern "C" {
    pub fn pjsip_cid_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_cid_hdr;
}
extern "C" {
    pub fn pjsip_cid_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
    ) -> *mut pjsip_cid_hdr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_clen_hdr {
    pub prev: *mut pjsip_clen_hdr,
    pub next: *mut pjsip_clen_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pjsip_clen_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_clen_hdr>(),
        72usize,
        concat!("Size of: ", stringify!(pjsip_clen_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_clen_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_clen_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_clen_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_clen_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_clen_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_clen_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_clen_hdr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_clen_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_clen_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_clen_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_clen_hdr>())).sname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_clen_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_clen_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_clen_hdr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_clen_hdr>())).len as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_clen_hdr),
            "::",
            stringify!(len)
        )
    );
}
extern "C" {
    pub fn pjsip_clen_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_clen_hdr;
}
extern "C" {
    pub fn pjsip_clen_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
    ) -> *mut pjsip_clen_hdr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_cseq_hdr {
    pub prev: *mut pjsip_cseq_hdr,
    pub next: *mut pjsip_cseq_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub cseq: pj_int32_t,
    pub method: pjsip_method,
}
#[test]
fn bindgen_test_layout_pjsip_cseq_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_cseq_hdr>(),
        96usize,
        concat!("Size of: ", stringify!(pjsip_cseq_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_cseq_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_cseq_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cseq_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cseq_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cseq_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cseq_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cseq_hdr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cseq_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cseq_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cseq_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cseq_hdr>())).sname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cseq_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cseq_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cseq_hdr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cseq_hdr>())).cseq as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cseq_hdr),
            "::",
            stringify!(cseq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cseq_hdr>())).method as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cseq_hdr),
            "::",
            stringify!(method)
        )
    );
}
extern "C" {
    pub fn pjsip_cseq_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_cseq_hdr;
}
extern "C" {
    pub fn pjsip_cseq_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
    ) -> *mut pjsip_cseq_hdr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_contact_hdr {
    pub prev: *mut pjsip_contact_hdr,
    pub next: *mut pjsip_contact_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub star: ::std::os::raw::c_int,
    pub uri: *mut pjsip_uri,
    pub q1000: ::std::os::raw::c_int,
    pub expires: pj_uint32_t,
    pub other_param: pjsip_param,
}
#[test]
fn bindgen_test_layout_pjsip_contact_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_contact_hdr>(),
        136usize,
        concat!("Size of: ", stringify!(pjsip_contact_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_contact_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_contact_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_contact_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_contact_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_contact_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_contact_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_contact_hdr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_contact_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_contact_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_contact_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_contact_hdr>())).sname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_contact_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_contact_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_contact_hdr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_contact_hdr>())).star as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_contact_hdr),
            "::",
            stringify!(star)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_contact_hdr>())).uri as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_contact_hdr),
            "::",
            stringify!(uri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_contact_hdr>())).q1000 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_contact_hdr),
            "::",
            stringify!(q1000)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_contact_hdr>())).expires as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_contact_hdr),
            "::",
            stringify!(expires)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_contact_hdr>())).other_param as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_contact_hdr),
            "::",
            stringify!(other_param)
        )
    );
}
extern "C" {
    pub fn pjsip_contact_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_contact_hdr;
}
extern "C" {
    pub fn pjsip_contact_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
    ) -> *mut pjsip_contact_hdr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_ctype_hdr {
    pub prev: *mut pjsip_ctype_hdr,
    pub next: *mut pjsip_ctype_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub media: pjsip_media_type,
}
#[test]
fn bindgen_test_layout_pjsip_ctype_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_ctype_hdr>(),
        144usize,
        concat!("Size of: ", stringify!(pjsip_ctype_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_ctype_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_ctype_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_ctype_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_ctype_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_ctype_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_ctype_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_ctype_hdr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_ctype_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_ctype_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_ctype_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_ctype_hdr>())).sname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_ctype_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_ctype_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_ctype_hdr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_ctype_hdr>())).media as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_ctype_hdr),
            "::",
            stringify!(media)
        )
    );
}
extern "C" {
    pub fn pjsip_ctype_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_ctype_hdr;
}
extern "C" {
    pub fn pjsip_ctype_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
    ) -> *mut pjsip_ctype_hdr;
}
pub type pjsip_expires_hdr = pjsip_generic_int_hdr;
extern "C" {
    pub fn pjsip_expires_hdr_create(
        pool: *mut pj_pool_t,
        value: ::std::os::raw::c_uint,
    ) -> *mut pjsip_expires_hdr;
}
extern "C" {
    pub fn pjsip_expires_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
        value: ::std::os::raw::c_uint,
    ) -> *mut pjsip_expires_hdr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_fromto_hdr {
    pub prev: *mut pjsip_fromto_hdr,
    pub next: *mut pjsip_fromto_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub uri: *mut pjsip_uri,
    pub tag: pj_str_t,
    pub other_param: pjsip_param,
}
#[test]
fn bindgen_test_layout_pjsip_fromto_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_fromto_hdr>(),
        136usize,
        concat!("Size of: ", stringify!(pjsip_fromto_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_fromto_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_fromto_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_fromto_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_fromto_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_fromto_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_fromto_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_fromto_hdr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_fromto_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_fromto_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_fromto_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_fromto_hdr>())).sname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_fromto_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_fromto_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_fromto_hdr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_fromto_hdr>())).uri as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_fromto_hdr),
            "::",
            stringify!(uri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_fromto_hdr>())).tag as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_fromto_hdr),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_fromto_hdr>())).other_param as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_fromto_hdr),
            "::",
            stringify!(other_param)
        )
    );
}
pub type pjsip_from_hdr = pjsip_fromto_hdr;
pub type pjsip_to_hdr = pjsip_fromto_hdr;
extern "C" {
    pub fn pjsip_from_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_from_hdr;
}
extern "C" {
    pub fn pjsip_from_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
    ) -> *mut pjsip_from_hdr;
}
extern "C" {
    pub fn pjsip_to_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_to_hdr;
}
extern "C" {
    pub fn pjsip_to_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
    ) -> *mut pjsip_to_hdr;
}
extern "C" {
    pub fn pjsip_fromto_hdr_set_from(hdr: *mut pjsip_fromto_hdr) -> *mut pjsip_from_hdr;
}
extern "C" {
    pub fn pjsip_fromto_hdr_set_to(hdr: *mut pjsip_fromto_hdr) -> *mut pjsip_to_hdr;
}
pub type pjsip_max_fwd_hdr = pjsip_generic_int_hdr;
extern "C" {
    pub fn pjsip_max_fwd_hdr_create(
        pool: *mut pj_pool_t,
        value: ::std::os::raw::c_uint,
    ) -> *mut pjsip_max_fwd_hdr;
}
extern "C" {
    pub fn pjsip_max_fwd_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
        value: ::std::os::raw::c_uint,
    ) -> *mut pjsip_max_fwd_hdr;
}
pub type pjsip_min_expires_hdr = pjsip_generic_int_hdr;
extern "C" {
    pub fn pjsip_min_expires_hdr_create(
        pool: *mut pj_pool_t,
        value: ::std::os::raw::c_uint,
    ) -> *mut pjsip_min_expires_hdr;
}
extern "C" {
    pub fn pjsip_min_expires_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
        value: ::std::os::raw::c_uint,
    ) -> *mut pjsip_min_expires_hdr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_routing_hdr {
    pub prev: *mut pjsip_routing_hdr,
    pub next: *mut pjsip_routing_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub name_addr: pjsip_name_addr,
    pub other_param: pjsip_param,
}
#[test]
fn bindgen_test_layout_pjsip_routing_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_routing_hdr>(),
        144usize,
        concat!("Size of: ", stringify!(pjsip_routing_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_routing_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_routing_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_routing_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_routing_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_routing_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_routing_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_routing_hdr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_routing_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_routing_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_routing_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_routing_hdr>())).sname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_routing_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_routing_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_routing_hdr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_routing_hdr>())).name_addr as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_routing_hdr),
            "::",
            stringify!(name_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_routing_hdr>())).other_param as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_routing_hdr),
            "::",
            stringify!(other_param)
        )
    );
}
pub type pjsip_rr_hdr = pjsip_routing_hdr;
pub type pjsip_route_hdr = pjsip_routing_hdr;
extern "C" {
    pub fn pjsip_rr_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_rr_hdr;
}
extern "C" {
    pub fn pjsip_rr_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
    ) -> *mut pjsip_rr_hdr;
}
extern "C" {
    pub fn pjsip_route_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_route_hdr;
}
extern "C" {
    pub fn pjsip_route_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
    ) -> *mut pjsip_route_hdr;
}
extern "C" {
    pub fn pjsip_routing_hdr_set_rr(r: *mut pjsip_routing_hdr) -> *mut pjsip_rr_hdr;
}
extern "C" {
    pub fn pjsip_routing_hdr_set_route(r: *mut pjsip_routing_hdr) -> *mut pjsip_route_hdr;
}
pub type pjsip_require_hdr = pjsip_generic_array_hdr;
extern "C" {
    pub fn pjsip_require_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_require_hdr;
}
extern "C" {
    pub fn pjsip_require_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
    ) -> *mut pjsip_require_hdr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_retry_after_hdr {
    pub prev: *mut pjsip_retry_after_hdr,
    pub next: *mut pjsip_retry_after_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub ivalue: pj_int32_t,
    pub param: pjsip_param,
    pub comment: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjsip_retry_after_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_retry_after_hdr>(),
        136usize,
        concat!("Size of: ", stringify!(pjsip_retry_after_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_retry_after_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_retry_after_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_retry_after_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_retry_after_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_retry_after_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_retry_after_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_retry_after_hdr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_retry_after_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_retry_after_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_retry_after_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_retry_after_hdr>())).sname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_retry_after_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_retry_after_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_retry_after_hdr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_retry_after_hdr>())).ivalue as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_retry_after_hdr),
            "::",
            stringify!(ivalue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_retry_after_hdr>())).param as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_retry_after_hdr),
            "::",
            stringify!(param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_retry_after_hdr>())).comment as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_retry_after_hdr),
            "::",
            stringify!(comment)
        )
    );
}
extern "C" {
    pub fn pjsip_retry_after_hdr_create(
        pool: *mut pj_pool_t,
        value: ::std::os::raw::c_int,
    ) -> *mut pjsip_retry_after_hdr;
}
extern "C" {
    pub fn pjsip_retry_after_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
        value: ::std::os::raw::c_int,
    ) -> *mut pjsip_retry_after_hdr;
}
pub type pjsip_supported_hdr = pjsip_generic_array_hdr;
extern "C" {
    pub fn pjsip_supported_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_supported_hdr;
}
extern "C" {
    pub fn pjsip_supported_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
    ) -> *mut pjsip_supported_hdr;
}
pub type pjsip_unsupported_hdr = pjsip_generic_array_hdr;
extern "C" {
    pub fn pjsip_unsupported_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_unsupported_hdr;
}
extern "C" {
    pub fn pjsip_unsupported_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
    ) -> *mut pjsip_unsupported_hdr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_via_hdr {
    pub prev: *mut pjsip_via_hdr,
    pub next: *mut pjsip_via_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub transport: pj_str_t,
    pub sent_by: pjsip_host_port,
    pub ttl_param: ::std::os::raw::c_int,
    pub rport_param: ::std::os::raw::c_int,
    pub maddr_param: pj_str_t,
    pub recvd_param: pj_str_t,
    pub branch_param: pj_str_t,
    pub other_param: pjsip_param,
    pub comment: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjsip_via_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_via_hdr>(),
        224usize,
        concat!("Size of: ", stringify!(pjsip_via_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_via_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_via_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_via_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_via_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_via_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_via_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_via_hdr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_via_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_via_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_via_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_via_hdr>())).sname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_via_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_via_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_via_hdr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_via_hdr>())).transport as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_via_hdr),
            "::",
            stringify!(transport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_via_hdr>())).sent_by as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_via_hdr),
            "::",
            stringify!(sent_by)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_via_hdr>())).ttl_param as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_via_hdr),
            "::",
            stringify!(ttl_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_via_hdr>())).rport_param as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_via_hdr),
            "::",
            stringify!(rport_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_via_hdr>())).maddr_param as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_via_hdr),
            "::",
            stringify!(maddr_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_via_hdr>())).recvd_param as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_via_hdr),
            "::",
            stringify!(recvd_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_via_hdr>())).branch_param as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_via_hdr),
            "::",
            stringify!(branch_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_via_hdr>())).other_param as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_via_hdr),
            "::",
            stringify!(other_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_via_hdr>())).comment as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_via_hdr),
            "::",
            stringify!(comment)
        )
    );
}
extern "C" {
    pub fn pjsip_via_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_via_hdr;
}
extern "C" {
    pub fn pjsip_via_hdr_init(
        pool: *mut pj_pool_t,
        mem: *mut ::std::os::raw::c_void,
    ) -> *mut pjsip_via_hdr;
}
pub type pjsip_warning_hdr = pjsip_generic_string_hdr;
extern "C" {
    pub fn pjsip_warning_hdr_create(
        pool: *mut pj_pool_t,
        code: ::std::os::raw::c_int,
        host: *const pj_str_t,
        text: *const pj_str_t,
    ) -> *mut pjsip_warning_hdr;
}
extern "C" {
    pub fn pjsip_warning_hdr_create_from_status(
        pool: *mut pj_pool_t,
        host: *const pj_str_t,
        status: pj_status_t,
    ) -> *mut pjsip_warning_hdr;
}
pub type pjsip_accept_encoding_hdr = pjsip_generic_string_hdr;
pub type pjsip_accept_lang_hdr = pjsip_generic_string_hdr;
pub type pjsip_alert_info_hdr = pjsip_generic_string_hdr;
pub type pjsip_auth_info_hdr = pjsip_generic_string_hdr;
pub type pjsip_call_info_hdr = pjsip_generic_string_hdr;
pub type pjsip_content_disposition_hdr = pjsip_generic_string_hdr;
pub type pjsip_content_encoding_hdr = pjsip_generic_string_hdr;
pub type pjsip_content_lang_hdr = pjsip_generic_string_hdr;
pub type pjsip_date_hdr = pjsip_generic_string_hdr;
pub type pjsip_err_info_hdr = pjsip_generic_string_hdr;
pub type pjsip_in_reply_to_hdr = pjsip_generic_string_hdr;
pub type pjsip_mime_version_hdr = pjsip_generic_string_hdr;
pub type pjsip_organization_hdr = pjsip_generic_string_hdr;
pub type pjsip_priority_hdr = pjsip_generic_string_hdr;
pub type pjsip_proxy_require_hdr = pjsip_generic_string_hdr;
pub type pjsip_reply_to_hdr = pjsip_generic_string_hdr;
pub type pjsip_server_hdr = pjsip_generic_string_hdr;
pub type pjsip_subject_hdr = pjsip_generic_string_hdr;
pub type pjsip_timestamp_hdr = pjsip_generic_string_hdr;
pub type pjsip_user_agent_hdr = pjsip_generic_string_hdr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_multipart_part {
    pub prev: *mut pjsip_multipart_part,
    pub next: *mut pjsip_multipart_part,
    pub hdr: pjsip_hdr,
    pub body: *mut pjsip_msg_body,
}
#[test]
fn bindgen_test_layout_pjsip_multipart_part() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_multipart_part>(),
        88usize,
        concat!("Size of: ", stringify!(pjsip_multipart_part))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_multipart_part>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_multipart_part))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_multipart_part>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_multipart_part),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_multipart_part>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_multipart_part),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_multipart_part>())).hdr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_multipart_part),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_multipart_part>())).body as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_multipart_part),
            "::",
            stringify!(body)
        )
    );
}
extern "C" {
    pub fn pjsip_multipart_create(
        pool: *mut pj_pool_t,
        ctype: *const pjsip_media_type,
        boundary: *const pj_str_t,
    ) -> *mut pjsip_msg_body;
}
extern "C" {
    pub fn pjsip_multipart_create_part(pool: *mut pj_pool_t) -> *mut pjsip_multipart_part;
}
extern "C" {
    pub fn pjsip_multipart_clone_part(
        pool: *mut pj_pool_t,
        part: *const pjsip_multipart_part,
    ) -> *mut pjsip_multipart_part;
}
extern "C" {
    pub fn pjsip_multipart_add_part(
        pool: *mut pj_pool_t,
        mp: *mut pjsip_msg_body,
        part: *mut pjsip_multipart_part,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_multipart_get_first_part(mp: *const pjsip_msg_body) -> *mut pjsip_multipart_part;
}
extern "C" {
    pub fn pjsip_multipart_get_next_part(
        mp: *const pjsip_msg_body,
        part: *mut pjsip_multipart_part,
    ) -> *mut pjsip_multipart_part;
}
extern "C" {
    pub fn pjsip_multipart_find_part(
        mp: *const pjsip_msg_body,
        content_type: *const pjsip_media_type,
        start: *const pjsip_multipart_part,
    ) -> *mut pjsip_multipart_part;
}
extern "C" {
    pub fn pjsip_multipart_parse(
        pool: *mut pj_pool_t,
        buf: *mut ::std::os::raw::c_char,
        len: pj_size_t,
        ctype: *const pjsip_media_type,
        options: ::std::os::raw::c_uint,
    ) -> *mut pjsip_msg_body;
}
extern "C" {
    pub fn pjsip_multipart_get_raw(
        mp: *mut pjsip_msg_body,
        boundary: *mut pj_str_t,
        raw_data: *mut pj_str_t,
    ) -> pj_status_t;
}
pub const PJSIP_PARSE_URI_AS_NAMEADDR: ::std::os::raw::c_uint = 1;
pub const PJSIP_PARSE_URI_IN_FROM_TO_HDR: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub static mut PJSIP_SYN_ERR_EXCEPTION: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut PJSIP_EINVAL_ERR_EXCEPTION: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_parser_err_report {
    pub prev: *mut pjsip_parser_err_report,
    pub next: *mut pjsip_parser_err_report,
    pub except_code: ::std::os::raw::c_int,
    pub line: ::std::os::raw::c_int,
    pub col: ::std::os::raw::c_int,
    pub hname: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjsip_parser_err_report() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_parser_err_report>(),
        48usize,
        concat!("Size of: ", stringify!(pjsip_parser_err_report))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_parser_err_report>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_parser_err_report))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_parser_err_report>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_err_report),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_parser_err_report>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_err_report),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_err_report>())).except_code as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_err_report),
            "::",
            stringify!(except_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_parser_err_report>())).line as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_err_report),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_parser_err_report>())).col as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_err_report),
            "::",
            stringify!(col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_parser_err_report>())).hname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_err_report),
            "::",
            stringify!(hname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_parse_ctx {
    pub scanner: *mut pj_scanner,
    pub pool: *mut pj_pool_t,
    pub rdata: *mut pjsip_rx_data,
}
#[test]
fn bindgen_test_layout_pjsip_parse_ctx() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_parse_ctx>(),
        24usize,
        concat!("Size of: ", stringify!(pjsip_parse_ctx))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_parse_ctx>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_parse_ctx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_parse_ctx>())).scanner as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parse_ctx),
            "::",
            stringify!(scanner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_parse_ctx>())).pool as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parse_ctx),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_parse_ctx>())).rdata as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parse_ctx),
            "::",
            stringify!(rdata)
        )
    );
}
pub type pjsip_parse_hdr_func =
    ::std::option::Option<unsafe extern "C" fn(context: *mut pjsip_parse_ctx) -> *mut pjsip_hdr>;
pub type pjsip_parse_uri_func = ::std::option::Option<
    unsafe extern "C" fn(
        scanner: *mut pj_scanner,
        pool: *mut pj_pool_t,
        parse_params: pj_bool_t,
    ) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub fn pjsip_register_hdr_parser(
        hname: *const ::std::os::raw::c_char,
        hshortname: *const ::std::os::raw::c_char,
        fptr: pjsip_parse_hdr_func,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_unregister_hdr_parser(
        hname: *const ::std::os::raw::c_char,
        hshortname: *const ::std::os::raw::c_char,
        fptr: pjsip_parse_hdr_func,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_register_uri_parser(
        scheme: *mut ::std::os::raw::c_char,
        func: pjsip_parse_uri_func,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_unregister_uri_parser(
        scheme: *const ::std::os::raw::c_char,
        func: pjsip_parse_uri_func,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_parse_uri(
        pool: *mut pj_pool_t,
        buf: *mut ::std::os::raw::c_char,
        size: pj_size_t,
        options: ::std::os::raw::c_uint,
    ) -> *mut pjsip_uri;
}
extern "C" {
    pub fn pjsip_parse_status_line(
        buf: *mut ::std::os::raw::c_char,
        size: pj_size_t,
        status_line: *mut pjsip_status_line,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_parse_msg(
        pool: *mut pj_pool_t,
        buf: *mut ::std::os::raw::c_char,
        size: pj_size_t,
        err_list: *mut pjsip_parser_err_report,
    ) -> *mut pjsip_msg;
}
extern "C" {
    pub fn pjsip_parse_rdata(
        buf: *mut ::std::os::raw::c_char,
        size: pj_size_t,
        rdata: *mut pjsip_rx_data,
    ) -> *mut pjsip_msg;
}
extern "C" {
    pub fn pjsip_find_msg(
        buf: *const ::std::os::raw::c_char,
        size: pj_size_t,
        is_datagram: pj_bool_t,
        msg_size: *mut pj_size_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_parse_hdr(
        pool: *mut pj_pool_t,
        hname: *const pj_str_t,
        line: *mut ::std::os::raw::c_char,
        size: pj_size_t,
        parsed_len: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pjsip_parse_headers(
        pool: *mut pj_pool_t,
        input: *mut ::std::os::raw::c_char,
        size: pj_size_t,
        hlist: *mut pjsip_hdr,
        options: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_parser_const_t {
    pub pjsip_USER_STR: pj_str_t,
    pub pjsip_METHOD_STR: pj_str_t,
    pub pjsip_TRANSPORT_STR: pj_str_t,
    pub pjsip_MADDR_STR: pj_str_t,
    pub pjsip_LR_STR: pj_str_t,
    pub pjsip_SIP_STR: pj_str_t,
    pub pjsip_SIPS_STR: pj_str_t,
    pub pjsip_TEL_STR: pj_str_t,
    pub pjsip_BRANCH_STR: pj_str_t,
    pub pjsip_TTL_STR: pj_str_t,
    pub pjsip_RECEIVED_STR: pj_str_t,
    pub pjsip_Q_STR: pj_str_t,
    pub pjsip_EXPIRES_STR: pj_str_t,
    pub pjsip_TAG_STR: pj_str_t,
    pub pjsip_RPORT_STR: pj_str_t,
    pub pjsip_HOST_SPEC: pj_cis_t,
    pub pjsip_DIGIT_SPEC: pj_cis_t,
    pub pjsip_ALPHA_SPEC: pj_cis_t,
    pub pjsip_ALNUM_SPEC: pj_cis_t,
    pub pjsip_TOKEN_SPEC: pj_cis_t,
    pub pjsip_TOKEN_SPEC_ESC: pj_cis_t,
    pub pjsip_VIA_PARAM_SPEC: pj_cis_t,
    pub pjsip_VIA_PARAM_SPEC_ESC: pj_cis_t,
    pub pjsip_HEX_SPEC: pj_cis_t,
    pub pjsip_PARAM_CHAR_SPEC: pj_cis_t,
    pub pjsip_PARAM_CHAR_SPEC_ESC: pj_cis_t,
    pub pjsip_HDR_CHAR_SPEC: pj_cis_t,
    pub pjsip_HDR_CHAR_SPEC_ESC: pj_cis_t,
    pub pjsip_PROBE_USER_HOST_SPEC: pj_cis_t,
    pub pjsip_PASSWD_SPEC: pj_cis_t,
    pub pjsip_PASSWD_SPEC_ESC: pj_cis_t,
    pub pjsip_USER_SPEC: pj_cis_t,
    pub pjsip_USER_SPEC_ESC: pj_cis_t,
    pub pjsip_USER_SPEC_LENIENT: pj_cis_t,
    pub pjsip_USER_SPEC_LENIENT_ESC: pj_cis_t,
    pub pjsip_NOT_NEWLINE: pj_cis_t,
    pub pjsip_NOT_COMMA_OR_NEWLINE: pj_cis_t,
    pub pjsip_DISPLAY_SPEC: pj_cis_t,
    pub pjsip_OTHER_URI_CONTENT: pj_cis_t,
}
#[test]
fn bindgen_test_layout_pjsip_parser_const_t() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_parser_const_t>(),
        624usize,
        concat!("Size of: ", stringify!(pjsip_parser_const_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_parser_const_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_parser_const_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_USER_STR as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_USER_STR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_METHOD_STR as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_METHOD_STR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_TRANSPORT_STR as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_TRANSPORT_STR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_MADDR_STR as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_MADDR_STR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_LR_STR as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_LR_STR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_SIP_STR as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_SIP_STR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_SIPS_STR as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_SIPS_STR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_TEL_STR as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_TEL_STR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_BRANCH_STR as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_BRANCH_STR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_TTL_STR as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_TTL_STR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_RECEIVED_STR as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_RECEIVED_STR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_Q_STR as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_Q_STR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_EXPIRES_STR as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_EXPIRES_STR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_TAG_STR as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_TAG_STR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_RPORT_STR as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_RPORT_STR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_HOST_SPEC as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_HOST_SPEC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_DIGIT_SPEC as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_DIGIT_SPEC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_ALPHA_SPEC as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_ALPHA_SPEC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_ALNUM_SPEC as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_ALNUM_SPEC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_TOKEN_SPEC as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_TOKEN_SPEC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_TOKEN_SPEC_ESC as *const _
                as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_TOKEN_SPEC_ESC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_VIA_PARAM_SPEC as *const _
                as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_VIA_PARAM_SPEC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_VIA_PARAM_SPEC_ESC as *const _
                as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_VIA_PARAM_SPEC_ESC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_HEX_SPEC as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_HEX_SPEC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_PARAM_CHAR_SPEC as *const _
                as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_PARAM_CHAR_SPEC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_PARAM_CHAR_SPEC_ESC as *const _
                as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_PARAM_CHAR_SPEC_ESC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_HDR_CHAR_SPEC as *const _
                as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_HDR_CHAR_SPEC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_HDR_CHAR_SPEC_ESC as *const _
                as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_HDR_CHAR_SPEC_ESC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_PROBE_USER_HOST_SPEC as *const _
                as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_PROBE_USER_HOST_SPEC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_PASSWD_SPEC as *const _ as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_PASSWD_SPEC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_PASSWD_SPEC_ESC as *const _
                as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_PASSWD_SPEC_ESC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_USER_SPEC as *const _ as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_USER_SPEC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_USER_SPEC_ESC as *const _
                as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_USER_SPEC_ESC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_USER_SPEC_LENIENT as *const _
                as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_USER_SPEC_LENIENT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_USER_SPEC_LENIENT_ESC as *const _
                as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_USER_SPEC_LENIENT_ESC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_NOT_NEWLINE as *const _ as usize
        },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_NOT_NEWLINE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_NOT_COMMA_OR_NEWLINE as *const _
                as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_NOT_COMMA_OR_NEWLINE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_DISPLAY_SPEC as *const _ as usize
        },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_DISPLAY_SPEC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_parser_const_t>())).pjsip_OTHER_URI_CONTENT as *const _
                as usize
        },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_parser_const_t),
            "::",
            stringify!(pjsip_OTHER_URI_CONTENT)
        )
    );
}
extern "C" {
    pub fn pjsip_parser_const() -> *const pjsip_parser_const_t;
}
pub const PJSIP_PARSE_REMOVE_QUOTE: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pjsip_parse_param_imp(
        scanner: *mut pj_scanner,
        pool: *mut pj_pool_t,
        pname: *mut pj_str_t,
        pvalue: *mut pj_str_t,
        opt: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn pjsip_parse_uri_param_imp(
        scanner: *mut pj_scanner,
        pool: *mut pj_pool_t,
        pname: *mut pj_str_t,
        pvalue: *mut pj_str_t,
        opt: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn pjsip_concat_param_imp(
        param: *mut pj_str_t,
        pool: *mut pj_pool_t,
        pname: *const pj_str_t,
        pvalue: *const pj_str_t,
        sepchar: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pjsip_parse_end_hdr_imp(scanner: *mut pj_scanner);
}
extern "C" {
    pub fn pjsip_parse_generic_array_hdr_imp(
        hdr: *mut pjsip_generic_array_hdr,
        scanner: *mut pj_scanner,
    );
}
extern "C" {
    pub fn pj_lock_create_simple_mutex(
        pool: *mut pj_pool_t,
        name: *const ::std::os::raw::c_char,
        lock: *mut *mut pj_lock_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_lock_create_recursive_mutex(
        pool: *mut pj_pool_t,
        name: *const ::std::os::raw::c_char,
        lock: *mut *mut pj_lock_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_lock_create_null_mutex(
        pool: *mut pj_pool_t,
        name: *const ::std::os::raw::c_char,
        lock: *mut *mut pj_lock_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_lock_create_semaphore(
        pool: *mut pj_pool_t,
        name: *const ::std::os::raw::c_char,
        initial: ::std::os::raw::c_uint,
        max: ::std::os::raw::c_uint,
        lock: *mut *mut pj_lock_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_lock_acquire(lock: *mut pj_lock_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_lock_tryacquire(lock: *mut pj_lock_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_lock_release(lock: *mut pj_lock_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_lock_destroy(lock: *mut pj_lock_t) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_grp_lock_config {
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pj_grp_lock_config() {
    assert_eq!(
        ::std::mem::size_of::<pj_grp_lock_config>(),
        4usize,
        concat!("Size of: ", stringify!(pj_grp_lock_config))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_grp_lock_config>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_grp_lock_config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_grp_lock_config>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_grp_lock_config),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn pj_grp_lock_config_default(cfg: *mut pj_grp_lock_config);
}
extern "C" {
    pub fn pj_grp_lock_create(
        pool: *mut pj_pool_t,
        cfg: *const pj_grp_lock_config,
        p_grp_lock: *mut *mut pj_grp_lock_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_grp_lock_create_w_handler(
        pool: *mut pj_pool_t,
        cfg: *const pj_grp_lock_config,
        member: *mut ::std::os::raw::c_void,
        handler: ::std::option::Option<unsafe extern "C" fn(member: *mut ::std::os::raw::c_void)>,
        p_grp_lock: *mut *mut pj_grp_lock_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_grp_lock_destroy(grp_lock: *mut pj_grp_lock_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_grp_lock_replace(
        old_lock: *mut pj_grp_lock_t,
        new_lock: *mut pj_grp_lock_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_grp_lock_acquire(grp_lock: *mut pj_grp_lock_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_grp_lock_tryacquire(grp_lock: *mut pj_grp_lock_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_grp_lock_release(grp_lock: *mut pj_grp_lock_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_grp_lock_add_handler(
        grp_lock: *mut pj_grp_lock_t,
        pool: *mut pj_pool_t,
        member: *mut ::std::os::raw::c_void,
        handler: ::std::option::Option<unsafe extern "C" fn(member: *mut ::std::os::raw::c_void)>,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_grp_lock_del_handler(
        grp_lock: *mut pj_grp_lock_t,
        member: *mut ::std::os::raw::c_void,
        handler: ::std::option::Option<unsafe extern "C" fn(member: *mut ::std::os::raw::c_void)>,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_grp_lock_add_ref(grp_lock: *mut pj_grp_lock_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_grp_lock_dec_ref(grp_lock: *mut pj_grp_lock_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_grp_lock_get_ref(grp_lock: *mut pj_grp_lock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_grp_lock_dump(grp_lock: *mut pj_grp_lock_t);
}
extern "C" {
    pub fn pj_grp_lock_chain_lock(
        grp_lock: *mut pj_grp_lock_t,
        ext_lock: *mut pj_lock_t,
        pos: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_grp_lock_unchain_lock(
        grp_lock: *mut pj_grp_lock_t,
        ext_lock: *mut pj_lock_t,
    ) -> pj_status_t;
}
pub type pj_timer_id_t = ::std::os::raw::c_int;
pub type pj_timer_heap_callback = ::std::option::Option<
    unsafe extern "C" fn(timer_heap: *mut pj_timer_heap_t, entry: *mut pj_timer_entry),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_timer_entry {
    pub user_data: *mut ::std::os::raw::c_void,
    pub id: ::std::os::raw::c_int,
    pub cb: pj_timer_heap_callback,
    pub _timer_id: pj_timer_id_t,
}
#[test]
fn bindgen_test_layout_pj_timer_entry() {
    assert_eq!(
        ::std::mem::size_of::<pj_timer_entry>(),
        32usize,
        concat!("Size of: ", stringify!(pj_timer_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_timer_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_timer_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_timer_entry>())).user_data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_timer_entry),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_timer_entry>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_timer_entry),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_timer_entry>())).cb as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_timer_entry),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_timer_entry>()))._timer_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_timer_entry),
            "::",
            stringify!(_timer_id)
        )
    );
}
extern "C" {
    pub fn pj_timer_heap_mem_size(count: pj_size_t) -> pj_size_t;
}
extern "C" {
    pub fn pj_timer_heap_create(
        pool: *mut pj_pool_t,
        count: pj_size_t,
        ht: *mut *mut pj_timer_heap_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_timer_heap_destroy(ht: *mut pj_timer_heap_t);
}
extern "C" {
    pub fn pj_timer_heap_set_lock(
        ht: *mut pj_timer_heap_t,
        lock: *mut pj_lock_t,
        auto_del: pj_bool_t,
    );
}
extern "C" {
    pub fn pj_timer_heap_set_max_timed_out_per_poll(
        ht: *mut pj_timer_heap_t,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pj_timer_entry_init(
        entry: *mut pj_timer_entry,
        id: ::std::os::raw::c_int,
        user_data: *mut ::std::os::raw::c_void,
        cb: pj_timer_heap_callback,
    ) -> *mut pj_timer_entry;
}
extern "C" {
    pub fn pj_timer_entry_running(entry: *mut pj_timer_entry) -> pj_bool_t;
}
extern "C" {
    pub fn pj_timer_heap_schedule_dbg(
        ht: *mut pj_timer_heap_t,
        entry: *mut pj_timer_entry,
        delay: *const pj_time_val,
        src_file: *const ::std::os::raw::c_char,
        src_line: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_timer_heap_schedule_w_grp_lock_dbg(
        ht: *mut pj_timer_heap_t,
        entry: *mut pj_timer_entry,
        delay: *const pj_time_val,
        id_val: ::std::os::raw::c_int,
        grp_lock: *mut pj_grp_lock_t,
        src_file: *const ::std::os::raw::c_char,
        src_line: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_timer_heap_cancel(
        ht: *mut pj_timer_heap_t,
        entry: *mut pj_timer_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_timer_heap_cancel_if_active(
        ht: *mut pj_timer_heap_t,
        entry: *mut pj_timer_entry,
        id_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_timer_heap_count(ht: *mut pj_timer_heap_t) -> pj_size_t;
}
extern "C" {
    pub fn pj_timer_heap_earliest_time(
        ht: *mut pj_timer_heap_t,
        timeval: *mut pj_time_val,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_timer_heap_poll(
        ht: *mut pj_timer_heap_t,
        next_delay: *mut pj_time_val,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pj_timer_heap_dump(ht: *mut pj_timer_heap_t);
}
pub const pjsip_event_id_e_PJSIP_EVENT_UNKNOWN: pjsip_event_id_e = 0;
pub const pjsip_event_id_e_PJSIP_EVENT_TIMER: pjsip_event_id_e = 1;
pub const pjsip_event_id_e_PJSIP_EVENT_TX_MSG: pjsip_event_id_e = 2;
pub const pjsip_event_id_e_PJSIP_EVENT_RX_MSG: pjsip_event_id_e = 3;
pub const pjsip_event_id_e_PJSIP_EVENT_TRANSPORT_ERROR: pjsip_event_id_e = 4;
pub const pjsip_event_id_e_PJSIP_EVENT_TSX_STATE: pjsip_event_id_e = 5;
pub const pjsip_event_id_e_PJSIP_EVENT_USER: pjsip_event_id_e = 6;
pub type pjsip_event_id_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_event {
    pub prev: *mut pjsip_event,
    pub next: *mut pjsip_event,
    pub type_: pjsip_event_id_e,
    pub body: pjsip_event__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjsip_event__bindgen_ty_1 {
    pub timer: pjsip_event__bindgen_ty_1__bindgen_ty_1,
    pub tsx_state: pjsip_event__bindgen_ty_1__bindgen_ty_2,
    pub tx_msg: pjsip_event__bindgen_ty_1__bindgen_ty_3,
    pub tx_error: pjsip_event__bindgen_ty_1__bindgen_ty_4,
    pub rx_msg: pjsip_event__bindgen_ty_1__bindgen_ty_5,
    pub user: pjsip_event__bindgen_ty_1__bindgen_ty_6,
    _bindgen_union_align: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_event__bindgen_ty_1__bindgen_ty_1 {
    pub entry: *mut pj_timer_entry,
}
#[test]
fn bindgen_test_layout_pjsip_event__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_event__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_event__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1__bindgen_ty_1>())).entry as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_event__bindgen_ty_1__bindgen_ty_2 {
    pub src: pjsip_event__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub tsx: *mut pjsip_transaction,
    pub prev_state: ::std::os::raw::c_int,
    pub type_: pjsip_event_id_e,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjsip_event__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub rdata: *mut pjsip_rx_data,
    pub tdata: *mut pjsip_tx_data,
    pub timer: *mut pj_timer_entry,
    pub status: pj_status_t,
    pub data: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pjsip_event__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_event__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_event__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>())).rdata
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(rdata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>())).tdata
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(tdata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>())).timer
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(timer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>())).status
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>())).data
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
}
#[test]
fn bindgen_test_layout_pjsip_event__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_event__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_event__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1__bindgen_ty_2>())).src as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1__bindgen_ty_2>())).tsx as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(tsx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1__bindgen_ty_2>())).prev_state
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(prev_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1__bindgen_ty_2>())).type_ as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_event__bindgen_ty_1__bindgen_ty_3 {
    pub tdata: *mut pjsip_tx_data,
}
#[test]
fn bindgen_test_layout_pjsip_event__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_event__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_event__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1__bindgen_ty_3>())).tdata as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(tdata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_event__bindgen_ty_1__bindgen_ty_4 {
    pub tdata: *mut pjsip_tx_data,
    pub tsx: *mut pjsip_transaction,
}
#[test]
fn bindgen_test_layout_pjsip_event__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_event__bindgen_ty_1__bindgen_ty_4>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_event__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1__bindgen_ty_4>())).tdata as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(tdata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1__bindgen_ty_4>())).tsx as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(tsx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_event__bindgen_ty_1__bindgen_ty_5 {
    pub rdata: *mut pjsip_rx_data,
}
#[test]
fn bindgen_test_layout_pjsip_event__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_event__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_event__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1__bindgen_ty_5>())).rdata as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(rdata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_event__bindgen_ty_1__bindgen_ty_6 {
    pub user1: *mut ::std::os::raw::c_void,
    pub user2: *mut ::std::os::raw::c_void,
    pub user3: *mut ::std::os::raw::c_void,
    pub user4: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pjsip_event__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_event__bindgen_ty_1__bindgen_ty_6>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_event__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1__bindgen_ty_6>())).user1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(user1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1__bindgen_ty_6>())).user2 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(user2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1__bindgen_ty_6>())).user3 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(user3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1__bindgen_ty_6>())).user4 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(user4)
        )
    );
}
#[test]
fn bindgen_test_layout_pjsip_event__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_event__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(pjsip_event__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_event__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_event__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1>())).timer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1),
            "::",
            stringify!(timer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1>())).tsx_state as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1),
            "::",
            stringify!(tsx_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1>())).tx_msg as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1),
            "::",
            stringify!(tx_msg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1>())).tx_error as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1),
            "::",
            stringify!(tx_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1>())).rx_msg as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1),
            "::",
            stringify!(rx_msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_event__bindgen_ty_1>())).user as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event__bindgen_ty_1),
            "::",
            stringify!(user)
        )
    );
}
#[test]
fn bindgen_test_layout_pjsip_event() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_event>(),
        56usize,
        concat!("Size of: ", stringify!(pjsip_event))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_event>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_event>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_event>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_event>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_event>())).body as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event),
            "::",
            stringify!(body)
        )
    );
}
extern "C" {
    pub fn pjsip_event_str(e: pjsip_event_id_e) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_module {
    pub prev: *mut pjsip_module,
    pub next: *mut pjsip_module,
    pub name: pj_str_t,
    pub id: ::std::os::raw::c_int,
    pub priority: ::std::os::raw::c_int,
    pub load:
        ::std::option::Option<unsafe extern "C" fn(endpt: *mut pjsip_endpoint) -> pj_status_t>,
    pub start: ::std::option::Option<unsafe extern "C" fn() -> pj_status_t>,
    pub stop: ::std::option::Option<unsafe extern "C" fn() -> pj_status_t>,
    pub unload: ::std::option::Option<unsafe extern "C" fn() -> pj_status_t>,
    pub on_rx_request:
        ::std::option::Option<unsafe extern "C" fn(rdata: *mut pjsip_rx_data) -> pj_bool_t>,
    pub on_rx_response:
        ::std::option::Option<unsafe extern "C" fn(rdata: *mut pjsip_rx_data) -> pj_bool_t>,
    pub on_tx_request:
        ::std::option::Option<unsafe extern "C" fn(tdata: *mut pjsip_tx_data) -> pj_status_t>,
    pub on_tx_response:
        ::std::option::Option<unsafe extern "C" fn(tdata: *mut pjsip_tx_data) -> pj_status_t>,
    pub on_tsx_state: ::std::option::Option<
        unsafe extern "C" fn(tsx: *mut pjsip_transaction, event: *mut pjsip_event),
    >,
}
#[test]
fn bindgen_test_layout_pjsip_module() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_module>(),
        112usize,
        concat!("Size of: ", stringify!(pjsip_module))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_module>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_module))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_module>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_module),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_module>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_module),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_module>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_module),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_module>())).id as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_module),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_module>())).priority as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_module),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_module>())).load as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_module),
            "::",
            stringify!(load)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_module>())).start as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_module),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_module>())).stop as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_module),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_module>())).unload as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_module),
            "::",
            stringify!(unload)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_module>())).on_rx_request as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_module),
            "::",
            stringify!(on_rx_request)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_module>())).on_rx_response as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_module),
            "::",
            stringify!(on_rx_response)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_module>())).on_tx_request as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_module),
            "::",
            stringify!(on_tx_request)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_module>())).on_tx_response as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_module),
            "::",
            stringify!(on_tx_response)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_module>())).on_tsx_state as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_module),
            "::",
            stringify!(on_tsx_state)
        )
    );
}
pub const pjsip_module_priority_PJSIP_MOD_PRIORITY_TRANSPORT_LAYER: pjsip_module_priority = 8;
pub const pjsip_module_priority_PJSIP_MOD_PRIORITY_TSX_LAYER: pjsip_module_priority = 16;
pub const pjsip_module_priority_PJSIP_MOD_PRIORITY_UA_PROXY_LAYER: pjsip_module_priority = 32;
pub const pjsip_module_priority_PJSIP_MOD_PRIORITY_DIALOG_USAGE: pjsip_module_priority = 48;
pub const pjsip_module_priority_PJSIP_MOD_PRIORITY_APPLICATION: pjsip_module_priority = 64;
pub type pjsip_module_priority = ::std::os::raw::c_uint;
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
#[test]
fn bindgen_test_layout_in6_addr() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in6_addr>())).__in6_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__in6_u)
        )
    );
}
extern "C" {
    pub static PJ_AF_UNSPEC: pj_uint16_t;
}
extern "C" {
    pub static PJ_AF_UNIX: pj_uint16_t;
}
extern "C" {
    pub static PJ_AF_INET: pj_uint16_t;
}
extern "C" {
    pub static PJ_AF_INET6: pj_uint16_t;
}
extern "C" {
    pub static PJ_AF_PACKET: pj_uint16_t;
}
extern "C" {
    pub static PJ_AF_IRDA: pj_uint16_t;
}
extern "C" {
    pub static PJ_SOCK_STREAM: pj_uint16_t;
}
extern "C" {
    pub static PJ_SOCK_DGRAM: pj_uint16_t;
}
extern "C" {
    pub static PJ_SOCK_RAW: pj_uint16_t;
}
extern "C" {
    pub static PJ_SOCK_RDM: pj_uint16_t;
}
extern "C" {
    pub static PJ_SOL_SOCKET: pj_uint16_t;
}
extern "C" {
    pub static PJ_SOL_IP: pj_uint16_t;
}
extern "C" {
    pub static PJ_SOL_TCP: pj_uint16_t;
}
extern "C" {
    pub static PJ_SOL_UDP: pj_uint16_t;
}
extern "C" {
    pub static PJ_SOL_IPV6: pj_uint16_t;
}
extern "C" {
    pub static PJ_IP_TOS: pj_uint16_t;
}
extern "C" {
    pub static PJ_IPTOS_LOWDELAY: pj_uint16_t;
}
extern "C" {
    pub static PJ_IPTOS_THROUGHPUT: pj_uint16_t;
}
extern "C" {
    pub static PJ_IPTOS_RELIABILITY: pj_uint16_t;
}
extern "C" {
    pub static PJ_IPTOS_MINCOST: pj_uint16_t;
}
extern "C" {
    pub static PJ_IPV6_TCLASS: pj_uint16_t;
}
extern "C" {
    pub static PJ_SO_TYPE: pj_uint16_t;
}
extern "C" {
    pub static PJ_SO_RCVBUF: pj_uint16_t;
}
extern "C" {
    pub static PJ_SO_SNDBUF: pj_uint16_t;
}
extern "C" {
    pub static PJ_TCP_NODELAY: pj_uint16_t;
}
extern "C" {
    pub static PJ_SO_REUSEADDR: pj_uint16_t;
}
extern "C" {
    pub static PJ_SO_NOSIGPIPE: pj_uint16_t;
}
extern "C" {
    pub static PJ_SO_PRIORITY: pj_uint16_t;
}
extern "C" {
    pub static PJ_IP_MULTICAST_IF: pj_uint16_t;
}
extern "C" {
    pub static PJ_IP_MULTICAST_TTL: pj_uint16_t;
}
extern "C" {
    pub static PJ_IP_MULTICAST_LOOP: pj_uint16_t;
}
extern "C" {
    pub static PJ_IP_ADD_MEMBERSHIP: pj_uint16_t;
}
extern "C" {
    pub static PJ_IP_DROP_MEMBERSHIP: pj_uint16_t;
}
extern "C" {
    pub static PJ_MSG_OOB: ::std::os::raw::c_int;
}
extern "C" {
    pub static PJ_MSG_PEEK: ::std::os::raw::c_int;
}
extern "C" {
    pub static PJ_MSG_DONTROUTE: ::std::os::raw::c_int;
}
pub const pj_socket_sd_type_PJ_SD_RECEIVE: pj_socket_sd_type = 0;
pub const pj_socket_sd_type_PJ_SHUT_RD: pj_socket_sd_type = 0;
pub const pj_socket_sd_type_PJ_SD_SEND: pj_socket_sd_type = 1;
pub const pj_socket_sd_type_PJ_SHUT_WR: pj_socket_sd_type = 1;
pub const pj_socket_sd_type_PJ_SD_BOTH: pj_socket_sd_type = 2;
pub const pj_socket_sd_type_PJ_SHUT_RDWR: pj_socket_sd_type = 2;
pub type pj_socket_sd_type = ::std::os::raw::c_uint;
pub type pj_in_addr = in_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_sockaddr_in {
    pub sin_family: pj_uint16_t,
    pub sin_port: pj_uint16_t,
    pub sin_addr: pj_in_addr,
    pub sin_zero_pad: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_pj_sockaddr_in() {
    assert_eq!(
        ::std::mem::size_of::<pj_sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(pj_sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_sockaddr_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sockaddr_in>())).sin_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sockaddr_in>())).sin_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sockaddr_in>())).sin_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sockaddr_in>())).sin_zero_pad as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sockaddr_in),
            "::",
            stringify!(sin_zero_pad)
        )
    );
}
pub type pj_in6_addr = in6_addr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_sockaddr_in6 {
    pub sin6_family: pj_uint16_t,
    pub sin6_port: pj_uint16_t,
    pub sin6_flowinfo: pj_uint32_t,
    pub sin6_addr: pj_in6_addr,
    pub sin6_scope_id: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pj_sockaddr_in6() {
    assert_eq!(
        ::std::mem::size_of::<pj_sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(pj_sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_sockaddr_in6))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sockaddr_in6>())).sin6_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sockaddr_in6>())).sin6_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sockaddr_in6>())).sin6_flowinfo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sockaddr_in6>())).sin6_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sockaddr_in6>())).sin6_scope_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_addr_hdr {
    pub sa_family: pj_uint16_t,
}
#[test]
fn bindgen_test_layout_pj_addr_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pj_addr_hdr>(),
        2usize,
        concat!("Size of: ", stringify!(pj_addr_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_addr_hdr>(),
        2usize,
        concat!("Alignment of ", stringify!(pj_addr_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_addr_hdr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_addr_hdr),
            "::",
            stringify!(sa_family)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pj_sockaddr {
    pub addr: pj_addr_hdr,
    pub ipv4: pj_sockaddr_in,
    pub ipv6: pj_sockaddr_in6,
    _bindgen_union_align: [u32; 7usize],
}
#[test]
fn bindgen_test_layout_pj_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<pj_sockaddr>(),
        28usize,
        concat!("Size of: ", stringify!(pj_sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_sockaddr>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sockaddr>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sockaddr),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sockaddr>())).ipv4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sockaddr),
            "::",
            stringify!(ipv4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sockaddr>())).ipv6 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sockaddr),
            "::",
            stringify!(ipv6)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ip_mreq {
    pub imr_multiaddr: pj_in_addr,
    pub imr_interface: pj_in_addr,
}
#[test]
fn bindgen_test_layout_pj_ip_mreq() {
    assert_eq!(
        ::std::mem::size_of::<pj_ip_mreq>(),
        8usize,
        concat!("Size of: ", stringify!(pj_ip_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ip_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_ip_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ip_mreq>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ip_mreq),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ip_mreq>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ip_mreq),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_sockopt_params {
    pub cnt: ::std::os::raw::c_uint,
    pub options: [pj_sockopt_params__bindgen_ty_1; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_sockopt_params__bindgen_ty_1 {
    pub level: ::std::os::raw::c_int,
    pub optname: ::std::os::raw::c_int,
    pub optval: *mut ::std::os::raw::c_void,
    pub optlen: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pj_sockopt_params__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pj_sockopt_params__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(pj_sockopt_params__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_sockopt_params__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_sockopt_params__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_sockopt_params__bindgen_ty_1>())).level as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sockopt_params__bindgen_ty_1),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_sockopt_params__bindgen_ty_1>())).optname as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sockopt_params__bindgen_ty_1),
            "::",
            stringify!(optname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_sockopt_params__bindgen_ty_1>())).optval as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sockopt_params__bindgen_ty_1),
            "::",
            stringify!(optval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_sockopt_params__bindgen_ty_1>())).optlen as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sockopt_params__bindgen_ty_1),
            "::",
            stringify!(optlen)
        )
    );
}
#[test]
fn bindgen_test_layout_pj_sockopt_params() {
    assert_eq!(
        ::std::mem::size_of::<pj_sockopt_params>(),
        104usize,
        concat!("Size of: ", stringify!(pj_sockopt_params))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_sockopt_params>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_sockopt_params))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sockopt_params>())).cnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sockopt_params),
            "::",
            stringify!(cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sockopt_params>())).options as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sockopt_params),
            "::",
            stringify!(options)
        )
    );
}
extern "C" {
    pub fn pj_ntohs(netshort: pj_uint16_t) -> pj_uint16_t;
}
extern "C" {
    pub fn pj_htons(hostshort: pj_uint16_t) -> pj_uint16_t;
}
extern "C" {
    pub fn pj_ntohl(netlong: pj_uint32_t) -> pj_uint32_t;
}
extern "C" {
    pub fn pj_htonl(hostlong: pj_uint32_t) -> pj_uint32_t;
}
extern "C" {
    pub fn pj_inet_ntoa(inaddr: pj_in_addr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_inet_aton(cp: *const pj_str_t, inp: *mut pj_in_addr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_inet_pton(
        af: ::std::os::raw::c_int,
        src: *const pj_str_t,
        dst: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_inet_ntop(
        af: ::std::os::raw::c_int,
        src: *const ::std::os::raw::c_void,
        dst: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_inet_ntop2(
        af: ::std::os::raw::c_int,
        src: *const ::std::os::raw::c_void,
        dst: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_sockaddr_print(
        addr: *const pj_sockaddr_t,
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_inet_addr(cp: *const pj_str_t) -> pj_in_addr;
}
extern "C" {
    pub fn pj_inet_addr2(cp: *const ::std::os::raw::c_char) -> pj_in_addr;
}
extern "C" {
    pub fn pj_sockaddr_in_init(
        addr: *mut pj_sockaddr_in,
        cp: *const pj_str_t,
        port: pj_uint16_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sockaddr_init(
        af: ::std::os::raw::c_int,
        addr: *mut pj_sockaddr,
        cp: *const pj_str_t,
        port: pj_uint16_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sockaddr_cmp(
        addr1: *const pj_sockaddr_t,
        addr2: *const pj_sockaddr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_sockaddr_get_addr(addr: *const pj_sockaddr_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pj_sockaddr_has_addr(addr: *const pj_sockaddr_t) -> pj_bool_t;
}
extern "C" {
    pub fn pj_sockaddr_get_addr_len(addr: *const pj_sockaddr_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pj_sockaddr_get_len(addr: *const pj_sockaddr_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pj_sockaddr_copy_addr(dst: *mut pj_sockaddr, src: *const pj_sockaddr);
}
extern "C" {
    pub fn pj_sockaddr_cp(dst: *mut pj_sockaddr_t, src: *const pj_sockaddr_t);
}
extern "C" {
    pub fn pj_sockaddr_synthesize(
        dst_af: ::std::os::raw::c_int,
        dst: *mut pj_sockaddr_t,
        src: *const pj_sockaddr_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sockaddr_in_get_addr(addr: *const pj_sockaddr_in) -> pj_in_addr;
}
extern "C" {
    pub fn pj_sockaddr_in_set_addr(addr: *mut pj_sockaddr_in, hostaddr: pj_uint32_t);
}
extern "C" {
    pub fn pj_sockaddr_in_set_str_addr(
        addr: *mut pj_sockaddr_in,
        cp: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sockaddr_set_str_addr(
        af: ::std::os::raw::c_int,
        addr: *mut pj_sockaddr,
        cp: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sockaddr_get_port(addr: *const pj_sockaddr_t) -> pj_uint16_t;
}
extern "C" {
    pub fn pj_sockaddr_in_get_port(addr: *const pj_sockaddr_in) -> pj_uint16_t;
}
extern "C" {
    pub fn pj_sockaddr_set_port(addr: *mut pj_sockaddr, hostport: pj_uint16_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_sockaddr_in_set_port(addr: *mut pj_sockaddr_in, hostport: pj_uint16_t);
}
extern "C" {
    pub fn pj_sockaddr_parse(
        af: ::std::os::raw::c_int,
        options: ::std::os::raw::c_uint,
        str_: *const pj_str_t,
        addr: *mut pj_sockaddr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sockaddr_parse2(
        af: ::std::os::raw::c_int,
        options: ::std::os::raw::c_uint,
        str_: *const pj_str_t,
        hostpart: *mut pj_str_t,
        port: *mut pj_uint16_t,
        raf: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_gethostname() -> *const pj_str_t;
}
extern "C" {
    pub fn pj_gethostaddr() -> pj_in_addr;
}
extern "C" {
    pub fn pj_sock_socket(
        family: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
        sock: *mut pj_sock_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_close(sockfd: pj_sock_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_bind(
        sockfd: pj_sock_t,
        my_addr: *const pj_sockaddr_t,
        addrlen: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_bind_in(sockfd: pj_sock_t, addr: pj_uint32_t, port: pj_uint16_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_bind_random(
        sockfd: pj_sock_t,
        addr: *const pj_sockaddr_t,
        port_range: pj_uint16_t,
        max_try: pj_uint16_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_listen(sockfd: pj_sock_t, backlog: ::std::os::raw::c_int) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_accept(
        serverfd: pj_sock_t,
        newsock: *mut pj_sock_t,
        addr: *mut pj_sockaddr_t,
        addrlen: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_connect(
        sockfd: pj_sock_t,
        serv_addr: *const pj_sockaddr_t,
        addrlen: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_getpeername(
        sockfd: pj_sock_t,
        addr: *mut pj_sockaddr_t,
        namelen: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_getsockname(
        sockfd: pj_sock_t,
        addr: *mut pj_sockaddr_t,
        namelen: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_getsockopt(
        sockfd: pj_sock_t,
        level: pj_uint16_t,
        optname: pj_uint16_t,
        optval: *mut ::std::os::raw::c_void,
        optlen: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_setsockopt(
        sockfd: pj_sock_t,
        level: pj_uint16_t,
        optname: pj_uint16_t,
        optval: *const ::std::os::raw::c_void,
        optlen: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_setsockopt_params(
        sockfd: pj_sock_t,
        params: *const pj_sockopt_params,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_setsockopt_sobuf(
        sockfd: pj_sock_t,
        optname: pj_uint16_t,
        auto_retry: pj_bool_t,
        buf_size: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_recv(
        sockfd: pj_sock_t,
        buf: *mut ::std::os::raw::c_void,
        len: *mut pj_ssize_t,
        flags: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_recvfrom(
        sockfd: pj_sock_t,
        buf: *mut ::std::os::raw::c_void,
        len: *mut pj_ssize_t,
        flags: ::std::os::raw::c_uint,
        from: *mut pj_sockaddr_t,
        fromlen: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_send(
        sockfd: pj_sock_t,
        buf: *const ::std::os::raw::c_void,
        len: *mut pj_ssize_t,
        flags: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_sendto(
        sockfd: pj_sock_t,
        buf: *const ::std::os::raw::c_void,
        len: *mut pj_ssize_t,
        flags: ::std::os::raw::c_uint,
        to: *const pj_sockaddr_t,
        tolen: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_shutdown(sockfd: pj_sock_t, how: ::std::os::raw::c_int) -> pj_status_t;
}
extern "C" {
    pub fn pj_addr_str_print(
        host_str: *const pj_str_t,
        port: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        flag: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
pub const PJ_DNS_CLASS_IN: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
pub const pj_dns_type_PJ_DNS_TYPE_A: pj_dns_type = 1;
pub const pj_dns_type_PJ_DNS_TYPE_NS: pj_dns_type = 2;
pub const pj_dns_type_PJ_DNS_TYPE_MD: pj_dns_type = 3;
pub const pj_dns_type_PJ_DNS_TYPE_MF: pj_dns_type = 4;
pub const pj_dns_type_PJ_DNS_TYPE_CNAME: pj_dns_type = 5;
pub const pj_dns_type_PJ_DNS_TYPE_SOA: pj_dns_type = 6;
pub const pj_dns_type_PJ_DNS_TYPE_MB: pj_dns_type = 7;
pub const pj_dns_type_PJ_DNS_TYPE_MG: pj_dns_type = 8;
pub const pj_dns_type_PJ_DNS_TYPE_MR: pj_dns_type = 9;
pub const pj_dns_type_PJ_DNS_TYPE_NULL: pj_dns_type = 10;
pub const pj_dns_type_PJ_DNS_TYPE_WKS: pj_dns_type = 11;
pub const pj_dns_type_PJ_DNS_TYPE_PTR: pj_dns_type = 12;
pub const pj_dns_type_PJ_DNS_TYPE_HINFO: pj_dns_type = 13;
pub const pj_dns_type_PJ_DNS_TYPE_MINFO: pj_dns_type = 14;
pub const pj_dns_type_PJ_DNS_TYPE_MX: pj_dns_type = 15;
pub const pj_dns_type_PJ_DNS_TYPE_TXT: pj_dns_type = 16;
pub const pj_dns_type_PJ_DNS_TYPE_RP: pj_dns_type = 17;
pub const pj_dns_type_PJ_DNS_TYPE_AFSB: pj_dns_type = 18;
pub const pj_dns_type_PJ_DNS_TYPE_X25: pj_dns_type = 19;
pub const pj_dns_type_PJ_DNS_TYPE_ISDN: pj_dns_type = 20;
pub const pj_dns_type_PJ_DNS_TYPE_RT: pj_dns_type = 21;
pub const pj_dns_type_PJ_DNS_TYPE_NSAP: pj_dns_type = 22;
pub const pj_dns_type_PJ_DNS_TYPE_NSAP_PTR: pj_dns_type = 23;
pub const pj_dns_type_PJ_DNS_TYPE_SIG: pj_dns_type = 24;
pub const pj_dns_type_PJ_DNS_TYPE_KEY: pj_dns_type = 25;
pub const pj_dns_type_PJ_DNS_TYPE_PX: pj_dns_type = 26;
pub const pj_dns_type_PJ_DNS_TYPE_GPOS: pj_dns_type = 27;
pub const pj_dns_type_PJ_DNS_TYPE_AAAA: pj_dns_type = 28;
pub const pj_dns_type_PJ_DNS_TYPE_LOC: pj_dns_type = 29;
pub const pj_dns_type_PJ_DNS_TYPE_NXT: pj_dns_type = 30;
pub const pj_dns_type_PJ_DNS_TYPE_EID: pj_dns_type = 31;
pub const pj_dns_type_PJ_DNS_TYPE_NIMLOC: pj_dns_type = 32;
pub const pj_dns_type_PJ_DNS_TYPE_SRV: pj_dns_type = 33;
pub const pj_dns_type_PJ_DNS_TYPE_ATMA: pj_dns_type = 34;
pub const pj_dns_type_PJ_DNS_TYPE_NAPTR: pj_dns_type = 35;
pub const pj_dns_type_PJ_DNS_TYPE_KX: pj_dns_type = 36;
pub const pj_dns_type_PJ_DNS_TYPE_CERT: pj_dns_type = 37;
pub const pj_dns_type_PJ_DNS_TYPE_A6: pj_dns_type = 38;
pub const pj_dns_type_PJ_DNS_TYPE_DNAME: pj_dns_type = 39;
pub const pj_dns_type_PJ_DNS_TYPE_OPT: pj_dns_type = 41;
pub const pj_dns_type_PJ_DNS_TYPE_APL: pj_dns_type = 42;
pub const pj_dns_type_PJ_DNS_TYPE_DS: pj_dns_type = 43;
pub const pj_dns_type_PJ_DNS_TYPE_SSHFP: pj_dns_type = 44;
pub const pj_dns_type_PJ_DNS_TYPE_IPSECKEY: pj_dns_type = 45;
pub const pj_dns_type_PJ_DNS_TYPE_RRSIG: pj_dns_type = 46;
pub const pj_dns_type_PJ_DNS_TYPE_NSEC: pj_dns_type = 47;
pub const pj_dns_type_PJ_DNS_TYPE_DNSKEY: pj_dns_type = 48;
pub type pj_dns_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_hdr {
    pub id: pj_uint16_t,
    pub flags: pj_uint16_t,
    pub qdcount: pj_uint16_t,
    pub anscount: pj_uint16_t,
    pub nscount: pj_uint16_t,
    pub arcount: pj_uint16_t,
}
#[test]
fn bindgen_test_layout_pj_dns_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pj_dns_hdr>(),
        12usize,
        concat!("Size of: ", stringify!(pj_dns_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_dns_hdr>(),
        2usize,
        concat!("Alignment of ", stringify!(pj_dns_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_hdr>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_hdr),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_hdr>())).flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_hdr),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_hdr>())).qdcount as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_hdr),
            "::",
            stringify!(qdcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_hdr>())).anscount as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_hdr),
            "::",
            stringify!(anscount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_hdr>())).nscount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_hdr),
            "::",
            stringify!(nscount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_hdr>())).arcount as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_hdr),
            "::",
            stringify!(arcount)
        )
    );
}
pub const pj_dns_rcode_PJ_DNS_RCODE_FORMERR: pj_dns_rcode = 1;
pub const pj_dns_rcode_PJ_DNS_RCODE_SERVFAIL: pj_dns_rcode = 2;
pub const pj_dns_rcode_PJ_DNS_RCODE_NXDOMAIN: pj_dns_rcode = 3;
pub const pj_dns_rcode_PJ_DNS_RCODE_NOTIMPL: pj_dns_rcode = 4;
pub const pj_dns_rcode_PJ_DNS_RCODE_REFUSED: pj_dns_rcode = 5;
pub const pj_dns_rcode_PJ_DNS_RCODE_YXDOMAIN: pj_dns_rcode = 6;
pub const pj_dns_rcode_PJ_DNS_RCODE_YXRRSET: pj_dns_rcode = 7;
pub const pj_dns_rcode_PJ_DNS_RCODE_NXRRSET: pj_dns_rcode = 8;
pub const pj_dns_rcode_PJ_DNS_RCODE_NOTAUTH: pj_dns_rcode = 9;
pub const pj_dns_rcode_PJ_DNS_RCODE_NOTZONE: pj_dns_rcode = 10;
pub type pj_dns_rcode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_parsed_query {
    pub name: pj_str_t,
    pub type_: pj_uint16_t,
    pub dnsclass: pj_uint16_t,
}
#[test]
fn bindgen_test_layout_pj_dns_parsed_query() {
    assert_eq!(
        ::std::mem::size_of::<pj_dns_parsed_query>(),
        24usize,
        concat!("Size of: ", stringify!(pj_dns_parsed_query))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_dns_parsed_query>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_dns_parsed_query))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_query>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_query),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_query>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_query),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_query>())).dnsclass as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_query),
            "::",
            stringify!(dnsclass)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_dns_parsed_rr {
    pub name: pj_str_t,
    pub type_: pj_uint16_t,
    pub dnsclass: pj_uint16_t,
    pub ttl: pj_uint32_t,
    pub rdlength: pj_uint16_t,
    pub data: *mut ::std::os::raw::c_void,
    pub rdata: pj_dns_parsed_rr_rdata,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pj_dns_parsed_rr_rdata {
    pub srv: pj_dns_parsed_rr_rdata_srv,
    pub cname: pj_dns_parsed_rr_rdata_cname,
    pub ns: pj_dns_parsed_rr_rdata_ns,
    pub ptr: pj_dns_parsed_rr_rdata_ptr,
    pub a: pj_dns_parsed_rr_rdata_a,
    pub aaaa: pj_dns_parsed_rr_rdata_aaaa,
    _bindgen_union_align: [u64; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_parsed_rr_rdata_srv {
    pub prio: pj_uint16_t,
    pub weight: pj_uint16_t,
    pub port: pj_uint16_t,
    pub target: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_dns_parsed_rr_rdata_srv() {
    assert_eq!(
        ::std::mem::size_of::<pj_dns_parsed_rr_rdata_srv>(),
        24usize,
        concat!("Size of: ", stringify!(pj_dns_parsed_rr_rdata_srv))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_dns_parsed_rr_rdata_srv>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_dns_parsed_rr_rdata_srv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_rr_rdata_srv>())).prio as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr_rdata_srv),
            "::",
            stringify!(prio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_dns_parsed_rr_rdata_srv>())).weight as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr_rdata_srv),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_rr_rdata_srv>())).port as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr_rdata_srv),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_dns_parsed_rr_rdata_srv>())).target as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr_rdata_srv),
            "::",
            stringify!(target)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_parsed_rr_rdata_cname {
    pub name: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_dns_parsed_rr_rdata_cname() {
    assert_eq!(
        ::std::mem::size_of::<pj_dns_parsed_rr_rdata_cname>(),
        16usize,
        concat!("Size of: ", stringify!(pj_dns_parsed_rr_rdata_cname))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_dns_parsed_rr_rdata_cname>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_dns_parsed_rr_rdata_cname))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_dns_parsed_rr_rdata_cname>())).name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr_rdata_cname),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_parsed_rr_rdata_ns {
    pub name: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_dns_parsed_rr_rdata_ns() {
    assert_eq!(
        ::std::mem::size_of::<pj_dns_parsed_rr_rdata_ns>(),
        16usize,
        concat!("Size of: ", stringify!(pj_dns_parsed_rr_rdata_ns))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_dns_parsed_rr_rdata_ns>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_dns_parsed_rr_rdata_ns))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_rr_rdata_ns>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr_rdata_ns),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_parsed_rr_rdata_ptr {
    pub name: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_dns_parsed_rr_rdata_ptr() {
    assert_eq!(
        ::std::mem::size_of::<pj_dns_parsed_rr_rdata_ptr>(),
        16usize,
        concat!("Size of: ", stringify!(pj_dns_parsed_rr_rdata_ptr))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_dns_parsed_rr_rdata_ptr>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_dns_parsed_rr_rdata_ptr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_rr_rdata_ptr>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr_rdata_ptr),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_parsed_rr_rdata_a {
    pub ip_addr: pj_in_addr,
}
#[test]
fn bindgen_test_layout_pj_dns_parsed_rr_rdata_a() {
    assert_eq!(
        ::std::mem::size_of::<pj_dns_parsed_rr_rdata_a>(),
        4usize,
        concat!("Size of: ", stringify!(pj_dns_parsed_rr_rdata_a))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_dns_parsed_rr_rdata_a>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_dns_parsed_rr_rdata_a))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_dns_parsed_rr_rdata_a>())).ip_addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr_rdata_a),
            "::",
            stringify!(ip_addr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_dns_parsed_rr_rdata_aaaa {
    pub ip_addr: pj_in6_addr,
}
#[test]
fn bindgen_test_layout_pj_dns_parsed_rr_rdata_aaaa() {
    assert_eq!(
        ::std::mem::size_of::<pj_dns_parsed_rr_rdata_aaaa>(),
        16usize,
        concat!("Size of: ", stringify!(pj_dns_parsed_rr_rdata_aaaa))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_dns_parsed_rr_rdata_aaaa>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_dns_parsed_rr_rdata_aaaa))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_dns_parsed_rr_rdata_aaaa>())).ip_addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr_rdata_aaaa),
            "::",
            stringify!(ip_addr)
        )
    );
}
#[test]
fn bindgen_test_layout_pj_dns_parsed_rr_rdata() {
    assert_eq!(
        ::std::mem::size_of::<pj_dns_parsed_rr_rdata>(),
        24usize,
        concat!("Size of: ", stringify!(pj_dns_parsed_rr_rdata))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_dns_parsed_rr_rdata>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_dns_parsed_rr_rdata))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_rr_rdata>())).srv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr_rdata),
            "::",
            stringify!(srv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_rr_rdata>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr_rdata),
            "::",
            stringify!(cname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_rr_rdata>())).ns as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr_rdata),
            "::",
            stringify!(ns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_rr_rdata>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr_rdata),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_rr_rdata>())).a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr_rdata),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_rr_rdata>())).aaaa as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr_rdata),
            "::",
            stringify!(aaaa)
        )
    );
}
#[test]
fn bindgen_test_layout_pj_dns_parsed_rr() {
    assert_eq!(
        ::std::mem::size_of::<pj_dns_parsed_rr>(),
        64usize,
        concat!("Size of: ", stringify!(pj_dns_parsed_rr))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_dns_parsed_rr>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_dns_parsed_rr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_rr>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_rr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_rr>())).dnsclass as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr),
            "::",
            stringify!(dnsclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_rr>())).ttl as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr),
            "::",
            stringify!(ttl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_rr>())).rdlength as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr),
            "::",
            stringify!(rdlength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_rr>())).data as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_rr>())).rdata as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_rr),
            "::",
            stringify!(rdata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_parsed_packet {
    pub hdr: pj_dns_hdr,
    pub q: *mut pj_dns_parsed_query,
    pub ans: *mut pj_dns_parsed_rr,
    pub ns: *mut pj_dns_parsed_rr,
    pub arr: *mut pj_dns_parsed_rr,
}
#[test]
fn bindgen_test_layout_pj_dns_parsed_packet() {
    assert_eq!(
        ::std::mem::size_of::<pj_dns_parsed_packet>(),
        48usize,
        concat!("Size of: ", stringify!(pj_dns_parsed_packet))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_dns_parsed_packet>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_dns_parsed_packet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_packet>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_packet),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_packet>())).q as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_packet),
            "::",
            stringify!(q)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_packet>())).ans as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_packet),
            "::",
            stringify!(ans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_packet>())).ns as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_packet),
            "::",
            stringify!(ns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_parsed_packet>())).arr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_parsed_packet),
            "::",
            stringify!(arr)
        )
    );
}
pub const pj_dns_dup_options_PJ_DNS_NO_QD: pj_dns_dup_options = 1;
pub const pj_dns_dup_options_PJ_DNS_NO_ANS: pj_dns_dup_options = 2;
pub const pj_dns_dup_options_PJ_DNS_NO_NS: pj_dns_dup_options = 4;
pub const pj_dns_dup_options_PJ_DNS_NO_AR: pj_dns_dup_options = 8;
pub type pj_dns_dup_options = ::std::os::raw::c_uint;
extern "C" {
    pub fn pj_dns_make_query(
        packet: *mut ::std::os::raw::c_void,
        size: *mut ::std::os::raw::c_uint,
        id: pj_uint16_t,
        qtype: ::std::os::raw::c_int,
        name: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_dns_parse_packet(
        pool: *mut pj_pool_t,
        packet: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
        p_res: *mut *mut pj_dns_parsed_packet,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_dns_packet_dup(
        pool: *mut pj_pool_t,
        p: *const pj_dns_parsed_packet,
        options: ::std::os::raw::c_uint,
        p_dst: *mut *mut pj_dns_parsed_packet,
    );
}
extern "C" {
    pub fn pj_dns_get_type_name(type_: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_dns_init_srv_rr(
        rec: *mut pj_dns_parsed_rr,
        res_name: *const pj_str_t,
        dnsclass: ::std::os::raw::c_uint,
        ttl: ::std::os::raw::c_uint,
        prio: ::std::os::raw::c_uint,
        weight: ::std::os::raw::c_uint,
        port: ::std::os::raw::c_uint,
        target: *const pj_str_t,
    );
}
extern "C" {
    pub fn pj_dns_init_cname_rr(
        rec: *mut pj_dns_parsed_rr,
        res_name: *const pj_str_t,
        dnsclass: ::std::os::raw::c_uint,
        ttl: ::std::os::raw::c_uint,
        name: *const pj_str_t,
    );
}
extern "C" {
    pub fn pj_dns_init_a_rr(
        rec: *mut pj_dns_parsed_rr,
        res_name: *const pj_str_t,
        dnsclass: ::std::os::raw::c_uint,
        ttl: ::std::os::raw::c_uint,
        ip_addr: *const pj_in_addr,
    );
}
extern "C" {
    pub fn pj_dns_init_aaaa_rr(
        rec: *mut pj_dns_parsed_rr,
        res_name: *const pj_str_t,
        dnsclass: ::std::os::raw::c_uint,
        ttl: ::std::os::raw::c_uint,
        ip_addr: *const pj_in6_addr,
    );
}
extern "C" {
    pub fn pj_dns_dump_packet(res: *const pj_dns_parsed_packet);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_resolver {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_async_query {
    _unused: [u8; 0],
}
pub type pj_dns_callback = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        status: pj_status_t,
        response: *mut pj_dns_parsed_packet,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_settings {
    pub options: ::std::os::raw::c_uint,
    pub qretr_delay: ::std::os::raw::c_uint,
    pub qretr_count: ::std::os::raw::c_uint,
    pub cache_max_ttl: ::std::os::raw::c_uint,
    pub good_ns_ttl: ::std::os::raw::c_uint,
    pub bad_ns_ttl: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pj_dns_settings() {
    assert_eq!(
        ::std::mem::size_of::<pj_dns_settings>(),
        24usize,
        concat!("Size of: ", stringify!(pj_dns_settings))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_dns_settings>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_dns_settings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_settings>())).options as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_settings),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_settings>())).qretr_delay as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_settings),
            "::",
            stringify!(qretr_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_settings>())).qretr_count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_settings),
            "::",
            stringify!(qretr_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_settings>())).cache_max_ttl as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_settings),
            "::",
            stringify!(cache_max_ttl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_settings>())).good_ns_ttl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_settings),
            "::",
            stringify!(good_ns_ttl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_settings>())).bad_ns_ttl as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_settings),
            "::",
            stringify!(bad_ns_ttl)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_dns_a_record {
    pub name: pj_str_t,
    pub alias: pj_str_t,
    pub addr_count: ::std::os::raw::c_uint,
    pub addr: [pj_in_addr; 8usize],
    pub buf_: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_pj_dns_a_record() {
    assert_eq!(
        ::std::mem::size_of::<pj_dns_a_record>(),
        200usize,
        concat!("Size of: ", stringify!(pj_dns_a_record))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_dns_a_record>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_dns_a_record))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_a_record>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_a_record),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_a_record>())).alias as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_a_record),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_a_record>())).addr_count as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_a_record),
            "::",
            stringify!(addr_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_a_record>())).addr as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_a_record),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_a_record>())).buf_ as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_a_record),
            "::",
            stringify!(buf_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_dns_addr_record {
    pub name: pj_str_t,
    pub alias: pj_str_t,
    pub addr_count: ::std::os::raw::c_uint,
    pub addr: [pj_dns_addr_record__bindgen_ty_1; 8usize],
    pub buf_: [::std::os::raw::c_char; 128usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_dns_addr_record__bindgen_ty_1 {
    pub af: ::std::os::raw::c_int,
    pub ip: pj_dns_addr_record__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pj_dns_addr_record__bindgen_ty_1__bindgen_ty_1 {
    pub v4: pj_in_addr,
    pub v6: pj_in6_addr,
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_pj_dns_addr_record__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pj_dns_addr_record__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(pj_dns_addr_record__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pj_dns_addr_record__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pj_dns_addr_record__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_dns_addr_record__bindgen_ty_1__bindgen_ty_1>())).v4
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_addr_record__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(v4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_dns_addr_record__bindgen_ty_1__bindgen_ty_1>())).v6
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_addr_record__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(v6)
        )
    );
}
#[test]
fn bindgen_test_layout_pj_dns_addr_record__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pj_dns_addr_record__bindgen_ty_1>(),
        20usize,
        concat!("Size of: ", stringify!(pj_dns_addr_record__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_dns_addr_record__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pj_dns_addr_record__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_dns_addr_record__bindgen_ty_1>())).af as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_addr_record__bindgen_ty_1),
            "::",
            stringify!(af)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_dns_addr_record__bindgen_ty_1>())).ip as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_addr_record__bindgen_ty_1),
            "::",
            stringify!(ip)
        )
    );
}
#[test]
fn bindgen_test_layout_pj_dns_addr_record() {
    assert_eq!(
        ::std::mem::size_of::<pj_dns_addr_record>(),
        328usize,
        concat!("Size of: ", stringify!(pj_dns_addr_record))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_dns_addr_record>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_dns_addr_record))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_addr_record>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_addr_record),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_addr_record>())).alias as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_addr_record),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_addr_record>())).addr_count as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_addr_record),
            "::",
            stringify!(addr_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_addr_record>())).addr as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_addr_record),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_addr_record>())).buf_ as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_addr_record),
            "::",
            stringify!(buf_)
        )
    );
}
extern "C" {
    pub fn pj_dns_settings_default(s: *mut pj_dns_settings);
}
extern "C" {
    pub fn pj_dns_resolver_create(
        pf: *mut pj_pool_factory,
        name: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_uint,
        timer: *mut pj_timer_heap_t,
        ioqueue: *mut pj_ioqueue_t,
        p_resolver: *mut *mut pj_dns_resolver,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_dns_resolver_set_ns(
        resolver: *mut pj_dns_resolver,
        count: ::std::os::raw::c_uint,
        servers: *const pj_str_t,
        ports: *const pj_uint16_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_dns_resolver_get_settings(
        resolver: *mut pj_dns_resolver,
        st: *mut pj_dns_settings,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_dns_resolver_set_settings(
        resolver: *mut pj_dns_resolver,
        st: *const pj_dns_settings,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_dns_resolver_handle_events(
        resolver: *mut pj_dns_resolver,
        timeout: *const pj_time_val,
    );
}
extern "C" {
    pub fn pj_dns_resolver_destroy(
        resolver: *mut pj_dns_resolver,
        notify: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_dns_resolver_start_query(
        resolver: *mut pj_dns_resolver,
        name: *const pj_str_t,
        type_: ::std::os::raw::c_int,
        options: ::std::os::raw::c_uint,
        cb: pj_dns_callback,
        user_data: *mut ::std::os::raw::c_void,
        p_query: *mut *mut pj_dns_async_query,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_dns_resolver_cancel_query(
        query: *mut pj_dns_async_query,
        notify: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_dns_parse_a_response(
        pkt: *const pj_dns_parsed_packet,
        rec: *mut pj_dns_a_record,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_dns_parse_addr_response(
        pkt: *const pj_dns_parsed_packet,
        rec: *mut pj_dns_addr_record,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_dns_resolver_add_entry(
        resolver: *mut pj_dns_resolver,
        pkt: *const pj_dns_parsed_packet,
        set_ttl: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_dns_resolver_get_cached_count(
        resolver: *mut pj_dns_resolver,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pj_dns_resolver_dump(resolver: *mut pj_dns_resolver, detail: pj_bool_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_server_addresses {
    pub count: ::std::os::raw::c_uint,
    pub entry: [pjsip_server_addresses__bindgen_ty_1; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_server_addresses__bindgen_ty_1 {
    pub type_: pjsip_transport_type_e,
    pub priority: ::std::os::raw::c_uint,
    pub weight: ::std::os::raw::c_uint,
    pub addr: pj_sockaddr,
    pub addr_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pjsip_server_addresses__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_server_addresses__bindgen_ty_1>(),
        44usize,
        concat!(
            "Size of: ",
            stringify!(pjsip_server_addresses__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_server_addresses__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjsip_server_addresses__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_server_addresses__bindgen_ty_1>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_server_addresses__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_server_addresses__bindgen_ty_1>())).priority as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_server_addresses__bindgen_ty_1),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_server_addresses__bindgen_ty_1>())).weight as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_server_addresses__bindgen_ty_1),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_server_addresses__bindgen_ty_1>())).addr as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_server_addresses__bindgen_ty_1),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_server_addresses__bindgen_ty_1>())).addr_len as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_server_addresses__bindgen_ty_1),
            "::",
            stringify!(addr_len)
        )
    );
}
#[test]
fn bindgen_test_layout_pjsip_server_addresses() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_server_addresses>(),
        708usize,
        concat!("Size of: ", stringify!(pjsip_server_addresses))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_server_addresses>(),
        4usize,
        concat!("Alignment of ", stringify!(pjsip_server_addresses))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_server_addresses>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_server_addresses),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_server_addresses>())).entry as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_server_addresses),
            "::",
            stringify!(entry)
        )
    );
}
pub type pjsip_resolver_callback = ::std::option::Option<
    unsafe extern "C" fn(
        status: pj_status_t,
        token: *mut ::std::os::raw::c_void,
        addr: *const pjsip_server_addresses,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_ext_resolver {
    pub resolve: ::std::option::Option<
        unsafe extern "C" fn(
            resolver: *mut pjsip_resolver_t,
            pool: *mut pj_pool_t,
            target: *const pjsip_host_info,
            token: *mut ::std::os::raw::c_void,
            cb: pjsip_resolver_callback,
        ),
    >,
}
#[test]
fn bindgen_test_layout_pjsip_ext_resolver() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_ext_resolver>(),
        8usize,
        concat!("Size of: ", stringify!(pjsip_ext_resolver))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_ext_resolver>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_ext_resolver))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_ext_resolver>())).resolve as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_ext_resolver),
            "::",
            stringify!(resolve)
        )
    );
}
extern "C" {
    pub fn pjsip_resolver_create(
        pool: *mut pj_pool_t,
        p_res: *mut *mut pjsip_resolver_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_resolver_set_resolver(
        res: *mut pjsip_resolver_t,
        dns_res: *mut pj_dns_resolver,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_resolver_set_ext_resolver(
        res: *mut pjsip_resolver_t,
        ext_res: *mut pjsip_ext_resolver,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_resolver_get_resolver(res: *mut pjsip_resolver_t) -> *mut pj_dns_resolver;
}
extern "C" {
    pub fn pjsip_resolver_destroy(resolver: *mut pjsip_resolver_t);
}
extern "C" {
    pub fn pjsip_resolve(
        resolver: *mut pjsip_resolver_t,
        pool: *mut pj_pool_t,
        target: *const pjsip_host_info,
        token: *mut ::std::os::raw::c_void,
        cb: pjsip_resolver_callback,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ioqueue_op_key_t {
    pub internal__: [*mut ::std::os::raw::c_void; 32usize],
    pub activesock_data: *mut ::std::os::raw::c_void,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pj_ioqueue_op_key_t() {
    assert_eq!(
        ::std::mem::size_of::<pj_ioqueue_op_key_t>(),
        272usize,
        concat!("Size of: ", stringify!(pj_ioqueue_op_key_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ioqueue_op_key_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ioqueue_op_key_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ioqueue_op_key_t>())).internal__ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ioqueue_op_key_t),
            "::",
            stringify!(internal__)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ioqueue_op_key_t>())).activesock_data as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ioqueue_op_key_t),
            "::",
            stringify!(activesock_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ioqueue_op_key_t>())).user_data as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ioqueue_op_key_t),
            "::",
            stringify!(user_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ioqueue_callback {
    pub on_read_complete: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut pj_ioqueue_key_t,
            op_key: *mut pj_ioqueue_op_key_t,
            bytes_read: pj_ssize_t,
        ),
    >,
    pub on_write_complete: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut pj_ioqueue_key_t,
            op_key: *mut pj_ioqueue_op_key_t,
            bytes_sent: pj_ssize_t,
        ),
    >,
    pub on_accept_complete: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut pj_ioqueue_key_t,
            op_key: *mut pj_ioqueue_op_key_t,
            sock: pj_sock_t,
            status: pj_status_t,
        ),
    >,
    pub on_connect_complete: ::std::option::Option<
        unsafe extern "C" fn(key: *mut pj_ioqueue_key_t, status: pj_status_t),
    >,
}
#[test]
fn bindgen_test_layout_pj_ioqueue_callback() {
    assert_eq!(
        ::std::mem::size_of::<pj_ioqueue_callback>(),
        32usize,
        concat!("Size of: ", stringify!(pj_ioqueue_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ioqueue_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ioqueue_callback))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ioqueue_callback>())).on_read_complete as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ioqueue_callback),
            "::",
            stringify!(on_read_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ioqueue_callback>())).on_write_complete as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ioqueue_callback),
            "::",
            stringify!(on_write_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ioqueue_callback>())).on_accept_complete as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ioqueue_callback),
            "::",
            stringify!(on_accept_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ioqueue_callback>())).on_connect_complete as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ioqueue_callback),
            "::",
            stringify!(on_connect_complete)
        )
    );
}
pub const pj_ioqueue_operation_e_PJ_IOQUEUE_OP_NONE: pj_ioqueue_operation_e = 0;
pub const pj_ioqueue_operation_e_PJ_IOQUEUE_OP_READ: pj_ioqueue_operation_e = 1;
pub const pj_ioqueue_operation_e_PJ_IOQUEUE_OP_RECV: pj_ioqueue_operation_e = 2;
pub const pj_ioqueue_operation_e_PJ_IOQUEUE_OP_RECV_FROM: pj_ioqueue_operation_e = 4;
pub const pj_ioqueue_operation_e_PJ_IOQUEUE_OP_WRITE: pj_ioqueue_operation_e = 8;
pub const pj_ioqueue_operation_e_PJ_IOQUEUE_OP_SEND: pj_ioqueue_operation_e = 16;
pub const pj_ioqueue_operation_e_PJ_IOQUEUE_OP_SEND_TO: pj_ioqueue_operation_e = 32;
pub const pj_ioqueue_operation_e_PJ_IOQUEUE_OP_ACCEPT: pj_ioqueue_operation_e = 64;
pub const pj_ioqueue_operation_e_PJ_IOQUEUE_OP_CONNECT: pj_ioqueue_operation_e = 128;
pub type pj_ioqueue_operation_e = ::std::os::raw::c_uint;
extern "C" {
    pub fn pj_ioqueue_name() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_ioqueue_create(
        pool: *mut pj_pool_t,
        max_fd: pj_size_t,
        ioqueue: *mut *mut pj_ioqueue_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ioqueue_destroy(ioque: *mut pj_ioqueue_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_ioqueue_set_lock(
        ioque: *mut pj_ioqueue_t,
        lock: *mut pj_lock_t,
        auto_delete: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ioqueue_set_default_concurrency(
        ioqueue: *mut pj_ioqueue_t,
        allow: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ioqueue_register_sock(
        pool: *mut pj_pool_t,
        ioque: *mut pj_ioqueue_t,
        sock: pj_sock_t,
        user_data: *mut ::std::os::raw::c_void,
        cb: *const pj_ioqueue_callback,
        key: *mut *mut pj_ioqueue_key_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ioqueue_register_sock2(
        pool: *mut pj_pool_t,
        ioque: *mut pj_ioqueue_t,
        sock: pj_sock_t,
        grp_lock: *mut pj_grp_lock_t,
        user_data: *mut ::std::os::raw::c_void,
        cb: *const pj_ioqueue_callback,
        key: *mut *mut pj_ioqueue_key_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ioqueue_unregister(key: *mut pj_ioqueue_key_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_ioqueue_get_user_data(key: *mut pj_ioqueue_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pj_ioqueue_set_user_data(
        key: *mut pj_ioqueue_key_t,
        user_data: *mut ::std::os::raw::c_void,
        old_data: *mut *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ioqueue_set_concurrency(key: *mut pj_ioqueue_key_t, allow: pj_bool_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_ioqueue_lock_key(key: *mut pj_ioqueue_key_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_ioqueue_trylock_key(key: *mut pj_ioqueue_key_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_ioqueue_unlock_key(key: *mut pj_ioqueue_key_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_ioqueue_op_key_init(op_key: *mut pj_ioqueue_op_key_t, size: pj_size_t);
}
extern "C" {
    pub fn pj_ioqueue_is_pending(
        key: *mut pj_ioqueue_key_t,
        op_key: *mut pj_ioqueue_op_key_t,
    ) -> pj_bool_t;
}
extern "C" {
    pub fn pj_ioqueue_post_completion(
        key: *mut pj_ioqueue_key_t,
        op_key: *mut pj_ioqueue_op_key_t,
        bytes_status: pj_ssize_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ioqueue_accept(
        key: *mut pj_ioqueue_key_t,
        op_key: *mut pj_ioqueue_op_key_t,
        new_sock: *mut pj_sock_t,
        local: *mut pj_sockaddr_t,
        remote: *mut pj_sockaddr_t,
        addrlen: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ioqueue_connect(
        key: *mut pj_ioqueue_key_t,
        addr: *const pj_sockaddr_t,
        addrlen: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ioqueue_poll(
        ioque: *mut pj_ioqueue_t,
        timeout: *const pj_time_val,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_ioqueue_recv(
        key: *mut pj_ioqueue_key_t,
        op_key: *mut pj_ioqueue_op_key_t,
        buffer: *mut ::std::os::raw::c_void,
        length: *mut pj_ssize_t,
        flags: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ioqueue_recvfrom(
        key: *mut pj_ioqueue_key_t,
        op_key: *mut pj_ioqueue_op_key_t,
        buffer: *mut ::std::os::raw::c_void,
        length: *mut pj_ssize_t,
        flags: pj_uint32_t,
        addr: *mut pj_sockaddr_t,
        addrlen: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ioqueue_send(
        key: *mut pj_ioqueue_key_t,
        op_key: *mut pj_ioqueue_op_key_t,
        data: *const ::std::os::raw::c_void,
        length: *mut pj_ssize_t,
        flags: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ioqueue_sendto(
        key: *mut pj_ioqueue_key_t,
        op_key: *mut pj_ioqueue_op_key_t,
        data: *const ::std::os::raw::c_void,
        length: *mut pj_ssize_t,
        flags: pj_uint32_t,
        addr: *const pj_sockaddr_t,
        addrlen: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
pub const pjsip_transport_flags_e_PJSIP_TRANSPORT_RELIABLE: pjsip_transport_flags_e = 1;
pub const pjsip_transport_flags_e_PJSIP_TRANSPORT_SECURE: pjsip_transport_flags_e = 2;
pub const pjsip_transport_flags_e_PJSIP_TRANSPORT_DATAGRAM: pjsip_transport_flags_e = 4;
pub type pjsip_transport_flags_e = ::std::os::raw::c_uint;
extern "C" {
    pub fn pjsip_transport_register_type(
        tp_flag: ::std::os::raw::c_uint,
        tp_name: *const ::std::os::raw::c_char,
        def_port: ::std::os::raw::c_int,
        p_tp_type: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_transport_get_type_from_name(name: *const pj_str_t) -> pjsip_transport_type_e;
}
extern "C" {
    pub fn pjsip_transport_get_type_from_flag(
        flag: ::std::os::raw::c_uint,
    ) -> pjsip_transport_type_e;
}
extern "C" {
    pub fn pjsip_transport_type_get_af(type_: pjsip_transport_type_e) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pjsip_transport_get_flag_from_type(
        type_: pjsip_transport_type_e,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjsip_transport_get_default_port_for_type(
        type_: pjsip_transport_type_e,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pjsip_transport_get_type_name(
        t: pjsip_transport_type_e,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pjsip_transport_get_type_desc(
        t: pjsip_transport_type_e,
    ) -> *const ::std::os::raw::c_char;
}
pub const pjsip_tpselector_type_PJSIP_TPSELECTOR_NONE: pjsip_tpselector_type = 0;
pub const pjsip_tpselector_type_PJSIP_TPSELECTOR_TRANSPORT: pjsip_tpselector_type = 1;
pub const pjsip_tpselector_type_PJSIP_TPSELECTOR_LISTENER: pjsip_tpselector_type = 2;
pub type pjsip_tpselector_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_tpselector {
    pub type_: pjsip_tpselector_type,
    pub disable_connection_reuse: pj_bool_t,
    pub u: pjsip_tpselector__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjsip_tpselector__bindgen_ty_1 {
    pub transport: *mut pjsip_transport,
    pub listener: *mut pjsip_tpfactory,
    pub ptr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pjsip_tpselector__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_tpselector__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(pjsip_tpselector__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_tpselector__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_tpselector__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tpselector__bindgen_ty_1>())).transport as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpselector__bindgen_ty_1),
            "::",
            stringify!(transport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tpselector__bindgen_ty_1>())).listener as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpselector__bindgen_ty_1),
            "::",
            stringify!(listener)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tpselector__bindgen_ty_1>())).ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpselector__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
}
#[test]
fn bindgen_test_layout_pjsip_tpselector() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_tpselector>(),
        16usize,
        concat!("Size of: ", stringify!(pjsip_tpselector))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_tpselector>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_tpselector))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpselector>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpselector),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tpselector>())).disable_connection_reuse as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpselector),
            "::",
            stringify!(disable_connection_reuse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpselector>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpselector),
            "::",
            stringify!(u)
        )
    );
}
extern "C" {
    pub fn pjsip_tpselector_add_ref(sel: *mut pjsip_tpselector);
}
extern "C" {
    pub fn pjsip_tpselector_dec_ref(sel: *mut pjsip_tpselector);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_rx_data_op_key {
    pub op_key: pj_ioqueue_op_key_t,
    pub rdata: *mut pjsip_rx_data,
}
#[test]
fn bindgen_test_layout_pjsip_rx_data_op_key() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_rx_data_op_key>(),
        280usize,
        concat!("Size of: ", stringify!(pjsip_rx_data_op_key))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_rx_data_op_key>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_rx_data_op_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_rx_data_op_key>())).op_key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data_op_key),
            "::",
            stringify!(op_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_rx_data_op_key>())).rdata as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data_op_key),
            "::",
            stringify!(rdata)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_rx_data {
    pub tp_info: pjsip_rx_data__bindgen_ty_1,
    pub pkt_info: pjsip_rx_data__bindgen_ty_2,
    pub msg_info: pjsip_rx_data__bindgen_ty_3,
    pub endpt_info: pjsip_rx_data__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_rx_data__bindgen_ty_1 {
    pub pool: *mut pj_pool_t,
    pub transport: *mut pjsip_transport,
    pub tp_data: *mut ::std::os::raw::c_void,
    pub op_key: pjsip_rx_data_op_key,
}
#[test]
fn bindgen_test_layout_pjsip_rx_data__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_rx_data__bindgen_ty_1>(),
        304usize,
        concat!("Size of: ", stringify!(pjsip_rx_data__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_rx_data__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_rx_data__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_1>())).pool as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_1),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_1>())).transport as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_1),
            "::",
            stringify!(transport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_1>())).tp_data as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_1),
            "::",
            stringify!(tp_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_1>())).op_key as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_1),
            "::",
            stringify!(op_key)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_rx_data__bindgen_ty_2 {
    pub timestamp: pj_time_val,
    pub packet: [::std::os::raw::c_char; 4000usize],
    pub zero: pj_uint32_t,
    pub len: pj_ssize_t,
    pub src_addr: pj_sockaddr,
    pub src_addr_len: ::std::os::raw::c_int,
    pub src_name: [::std::os::raw::c_char; 46usize],
    pub src_port: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pjsip_rx_data__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_rx_data__bindgen_ty_2>(),
        4120usize,
        concat!("Size of: ", stringify!(pjsip_rx_data__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_rx_data__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_rx_data__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_2>())).timestamp as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_2),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_2>())).packet as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_2),
            "::",
            stringify!(packet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_2>())).zero as *const _ as usize
        },
        4016usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_2),
            "::",
            stringify!(zero)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_2>())).len as *const _ as usize },
        4024usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_2),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_2>())).src_addr as *const _ as usize
        },
        4032usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_2),
            "::",
            stringify!(src_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_2>())).src_addr_len as *const _
                as usize
        },
        4060usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_2),
            "::",
            stringify!(src_addr_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_2>())).src_name as *const _ as usize
        },
        4064usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_2),
            "::",
            stringify!(src_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_2>())).src_port as *const _ as usize
        },
        4112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_2),
            "::",
            stringify!(src_port)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_rx_data__bindgen_ty_3 {
    pub msg_buf: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_int,
    pub msg: *mut pjsip_msg,
    pub info: *mut ::std::os::raw::c_char,
    pub cid: *mut pjsip_cid_hdr,
    pub from: *mut pjsip_from_hdr,
    pub to: *mut pjsip_to_hdr,
    pub via: *mut pjsip_via_hdr,
    pub cseq: *mut pjsip_cseq_hdr,
    pub max_fwd: *mut pjsip_max_fwd_hdr,
    pub route: *mut pjsip_route_hdr,
    pub record_route: *mut pjsip_rr_hdr,
    pub ctype: *mut pjsip_ctype_hdr,
    pub clen: *mut pjsip_clen_hdr,
    pub require: *mut pjsip_require_hdr,
    pub supported: *mut pjsip_supported_hdr,
    pub parse_err: pjsip_parser_err_report,
}
#[test]
fn bindgen_test_layout_pjsip_rx_data__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_rx_data__bindgen_ty_3>(),
        176usize,
        concat!("Size of: ", stringify!(pjsip_rx_data__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_rx_data__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_rx_data__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_3>())).msg_buf as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_3),
            "::",
            stringify!(msg_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_3>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_3),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_3>())).msg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_3),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_3>())).info as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_3),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_3>())).cid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_3),
            "::",
            stringify!(cid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_3>())).from as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_3),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_3>())).to as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_3),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_3>())).via as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_3),
            "::",
            stringify!(via)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_3>())).cseq as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_3),
            "::",
            stringify!(cseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_3>())).max_fwd as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_3),
            "::",
            stringify!(max_fwd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_3>())).route as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_3),
            "::",
            stringify!(route)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_3>())).record_route as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_3),
            "::",
            stringify!(record_route)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_3>())).ctype as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_3),
            "::",
            stringify!(ctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_3>())).clen as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_3),
            "::",
            stringify!(clen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_3>())).require as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_3),
            "::",
            stringify!(require)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_3>())).supported as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_3),
            "::",
            stringify!(supported)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_3>())).parse_err as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_3),
            "::",
            stringify!(parse_err)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_rx_data__bindgen_ty_4 {
    pub mod_data: [*mut ::std::os::raw::c_void; 32usize],
}
#[test]
fn bindgen_test_layout_pjsip_rx_data__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_rx_data__bindgen_ty_4>(),
        256usize,
        concat!("Size of: ", stringify!(pjsip_rx_data__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_rx_data__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_rx_data__bindgen_ty_4))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_rx_data__bindgen_ty_4>())).mod_data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data__bindgen_ty_4),
            "::",
            stringify!(mod_data)
        )
    );
}
#[test]
fn bindgen_test_layout_pjsip_rx_data() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_rx_data>(),
        4856usize,
        concat!("Size of: ", stringify!(pjsip_rx_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_rx_data>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_rx_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_rx_data>())).tp_info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data),
            "::",
            stringify!(tp_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_rx_data>())).pkt_info as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data),
            "::",
            stringify!(pkt_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_rx_data>())).msg_info as *const _ as usize },
        4424usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data),
            "::",
            stringify!(msg_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_rx_data>())).endpt_info as *const _ as usize },
        4600usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rx_data),
            "::",
            stringify!(endpt_info)
        )
    );
}
extern "C" {
    pub fn pjsip_rx_data_get_info(rdata: *mut pjsip_rx_data) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pjsip_rx_data_clone(
        src: *const pjsip_rx_data,
        flags: ::std::os::raw::c_uint,
        p_rdata: *mut *mut pjsip_rx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_rx_data_free_cloned(rdata: *mut pjsip_rx_data) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_tx_data_op_key {
    pub key: pj_ioqueue_op_key_t,
    pub tdata: *mut pjsip_tx_data,
    pub token: *mut ::std::os::raw::c_void,
    pub callback: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut pjsip_transport,
            arg2: *mut ::std::os::raw::c_void,
            arg3: pj_ssize_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout_pjsip_tx_data_op_key() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_tx_data_op_key>(),
        296usize,
        concat!("Size of: ", stringify!(pjsip_tx_data_op_key))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_tx_data_op_key>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_tx_data_op_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data_op_key>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data_op_key),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data_op_key>())).tdata as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data_op_key),
            "::",
            stringify!(tdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data_op_key>())).token as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data_op_key),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data_op_key>())).callback as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data_op_key),
            "::",
            stringify!(callback)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_tx_data {
    pub prev: *mut pjsip_tx_data,
    pub next: *mut pjsip_tx_data,
    pub pool: *mut pj_pool_t,
    pub obj_name: [::std::os::raw::c_char; 32usize],
    pub info: *mut ::std::os::raw::c_char,
    pub rx_timestamp: pj_time_val,
    pub mgr: *mut pjsip_tpmgr,
    pub op_key: pjsip_tx_data_op_key,
    pub lock: *mut pj_lock_t,
    pub msg: *mut pjsip_msg,
    pub saved_strict_route: *mut pjsip_route_hdr,
    pub buf: pjsip_buffer,
    pub ref_cnt: *mut pj_atomic_t,
    pub is_pending: ::std::os::raw::c_int,
    pub token: *mut ::std::os::raw::c_void,
    pub cb: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut pjsip_tx_data,
            arg3: pj_ssize_t,
        ),
    >,
    pub dest_info: pjsip_tx_data__bindgen_ty_1,
    pub tp_info: pjsip_tx_data__bindgen_ty_2,
    pub tp_sel: pjsip_tpselector,
    pub auth_retry: pj_bool_t,
    pub mod_data: [*mut ::std::os::raw::c_void; 32usize],
    pub via_addr: pjsip_host_port,
    pub via_tp: *const ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_tx_data__bindgen_ty_1 {
    pub name: pj_str_t,
    pub addr: pjsip_server_addresses,
    pub cur_addr: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjsip_tx_data__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_tx_data__bindgen_ty_1>(),
        728usize,
        concat!("Size of: ", stringify!(pjsip_tx_data__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_tx_data__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_tx_data__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tx_data__bindgen_ty_1>())).name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tx_data__bindgen_ty_1>())).addr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data__bindgen_ty_1),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tx_data__bindgen_ty_1>())).cur_addr as *const _ as usize
        },
        724usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data__bindgen_ty_1),
            "::",
            stringify!(cur_addr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_tx_data__bindgen_ty_2 {
    pub transport: *mut pjsip_transport,
    pub dst_addr: pj_sockaddr,
    pub dst_addr_len: ::std::os::raw::c_int,
    pub dst_name: [::std::os::raw::c_char; 46usize],
    pub dst_port: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pjsip_tx_data__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_tx_data__bindgen_ty_2>(),
        96usize,
        concat!("Size of: ", stringify!(pjsip_tx_data__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_tx_data__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_tx_data__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tx_data__bindgen_ty_2>())).transport as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data__bindgen_ty_2),
            "::",
            stringify!(transport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tx_data__bindgen_ty_2>())).dst_addr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data__bindgen_ty_2),
            "::",
            stringify!(dst_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tx_data__bindgen_ty_2>())).dst_addr_len as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data__bindgen_ty_2),
            "::",
            stringify!(dst_addr_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tx_data__bindgen_ty_2>())).dst_name as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data__bindgen_ty_2),
            "::",
            stringify!(dst_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tx_data__bindgen_ty_2>())).dst_port as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data__bindgen_ty_2),
            "::",
            stringify!(dst_port)
        )
    );
}
#[test]
fn bindgen_test_layout_pjsip_tx_data() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_tx_data>(),
        1600usize,
        concat!("Size of: ", stringify!(pjsip_tx_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_tx_data>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_tx_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).pool as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).obj_name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(obj_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).info as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).rx_timestamp as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(rx_timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).mgr as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(mgr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).op_key as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(op_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).lock as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).msg as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tx_data>())).saved_strict_route as *const _ as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(saved_strict_route)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).buf as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).ref_cnt as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(ref_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).is_pending as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(is_pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).token as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).cb as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).dest_info as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(dest_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).tp_info as *const _ as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(tp_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).tp_sel as *const _ as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(tp_sel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).auth_retry as *const _ as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(auth_retry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).mod_data as *const _ as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(mod_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).via_addr as *const _ as usize },
        1568usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(via_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tx_data>())).via_tp as *const _ as usize },
        1592usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tx_data),
            "::",
            stringify!(via_tp)
        )
    );
}
extern "C" {
    pub fn pjsip_tx_data_create(
        mgr: *mut pjsip_tpmgr,
        tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tx_data_add_ref(tdata: *mut pjsip_tx_data);
}
extern "C" {
    pub fn pjsip_tx_data_dec_ref(tdata: *mut pjsip_tx_data) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tx_data_encode(tdata: *mut pjsip_tx_data) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tx_data_is_valid(tdata: *mut pjsip_tx_data) -> pj_bool_t;
}
extern "C" {
    pub fn pjsip_tx_data_invalidate_msg(tdata: *mut pjsip_tx_data);
}
extern "C" {
    pub fn pjsip_tx_data_get_info(tdata: *mut pjsip_tx_data) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pjsip_tx_data_set_transport(
        tdata: *mut pjsip_tx_data,
        sel: *const pjsip_tpselector,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tx_data_clone(
        src: *const pjsip_tx_data,
        flags: ::std::os::raw::c_uint,
        p_rdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
pub type pjsip_transport_callback = ::std::option::Option<
    unsafe extern "C" fn(
        tp: *mut pjsip_transport,
        token: *mut ::std::os::raw::c_void,
        sent_bytes: pj_ssize_t,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_transport_key {
    pub type_: ::std::os::raw::c_long,
    pub rem_addr: pj_sockaddr,
}
#[test]
fn bindgen_test_layout_pjsip_transport_key() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_transport_key>(),
        40usize,
        concat!("Size of: ", stringify!(pjsip_transport_key))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_transport_key>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_transport_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport_key>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport_key),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport_key>())).rem_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport_key),
            "::",
            stringify!(rem_addr)
        )
    );
}
pub const pjsip_transport_dir_PJSIP_TP_DIR_NONE: pjsip_transport_dir = 0;
pub const pjsip_transport_dir_PJSIP_TP_DIR_OUTGOING: pjsip_transport_dir = 1;
pub const pjsip_transport_dir_PJSIP_TP_DIR_INCOMING: pjsip_transport_dir = 2;
pub type pjsip_transport_dir = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_transport {
    pub obj_name: [::std::os::raw::c_char; 32usize],
    pub pool: *mut pj_pool_t,
    pub ref_cnt: *mut pj_atomic_t,
    pub lock: *mut pj_lock_t,
    pub grp_lock: *mut pj_grp_lock_t,
    pub tracing: pj_bool_t,
    pub is_shutdown: pj_bool_t,
    pub is_destroying: pj_bool_t,
    pub key: pjsip_transport_key,
    pub type_name: *mut ::std::os::raw::c_char,
    pub flag: ::std::os::raw::c_uint,
    pub info: *mut ::std::os::raw::c_char,
    pub addr_len: ::std::os::raw::c_int,
    pub local_addr: pj_sockaddr,
    pub local_name: pjsip_host_port,
    pub remote_name: pjsip_host_port,
    pub dir: pjsip_transport_dir,
    pub endpt: *mut pjsip_endpoint,
    pub tpmgr: *mut pjsip_tpmgr,
    pub factory: *mut pjsip_tpfactory,
    pub idle_timer: pj_timer_entry,
    pub last_recv_ts: pj_timestamp,
    pub last_recv_len: pj_size_t,
    pub data: *mut ::std::os::raw::c_void,
    pub send_msg: ::std::option::Option<
        unsafe extern "C" fn(
            transport: *mut pjsip_transport,
            tdata: *mut pjsip_tx_data,
            rem_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_int,
            token: *mut ::std::os::raw::c_void,
            callback: pjsip_transport_callback,
        ) -> pj_status_t,
    >,
    pub do_shutdown:
        ::std::option::Option<unsafe extern "C" fn(transport: *mut pjsip_transport) -> pj_status_t>,
    pub destroy:
        ::std::option::Option<unsafe extern "C" fn(transport: *mut pjsip_transport) -> pj_status_t>,
}
#[test]
fn bindgen_test_layout_pjsip_transport() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_transport>(),
        336usize,
        concat!("Size of: ", stringify!(pjsip_transport))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_transport>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_transport))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).obj_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(obj_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).pool as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).ref_cnt as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(ref_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).lock as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).grp_lock as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(grp_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).tracing as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(tracing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).is_shutdown as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(is_shutdown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).is_destroying as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(is_destroying)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).key as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).type_name as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).flag as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).info as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).addr_len as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(addr_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).local_addr as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(local_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).local_name as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(local_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).remote_name as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(remote_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).dir as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).endpt as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(endpt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).tpmgr as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(tpmgr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).factory as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(factory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).idle_timer as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(idle_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).last_recv_ts as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(last_recv_ts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).last_recv_len as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(last_recv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).data as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).send_msg as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(send_msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).do_shutdown as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(do_shutdown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transport>())).destroy as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport),
            "::",
            stringify!(destroy)
        )
    );
}
extern "C" {
    pub fn pjsip_transport_register(mgr: *mut pjsip_tpmgr, tp: *mut pjsip_transport)
        -> pj_status_t;
}
extern "C" {
    pub fn pjsip_transport_shutdown(tp: *mut pjsip_transport) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_transport_shutdown2(tp: *mut pjsip_transport, force: pj_bool_t) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_transport_destroy(tp: *mut pjsip_transport) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_transport_add_ref(tp: *mut pjsip_transport) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_transport_dec_ref(tp: *mut pjsip_transport) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tpmgr_receive_packet(
        mgr: *mut pjsip_tpmgr,
        rdata: *mut pjsip_rx_data,
    ) -> pj_ssize_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_tpfactory {
    pub prev: *mut pjsip_tpfactory,
    pub next: *mut pjsip_tpfactory,
    pub obj_name: [::std::os::raw::c_char; 32usize],
    pub pool: *mut pj_pool_t,
    pub lock: *mut pj_lock_t,
    pub type_: pjsip_transport_type_e,
    pub type_name: *mut ::std::os::raw::c_char,
    pub flag: ::std::os::raw::c_uint,
    pub info: *mut ::std::os::raw::c_char,
    pub local_addr: pj_sockaddr,
    pub addr_name: pjsip_host_port,
    pub create_transport: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjsip_tpfactory,
            mgr: *mut pjsip_tpmgr,
            endpt: *mut pjsip_endpoint,
            rem_addr: *const pj_sockaddr,
            addr_len: ::std::os::raw::c_int,
            transport: *mut *mut pjsip_transport,
        ) -> pj_status_t,
    >,
    pub create_transport2: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjsip_tpfactory,
            mgr: *mut pjsip_tpmgr,
            endpt: *mut pjsip_endpoint,
            rem_addr: *const pj_sockaddr,
            addr_len: ::std::os::raw::c_int,
            tdata: *mut pjsip_tx_data,
            transport: *mut *mut pjsip_transport,
        ) -> pj_status_t,
    >,
    pub destroy:
        ::std::option::Option<unsafe extern "C" fn(factory: *mut pjsip_tpfactory) -> pj_status_t>,
}
#[test]
fn bindgen_test_layout_pjsip_tpfactory() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_tpfactory>(),
        176usize,
        concat!("Size of: ", stringify!(pjsip_tpfactory))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_tpfactory>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_tpfactory))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpfactory>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpfactory),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpfactory>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpfactory),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpfactory>())).obj_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpfactory),
            "::",
            stringify!(obj_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpfactory>())).pool as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpfactory),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpfactory>())).lock as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpfactory),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpfactory>())).type_ as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpfactory),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpfactory>())).type_name as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpfactory),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpfactory>())).flag as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpfactory),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpfactory>())).info as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpfactory),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpfactory>())).local_addr as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpfactory),
            "::",
            stringify!(local_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpfactory>())).addr_name as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpfactory),
            "::",
            stringify!(addr_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tpfactory>())).create_transport as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpfactory),
            "::",
            stringify!(create_transport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tpfactory>())).create_transport2 as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpfactory),
            "::",
            stringify!(create_transport2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpfactory>())).destroy as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpfactory),
            "::",
            stringify!(destroy)
        )
    );
}
extern "C" {
    pub fn pjsip_tpmgr_register_tpfactory(
        mgr: *mut pjsip_tpmgr,
        tpf: *mut pjsip_tpfactory,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tpmgr_unregister_tpfactory(
        mgr: *mut pjsip_tpmgr,
        tpf: *mut pjsip_tpfactory,
    ) -> pj_status_t;
}
pub type pjsip_rx_callback = ::std::option::Option<
    unsafe extern "C" fn(ep: *mut pjsip_endpoint, status: pj_status_t, rd: *mut pjsip_rx_data),
>;
pub type pjsip_tx_callback = ::std::option::Option<
    unsafe extern "C" fn(ep: *mut pjsip_endpoint, td: *mut pjsip_tx_data) -> pj_status_t,
>;
extern "C" {
    pub fn pjsip_tpmgr_create(
        pool: *mut pj_pool_t,
        endpt: *mut pjsip_endpoint,
        rx_cb: pjsip_rx_callback,
        tx_cb: pjsip_tx_callback,
        p_mgr: *mut *mut pjsip_tpmgr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tpmgr_find_local_addr(
        tpmgr: *mut pjsip_tpmgr,
        pool: *mut pj_pool_t,
        type_: pjsip_transport_type_e,
        sel: *const pjsip_tpselector,
        ip_addr: *mut pj_str_t,
        port: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_tpmgr_fla2_param {
    pub tp_type: pjsip_transport_type_e,
    pub tp_sel: *const pjsip_tpselector,
    pub dst_host: pj_str_t,
    pub local_if: pj_bool_t,
    pub ret_addr: pj_str_t,
    pub ret_port: pj_uint16_t,
    pub ret_tp: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pjsip_tpmgr_fla2_param() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_tpmgr_fla2_param>(),
        72usize,
        concat!("Size of: ", stringify!(pjsip_tpmgr_fla2_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_tpmgr_fla2_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_tpmgr_fla2_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpmgr_fla2_param>())).tp_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpmgr_fla2_param),
            "::",
            stringify!(tp_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpmgr_fla2_param>())).tp_sel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpmgr_fla2_param),
            "::",
            stringify!(tp_sel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpmgr_fla2_param>())).dst_host as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpmgr_fla2_param),
            "::",
            stringify!(dst_host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpmgr_fla2_param>())).local_if as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpmgr_fla2_param),
            "::",
            stringify!(local_if)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpmgr_fla2_param>())).ret_addr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpmgr_fla2_param),
            "::",
            stringify!(ret_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpmgr_fla2_param>())).ret_port as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpmgr_fla2_param),
            "::",
            stringify!(ret_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tpmgr_fla2_param>())).ret_tp as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tpmgr_fla2_param),
            "::",
            stringify!(ret_tp)
        )
    );
}
extern "C" {
    pub fn pjsip_tpmgr_fla2_param_default(prm: *mut pjsip_tpmgr_fla2_param);
}
extern "C" {
    pub fn pjsip_tpmgr_find_local_addr2(
        tpmgr: *mut pjsip_tpmgr,
        pool: *mut pj_pool_t,
        prm: *mut pjsip_tpmgr_fla2_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tpmgr_get_transport_count(mgr: *mut pjsip_tpmgr) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjsip_tpmgr_destroy(mgr: *mut pjsip_tpmgr) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tpmgr_dump_transports(mgr: *mut pjsip_tpmgr);
}
extern "C" {
    pub fn pjsip_tpmgr_acquire_transport(
        mgr: *mut pjsip_tpmgr,
        type_: pjsip_transport_type_e,
        remote: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_int,
        sel: *const pjsip_tpselector,
        tp: *mut *mut pjsip_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tpmgr_acquire_transport2(
        mgr: *mut pjsip_tpmgr,
        type_: pjsip_transport_type_e,
        remote: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_int,
        sel: *const pjsip_tpselector,
        tdata: *mut pjsip_tx_data,
        tp: *mut *mut pjsip_transport,
    ) -> pj_status_t;
}
pub type pjsip_tp_send_callback = ::std::option::Option<
    unsafe extern "C" fn(
        token: *mut ::std::os::raw::c_void,
        tdata: *mut pjsip_tx_data,
        bytes_sent: pj_ssize_t,
    ),
>;
extern "C" {
    pub fn pjsip_transport_send(
        tr: *mut pjsip_transport,
        tdata: *mut pjsip_tx_data,
        addr: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_int,
        token: *mut ::std::os::raw::c_void,
        cb: pjsip_tp_send_callback,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tpmgr_send_raw(
        mgr: *mut pjsip_tpmgr,
        tp_type: pjsip_transport_type_e,
        sel: *const pjsip_tpselector,
        tdata: *mut pjsip_tx_data,
        raw_data: *const ::std::os::raw::c_void,
        data_len: pj_size_t,
        addr: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_int,
        token: *mut ::std::os::raw::c_void,
        cb: pjsip_tp_send_callback,
    ) -> pj_status_t;
}
pub const pjsip_transport_state_PJSIP_TP_STATE_CONNECTED: pjsip_transport_state = 0;
pub const pjsip_transport_state_PJSIP_TP_STATE_DISCONNECTED: pjsip_transport_state = 1;
pub const pjsip_transport_state_PJSIP_TP_STATE_SHUTDOWN: pjsip_transport_state = 2;
pub const pjsip_transport_state_PJSIP_TP_STATE_DESTROY: pjsip_transport_state = 3;
pub type pjsip_transport_state = ::std::os::raw::c_uint;
pub type pjsip_tp_state_listener_key = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_transport_state_info {
    pub status: pj_status_t,
    pub ext_info: *mut ::std::os::raw::c_void,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pjsip_transport_state_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_transport_state_info>(),
        24usize,
        concat!("Size of: ", stringify!(pjsip_transport_state_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_transport_state_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_transport_state_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_transport_state_info>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport_state_info),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_transport_state_info>())).ext_info as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport_state_info),
            "::",
            stringify!(ext_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_transport_state_info>())).user_data as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transport_state_info),
            "::",
            stringify!(user_data)
        )
    );
}
pub type pjsip_tp_state_callback = ::std::option::Option<
    unsafe extern "C" fn(
        tp: *mut pjsip_transport,
        state: pjsip_transport_state,
        info: *const pjsip_transport_state_info,
    ),
>;
extern "C" {
    pub fn pjsip_tpmgr_set_state_cb(
        mgr: *mut pjsip_tpmgr,
        cb: pjsip_tp_state_callback,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tpmgr_get_state_cb(mgr: *const pjsip_tpmgr) -> pjsip_tp_state_callback;
}
extern "C" {
    pub fn pjsip_transport_add_state_listener(
        tp: *mut pjsip_transport,
        cb: pjsip_tp_state_callback,
        user_data: *mut ::std::os::raw::c_void,
        key: *mut *mut pjsip_tp_state_listener_key,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_transport_remove_state_listener(
        tp: *mut pjsip_transport,
        key: *mut pjsip_tp_state_listener_key,
        user_data: *const ::std::os::raw::c_void,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_tp_dropped_data {
    pub tp: *mut pjsip_transport,
    pub data: *mut ::std::os::raw::c_void,
    pub len: pj_size_t,
    pub status: pj_status_t,
}
#[test]
fn bindgen_test_layout_pjsip_tp_dropped_data() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_tp_dropped_data>(),
        32usize,
        concat!("Size of: ", stringify!(pjsip_tp_dropped_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_tp_dropped_data>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_tp_dropped_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tp_dropped_data>())).tp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tp_dropped_data),
            "::",
            stringify!(tp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tp_dropped_data>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tp_dropped_data),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tp_dropped_data>())).len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tp_dropped_data),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tp_dropped_data>())).status as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tp_dropped_data),
            "::",
            stringify!(status)
        )
    );
}
pub type pjsip_tp_on_rx_dropped_cb =
    ::std::option::Option<unsafe extern "C" fn(data: *mut pjsip_tp_dropped_data)>;
extern "C" {
    pub fn pjsip_tpmgr_set_drop_data_cb(
        mgr: *mut pjsip_tpmgr,
        cb: pjsip_tp_on_rx_dropped_cb,
    ) -> pj_status_t;
}
pub type pjsip_endpt_exit_callback =
    ::std::option::Option<unsafe extern "C" fn(endpt: *mut pjsip_endpoint)>;
extern "C" {
    pub fn pjsip_endpt_create(
        pf: *mut pj_pool_factory,
        name: *const ::std::os::raw::c_char,
        endpt: *mut *mut pjsip_endpoint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_destroy(endpt: *mut pjsip_endpoint);
}
extern "C" {
    pub fn pjsip_endpt_name(endpt: *const pjsip_endpoint) -> *const pj_str_t;
}
extern "C" {
    pub fn pjsip_endpt_handle_events(
        endpt: *mut pjsip_endpoint,
        max_timeout: *const pj_time_val,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_handle_events2(
        endpt: *mut pjsip_endpoint,
        max_timeout: *const pj_time_val,
        count: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_schedule_timer_dbg(
        endpt: *mut pjsip_endpoint,
        entry: *mut pj_timer_entry,
        delay: *const pj_time_val,
        src_file: *const ::std::os::raw::c_char,
        src_line: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_schedule_timer_w_grp_lock_dbg(
        endpt: *mut pjsip_endpoint,
        entry: *mut pj_timer_entry,
        delay: *const pj_time_val,
        id_val: ::std::os::raw::c_int,
        grp_lock: *mut pj_grp_lock_t,
        src_file: *const ::std::os::raw::c_char,
        src_line: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_cancel_timer(endpt: *mut pjsip_endpoint, entry: *mut pj_timer_entry);
}
extern "C" {
    pub fn pjsip_endpt_get_timer_heap(endpt: *mut pjsip_endpoint) -> *mut pj_timer_heap_t;
}
extern "C" {
    pub fn pjsip_endpt_register_module(
        endpt: *mut pjsip_endpoint,
        module: *mut pjsip_module,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_unregister_module(
        endpt: *mut pjsip_endpoint,
        module: *mut pjsip_module,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_process_rdata_param {
    pub start_prio: ::std::os::raw::c_uint,
    pub start_mod: *mut ::std::os::raw::c_void,
    pub idx_after_start: ::std::os::raw::c_uint,
    pub silent: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjsip_process_rdata_param() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_process_rdata_param>(),
        24usize,
        concat!("Size of: ", stringify!(pjsip_process_rdata_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_process_rdata_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_process_rdata_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_process_rdata_param>())).start_prio as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_process_rdata_param),
            "::",
            stringify!(start_prio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_process_rdata_param>())).start_mod as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_process_rdata_param),
            "::",
            stringify!(start_mod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_process_rdata_param>())).idx_after_start as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_process_rdata_param),
            "::",
            stringify!(idx_after_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_process_rdata_param>())).silent as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_process_rdata_param),
            "::",
            stringify!(silent)
        )
    );
}
extern "C" {
    pub fn pjsip_process_rdata_param_default(p: *mut pjsip_process_rdata_param);
}
extern "C" {
    pub fn pjsip_endpt_process_rx_data(
        endpt: *mut pjsip_endpoint,
        rdata: *mut pjsip_rx_data,
        p: *mut pjsip_process_rdata_param,
        p_handled: *mut pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_create_pool(
        endpt: *mut pjsip_endpoint,
        pool_name: *const ::std::os::raw::c_char,
        initial: pj_size_t,
        increment: pj_size_t,
    ) -> *mut pj_pool_t;
}
extern "C" {
    pub fn pjsip_endpt_release_pool(endpt: *mut pjsip_endpoint, pool: *mut pj_pool_t);
}
extern "C" {
    pub fn pjsip_endpt_find_tsx(
        endpt: *mut pjsip_endpoint,
        key: *const pj_str_t,
    ) -> *mut pjsip_transaction;
}
extern "C" {
    pub fn pjsip_endpt_register_tsx(endpt: *mut pjsip_endpoint, tsx: *mut pjsip_transaction);
}
extern "C" {
    pub fn pjsip_endpt_destroy_tsx(endpt: *mut pjsip_endpoint, tsx: *mut pjsip_transaction);
}
extern "C" {
    pub fn pjsip_endpt_create_tdata(
        endpt: *mut pjsip_endpoint,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_create_resolver(
        endpt: *mut pjsip_endpoint,
        p_resv: *mut *mut pj_dns_resolver,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_set_resolver(
        endpt: *mut pjsip_endpoint,
        resv: *mut pj_dns_resolver,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_set_ext_resolver(
        endpt: *mut pjsip_endpoint,
        ext_res: *mut pjsip_ext_resolver,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_get_resolver(endpt: *mut pjsip_endpoint) -> *mut pj_dns_resolver;
}
extern "C" {
    pub fn pjsip_endpt_resolve(
        endpt: *mut pjsip_endpoint,
        pool: *mut pj_pool_t,
        target: *mut pjsip_host_info,
        token: *mut ::std::os::raw::c_void,
        cb: pjsip_resolver_callback,
    );
}
extern "C" {
    pub fn pjsip_endpt_get_tpmgr(endpt: *mut pjsip_endpoint) -> *mut pjsip_tpmgr;
}
extern "C" {
    pub fn pjsip_endpt_get_ioqueue(endpt: *mut pjsip_endpoint) -> *mut pj_ioqueue_t;
}
extern "C" {
    pub fn pjsip_endpt_acquire_transport(
        endpt: *mut pjsip_endpoint,
        type_: pjsip_transport_type_e,
        remote: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_int,
        sel: *const pjsip_tpselector,
        p_tp: *mut *mut pjsip_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_acquire_transport2(
        endpt: *mut pjsip_endpoint,
        type_: pjsip_transport_type_e,
        remote: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_int,
        sel: *const pjsip_tpselector,
        tdata: *mut pjsip_tx_data,
        p_tp: *mut *mut pjsip_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_get_capability(
        endpt: *mut pjsip_endpoint,
        htype: ::std::os::raw::c_int,
        hname: *const pj_str_t,
    ) -> *const pjsip_hdr;
}
extern "C" {
    pub fn pjsip_endpt_has_capability(
        endpt: *mut pjsip_endpoint,
        htype: ::std::os::raw::c_int,
        hname: *const pj_str_t,
        token: *const pj_str_t,
    ) -> pj_bool_t;
}
extern "C" {
    pub fn pjsip_endpt_add_capability(
        endpt: *mut pjsip_endpoint,
        mod_: *mut pjsip_module,
        htype: ::std::os::raw::c_int,
        hname: *const pj_str_t,
        count: ::std::os::raw::c_uint,
        tags: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_get_request_headers(e: *mut pjsip_endpoint) -> *const pjsip_hdr;
}
extern "C" {
    pub fn pjsip_endpt_dump(endpt: *mut pjsip_endpoint, detail: pj_bool_t);
}
extern "C" {
    pub fn pjsip_endpt_atexit(
        endpt: *mut pjsip_endpoint,
        func: pjsip_endpt_exit_callback,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_log_error(
        endpt: *mut pjsip_endpoint,
        sender: *const ::std::os::raw::c_char,
        error_code: pj_status_t,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn pjsip_endpt_send_tsx_event(endpt: *mut pjsip_endpoint, evt: *mut pjsip_event);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_target {
    pub prev: *mut pjsip_target,
    pub next: *mut pjsip_target,
    pub uri: *mut pjsip_uri,
    pub q1000: ::std::os::raw::c_int,
    pub code: pjsip_status_code,
    pub reason: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjsip_target() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_target>(),
        48usize,
        concat!("Size of: ", stringify!(pjsip_target))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_target>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_target))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_target>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_target),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_target>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_target),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_target>())).uri as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_target),
            "::",
            stringify!(uri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_target>())).q1000 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_target),
            "::",
            stringify!(q1000)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_target>())).code as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_target),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_target>())).reason as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_target),
            "::",
            stringify!(reason)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_target_set {
    pub head: pjsip_target,
    pub current: *mut pjsip_target,
}
#[test]
fn bindgen_test_layout_pjsip_target_set() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_target_set>(),
        56usize,
        concat!("Size of: ", stringify!(pjsip_target_set))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_target_set>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_target_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_target_set>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_target_set),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_target_set>())).current as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_target_set),
            "::",
            stringify!(current)
        )
    );
}
pub const pjsip_redirect_op_PJSIP_REDIRECT_REJECT: pjsip_redirect_op = 0;
pub const pjsip_redirect_op_PJSIP_REDIRECT_ACCEPT: pjsip_redirect_op = 1;
pub const pjsip_redirect_op_PJSIP_REDIRECT_ACCEPT_REPLACE: pjsip_redirect_op = 2;
pub const pjsip_redirect_op_PJSIP_REDIRECT_PENDING: pjsip_redirect_op = 3;
pub const pjsip_redirect_op_PJSIP_REDIRECT_STOP: pjsip_redirect_op = 4;
pub type pjsip_redirect_op = ::std::os::raw::c_uint;
extern "C" {
    pub fn pjsip_target_set_add_uri(
        tset: *mut pjsip_target_set,
        pool: *mut pj_pool_t,
        uri: *const pjsip_uri,
        q1000: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_target_set_add_from_msg(
        tset: *mut pjsip_target_set,
        pool: *mut pj_pool_t,
        msg: *const pjsip_msg,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_target_set_get_next(tset: *const pjsip_target_set) -> *mut pjsip_target;
}
extern "C" {
    pub fn pjsip_target_set_set_current(
        tset: *mut pjsip_target_set,
        target: *mut pjsip_target,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_target_assign_status(
        target: *mut pjsip_target,
        pool: *mut pj_pool_t,
        status_code: ::std::os::raw::c_int,
        reason: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_create_request(
        endpt: *mut pjsip_endpoint,
        method: *const pjsip_method,
        target: *const pj_str_t,
        from: *const pj_str_t,
        to: *const pj_str_t,
        contact: *const pj_str_t,
        call_id: *const pj_str_t,
        cseq: ::std::os::raw::c_int,
        text: *const pj_str_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_create_request_from_hdr(
        endpt: *mut pjsip_endpoint,
        method: *const pjsip_method,
        target: *const pjsip_uri,
        from: *const pjsip_from_hdr,
        to: *const pjsip_to_hdr,
        contact: *const pjsip_contact_hdr,
        call_id: *const pjsip_cid_hdr,
        cseq: ::std::os::raw::c_int,
        text: *const pj_str_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_create_response(
        endpt: *mut pjsip_endpoint,
        rdata: *const pjsip_rx_data,
        st_code: ::std::os::raw::c_int,
        st_text: *const pj_str_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_create_ack(
        endpt: *mut pjsip_endpoint,
        tdata: *const pjsip_tx_data,
        rdata: *const pjsip_rx_data,
        ack: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_create_cancel(
        endpt: *mut pjsip_endpoint,
        tdata: *const pjsip_tx_data,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_get_dest_info(
        target_uri: *const pjsip_uri,
        request_uri: *const pjsip_uri,
        pool: *mut pj_pool_t,
        dest_info: *mut pjsip_host_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_get_request_dest(
        tdata: *const pjsip_tx_data,
        dest_info: *mut pjsip_host_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_process_route_set(
        tdata: *mut pjsip_tx_data,
        dest_info: *mut pjsip_host_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_restore_strict_route_set(tdata: *mut pjsip_tx_data);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_send_state {
    pub token: *mut ::std::os::raw::c_void,
    pub endpt: *mut pjsip_endpoint,
    pub tdata: *mut pjsip_tx_data,
    pub cur_transport: *mut pjsip_transport,
    pub app_cb: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pjsip_send_state, sent: pj_ssize_t, cont: *mut pj_bool_t),
    >,
}
#[test]
fn bindgen_test_layout_pjsip_send_state() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_send_state>(),
        40usize,
        concat!("Size of: ", stringify!(pjsip_send_state))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_send_state>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_send_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_send_state>())).token as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_send_state),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_send_state>())).endpt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_send_state),
            "::",
            stringify!(endpt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_send_state>())).tdata as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_send_state),
            "::",
            stringify!(tdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_send_state>())).cur_transport as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_send_state),
            "::",
            stringify!(cur_transport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_send_state>())).app_cb as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_send_state),
            "::",
            stringify!(app_cb)
        )
    );
}
pub type pjsip_send_callback = ::std::option::Option<
    unsafe extern "C" fn(st: *mut pjsip_send_state, sent: pj_ssize_t, cont: *mut pj_bool_t),
>;
extern "C" {
    pub fn pjsip_endpt_send_request_stateless(
        endpt: *mut pjsip_endpoint,
        tdata: *mut pjsip_tx_data,
        token: *mut ::std::os::raw::c_void,
        cb: pjsip_send_callback,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_send_raw(
        endpt: *mut pjsip_endpoint,
        tp_type: pjsip_transport_type_e,
        sel: *const pjsip_tpselector,
        raw_data: *const ::std::os::raw::c_void,
        data_len: pj_size_t,
        addr: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_int,
        token: *mut ::std::os::raw::c_void,
        cb: pjsip_tp_send_callback,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_send_raw_to_uri(
        endpt: *mut pjsip_endpoint,
        dst_uri: *const pj_str_t,
        sel: *const pjsip_tpselector,
        raw_data: *const ::std::os::raw::c_void,
        data_len: pj_size_t,
        token: *mut ::std::os::raw::c_void,
        cb: pjsip_tp_send_callback,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_response_addr {
    pub transport: *mut pjsip_transport,
    pub addr: pj_sockaddr,
    pub addr_len: ::std::os::raw::c_int,
    pub dst_host: pjsip_host_info,
}
#[test]
fn bindgen_test_layout_pjsip_response_addr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_response_addr>(),
        72usize,
        concat!("Size of: ", stringify!(pjsip_response_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_response_addr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_response_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_response_addr>())).transport as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_response_addr),
            "::",
            stringify!(transport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_response_addr>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_response_addr),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_response_addr>())).addr_len as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_response_addr),
            "::",
            stringify!(addr_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_response_addr>())).dst_host as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_response_addr),
            "::",
            stringify!(dst_host)
        )
    );
}
extern "C" {
    pub fn pjsip_get_response_addr(
        pool: *mut pj_pool_t,
        rdata: *mut pjsip_rx_data,
        res_addr: *mut pjsip_response_addr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_send_response(
        endpt: *mut pjsip_endpoint,
        res_addr: *mut pjsip_response_addr,
        tdata: *mut pjsip_tx_data,
        token: *mut ::std::os::raw::c_void,
        cb: pjsip_send_callback,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_send_response2(
        endpt: *mut pjsip_endpoint,
        rdata: *mut pjsip_rx_data,
        tdata: *mut pjsip_tx_data,
        token: *mut ::std::os::raw::c_void,
        cb: pjsip_send_callback,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_respond_stateless(
        endpt: *mut pjsip_endpoint,
        rdata: *mut pjsip_rx_data,
        st_code: ::std::os::raw::c_int,
        st_text: *const pj_str_t,
        hdr_list: *const pjsip_hdr,
        body: *const pjsip_msg_body,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_respond(
        endpt: *mut pjsip_endpoint,
        tsx_user: *mut pjsip_module,
        rdata: *mut pjsip_rx_data,
        st_code: ::std::os::raw::c_int,
        st_text: *const pj_str_t,
        hdr_list: *const pjsip_hdr,
        body: *const pjsip_msg_body,
        p_tsx: *mut *mut pjsip_transaction,
    ) -> pj_status_t;
}
pub type pjsip_endpt_send_callback = ::std::option::Option<
    unsafe extern "C" fn(token: *mut ::std::os::raw::c_void, e: *mut pjsip_event),
>;
extern "C" {
    pub fn pjsip_endpt_send_request(
        endpt: *mut pjsip_endpoint,
        tdata: *mut pjsip_tx_data,
        timeout: pj_int32_t,
        token: *mut ::std::os::raw::c_void,
        cb: pjsip_endpt_send_callback,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_create_request_fwd(
        endpt: *mut pjsip_endpoint,
        rdata: *mut pjsip_rx_data,
        uri: *const pjsip_uri,
        branch: *const pj_str_t,
        options: ::std::os::raw::c_uint,
        tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_endpt_create_response_fwd(
        endpt: *mut pjsip_endpoint,
        rdata: *mut pjsip_rx_data,
        options: ::std::os::raw::c_uint,
        tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_calculate_branch_id(rdata: *mut pjsip_rx_data) -> pj_str_t;
}
pub const pj_qos_type_PJ_QOS_TYPE_BEST_EFFORT: pj_qos_type = 0;
pub const pj_qos_type_PJ_QOS_TYPE_BACKGROUND: pj_qos_type = 1;
pub const pj_qos_type_PJ_QOS_TYPE_VIDEO: pj_qos_type = 2;
pub const pj_qos_type_PJ_QOS_TYPE_VOICE: pj_qos_type = 3;
pub const pj_qos_type_PJ_QOS_TYPE_CONTROL: pj_qos_type = 4;
pub const pj_qos_type_PJ_QOS_TYPE_SIGNALLING: pj_qos_type = 5;
pub type pj_qos_type = ::std::os::raw::c_uint;
pub const pj_qos_flag_PJ_QOS_PARAM_HAS_DSCP: pj_qos_flag = 1;
pub const pj_qos_flag_PJ_QOS_PARAM_HAS_SO_PRIO: pj_qos_flag = 2;
pub const pj_qos_flag_PJ_QOS_PARAM_HAS_WMM: pj_qos_flag = 4;
pub type pj_qos_flag = ::std::os::raw::c_uint;
pub const pj_qos_wmm_prio_PJ_QOS_WMM_PRIO_BULK_EFFORT: pj_qos_wmm_prio = 0;
pub const pj_qos_wmm_prio_PJ_QOS_WMM_PRIO_BULK: pj_qos_wmm_prio = 1;
pub const pj_qos_wmm_prio_PJ_QOS_WMM_PRIO_VIDEO: pj_qos_wmm_prio = 2;
pub const pj_qos_wmm_prio_PJ_QOS_WMM_PRIO_VOICE: pj_qos_wmm_prio = 3;
pub type pj_qos_wmm_prio = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_qos_params {
    pub flags: pj_uint8_t,
    pub dscp_val: pj_uint8_t,
    pub so_prio: pj_uint8_t,
    pub wmm_prio: pj_qos_wmm_prio,
}
#[test]
fn bindgen_test_layout_pj_qos_params() {
    assert_eq!(
        ::std::mem::size_of::<pj_qos_params>(),
        8usize,
        concat!("Size of: ", stringify!(pj_qos_params))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_qos_params>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_qos_params))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_qos_params>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_qos_params),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_qos_params>())).dscp_val as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_qos_params),
            "::",
            stringify!(dscp_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_qos_params>())).so_prio as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_qos_params),
            "::",
            stringify!(so_prio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_qos_params>())).wmm_prio as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_qos_params),
            "::",
            stringify!(wmm_prio)
        )
    );
}
extern "C" {
    pub fn pj_sock_set_qos_type(sock: pj_sock_t, type_: pj_qos_type) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_get_qos_type(sock: pj_sock_t, p_type: *mut pj_qos_type) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_apply_qos(
        sock: pj_sock_t,
        qos_type: pj_qos_type,
        qos_params: *mut pj_qos_params,
        log_level: ::std::os::raw::c_uint,
        log_sender: *const ::std::os::raw::c_char,
        sock_name: *const ::std::os::raw::c_char,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_apply_qos2(
        sock: pj_sock_t,
        qos_type: pj_qos_type,
        qos_params: *const pj_qos_params,
        log_level: ::std::os::raw::c_uint,
        log_sender: *const ::std::os::raw::c_char,
        sock_name: *const ::std::os::raw::c_char,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_qos_get_params(type_: pj_qos_type, p_param: *mut pj_qos_params) -> pj_status_t;
}
extern "C" {
    pub fn pj_qos_get_type(param: *const pj_qos_params, p_type: *mut pj_qos_type) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_set_qos_params(sock: pj_sock_t, param: *mut pj_qos_params) -> pj_status_t;
}
extern "C" {
    pub fn pj_sock_get_qos_params(sock: pj_sock_t, p_param: *mut pj_qos_params) -> pj_status_t;
}
pub const PJSIP_UDP_TRANSPORT_KEEP_SOCKET: ::std::os::raw::c_uint = 1;
pub const PJSIP_UDP_TRANSPORT_DESTROY_SOCKET: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_udp_transport_cfg {
    pub af: ::std::os::raw::c_int,
    pub bind_addr: pj_sockaddr,
    pub addr_name: pjsip_host_port,
    pub async_cnt: ::std::os::raw::c_uint,
    pub qos_type: pj_qos_type,
    pub qos_params: pj_qos_params,
    pub sockopt_params: pj_sockopt_params,
}
#[test]
fn bindgen_test_layout_pjsip_udp_transport_cfg() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_udp_transport_cfg>(),
        176usize,
        concat!("Size of: ", stringify!(pjsip_udp_transport_cfg))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_udp_transport_cfg>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_udp_transport_cfg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_udp_transport_cfg>())).af as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_udp_transport_cfg),
            "::",
            stringify!(af)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_udp_transport_cfg>())).bind_addr as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_udp_transport_cfg),
            "::",
            stringify!(bind_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_udp_transport_cfg>())).addr_name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_udp_transport_cfg),
            "::",
            stringify!(addr_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_udp_transport_cfg>())).async_cnt as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_udp_transport_cfg),
            "::",
            stringify!(async_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_udp_transport_cfg>())).qos_type as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_udp_transport_cfg),
            "::",
            stringify!(qos_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_udp_transport_cfg>())).qos_params as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_udp_transport_cfg),
            "::",
            stringify!(qos_params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_udp_transport_cfg>())).sockopt_params as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_udp_transport_cfg),
            "::",
            stringify!(sockopt_params)
        )
    );
}
extern "C" {
    pub fn pjsip_udp_transport_cfg_default(
        cfg: *mut pjsip_udp_transport_cfg,
        af: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pjsip_udp_transport_start2(
        endpt: *mut pjsip_endpoint,
        cfg: *const pjsip_udp_transport_cfg,
        p_transport: *mut *mut pjsip_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_udp_transport_start(
        endpt: *mut pjsip_endpoint,
        local: *const pj_sockaddr_in,
        a_name: *const pjsip_host_port,
        async_cnt: ::std::os::raw::c_uint,
        p_transport: *mut *mut pjsip_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_udp_transport_start6(
        endpt: *mut pjsip_endpoint,
        local: *const pj_sockaddr_in6,
        a_name: *const pjsip_host_port,
        async_cnt: ::std::os::raw::c_uint,
        p_transport: *mut *mut pjsip_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_udp_transport_attach(
        endpt: *mut pjsip_endpoint,
        sock: pj_sock_t,
        a_name: *const pjsip_host_port,
        async_cnt: ::std::os::raw::c_uint,
        p_transport: *mut *mut pjsip_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_udp_transport_attach2(
        endpt: *mut pjsip_endpoint,
        type_: pjsip_transport_type_e,
        sock: pj_sock_t,
        a_name: *const pjsip_host_port,
        async_cnt: ::std::os::raw::c_uint,
        p_transport: *mut *mut pjsip_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_udp_transport_get_socket(transport: *mut pjsip_transport) -> pj_sock_t;
}
extern "C" {
    pub fn pjsip_udp_transport_pause(
        transport: *mut pjsip_transport,
        option: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_udp_transport_restart(
        transport: *mut pjsip_transport,
        option: ::std::os::raw::c_uint,
        sock: pj_sock_t,
        local: *const pj_sockaddr_in,
        a_name: *const pjsip_host_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_udp_transport_restart2(
        transport: *mut pjsip_transport,
        option: ::std::os::raw::c_uint,
        sock: pj_sock_t,
        local: *const pj_sockaddr,
        a_name: *const pjsip_host_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_loop_start(
        endpt: *mut pjsip_endpoint,
        transport: *mut *mut pjsip_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_loop_set_discard(
        tp: *mut pjsip_transport,
        discard: pj_bool_t,
        prev_value: *mut pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_loop_set_failure(
        tp: *mut pjsip_transport,
        fail_flag: ::std::os::raw::c_int,
        prev_value: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_loop_set_recv_delay(
        tp: *mut pjsip_transport,
        delay: ::std::os::raw::c_uint,
        prev_value: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_loop_set_send_callback_delay(
        tp: *mut pjsip_transport,
        delay: ::std::os::raw::c_uint,
        prev_value: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_loop_set_delay(
        tp: *mut pjsip_transport,
        delay: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_tcp_transport_cfg {
    pub af: ::std::os::raw::c_int,
    pub bind_addr: pj_sockaddr,
    pub reuse_addr: pj_bool_t,
    pub addr_name: pjsip_host_port,
    pub async_cnt: ::std::os::raw::c_uint,
    pub qos_type: pj_qos_type,
    pub qos_params: pj_qos_params,
    pub sockopt_params: pj_sockopt_params,
    pub initial_timeout: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjsip_tcp_transport_cfg() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_tcp_transport_cfg>(),
        192usize,
        concat!("Size of: ", stringify!(pjsip_tcp_transport_cfg))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_tcp_transport_cfg>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_tcp_transport_cfg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tcp_transport_cfg>())).af as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tcp_transport_cfg),
            "::",
            stringify!(af)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tcp_transport_cfg>())).bind_addr as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tcp_transport_cfg),
            "::",
            stringify!(bind_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tcp_transport_cfg>())).reuse_addr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tcp_transport_cfg),
            "::",
            stringify!(reuse_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tcp_transport_cfg>())).addr_name as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tcp_transport_cfg),
            "::",
            stringify!(addr_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tcp_transport_cfg>())).async_cnt as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tcp_transport_cfg),
            "::",
            stringify!(async_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tcp_transport_cfg>())).qos_type as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tcp_transport_cfg),
            "::",
            stringify!(qos_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tcp_transport_cfg>())).qos_params as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tcp_transport_cfg),
            "::",
            stringify!(qos_params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tcp_transport_cfg>())).sockopt_params as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tcp_transport_cfg),
            "::",
            stringify!(sockopt_params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tcp_transport_cfg>())).initial_timeout as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tcp_transport_cfg),
            "::",
            stringify!(initial_timeout)
        )
    );
}
extern "C" {
    pub fn pjsip_tcp_transport_cfg_default(
        cfg: *mut pjsip_tcp_transport_cfg,
        af: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pjsip_tcp_transport_start(
        endpt: *mut pjsip_endpoint,
        local: *const pj_sockaddr_in,
        async_cnt: ::std::os::raw::c_uint,
        p_factory: *mut *mut pjsip_tpfactory,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tcp_transport_start2(
        endpt: *mut pjsip_endpoint,
        local: *const pj_sockaddr_in,
        a_name: *const pjsip_host_port,
        async_cnt: ::std::os::raw::c_uint,
        p_factory: *mut *mut pjsip_tpfactory,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tcp_transport_start3(
        endpt: *mut pjsip_endpoint,
        cfg: *const pjsip_tcp_transport_cfg,
        p_factory: *mut *mut pjsip_tpfactory,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tcp_transport_get_socket(transport: *mut pjsip_transport) -> pj_sock_t;
}
extern "C" {
    pub fn pjsip_tcp_transport_lis_start(
        factory: *mut pjsip_tpfactory,
        local: *const pj_sockaddr,
        a_name: *const pjsip_host_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tcp_transport_restart(
        factory: *mut pjsip_tpfactory,
        local: *const pj_sockaddr,
        a_name: *const pjsip_host_port,
    ) -> pj_status_t;
}
pub type pj_pool_callback =
    ::std::option::Option<unsafe extern "C" fn(pool: *mut pj_pool_t, size: pj_size_t)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_pool_block {
    pub prev: *mut pj_pool_block,
    pub next: *mut pj_pool_block,
    pub buf: *mut ::std::os::raw::c_uchar,
    pub cur: *mut ::std::os::raw::c_uchar,
    pub end: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_pj_pool_block() {
    assert_eq!(
        ::std::mem::size_of::<pj_pool_block>(),
        40usize,
        concat!("Size of: ", stringify!(pj_pool_block))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_pool_block>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_pool_block))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_block>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_block),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_block>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_block),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_block>())).buf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_block),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_block>())).cur as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_block),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_block>())).end as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_block),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_pool_t {
    pub prev: *mut pj_pool_t,
    pub next: *mut pj_pool_t,
    pub obj_name: [::std::os::raw::c_char; 32usize],
    pub factory: *mut pj_pool_factory,
    pub factory_data: *mut ::std::os::raw::c_void,
    pub capacity: pj_size_t,
    pub increment_size: pj_size_t,
    pub block_list: pj_pool_block,
    pub callback: pj_pool_callback,
}
#[test]
fn bindgen_test_layout_pj_pool_t() {
    assert_eq!(
        ::std::mem::size_of::<pj_pool_t>(),
        128usize,
        concat!("Size of: ", stringify!(pj_pool_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_pool_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_pool_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_t>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_t),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_t>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_t),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_t>())).obj_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_t),
            "::",
            stringify!(obj_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_t>())).factory as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_t),
            "::",
            stringify!(factory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_t>())).factory_data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_t),
            "::",
            stringify!(factory_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_t>())).capacity as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_t),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_t>())).increment_size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_t),
            "::",
            stringify!(increment_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_t>())).block_list as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_t),
            "::",
            stringify!(block_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_t>())).callback as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_t),
            "::",
            stringify!(callback)
        )
    );
}
extern "C" {
    pub fn pj_pool_create(
        factory: *mut pj_pool_factory,
        name: *const ::std::os::raw::c_char,
        initial_size: pj_size_t,
        increment_size: pj_size_t,
        callback: pj_pool_callback,
    ) -> *mut pj_pool_t;
}
extern "C" {
    pub fn pj_pool_release(pool: *mut pj_pool_t);
}
extern "C" {
    pub fn pj_pool_safe_release(ppool: *mut *mut pj_pool_t);
}
extern "C" {
    pub fn pj_pool_secure_release(ppool: *mut *mut pj_pool_t);
}
extern "C" {
    pub fn pj_pool_getobjname(pool: *const pj_pool_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_pool_reset(pool: *mut pj_pool_t);
}
extern "C" {
    pub fn pj_pool_get_capacity(pool: *mut pj_pool_t) -> pj_size_t;
}
extern "C" {
    pub fn pj_pool_get_used_size(pool: *mut pj_pool_t) -> pj_size_t;
}
extern "C" {
    pub fn pj_pool_alloc(pool: *mut pj_pool_t, size: pj_size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pj_pool_calloc(
        pool: *mut pj_pool_t,
        count: pj_size_t,
        elem: pj_size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pj_pool_alloc_from_block(
        block: *mut pj_pool_block,
        size: pj_size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pj_pool_allocate_find(
        pool: *mut pj_pool_t,
        size: pj_size_t,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_pool_factory_policy {
    pub block_alloc: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pj_pool_factory,
            size: pj_size_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub block_free: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pj_pool_factory,
            mem: *mut ::std::os::raw::c_void,
            size: pj_size_t,
        ),
    >,
    pub callback: pj_pool_callback,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pj_pool_factory_policy() {
    assert_eq!(
        ::std::mem::size_of::<pj_pool_factory_policy>(),
        32usize,
        concat!("Size of: ", stringify!(pj_pool_factory_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_pool_factory_policy>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_pool_factory_policy))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_pool_factory_policy>())).block_alloc as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_factory_policy),
            "::",
            stringify!(block_alloc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_pool_factory_policy>())).block_free as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_factory_policy),
            "::",
            stringify!(block_free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_factory_policy>())).callback as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_factory_policy),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_factory_policy>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_factory_policy),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub static mut PJ_NO_MEMORY_EXCEPTION: ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_NO_MEMORY_EXCEPTION() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut pj_pool_factory_default_policy: pj_pool_factory_policy;
}
extern "C" {
    pub fn pj_pool_factory_get_default_policy() -> *const pj_pool_factory_policy;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_pool_factory {
    pub policy: pj_pool_factory_policy,
    pub create_pool: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pj_pool_factory,
            name: *const ::std::os::raw::c_char,
            initial_size: pj_size_t,
            increment_size: pj_size_t,
            callback: pj_pool_callback,
        ) -> *mut pj_pool_t,
    >,
    pub release_pool: ::std::option::Option<
        unsafe extern "C" fn(factory: *mut pj_pool_factory, pool: *mut pj_pool_t),
    >,
    pub dump_status: ::std::option::Option<
        unsafe extern "C" fn(factory: *mut pj_pool_factory, detail: pj_bool_t),
    >,
    pub on_block_alloc: ::std::option::Option<
        unsafe extern "C" fn(factory: *mut pj_pool_factory, size: pj_size_t) -> pj_bool_t,
    >,
    pub on_block_free:
        ::std::option::Option<unsafe extern "C" fn(factory: *mut pj_pool_factory, size: pj_size_t)>,
}
#[test]
fn bindgen_test_layout_pj_pool_factory() {
    assert_eq!(
        ::std::mem::size_of::<pj_pool_factory>(),
        72usize,
        concat!("Size of: ", stringify!(pj_pool_factory))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_pool_factory>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_pool_factory))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_factory>())).policy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_factory),
            "::",
            stringify!(policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_factory>())).create_pool as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_factory),
            "::",
            stringify!(create_pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_factory>())).release_pool as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_factory),
            "::",
            stringify!(release_pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_factory>())).dump_status as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_factory),
            "::",
            stringify!(dump_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_factory>())).on_block_alloc as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_factory),
            "::",
            stringify!(on_block_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pool_factory>())).on_block_free as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pool_factory),
            "::",
            stringify!(on_block_free)
        )
    );
}
extern "C" {
    pub fn pj_pool_create_int(
        factory: *mut pj_pool_factory,
        name: *const ::std::os::raw::c_char,
        initial_size: pj_size_t,
        increment_size: pj_size_t,
        callback: pj_pool_callback,
    ) -> *mut pj_pool_t;
}
extern "C" {
    pub fn pj_pool_init_int(
        pool: *mut pj_pool_t,
        name: *const ::std::os::raw::c_char,
        increment_size: pj_size_t,
        callback: pj_pool_callback,
    );
}
extern "C" {
    pub fn pj_pool_destroy_int(pool: *mut pj_pool_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_caching_pool {
    pub factory: pj_pool_factory,
    pub capacity: pj_size_t,
    pub max_capacity: pj_size_t,
    pub used_count: pj_size_t,
    pub used_size: pj_size_t,
    pub peak_used_size: pj_size_t,
    pub free_list: [pj_list; 16usize],
    pub used_list: pj_list,
    pub pool_buf: [::std::os::raw::c_char; 512usize],
    pub lock: *mut pj_lock_t,
}
#[test]
fn bindgen_test_layout_pj_caching_pool() {
    assert_eq!(
        ::std::mem::size_of::<pj_caching_pool>(),
        904usize,
        concat!("Size of: ", stringify!(pj_caching_pool))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_caching_pool>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_caching_pool))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_caching_pool>())).factory as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_caching_pool),
            "::",
            stringify!(factory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_caching_pool>())).capacity as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_caching_pool),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_caching_pool>())).max_capacity as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_caching_pool),
            "::",
            stringify!(max_capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_caching_pool>())).used_count as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_caching_pool),
            "::",
            stringify!(used_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_caching_pool>())).used_size as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_caching_pool),
            "::",
            stringify!(used_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_caching_pool>())).peak_used_size as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_caching_pool),
            "::",
            stringify!(peak_used_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_caching_pool>())).free_list as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_caching_pool),
            "::",
            stringify!(free_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_caching_pool>())).used_list as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_caching_pool),
            "::",
            stringify!(used_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_caching_pool>())).pool_buf as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_caching_pool),
            "::",
            stringify!(pool_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_caching_pool>())).lock as *const _ as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_caching_pool),
            "::",
            stringify!(lock)
        )
    );
}
extern "C" {
    pub fn pj_caching_pool_init(
        ch_pool: *mut pj_caching_pool,
        policy: *const pj_pool_factory_policy,
        max_capacity: pj_size_t,
    );
}
extern "C" {
    pub fn pj_caching_pool_destroy(ch_pool: *mut pj_caching_pool);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_sock_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_cert_t {
    _unused: [u8; 0],
}
pub const pj_ssl_cert_verify_flag_t_PJ_SSL_CERT_ESUCCESS: pj_ssl_cert_verify_flag_t = 0;
pub const pj_ssl_cert_verify_flag_t_PJ_SSL_CERT_EISSUER_NOT_FOUND: pj_ssl_cert_verify_flag_t = 1;
pub const pj_ssl_cert_verify_flag_t_PJ_SSL_CERT_EUNTRUSTED: pj_ssl_cert_verify_flag_t = 2;
pub const pj_ssl_cert_verify_flag_t_PJ_SSL_CERT_EVALIDITY_PERIOD: pj_ssl_cert_verify_flag_t = 4;
pub const pj_ssl_cert_verify_flag_t_PJ_SSL_CERT_EINVALID_FORMAT: pj_ssl_cert_verify_flag_t = 8;
pub const pj_ssl_cert_verify_flag_t_PJ_SSL_CERT_EINVALID_PURPOSE: pj_ssl_cert_verify_flag_t = 16;
pub const pj_ssl_cert_verify_flag_t_PJ_SSL_CERT_EISSUER_MISMATCH: pj_ssl_cert_verify_flag_t = 32;
pub const pj_ssl_cert_verify_flag_t_PJ_SSL_CERT_ECRL_FAILURE: pj_ssl_cert_verify_flag_t = 64;
pub const pj_ssl_cert_verify_flag_t_PJ_SSL_CERT_EREVOKED: pj_ssl_cert_verify_flag_t = 128;
pub const pj_ssl_cert_verify_flag_t_PJ_SSL_CERT_ECHAIN_TOO_LONG: pj_ssl_cert_verify_flag_t = 256;
pub const pj_ssl_cert_verify_flag_t_PJ_SSL_CERT_EIDENTITY_NOT_MATCH: pj_ssl_cert_verify_flag_t =
    1073741824;
pub const pj_ssl_cert_verify_flag_t_PJ_SSL_CERT_EUNKNOWN: pj_ssl_cert_verify_flag_t = -2147483648;
pub type pj_ssl_cert_verify_flag_t = ::std::os::raw::c_int;
pub const pj_ssl_cert_name_type_PJ_SSL_CERT_NAME_UNKNOWN: pj_ssl_cert_name_type = 0;
pub const pj_ssl_cert_name_type_PJ_SSL_CERT_NAME_RFC822: pj_ssl_cert_name_type = 1;
pub const pj_ssl_cert_name_type_PJ_SSL_CERT_NAME_DNS: pj_ssl_cert_name_type = 2;
pub const pj_ssl_cert_name_type_PJ_SSL_CERT_NAME_URI: pj_ssl_cert_name_type = 3;
pub const pj_ssl_cert_name_type_PJ_SSL_CERT_NAME_IP: pj_ssl_cert_name_type = 4;
pub type pj_ssl_cert_name_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_cert_info {
    pub version: ::std::os::raw::c_uint,
    pub serial_no: [pj_uint8_t; 20usize],
    pub subject: pj_ssl_cert_info__bindgen_ty_1,
    pub issuer: pj_ssl_cert_info__bindgen_ty_2,
    pub validity: pj_ssl_cert_info__bindgen_ty_3,
    pub subj_alt_name: pj_ssl_cert_info__bindgen_ty_4,
    pub raw: pj_str_t,
    pub raw_chain: pj_ssl_cert_info__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_cert_info__bindgen_ty_1 {
    pub cn: pj_str_t,
    pub info: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_ssl_cert_info__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pj_ssl_cert_info__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(pj_ssl_cert_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ssl_cert_info__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ssl_cert_info__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_cert_info__bindgen_ty_1>())).cn as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info__bindgen_ty_1),
            "::",
            stringify!(cn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_cert_info__bindgen_ty_1>())).info as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info__bindgen_ty_1),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_cert_info__bindgen_ty_2 {
    pub cn: pj_str_t,
    pub info: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_ssl_cert_info__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<pj_ssl_cert_info__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(pj_ssl_cert_info__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ssl_cert_info__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ssl_cert_info__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_cert_info__bindgen_ty_2>())).cn as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info__bindgen_ty_2),
            "::",
            stringify!(cn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_cert_info__bindgen_ty_2>())).info as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info__bindgen_ty_2),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_cert_info__bindgen_ty_3 {
    pub start: pj_time_val,
    pub end: pj_time_val,
    pub gmt: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pj_ssl_cert_info__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<pj_ssl_cert_info__bindgen_ty_3>(),
        40usize,
        concat!("Size of: ", stringify!(pj_ssl_cert_info__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ssl_cert_info__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ssl_cert_info__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_cert_info__bindgen_ty_3>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info__bindgen_ty_3),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_cert_info__bindgen_ty_3>())).end as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info__bindgen_ty_3),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_cert_info__bindgen_ty_3>())).gmt as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info__bindgen_ty_3),
            "::",
            stringify!(gmt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_cert_info__bindgen_ty_4 {
    pub cnt: ::std::os::raw::c_uint,
    pub entry: *mut pj_ssl_cert_info__bindgen_ty_4__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_cert_info__bindgen_ty_4__bindgen_ty_1 {
    pub type_: pj_ssl_cert_name_type,
    pub name: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_ssl_cert_info__bindgen_ty_4__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pj_ssl_cert_info__bindgen_ty_4__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(pj_ssl_cert_info__bindgen_ty_4__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ssl_cert_info__bindgen_ty_4__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pj_ssl_cert_info__bindgen_ty_4__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_cert_info__bindgen_ty_4__bindgen_ty_1>())).type_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_cert_info__bindgen_ty_4__bindgen_ty_1>())).name
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
}
#[test]
fn bindgen_test_layout_pj_ssl_cert_info__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<pj_ssl_cert_info__bindgen_ty_4>(),
        16usize,
        concat!("Size of: ", stringify!(pj_ssl_cert_info__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ssl_cert_info__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ssl_cert_info__bindgen_ty_4))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_cert_info__bindgen_ty_4>())).cnt as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info__bindgen_ty_4),
            "::",
            stringify!(cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_cert_info__bindgen_ty_4>())).entry as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info__bindgen_ty_4),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_cert_info__bindgen_ty_5 {
    pub cnt: ::std::os::raw::c_uint,
    pub cert_raw: *mut pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_ssl_cert_info__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<pj_ssl_cert_info__bindgen_ty_5>(),
        16usize,
        concat!("Size of: ", stringify!(pj_ssl_cert_info__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ssl_cert_info__bindgen_ty_5>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ssl_cert_info__bindgen_ty_5))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_cert_info__bindgen_ty_5>())).cnt as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info__bindgen_ty_5),
            "::",
            stringify!(cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_cert_info__bindgen_ty_5>())).cert_raw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info__bindgen_ty_5),
            "::",
            stringify!(cert_raw)
        )
    );
}
#[test]
fn bindgen_test_layout_pj_ssl_cert_info() {
    assert_eq!(
        ::std::mem::size_of::<pj_ssl_cert_info>(),
        176usize,
        concat!("Size of: ", stringify!(pj_ssl_cert_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ssl_cert_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ssl_cert_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_cert_info>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_cert_info>())).serial_no as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info),
            "::",
            stringify!(serial_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_cert_info>())).subject as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info),
            "::",
            stringify!(subject)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_cert_info>())).issuer as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info),
            "::",
            stringify!(issuer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_cert_info>())).validity as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info),
            "::",
            stringify!(validity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_cert_info>())).subj_alt_name as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info),
            "::",
            stringify!(subj_alt_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_cert_info>())).raw as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_cert_info>())).raw_chain as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_cert_info),
            "::",
            stringify!(raw_chain)
        )
    );
}
pub type pj_ssl_cert_buffer = pj_str_t;
extern "C" {
    pub fn pj_ssl_cert_load_from_files(
        pool: *mut pj_pool_t,
        CA_file: *const pj_str_t,
        cert_file: *const pj_str_t,
        privkey_file: *const pj_str_t,
        privkey_pass: *const pj_str_t,
        p_cert: *mut *mut pj_ssl_cert_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_cert_load_from_files2(
        pool: *mut pj_pool_t,
        CA_file: *const pj_str_t,
        CA_path: *const pj_str_t,
        cert_file: *const pj_str_t,
        privkey_file: *const pj_str_t,
        privkey_pass: *const pj_str_t,
        p_cert: *mut *mut pj_ssl_cert_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_cert_load_from_buffer(
        pool: *mut pj_pool_t,
        CA_buf: *const pj_ssl_cert_buffer,
        cert_buf: *const pj_ssl_cert_buffer,
        privkey_buf: *const pj_ssl_cert_buffer,
        privkey_pass: *const pj_str_t,
        p_cert: *mut *mut pj_ssl_cert_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_cert_info_dump(
        ci: *const pj_ssl_cert_info,
        indent: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: pj_size_t,
    ) -> pj_ssize_t;
}
extern "C" {
    pub fn pj_ssl_cert_get_verify_status_strings(
        verify_status: pj_uint32_t,
        error_strings: *mut *const ::std::os::raw::c_char,
        count: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_cert_wipe_keys(cert: *mut pj_ssl_cert_t);
}
pub const pj_ssl_cipher_PJ_TLS_UNKNOWN_CIPHER: pj_ssl_cipher = -1;
pub const pj_ssl_cipher_PJ_TLS_NULL_WITH_NULL_NULL: pj_ssl_cipher = 0;
pub const pj_ssl_cipher_PJ_TLS_RSA_WITH_NULL_MD5: pj_ssl_cipher = 1;
pub const pj_ssl_cipher_PJ_TLS_RSA_WITH_NULL_SHA: pj_ssl_cipher = 2;
pub const pj_ssl_cipher_PJ_TLS_RSA_WITH_NULL_SHA256: pj_ssl_cipher = 59;
pub const pj_ssl_cipher_PJ_TLS_RSA_WITH_RC4_128_MD5: pj_ssl_cipher = 4;
pub const pj_ssl_cipher_PJ_TLS_RSA_WITH_RC4_128_SHA: pj_ssl_cipher = 5;
pub const pj_ssl_cipher_PJ_TLS_RSA_WITH_3DES_EDE_CBC_SHA: pj_ssl_cipher = 10;
pub const pj_ssl_cipher_PJ_TLS_RSA_WITH_AES_128_CBC_SHA: pj_ssl_cipher = 47;
pub const pj_ssl_cipher_PJ_TLS_RSA_WITH_AES_256_CBC_SHA: pj_ssl_cipher = 53;
pub const pj_ssl_cipher_PJ_TLS_RSA_WITH_AES_128_CBC_SHA256: pj_ssl_cipher = 60;
pub const pj_ssl_cipher_PJ_TLS_RSA_WITH_AES_256_CBC_SHA256: pj_ssl_cipher = 61;
pub const pj_ssl_cipher_PJ_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA: pj_ssl_cipher = 13;
pub const pj_ssl_cipher_PJ_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA: pj_ssl_cipher = 16;
pub const pj_ssl_cipher_PJ_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: pj_ssl_cipher = 19;
pub const pj_ssl_cipher_PJ_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA: pj_ssl_cipher = 22;
pub const pj_ssl_cipher_PJ_TLS_DH_DSS_WITH_AES_128_CBC_SHA: pj_ssl_cipher = 48;
pub const pj_ssl_cipher_PJ_TLS_DH_RSA_WITH_AES_128_CBC_SHA: pj_ssl_cipher = 49;
pub const pj_ssl_cipher_PJ_TLS_DHE_DSS_WITH_AES_128_CBC_SHA: pj_ssl_cipher = 50;
pub const pj_ssl_cipher_PJ_TLS_DHE_RSA_WITH_AES_128_CBC_SHA: pj_ssl_cipher = 51;
pub const pj_ssl_cipher_PJ_TLS_DH_DSS_WITH_AES_256_CBC_SHA: pj_ssl_cipher = 54;
pub const pj_ssl_cipher_PJ_TLS_DH_RSA_WITH_AES_256_CBC_SHA: pj_ssl_cipher = 55;
pub const pj_ssl_cipher_PJ_TLS_DHE_DSS_WITH_AES_256_CBC_SHA: pj_ssl_cipher = 56;
pub const pj_ssl_cipher_PJ_TLS_DHE_RSA_WITH_AES_256_CBC_SHA: pj_ssl_cipher = 57;
pub const pj_ssl_cipher_PJ_TLS_DH_DSS_WITH_AES_128_CBC_SHA256: pj_ssl_cipher = 62;
pub const pj_ssl_cipher_PJ_TLS_DH_RSA_WITH_AES_128_CBC_SHA256: pj_ssl_cipher = 63;
pub const pj_ssl_cipher_PJ_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: pj_ssl_cipher = 64;
pub const pj_ssl_cipher_PJ_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256: pj_ssl_cipher = 103;
pub const pj_ssl_cipher_PJ_TLS_DH_DSS_WITH_AES_256_CBC_SHA256: pj_ssl_cipher = 104;
pub const pj_ssl_cipher_PJ_TLS_DH_RSA_WITH_AES_256_CBC_SHA256: pj_ssl_cipher = 105;
pub const pj_ssl_cipher_PJ_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: pj_ssl_cipher = 106;
pub const pj_ssl_cipher_PJ_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256: pj_ssl_cipher = 107;
pub const pj_ssl_cipher_PJ_TLS_DH_anon_WITH_RC4_128_MD5: pj_ssl_cipher = 24;
pub const pj_ssl_cipher_PJ_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA: pj_ssl_cipher = 27;
pub const pj_ssl_cipher_PJ_TLS_DH_anon_WITH_AES_128_CBC_SHA: pj_ssl_cipher = 52;
pub const pj_ssl_cipher_PJ_TLS_DH_anon_WITH_AES_256_CBC_SHA: pj_ssl_cipher = 58;
pub const pj_ssl_cipher_PJ_TLS_DH_anon_WITH_AES_128_CBC_SHA256: pj_ssl_cipher = 108;
pub const pj_ssl_cipher_PJ_TLS_DH_anon_WITH_AES_256_CBC_SHA256: pj_ssl_cipher = 109;
pub const pj_ssl_cipher_PJ_TLS_RSA_EXPORT_WITH_RC4_40_MD5: pj_ssl_cipher = 3;
pub const pj_ssl_cipher_PJ_TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5: pj_ssl_cipher = 6;
pub const pj_ssl_cipher_PJ_TLS_RSA_WITH_IDEA_CBC_SHA: pj_ssl_cipher = 7;
pub const pj_ssl_cipher_PJ_TLS_RSA_EXPORT_WITH_DES40_CBC_SHA: pj_ssl_cipher = 8;
pub const pj_ssl_cipher_PJ_TLS_RSA_WITH_DES_CBC_SHA: pj_ssl_cipher = 9;
pub const pj_ssl_cipher_PJ_TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA: pj_ssl_cipher = 11;
pub const pj_ssl_cipher_PJ_TLS_DH_DSS_WITH_DES_CBC_SHA: pj_ssl_cipher = 12;
pub const pj_ssl_cipher_PJ_TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA: pj_ssl_cipher = 14;
pub const pj_ssl_cipher_PJ_TLS_DH_RSA_WITH_DES_CBC_SHA: pj_ssl_cipher = 15;
pub const pj_ssl_cipher_PJ_TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA: pj_ssl_cipher = 17;
pub const pj_ssl_cipher_PJ_TLS_DHE_DSS_WITH_DES_CBC_SHA: pj_ssl_cipher = 18;
pub const pj_ssl_cipher_PJ_TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA: pj_ssl_cipher = 20;
pub const pj_ssl_cipher_PJ_TLS_DHE_RSA_WITH_DES_CBC_SHA: pj_ssl_cipher = 21;
pub const pj_ssl_cipher_PJ_TLS_DH_anon_EXPORT_WITH_RC4_40_MD5: pj_ssl_cipher = 23;
pub const pj_ssl_cipher_PJ_TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA: pj_ssl_cipher = 25;
pub const pj_ssl_cipher_PJ_TLS_DH_anon_WITH_DES_CBC_SHA: pj_ssl_cipher = 26;
pub const pj_ssl_cipher_PJ_SSL_FORTEZZA_KEA_WITH_NULL_SHA: pj_ssl_cipher = 28;
pub const pj_ssl_cipher_PJ_SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA: pj_ssl_cipher = 29;
pub const pj_ssl_cipher_PJ_SSL_FORTEZZA_KEA_WITH_RC4_128_SHA: pj_ssl_cipher = 30;
pub const pj_ssl_cipher_PJ_SSL_CK_RC4_128_WITH_MD5: pj_ssl_cipher = 65664;
pub const pj_ssl_cipher_PJ_SSL_CK_RC4_128_EXPORT40_WITH_MD5: pj_ssl_cipher = 131200;
pub const pj_ssl_cipher_PJ_SSL_CK_RC2_128_CBC_WITH_MD5: pj_ssl_cipher = 196736;
pub const pj_ssl_cipher_PJ_SSL_CK_RC2_128_CBC_EXPORT40_WITH_MD5: pj_ssl_cipher = 262272;
pub const pj_ssl_cipher_PJ_SSL_CK_IDEA_128_CBC_WITH_MD5: pj_ssl_cipher = 327808;
pub const pj_ssl_cipher_PJ_SSL_CK_DES_64_CBC_WITH_MD5: pj_ssl_cipher = 393280;
pub const pj_ssl_cipher_PJ_SSL_CK_DES_192_EDE3_CBC_WITH_MD5: pj_ssl_cipher = 458944;
pub type pj_ssl_cipher = ::std::os::raw::c_int;
extern "C" {
    pub fn pj_ssl_cipher_get_availables(
        ciphers: *mut pj_ssl_cipher,
        cipher_num: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_cipher_is_supported(cipher: pj_ssl_cipher) -> pj_bool_t;
}
extern "C" {
    pub fn pj_ssl_cipher_name(cipher: pj_ssl_cipher) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_ssl_cipher_id(cipher_name: *const ::std::os::raw::c_char) -> pj_ssl_cipher;
}
pub const pj_ssl_curve_PJ_TLS_UNKNOWN_CURVE: pj_ssl_curve = 0;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECT163K1: pj_ssl_curve = 1;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECT163R1: pj_ssl_curve = 2;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECT163R2: pj_ssl_curve = 3;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECT193R1: pj_ssl_curve = 4;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECT193R2: pj_ssl_curve = 5;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECT233K1: pj_ssl_curve = 6;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECT233R1: pj_ssl_curve = 7;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECT239K1: pj_ssl_curve = 8;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECT283K1: pj_ssl_curve = 9;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECT283R1: pj_ssl_curve = 10;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECT409K1: pj_ssl_curve = 11;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECT409R1: pj_ssl_curve = 12;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECT571K1: pj_ssl_curve = 13;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECT571R1: pj_ssl_curve = 14;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECP160K1: pj_ssl_curve = 15;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECP160R1: pj_ssl_curve = 16;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECP160R2: pj_ssl_curve = 17;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECP192K1: pj_ssl_curve = 18;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECP192R1: pj_ssl_curve = 19;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECP224K1: pj_ssl_curve = 20;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECP224R1: pj_ssl_curve = 21;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECP256K1: pj_ssl_curve = 22;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECP256R1: pj_ssl_curve = 23;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECP384R1: pj_ssl_curve = 24;
pub const pj_ssl_curve_PJ_TLS_CURVE_SECP521R1: pj_ssl_curve = 25;
pub const pj_ssl_curve_PJ_TLS_CURVE_BRAINPOOLP256R1: pj_ssl_curve = 26;
pub const pj_ssl_curve_PJ_TLS_CURVE_BRAINPOOLP384R1: pj_ssl_curve = 27;
pub const pj_ssl_curve_PJ_TLS_CURVE_BRAINPOOLP512R1: pj_ssl_curve = 28;
pub const pj_ssl_curve_PJ_TLS_CURVE_ARBITRARY_EXPLICIT_PRIME_CURVES: pj_ssl_curve = 65281;
pub const pj_ssl_curve_PJ_TLS_CURVE_ARBITRARY_EXPLICIT_CHAR2_CURVES: pj_ssl_curve = 65282;
pub type pj_ssl_curve = ::std::os::raw::c_uint;
extern "C" {
    pub fn pj_ssl_curve_get_availables(
        curves: *mut pj_ssl_curve,
        curve_num: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_curve_is_supported(curve: pj_ssl_curve) -> pj_bool_t;
}
extern "C" {
    pub fn pj_ssl_curve_name(curve: pj_ssl_curve) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_ssl_curve_id(curve_name: *const ::std::os::raw::c_char) -> pj_ssl_curve;
}
pub const pj_ssl_entropy_PJ_SSL_ENTROPY_NONE: pj_ssl_entropy = 0;
pub const pj_ssl_entropy_PJ_SSL_ENTROPY_EGD: pj_ssl_entropy = 1;
pub const pj_ssl_entropy_PJ_SSL_ENTROPY_RANDOM: pj_ssl_entropy = 2;
pub const pj_ssl_entropy_PJ_SSL_ENTROPY_URANDOM: pj_ssl_entropy = 3;
pub const pj_ssl_entropy_PJ_SSL_ENTROPY_FILE: pj_ssl_entropy = 4;
pub const pj_ssl_entropy_PJ_SSL_ENTROPY_UNKNOWN: pj_ssl_entropy = 15;
pub type pj_ssl_entropy = ::std::os::raw::c_uint;
pub use self::pj_ssl_entropy as pj_ssl_entropy_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_sock_cb {
    pub on_data_read: ::std::option::Option<
        unsafe extern "C" fn(
            ssock: *mut pj_ssl_sock_t,
            data: *mut ::std::os::raw::c_void,
            size: pj_size_t,
            status: pj_status_t,
            remainder: *mut pj_size_t,
        ) -> pj_bool_t,
    >,
    pub on_data_recvfrom: ::std::option::Option<
        unsafe extern "C" fn(
            ssock: *mut pj_ssl_sock_t,
            data: *mut ::std::os::raw::c_void,
            size: pj_size_t,
            src_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_int,
            status: pj_status_t,
        ) -> pj_bool_t,
    >,
    pub on_data_sent: ::std::option::Option<
        unsafe extern "C" fn(
            ssock: *mut pj_ssl_sock_t,
            send_key: *mut pj_ioqueue_op_key_t,
            sent: pj_ssize_t,
        ) -> pj_bool_t,
    >,
    pub on_accept_complete: ::std::option::Option<
        unsafe extern "C" fn(
            ssock: *mut pj_ssl_sock_t,
            newsock: *mut pj_ssl_sock_t,
            src_addr: *const pj_sockaddr_t,
            src_addr_len: ::std::os::raw::c_int,
        ) -> pj_bool_t,
    >,
    pub on_accept_complete2: ::std::option::Option<
        unsafe extern "C" fn(
            ssock: *mut pj_ssl_sock_t,
            newsock: *mut pj_ssl_sock_t,
            src_addr: *const pj_sockaddr_t,
            src_addr_len: ::std::os::raw::c_int,
            status: pj_status_t,
        ) -> pj_bool_t,
    >,
    pub on_connect_complete: ::std::option::Option<
        unsafe extern "C" fn(ssock: *mut pj_ssl_sock_t, status: pj_status_t) -> pj_bool_t,
    >,
}
#[test]
fn bindgen_test_layout_pj_ssl_sock_cb() {
    assert_eq!(
        ::std::mem::size_of::<pj_ssl_sock_cb>(),
        48usize,
        concat!("Size of: ", stringify!(pj_ssl_sock_cb))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ssl_sock_cb>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ssl_sock_cb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_cb>())).on_data_read as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_cb),
            "::",
            stringify!(on_data_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_cb>())).on_data_recvfrom as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_cb),
            "::",
            stringify!(on_data_recvfrom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_cb>())).on_data_sent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_cb),
            "::",
            stringify!(on_data_sent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_sock_cb>())).on_accept_complete as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_cb),
            "::",
            stringify!(on_accept_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_sock_cb>())).on_accept_complete2 as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_cb),
            "::",
            stringify!(on_accept_complete2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_sock_cb>())).on_connect_complete as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_cb),
            "::",
            stringify!(on_connect_complete)
        )
    );
}
pub const pj_ssl_sock_proto_PJ_SSL_SOCK_PROTO_DEFAULT: pj_ssl_sock_proto = 0;
pub const pj_ssl_sock_proto_PJ_SSL_SOCK_PROTO_SSL2: pj_ssl_sock_proto = 1;
pub const pj_ssl_sock_proto_PJ_SSL_SOCK_PROTO_SSL3: pj_ssl_sock_proto = 2;
pub const pj_ssl_sock_proto_PJ_SSL_SOCK_PROTO_TLS1: pj_ssl_sock_proto = 4;
pub const pj_ssl_sock_proto_PJ_SSL_SOCK_PROTO_TLS1_1: pj_ssl_sock_proto = 8;
pub const pj_ssl_sock_proto_PJ_SSL_SOCK_PROTO_TLS1_2: pj_ssl_sock_proto = 16;
pub const pj_ssl_sock_proto_PJ_SSL_SOCK_PROTO_TLS1_3: pj_ssl_sock_proto = 32;
pub const pj_ssl_sock_proto_PJ_SSL_SOCK_PROTO_SSL23: pj_ssl_sock_proto = 65535;
pub const pj_ssl_sock_proto_PJ_SSL_SOCK_PROTO_ALL: pj_ssl_sock_proto = 65535;
pub const pj_ssl_sock_proto_PJ_SSL_SOCK_PROTO_DTLS1: pj_ssl_sock_proto = 65536;
pub type pj_ssl_sock_proto = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ssl_sock_info {
    pub established: pj_bool_t,
    pub proto: pj_uint32_t,
    pub cipher: pj_ssl_cipher,
    pub local_addr: pj_sockaddr,
    pub remote_addr: pj_sockaddr,
    pub local_cert_info: *mut pj_ssl_cert_info,
    pub remote_cert_info: *mut pj_ssl_cert_info,
    pub verify_status: pj_uint32_t,
    pub last_native_err: ::std::os::raw::c_ulong,
    pub grp_lock: *mut pj_grp_lock_t,
}
#[test]
fn bindgen_test_layout_pj_ssl_sock_info() {
    assert_eq!(
        ::std::mem::size_of::<pj_ssl_sock_info>(),
        112usize,
        concat!("Size of: ", stringify!(pj_ssl_sock_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ssl_sock_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ssl_sock_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_info>())).established as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_info),
            "::",
            stringify!(established)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_info>())).proto as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_info),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_info>())).cipher as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_info),
            "::",
            stringify!(cipher)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_info>())).local_addr as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_info),
            "::",
            stringify!(local_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_info>())).remote_addr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_info),
            "::",
            stringify!(remote_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_sock_info>())).local_cert_info as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_info),
            "::",
            stringify!(local_cert_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_sock_info>())).remote_cert_info as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_info),
            "::",
            stringify!(remote_cert_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_info>())).verify_status as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_info),
            "::",
            stringify!(verify_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_sock_info>())).last_native_err as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_info),
            "::",
            stringify!(last_native_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_info>())).grp_lock as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_info),
            "::",
            stringify!(grp_lock)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_sock_param {
    pub grp_lock: *mut pj_grp_lock_t,
    pub sock_af: ::std::os::raw::c_int,
    pub sock_type: ::std::os::raw::c_int,
    pub ioqueue: *mut pj_ioqueue_t,
    pub timer_heap: *mut pj_timer_heap_t,
    pub cb: pj_ssl_sock_cb,
    pub user_data: *mut ::std::os::raw::c_void,
    pub proto: pj_uint32_t,
    pub async_cnt: ::std::os::raw::c_uint,
    pub concurrency: ::std::os::raw::c_int,
    pub whole_data: pj_bool_t,
    pub send_buffer_size: pj_size_t,
    pub read_buffer_size: pj_size_t,
    pub ciphers_num: ::std::os::raw::c_uint,
    pub ciphers: *mut pj_ssl_cipher,
    pub curves_num: ::std::os::raw::c_uint,
    pub curves: *mut pj_ssl_curve,
    pub sigalgs: pj_str_t,
    pub entropy_type: pj_ssl_entropy_t,
    pub entropy_path: pj_str_t,
    pub timeout: pj_time_val,
    pub verify_peer: pj_bool_t,
    pub require_client_cert: pj_bool_t,
    pub server_name: pj_str_t,
    pub reuse_addr: pj_bool_t,
    pub qos_type: pj_qos_type,
    pub qos_params: pj_qos_params,
    pub qos_ignore_error: pj_bool_t,
    pub sockopt_params: pj_sockopt_params,
    pub sockopt_ignore_error: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pj_ssl_sock_param() {
    assert_eq!(
        ::std::mem::size_of::<pj_ssl_sock_param>(),
        368usize,
        concat!("Size of: ", stringify!(pj_ssl_sock_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ssl_sock_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ssl_sock_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).grp_lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(grp_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).sock_af as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(sock_af)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).sock_type as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(sock_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).ioqueue as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(ioqueue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).timer_heap as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(timer_heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).cb as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).user_data as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).proto as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).async_cnt as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(async_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).concurrency as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(concurrency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).whole_data as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(whole_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_sock_param>())).send_buffer_size as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(send_buffer_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_sock_param>())).read_buffer_size as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(read_buffer_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).ciphers_num as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(ciphers_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).ciphers as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(ciphers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).curves_num as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(curves_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).curves as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(curves)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).sigalgs as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(sigalgs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).entropy_type as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(entropy_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).entropy_path as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(entropy_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).timeout as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).verify_peer as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(verify_peer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_sock_param>())).require_client_cert as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(require_client_cert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).server_name as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(server_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).reuse_addr as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(reuse_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).qos_type as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(qos_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_sock_param>())).qos_params as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(qos_params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_sock_param>())).qos_ignore_error as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(qos_ignore_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_sock_param>())).sockopt_params as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(sockopt_params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_sock_param>())).sockopt_ignore_error as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_sock_param),
            "::",
            stringify!(sockopt_ignore_error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_start_connect_param {
    pub pool: *mut pj_pool_t,
    pub localaddr: *const pj_sockaddr_t,
    pub local_port_range: pj_uint16_t,
    pub remaddr: *const pj_sockaddr_t,
    pub addr_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pj_ssl_start_connect_param() {
    assert_eq!(
        ::std::mem::size_of::<pj_ssl_start_connect_param>(),
        40usize,
        concat!("Size of: ", stringify!(pj_ssl_start_connect_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ssl_start_connect_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ssl_start_connect_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ssl_start_connect_param>())).pool as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_start_connect_param),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_start_connect_param>())).localaddr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_start_connect_param),
            "::",
            stringify!(localaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_start_connect_param>())).local_port_range as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_start_connect_param),
            "::",
            stringify!(local_port_range)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_start_connect_param>())).remaddr as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_start_connect_param),
            "::",
            stringify!(remaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ssl_start_connect_param>())).addr_len as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ssl_start_connect_param),
            "::",
            stringify!(addr_len)
        )
    );
}
extern "C" {
    pub fn pj_ssl_sock_param_default(param: *mut pj_ssl_sock_param);
}
extern "C" {
    pub fn pj_ssl_sock_param_copy(
        pool: *mut pj_pool_t,
        dst: *mut pj_ssl_sock_param,
        src: *const pj_ssl_sock_param,
    );
}
extern "C" {
    pub fn pj_ssl_sock_create(
        pool: *mut pj_pool_t,
        param: *const pj_ssl_sock_param,
        p_ssock: *mut *mut pj_ssl_sock_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_sock_set_certificate(
        ssock: *mut pj_ssl_sock_t,
        pool: *mut pj_pool_t,
        cert: *const pj_ssl_cert_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_sock_close(ssock: *mut pj_ssl_sock_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_sock_set_user_data(
        ssock: *mut pj_ssl_sock_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_sock_get_user_data(ssock: *mut pj_ssl_sock_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pj_ssl_sock_get_info(
        ssock: *mut pj_ssl_sock_t,
        info: *mut pj_ssl_sock_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_sock_start_read(
        ssock: *mut pj_ssl_sock_t,
        pool: *mut pj_pool_t,
        buff_size: ::std::os::raw::c_uint,
        flags: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_sock_start_read2(
        ssock: *mut pj_ssl_sock_t,
        pool: *mut pj_pool_t,
        buff_size: ::std::os::raw::c_uint,
        readbuf: *mut *mut ::std::os::raw::c_void,
        flags: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_sock_start_recvfrom(
        ssock: *mut pj_ssl_sock_t,
        pool: *mut pj_pool_t,
        buff_size: ::std::os::raw::c_uint,
        flags: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_sock_start_recvfrom2(
        ssock: *mut pj_ssl_sock_t,
        pool: *mut pj_pool_t,
        buff_size: ::std::os::raw::c_uint,
        readbuf: *mut *mut ::std::os::raw::c_void,
        flags: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_sock_send(
        ssock: *mut pj_ssl_sock_t,
        send_key: *mut pj_ioqueue_op_key_t,
        data: *const ::std::os::raw::c_void,
        size: *mut pj_ssize_t,
        flags: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_sock_sendto(
        ssock: *mut pj_ssl_sock_t,
        send_key: *mut pj_ioqueue_op_key_t,
        data: *const ::std::os::raw::c_void,
        size: *mut pj_ssize_t,
        flags: ::std::os::raw::c_uint,
        addr: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_sock_start_accept(
        ssock: *mut pj_ssl_sock_t,
        pool: *mut pj_pool_t,
        local_addr: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_sock_start_accept2(
        ssock: *mut pj_ssl_sock_t,
        pool: *mut pj_pool_t,
        local_addr: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_int,
        newsock_param: *const pj_ssl_sock_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_sock_start_connect(
        ssock: *mut pj_ssl_sock_t,
        pool: *mut pj_pool_t,
        localaddr: *const pj_sockaddr_t,
        remaddr: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_sock_start_connect2(
        ssock: *mut pj_ssl_sock_t,
        connect_param: *mut pj_ssl_start_connect_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ssl_sock_renegotiate(ssock: *mut pj_ssl_sock_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_str(str_: *mut ::std::os::raw::c_char) -> pj_str_t;
}
extern "C" {
    pub fn pj_strassign(dst: *mut pj_str_t, src: *mut pj_str_t) -> *mut pj_str_t;
}
extern "C" {
    pub fn pj_strcpy(dst: *mut pj_str_t, src: *const pj_str_t) -> *mut pj_str_t;
}
extern "C" {
    pub fn pj_strcpy2(dst: *mut pj_str_t, src: *const ::std::os::raw::c_char) -> *mut pj_str_t;
}
extern "C" {
    pub fn pj_strncpy(dst: *mut pj_str_t, src: *const pj_str_t, max: pj_ssize_t) -> *mut pj_str_t;
}
extern "C" {
    pub fn pj_strncpy_with_null(
        dst: *mut pj_str_t,
        src: *const pj_str_t,
        max: pj_ssize_t,
    ) -> *mut pj_str_t;
}
extern "C" {
    pub fn pj_strdup(
        pool: *mut pj_pool_t,
        dst: *mut pj_str_t,
        src: *const pj_str_t,
    ) -> *mut pj_str_t;
}
extern "C" {
    pub fn pj_strdup_with_null(
        pool: *mut pj_pool_t,
        dst: *mut pj_str_t,
        src: *const pj_str_t,
    ) -> *mut pj_str_t;
}
extern "C" {
    pub fn pj_strdup2(
        pool: *mut pj_pool_t,
        dst: *mut pj_str_t,
        src: *const ::std::os::raw::c_char,
    ) -> *mut pj_str_t;
}
extern "C" {
    pub fn pj_strdup2_with_null(
        pool: *mut pj_pool_t,
        dst: *mut pj_str_t,
        src: *const ::std::os::raw::c_char,
    ) -> *mut pj_str_t;
}
extern "C" {
    pub fn pj_strdup3(pool: *mut pj_pool_t, src: *const ::std::os::raw::c_char) -> pj_str_t;
}
extern "C" {
    pub fn pj_strcmp(str1: *const pj_str_t, str2: *const pj_str_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_strcmp2(
        str1: *const pj_str_t,
        str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_strncmp(
        str1: *const pj_str_t,
        str2: *const pj_str_t,
        len: pj_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_strncmp2(
        str1: *const pj_str_t,
        str2: *const ::std::os::raw::c_char,
        len: pj_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_stricmp(str1: *const pj_str_t, str2: *const pj_str_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_stricmp2(
        str1: *const pj_str_t,
        str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_strnicmp(
        str1: *const pj_str_t,
        str2: *const pj_str_t,
        len: pj_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_strnicmp2(
        str1: *const pj_str_t,
        str2: *const ::std::os::raw::c_char,
        len: pj_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_strcat(dst: *mut pj_str_t, src: *const pj_str_t);
}
extern "C" {
    pub fn pj_strcat2(dst: *mut pj_str_t, src: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn pj_strspn(str_: *const pj_str_t, set_char: *const pj_str_t) -> pj_ssize_t;
}
extern "C" {
    pub fn pj_strspn2(str_: *const pj_str_t, set_char: *const ::std::os::raw::c_char)
        -> pj_ssize_t;
}
extern "C" {
    pub fn pj_strcspn(str_: *const pj_str_t, set_char: *const pj_str_t) -> pj_ssize_t;
}
extern "C" {
    pub fn pj_strcspn2(
        str_: *const pj_str_t,
        set_char: *const ::std::os::raw::c_char,
    ) -> pj_ssize_t;
}
extern "C" {
    pub fn pj_strtok(
        str_: *const pj_str_t,
        delim: *const pj_str_t,
        tok: *mut pj_str_t,
        start_idx: pj_size_t,
    ) -> pj_ssize_t;
}
extern "C" {
    pub fn pj_strtok2(
        str_: *const pj_str_t,
        delim: *const ::std::os::raw::c_char,
        tok: *mut pj_str_t,
        start_idx: pj_size_t,
    ) -> pj_ssize_t;
}
extern "C" {
    pub fn pj_strstr(str_: *const pj_str_t, substr: *const pj_str_t)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_stristr(
        str_: *const pj_str_t,
        substr: *const pj_str_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_strltrim(str_: *mut pj_str_t) -> *mut pj_str_t;
}
extern "C" {
    pub fn pj_strrtrim(str_: *mut pj_str_t) -> *mut pj_str_t;
}
extern "C" {
    pub fn pj_strtrim(str_: *mut pj_str_t) -> *mut pj_str_t;
}
extern "C" {
    pub fn pj_create_random_string(
        str_: *mut ::std::os::raw::c_char,
        length: pj_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_strtol(str_: *const pj_str_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pj_strtol2(str_: *const pj_str_t, value: *mut ::std::os::raw::c_long) -> pj_status_t;
}
extern "C" {
    pub fn pj_strtoul(str_: *const pj_str_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn pj_strtoul2(
        str_: *const pj_str_t,
        endptr: *mut pj_str_t,
        base: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn pj_strtoul3(
        str_: *const pj_str_t,
        value: *mut ::std::os::raw::c_ulong,
        base: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_strtof(str_: *const pj_str_t) -> f32;
}
extern "C" {
    pub fn pj_utoa(
        val: ::std::os::raw::c_ulong,
        buf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_utoa_pad(
        val: ::std::os::raw::c_ulong,
        buf: *mut ::std::os::raw::c_char,
        min_dig: ::std::os::raw::c_int,
        pad: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const pjsip_ssl_method_PJSIP_SSL_UNSPECIFIED_METHOD: pjsip_ssl_method = 0;
pub const pjsip_ssl_method_PJSIP_SSLV2_METHOD: pjsip_ssl_method = 20;
pub const pjsip_ssl_method_PJSIP_SSLV3_METHOD: pjsip_ssl_method = 30;
pub const pjsip_ssl_method_PJSIP_TLSV1_METHOD: pjsip_ssl_method = 31;
pub const pjsip_ssl_method_PJSIP_TLSV1_1_METHOD: pjsip_ssl_method = 32;
pub const pjsip_ssl_method_PJSIP_TLSV1_2_METHOD: pjsip_ssl_method = 33;
pub const pjsip_ssl_method_PJSIP_TLSV1_3_METHOD: pjsip_ssl_method = 34;
pub const pjsip_ssl_method_PJSIP_SSLV23_METHOD: pjsip_ssl_method = 23;
pub type pjsip_ssl_method = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_tls_on_accept_fail_param {
    pub local_addr: *const pj_sockaddr_t,
    pub remote_addr: *const pj_sockaddr_t,
    pub status: pj_status_t,
    pub last_native_err: pj_status_t,
}
#[test]
fn bindgen_test_layout_pjsip_tls_on_accept_fail_param() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_tls_on_accept_fail_param>(),
        24usize,
        concat!("Size of: ", stringify!(pjsip_tls_on_accept_fail_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_tls_on_accept_fail_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_tls_on_accept_fail_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tls_on_accept_fail_param>())).local_addr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_on_accept_fail_param),
            "::",
            stringify!(local_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tls_on_accept_fail_param>())).remote_addr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_on_accept_fail_param),
            "::",
            stringify!(remote_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tls_on_accept_fail_param>())).status as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_on_accept_fail_param),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tls_on_accept_fail_param>())).last_native_err as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_on_accept_fail_param),
            "::",
            stringify!(last_native_err)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_tls_setting {
    pub ca_list_file: pj_str_t,
    pub ca_list_path: pj_str_t,
    pub cert_file: pj_str_t,
    pub privkey_file: pj_str_t,
    pub ca_buf: pj_ssl_cert_buffer,
    pub cert_buf: pj_ssl_cert_buffer,
    pub privkey_buf: pj_ssl_cert_buffer,
    pub password: pj_str_t,
    pub method: pjsip_ssl_method,
    pub proto: pj_uint32_t,
    pub ciphers_num: ::std::os::raw::c_uint,
    pub ciphers: *mut pj_ssl_cipher,
    pub curves_num: ::std::os::raw::c_uint,
    pub curves: *mut pj_ssl_curve,
    pub sigalgs: pj_str_t,
    pub entropy_type: pj_ssl_entropy_t,
    pub entropy_path: pj_str_t,
    pub verify_server: pj_bool_t,
    pub verify_client: pj_bool_t,
    pub require_client_cert: pj_bool_t,
    pub timeout: pj_time_val,
    pub reuse_addr: pj_bool_t,
    pub qos_type: pj_qos_type,
    pub qos_params: pj_qos_params,
    pub qos_ignore_error: pj_bool_t,
    pub sockopt_params: pj_sockopt_params,
    pub sockopt_ignore_error: pj_bool_t,
    pub on_accept_fail_cb:
        ::std::option::Option<unsafe extern "C" fn(param: *const pjsip_tls_on_accept_fail_param)>,
}
#[test]
fn bindgen_test_layout_pjsip_tls_setting() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_tls_setting>(),
        384usize,
        concat!("Size of: ", stringify!(pjsip_tls_setting))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_tls_setting>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_tls_setting))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).ca_list_file as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(ca_list_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).ca_list_path as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(ca_list_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).cert_file as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(cert_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).privkey_file as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(privkey_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).ca_buf as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(ca_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).cert_buf as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(cert_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).privkey_buf as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(privkey_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).password as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(password)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).method as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).proto as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).ciphers_num as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(ciphers_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).ciphers as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(ciphers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).curves_num as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(curves_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).curves as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(curves)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).sigalgs as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(sigalgs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).entropy_type as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(entropy_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).entropy_path as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(entropy_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).verify_server as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(verify_server)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).verify_client as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(verify_client)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tls_setting>())).require_client_cert as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(require_client_cert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).timeout as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).reuse_addr as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(reuse_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).qos_type as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(qos_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_tls_setting>())).qos_params as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(qos_params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tls_setting>())).qos_ignore_error as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(qos_ignore_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tls_setting>())).sockopt_params as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(sockopt_params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tls_setting>())).sockopt_ignore_error as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(sockopt_ignore_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tls_setting>())).on_accept_fail_cb as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_setting),
            "::",
            stringify!(on_accept_fail_cb)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_tls_state_info {
    pub ssl_sock_info: *mut pj_ssl_sock_info,
}
#[test]
fn bindgen_test_layout_pjsip_tls_state_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_tls_state_info>(),
        8usize,
        concat!("Size of: ", stringify!(pjsip_tls_state_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_tls_state_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_tls_state_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_tls_state_info>())).ssl_sock_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_tls_state_info),
            "::",
            stringify!(ssl_sock_info)
        )
    );
}
extern "C" {
    pub fn pjsip_tls_setting_wipe_keys(opt: *mut pjsip_tls_setting);
}
extern "C" {
    pub fn pjsip_tls_transport_start(
        endpt: *mut pjsip_endpoint,
        opt: *const pjsip_tls_setting,
        local: *const pj_sockaddr_in,
        a_name: *const pjsip_host_port,
        async_cnt: ::std::os::raw::c_uint,
        p_factory: *mut *mut pjsip_tpfactory,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tls_transport_start2(
        endpt: *mut pjsip_endpoint,
        opt: *const pjsip_tls_setting,
        local: *const pj_sockaddr,
        a_name: *const pjsip_host_port,
        async_cnt: ::std::os::raw::c_uint,
        p_factory: *mut *mut pjsip_tpfactory,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tls_transport_lis_start(
        factory: *mut pjsip_tpfactory,
        local: *const pj_sockaddr,
        a_name: *const pjsip_host_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tls_transport_restart(
        factory: *mut pjsip_tpfactory,
        local: *const pj_sockaddr,
        a_name: *const pjsip_host_port,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_common_credential {
    pub realm: pj_str_t,
    pub other_param: pjsip_param,
}
#[test]
fn bindgen_test_layout_pjsip_common_credential() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_common_credential>(),
        64usize,
        concat!("Size of: ", stringify!(pjsip_common_credential))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_common_credential>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_common_credential))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_common_credential>())).realm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_common_credential),
            "::",
            stringify!(realm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_common_credential>())).other_param as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_common_credential),
            "::",
            stringify!(other_param)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_digest_credential {
    pub realm: pj_str_t,
    pub other_param: pjsip_param,
    pub username: pj_str_t,
    pub nonce: pj_str_t,
    pub uri: pj_str_t,
    pub response: pj_str_t,
    pub algorithm: pj_str_t,
    pub cnonce: pj_str_t,
    pub opaque: pj_str_t,
    pub qop: pj_str_t,
    pub nc: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjsip_digest_credential() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_digest_credential>(),
        208usize,
        concat!("Size of: ", stringify!(pjsip_digest_credential))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_digest_credential>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_digest_credential))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_digest_credential>())).realm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_digest_credential),
            "::",
            stringify!(realm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_digest_credential>())).other_param as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_digest_credential),
            "::",
            stringify!(other_param)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_digest_credential>())).username as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_digest_credential),
            "::",
            stringify!(username)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_digest_credential>())).nonce as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_digest_credential),
            "::",
            stringify!(nonce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_digest_credential>())).uri as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_digest_credential),
            "::",
            stringify!(uri)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_digest_credential>())).response as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_digest_credential),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_digest_credential>())).algorithm as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_digest_credential),
            "::",
            stringify!(algorithm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_digest_credential>())).cnonce as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_digest_credential),
            "::",
            stringify!(cnonce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_digest_credential>())).opaque as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_digest_credential),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_digest_credential>())).qop as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_digest_credential),
            "::",
            stringify!(qop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_digest_credential>())).nc as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_digest_credential),
            "::",
            stringify!(nc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_pgp_credential {
    pub realm: pj_str_t,
    pub other_param: pjsip_param,
    pub version: pj_str_t,
    pub signature: pj_str_t,
    pub signed_by: pj_str_t,
    pub nonce: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjsip_pgp_credential() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_pgp_credential>(),
        128usize,
        concat!("Size of: ", stringify!(pjsip_pgp_credential))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_pgp_credential>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_pgp_credential))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_pgp_credential>())).realm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pgp_credential),
            "::",
            stringify!(realm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_pgp_credential>())).other_param as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pgp_credential),
            "::",
            stringify!(other_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_pgp_credential>())).version as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pgp_credential),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_pgp_credential>())).signature as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pgp_credential),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_pgp_credential>())).signed_by as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pgp_credential),
            "::",
            stringify!(signed_by)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_pgp_credential>())).nonce as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pgp_credential),
            "::",
            stringify!(nonce)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_oauth_credential {
    pub realm: pj_str_t,
    pub other_param: pjsip_param,
    pub username: pj_str_t,
    pub token: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjsip_oauth_credential() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_oauth_credential>(),
        96usize,
        concat!("Size of: ", stringify!(pjsip_oauth_credential))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_oauth_credential>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_oauth_credential))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_oauth_credential>())).realm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_oauth_credential),
            "::",
            stringify!(realm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_oauth_credential>())).other_param as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_oauth_credential),
            "::",
            stringify!(other_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_oauth_credential>())).username as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_oauth_credential),
            "::",
            stringify!(username)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_oauth_credential>())).token as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_oauth_credential),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_authorization_hdr {
    pub prev: *mut pjsip_authorization_hdr,
    pub next: *mut pjsip_authorization_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub scheme: pj_str_t,
    pub credential: pjsip_authorization_hdr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjsip_authorization_hdr__bindgen_ty_1 {
    pub common: pjsip_common_credential,
    pub digest: pjsip_digest_credential,
    pub pgp: pjsip_pgp_credential,
    pub oauth: pjsip_oauth_credential,
    _bindgen_union_align: [u64; 26usize],
}
#[test]
fn bindgen_test_layout_pjsip_authorization_hdr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_authorization_hdr__bindgen_ty_1>(),
        208usize,
        concat!(
            "Size of: ",
            stringify!(pjsip_authorization_hdr__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_authorization_hdr__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjsip_authorization_hdr__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_authorization_hdr__bindgen_ty_1>())).common as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_authorization_hdr__bindgen_ty_1),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_authorization_hdr__bindgen_ty_1>())).digest as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_authorization_hdr__bindgen_ty_1),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_authorization_hdr__bindgen_ty_1>())).pgp as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_authorization_hdr__bindgen_ty_1),
            "::",
            stringify!(pgp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_authorization_hdr__bindgen_ty_1>())).oauth as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_authorization_hdr__bindgen_ty_1),
            "::",
            stringify!(oauth)
        )
    );
}
#[test]
fn bindgen_test_layout_pjsip_authorization_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_authorization_hdr>(),
        288usize,
        concat!("Size of: ", stringify!(pjsip_authorization_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_authorization_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_authorization_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_authorization_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_authorization_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_authorization_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_authorization_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_authorization_hdr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_authorization_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_authorization_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_authorization_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_authorization_hdr>())).sname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_authorization_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_authorization_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_authorization_hdr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_authorization_hdr>())).scheme as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_authorization_hdr),
            "::",
            stringify!(scheme)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_authorization_hdr>())).credential as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_authorization_hdr),
            "::",
            stringify!(credential)
        )
    );
}
pub type pjsip_proxy_authorization_hdr = pjsip_authorization_hdr;
extern "C" {
    pub fn pjsip_authorization_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_authorization_hdr;
}
extern "C" {
    pub fn pjsip_proxy_authorization_hdr_create(
        pool: *mut pj_pool_t,
    ) -> *mut pjsip_proxy_authorization_hdr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_common_challenge {
    pub realm: pj_str_t,
    pub other_param: pjsip_param,
}
#[test]
fn bindgen_test_layout_pjsip_common_challenge() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_common_challenge>(),
        64usize,
        concat!("Size of: ", stringify!(pjsip_common_challenge))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_common_challenge>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_common_challenge))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_common_challenge>())).realm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_common_challenge),
            "::",
            stringify!(realm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_common_challenge>())).other_param as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_common_challenge),
            "::",
            stringify!(other_param)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_digest_challenge {
    pub realm: pj_str_t,
    pub other_param: pjsip_param,
    pub domain: pj_str_t,
    pub nonce: pj_str_t,
    pub opaque: pj_str_t,
    pub stale: ::std::os::raw::c_int,
    pub algorithm: pj_str_t,
    pub qop: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjsip_digest_challenge() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_digest_challenge>(),
        152usize,
        concat!("Size of: ", stringify!(pjsip_digest_challenge))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_digest_challenge>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_digest_challenge))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_digest_challenge>())).realm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_digest_challenge),
            "::",
            stringify!(realm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_digest_challenge>())).other_param as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_digest_challenge),
            "::",
            stringify!(other_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_digest_challenge>())).domain as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_digest_challenge),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_digest_challenge>())).nonce as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_digest_challenge),
            "::",
            stringify!(nonce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_digest_challenge>())).opaque as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_digest_challenge),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_digest_challenge>())).stale as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_digest_challenge),
            "::",
            stringify!(stale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_digest_challenge>())).algorithm as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_digest_challenge),
            "::",
            stringify!(algorithm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_digest_challenge>())).qop as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_digest_challenge),
            "::",
            stringify!(qop)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_pgp_challenge {
    pub realm: pj_str_t,
    pub other_param: pjsip_param,
    pub version: pj_str_t,
    pub micalgorithm: pj_str_t,
    pub pubalgorithm: pj_str_t,
    pub nonce: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjsip_pgp_challenge() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_pgp_challenge>(),
        128usize,
        concat!("Size of: ", stringify!(pjsip_pgp_challenge))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_pgp_challenge>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_pgp_challenge))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_pgp_challenge>())).realm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pgp_challenge),
            "::",
            stringify!(realm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_pgp_challenge>())).other_param as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pgp_challenge),
            "::",
            stringify!(other_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_pgp_challenge>())).version as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pgp_challenge),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_pgp_challenge>())).micalgorithm as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pgp_challenge),
            "::",
            stringify!(micalgorithm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_pgp_challenge>())).pubalgorithm as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pgp_challenge),
            "::",
            stringify!(pubalgorithm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_pgp_challenge>())).nonce as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pgp_challenge),
            "::",
            stringify!(nonce)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_www_authenticate_hdr {
    pub prev: *mut pjsip_www_authenticate_hdr,
    pub next: *mut pjsip_www_authenticate_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub scheme: pj_str_t,
    pub challenge: pjsip_www_authenticate_hdr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjsip_www_authenticate_hdr__bindgen_ty_1 {
    pub common: pjsip_common_challenge,
    pub digest: pjsip_digest_challenge,
    pub pgp: pjsip_pgp_challenge,
    _bindgen_union_align: [u64; 19usize],
}
#[test]
fn bindgen_test_layout_pjsip_www_authenticate_hdr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_www_authenticate_hdr__bindgen_ty_1>(),
        152usize,
        concat!(
            "Size of: ",
            stringify!(pjsip_www_authenticate_hdr__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_www_authenticate_hdr__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjsip_www_authenticate_hdr__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_www_authenticate_hdr__bindgen_ty_1>())).common as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_www_authenticate_hdr__bindgen_ty_1),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_www_authenticate_hdr__bindgen_ty_1>())).digest as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_www_authenticate_hdr__bindgen_ty_1),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_www_authenticate_hdr__bindgen_ty_1>())).pgp as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_www_authenticate_hdr__bindgen_ty_1),
            "::",
            stringify!(pgp)
        )
    );
}
#[test]
fn bindgen_test_layout_pjsip_www_authenticate_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_www_authenticate_hdr>(),
        232usize,
        concat!("Size of: ", stringify!(pjsip_www_authenticate_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_www_authenticate_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_www_authenticate_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_www_authenticate_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_www_authenticate_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_www_authenticate_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_www_authenticate_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_www_authenticate_hdr>())).type_ as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_www_authenticate_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_www_authenticate_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_www_authenticate_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_www_authenticate_hdr>())).sname as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_www_authenticate_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_www_authenticate_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_www_authenticate_hdr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_www_authenticate_hdr>())).scheme as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_www_authenticate_hdr),
            "::",
            stringify!(scheme)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_www_authenticate_hdr>())).challenge as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_www_authenticate_hdr),
            "::",
            stringify!(challenge)
        )
    );
}
pub type pjsip_proxy_authenticate_hdr = pjsip_www_authenticate_hdr;
extern "C" {
    pub fn pjsip_www_authenticate_hdr_create(
        pool: *mut pj_pool_t,
    ) -> *mut pjsip_www_authenticate_hdr;
}
extern "C" {
    pub fn pjsip_proxy_authenticate_hdr_create(
        pool: *mut pj_pool_t,
    ) -> *mut pjsip_proxy_authenticate_hdr;
}
pub const pjsip_cred_data_type_PJSIP_CRED_DATA_PLAIN_PASSWD: pjsip_cred_data_type = 0;
pub const pjsip_cred_data_type_PJSIP_CRED_DATA_DIGEST: pjsip_cred_data_type = 1;
pub const pjsip_cred_data_type_PJSIP_CRED_DATA_EXT_AKA: pjsip_cred_data_type = 16;
pub type pjsip_cred_data_type = ::std::os::raw::c_uint;
pub const pjsip_auth_qop_type_PJSIP_AUTH_QOP_NONE: pjsip_auth_qop_type = 0;
pub const pjsip_auth_qop_type_PJSIP_AUTH_QOP_AUTH: pjsip_auth_qop_type = 1;
pub const pjsip_auth_qop_type_PJSIP_AUTH_QOP_AUTH_INT: pjsip_auth_qop_type = 2;
pub const pjsip_auth_qop_type_PJSIP_AUTH_QOP_UNKNOWN: pjsip_auth_qop_type = 3;
pub type pjsip_auth_qop_type = ::std::os::raw::c_uint;
pub type pjsip_cred_cb = ::std::option::Option<
    unsafe extern "C" fn(
        pool: *mut pj_pool_t,
        chal: *const pjsip_digest_challenge,
        cred: *const pjsip_cred_info,
        method: *const pj_str_t,
        auth: *mut pjsip_digest_credential,
    ) -> pj_status_t,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_cred_info {
    pub realm: pj_str_t,
    pub scheme: pj_str_t,
    pub username: pj_str_t,
    pub data_type: ::std::os::raw::c_int,
    pub data: pj_str_t,
    pub ext: pjsip_cred_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjsip_cred_info__bindgen_ty_1 {
    pub aka: pjsip_cred_info__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: [u64; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_cred_info__bindgen_ty_1__bindgen_ty_1 {
    pub k: pj_str_t,
    pub op: pj_str_t,
    pub amf: pj_str_t,
    pub cb: pjsip_cred_cb,
}
#[test]
fn bindgen_test_layout_pjsip_cred_info__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_cred_info__bindgen_ty_1__bindgen_ty_1>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(pjsip_cred_info__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_cred_info__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjsip_cred_info__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cred_info__bindgen_ty_1__bindgen_ty_1>())).k as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cred_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(k)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cred_info__bindgen_ty_1__bindgen_ty_1>())).op as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cred_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cred_info__bindgen_ty_1__bindgen_ty_1>())).amf as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cred_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(amf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cred_info__bindgen_ty_1__bindgen_ty_1>())).cb as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cred_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(cb)
        )
    );
}
#[test]
fn bindgen_test_layout_pjsip_cred_info__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_cred_info__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(pjsip_cred_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_cred_info__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_cred_info__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_cred_info__bindgen_ty_1>())).aka as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cred_info__bindgen_ty_1),
            "::",
            stringify!(aka)
        )
    );
}
#[test]
fn bindgen_test_layout_pjsip_cred_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_cred_info>(),
        128usize,
        concat!("Size of: ", stringify!(pjsip_cred_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_cred_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_cred_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cred_info>())).realm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cred_info),
            "::",
            stringify!(realm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cred_info>())).scheme as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cred_info),
            "::",
            stringify!(scheme)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cred_info>())).username as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cred_info),
            "::",
            stringify!(username)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cred_info>())).data_type as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cred_info),
            "::",
            stringify!(data_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cred_info>())).data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cred_info),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cred_info>())).ext as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cred_info),
            "::",
            stringify!(ext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_cached_auth_hdr {
    pub prev: *mut pjsip_cached_auth_hdr,
    pub next: *mut pjsip_cached_auth_hdr,
    pub method: pjsip_method,
    pub hdr: *mut pjsip_authorization_hdr,
}
#[test]
fn bindgen_test_layout_pjsip_cached_auth_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_cached_auth_hdr>(),
        48usize,
        concat!("Size of: ", stringify!(pjsip_cached_auth_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_cached_auth_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_cached_auth_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cached_auth_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cached_auth_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cached_auth_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cached_auth_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cached_auth_hdr>())).method as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cached_auth_hdr),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cached_auth_hdr>())).hdr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cached_auth_hdr),
            "::",
            stringify!(hdr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_cached_auth {
    pub prev: *mut pjsip_cached_auth,
    pub next: *mut pjsip_cached_auth,
    pub pool: *mut pj_pool_t,
    pub realm: pj_str_t,
    pub is_proxy: pj_bool_t,
    pub qop_value: pjsip_auth_qop_type,
    pub stale_cnt: ::std::os::raw::c_uint,
    pub nc: pj_uint32_t,
    pub cnonce: pj_str_t,
    pub last_chal: *mut pjsip_www_authenticate_hdr,
}
#[test]
fn bindgen_test_layout_pjsip_cached_auth() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_cached_auth>(),
        80usize,
        concat!("Size of: ", stringify!(pjsip_cached_auth))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_cached_auth>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_cached_auth))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cached_auth>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cached_auth),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cached_auth>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cached_auth),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cached_auth>())).pool as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cached_auth),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cached_auth>())).realm as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cached_auth),
            "::",
            stringify!(realm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cached_auth>())).is_proxy as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cached_auth),
            "::",
            stringify!(is_proxy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cached_auth>())).qop_value as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cached_auth),
            "::",
            stringify!(qop_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cached_auth>())).stale_cnt as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cached_auth),
            "::",
            stringify!(stale_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cached_auth>())).nc as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cached_auth),
            "::",
            stringify!(nc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cached_auth>())).cnonce as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cached_auth),
            "::",
            stringify!(cnonce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_cached_auth>())).last_chal as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_cached_auth),
            "::",
            stringify!(last_chal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_auth_clt_pref {
    pub initial_auth: pj_bool_t,
    pub algorithm: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjsip_auth_clt_pref() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_auth_clt_pref>(),
        24usize,
        concat!("Size of: ", stringify!(pjsip_auth_clt_pref))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_auth_clt_pref>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_auth_clt_pref))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_auth_clt_pref>())).initial_auth as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_auth_clt_pref),
            "::",
            stringify!(initial_auth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_auth_clt_pref>())).algorithm as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_auth_clt_pref),
            "::",
            stringify!(algorithm)
        )
    );
}
extern "C" {
    pub fn pjsip_auth_clt_pref_dup(
        pool: *mut pj_pool_t,
        dst: *mut pjsip_auth_clt_pref,
        src: *const pjsip_auth_clt_pref,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_auth_clt_sess {
    pub pool: *mut pj_pool_t,
    pub endpt: *mut pjsip_endpoint,
    pub pref: pjsip_auth_clt_pref,
    pub cred_cnt: ::std::os::raw::c_uint,
    pub cred_info: *mut pjsip_cred_info,
    pub cached_auth: pjsip_cached_auth,
}
#[test]
fn bindgen_test_layout_pjsip_auth_clt_sess() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_auth_clt_sess>(),
        136usize,
        concat!("Size of: ", stringify!(pjsip_auth_clt_sess))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_auth_clt_sess>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_auth_clt_sess))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_auth_clt_sess>())).pool as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_auth_clt_sess),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_auth_clt_sess>())).endpt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_auth_clt_sess),
            "::",
            stringify!(endpt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_auth_clt_sess>())).pref as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_auth_clt_sess),
            "::",
            stringify!(pref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_auth_clt_sess>())).cred_cnt as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_auth_clt_sess),
            "::",
            stringify!(cred_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_auth_clt_sess>())).cred_info as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_auth_clt_sess),
            "::",
            stringify!(cred_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_auth_clt_sess>())).cached_auth as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_auth_clt_sess),
            "::",
            stringify!(cached_auth)
        )
    );
}
extern "C" {
    pub fn pjsip_cred_info_dup(
        pool: *mut pj_pool_t,
        dst: *mut pjsip_cred_info,
        src: *const pjsip_cred_info,
    );
}
extern "C" {
    pub fn pjsip_cred_info_cmp(
        cred1: *const pjsip_cred_info,
        cred2: *const pjsip_cred_info,
    ) -> ::std::os::raw::c_int;
}
pub type pjsip_auth_lookup_cred = ::std::option::Option<
    unsafe extern "C" fn(
        pool: *mut pj_pool_t,
        realm: *const pj_str_t,
        acc_name: *const pj_str_t,
        cred_info: *mut pjsip_cred_info,
    ) -> pj_status_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_auth_lookup_cred_param {
    pub realm: pj_str_t,
    pub acc_name: pj_str_t,
    pub rdata: *mut pjsip_rx_data,
}
#[test]
fn bindgen_test_layout_pjsip_auth_lookup_cred_param() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_auth_lookup_cred_param>(),
        40usize,
        concat!("Size of: ", stringify!(pjsip_auth_lookup_cred_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_auth_lookup_cred_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_auth_lookup_cred_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_auth_lookup_cred_param>())).realm as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_auth_lookup_cred_param),
            "::",
            stringify!(realm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_auth_lookup_cred_param>())).acc_name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_auth_lookup_cred_param),
            "::",
            stringify!(acc_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_auth_lookup_cred_param>())).rdata as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_auth_lookup_cred_param),
            "::",
            stringify!(rdata)
        )
    );
}
pub type pjsip_auth_lookup_cred2 = ::std::option::Option<
    unsafe extern "C" fn(
        pool: *mut pj_pool_t,
        param: *const pjsip_auth_lookup_cred_param,
        cred_info: *mut pjsip_cred_info,
    ) -> pj_status_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_auth_srv {
    pub realm: pj_str_t,
    pub is_proxy: pj_bool_t,
    pub lookup: pjsip_auth_lookup_cred,
    pub lookup2: pjsip_auth_lookup_cred2,
}
#[test]
fn bindgen_test_layout_pjsip_auth_srv() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_auth_srv>(),
        40usize,
        concat!("Size of: ", stringify!(pjsip_auth_srv))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_auth_srv>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_auth_srv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_auth_srv>())).realm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_auth_srv),
            "::",
            stringify!(realm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_auth_srv>())).is_proxy as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_auth_srv),
            "::",
            stringify!(is_proxy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_auth_srv>())).lookup as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_auth_srv),
            "::",
            stringify!(lookup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_auth_srv>())).lookup2 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_auth_srv),
            "::",
            stringify!(lookup2)
        )
    );
}
extern "C" {
    pub fn pjsip_auth_clt_init(
        sess: *mut pjsip_auth_clt_sess,
        endpt: *mut pjsip_endpoint,
        pool: *mut pj_pool_t,
        options: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_auth_clt_deinit(sess: *mut pjsip_auth_clt_sess) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_auth_clt_clone(
        pool: *mut pj_pool_t,
        sess: *mut pjsip_auth_clt_sess,
        rhs: *const pjsip_auth_clt_sess,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_auth_clt_set_credentials(
        sess: *mut pjsip_auth_clt_sess,
        cred_cnt: ::std::os::raw::c_int,
        c: *const pjsip_cred_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_auth_clt_set_prefs(
        sess: *mut pjsip_auth_clt_sess,
        p: *const pjsip_auth_clt_pref,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_auth_clt_get_prefs(
        sess: *mut pjsip_auth_clt_sess,
        p: *mut pjsip_auth_clt_pref,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_auth_clt_init_req(
        sess: *mut pjsip_auth_clt_sess,
        tdata: *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_auth_clt_reinit_req(
        sess: *mut pjsip_auth_clt_sess,
        rdata: *const pjsip_rx_data,
        old_request: *mut pjsip_tx_data,
        new_request: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_auth_srv_init(
        pool: *mut pj_pool_t,
        auth_srv: *mut pjsip_auth_srv,
        realm: *const pj_str_t,
        lookup: pjsip_auth_lookup_cred,
        options: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_auth_srv_init_param {
    pub realm: *const pj_str_t,
    pub lookup2: pjsip_auth_lookup_cred2,
    pub options: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjsip_auth_srv_init_param() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_auth_srv_init_param>(),
        24usize,
        concat!("Size of: ", stringify!(pjsip_auth_srv_init_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_auth_srv_init_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_auth_srv_init_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_auth_srv_init_param>())).realm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_auth_srv_init_param),
            "::",
            stringify!(realm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_auth_srv_init_param>())).lookup2 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_auth_srv_init_param),
            "::",
            stringify!(lookup2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_auth_srv_init_param>())).options as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_auth_srv_init_param),
            "::",
            stringify!(options)
        )
    );
}
extern "C" {
    pub fn pjsip_auth_srv_init2(
        pool: *mut pj_pool_t,
        auth_srv: *mut pjsip_auth_srv,
        param: *const pjsip_auth_srv_init_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_auth_srv_verify(
        auth_srv: *mut pjsip_auth_srv,
        rdata: *mut pjsip_rx_data,
        status_code: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_auth_srv_challenge(
        auth_srv: *mut pjsip_auth_srv,
        qop: *const pj_str_t,
        nonce: *const pj_str_t,
        opaque: *const pj_str_t,
        stale: pj_bool_t,
        tdata: *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_auth_create_digest(
        result: *mut pj_str_t,
        nonce: *const pj_str_t,
        nc: *const pj_str_t,
        cnonce: *const pj_str_t,
        qop: *const pj_str_t,
        uri: *const pj_str_t,
        realm: *const pj_str_t,
        cred_info: *const pjsip_cred_info,
        method: *const pj_str_t,
    );
}
extern "C" {
    pub fn pjsip_auth_create_aka_response(
        pool: *mut pj_pool_t,
        chal: *const pjsip_digest_challenge,
        cred: *const pjsip_cred_info,
        method: *const pj_str_t,
        auth: *mut pjsip_digest_credential,
    ) -> pj_status_t;
}
pub const pjsip_tsx_state_e_PJSIP_TSX_STATE_NULL: pjsip_tsx_state_e = 0;
pub const pjsip_tsx_state_e_PJSIP_TSX_STATE_CALLING: pjsip_tsx_state_e = 1;
pub const pjsip_tsx_state_e_PJSIP_TSX_STATE_TRYING: pjsip_tsx_state_e = 2;
pub const pjsip_tsx_state_e_PJSIP_TSX_STATE_PROCEEDING: pjsip_tsx_state_e = 3;
pub const pjsip_tsx_state_e_PJSIP_TSX_STATE_COMPLETED: pjsip_tsx_state_e = 4;
pub const pjsip_tsx_state_e_PJSIP_TSX_STATE_CONFIRMED: pjsip_tsx_state_e = 5;
pub const pjsip_tsx_state_e_PJSIP_TSX_STATE_TERMINATED: pjsip_tsx_state_e = 6;
pub const pjsip_tsx_state_e_PJSIP_TSX_STATE_DESTROYED: pjsip_tsx_state_e = 7;
pub const pjsip_tsx_state_e_PJSIP_TSX_STATE_MAX: pjsip_tsx_state_e = 8;
pub type pjsip_tsx_state_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_transaction {
    pub pool: *mut pj_pool_t,
    pub tsx_user: *mut pjsip_module,
    pub endpt: *mut pjsip_endpoint,
    pub terminating: pj_bool_t,
    pub grp_lock: *mut pj_grp_lock_t,
    pub mutex_b: *mut pj_mutex_t,
    pub obj_name: [::std::os::raw::c_char; 32usize],
    pub role: pjsip_role_e,
    pub method: pjsip_method,
    pub cseq: pj_int32_t,
    pub transaction_key: pj_str_t,
    pub hashed_key: pj_uint32_t,
    pub branch: pj_str_t,
    pub status_code: ::std::os::raw::c_int,
    pub status_text: pj_str_t,
    pub state: pjsip_tsx_state_e,
    pub handle_200resp: ::std::os::raw::c_int,
    pub tracing: ::std::os::raw::c_int,
    pub state_handler: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pjsip_transaction, arg2: *mut pjsip_event) -> pj_status_t,
    >,
    pub transport: *mut pjsip_transport,
    pub is_reliable: pj_bool_t,
    pub addr: pj_sockaddr,
    pub addr_len: ::std::os::raw::c_int,
    pub res_addr: pjsip_response_addr,
    pub transport_flag: ::std::os::raw::c_uint,
    pub transport_err: pj_status_t,
    pub tp_sel: pjsip_tpselector,
    pub pending_tx: *mut pjsip_tx_data,
    pub tp_st_key: *mut pjsip_tp_state_listener_key,
    pub last_tx: *mut pjsip_tx_data,
    pub retransmit_count: ::std::os::raw::c_int,
    pub retransmit_timer: pj_timer_entry,
    pub timeout_timer: pj_timer_entry,
    pub mod_data: [*mut ::std::os::raw::c_void; 32usize],
}
#[test]
fn bindgen_test_layout_pjsip_transaction() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_transaction>(),
        704usize,
        concat!("Size of: ", stringify!(pjsip_transaction))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_transaction>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_transaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).pool as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).tsx_user as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(tsx_user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).endpt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(endpt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).terminating as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(terminating)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).grp_lock as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(grp_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).mutex_b as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(mutex_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).obj_name as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(obj_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).role as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(role)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).method as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).cseq as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(cseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_transaction>())).transaction_key as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(transaction_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).hashed_key as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(hashed_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).branch as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(branch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).status_code as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(status_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).status_text as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(status_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).state as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_transaction>())).handle_200resp as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(handle_200resp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).tracing as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(tracing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).state_handler as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(state_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).transport as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(transport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).is_reliable as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(is_reliable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).addr as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).addr_len as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(addr_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).res_addr as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(res_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_transaction>())).transport_flag as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(transport_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).transport_err as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(transport_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).tp_sel as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(tp_sel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).pending_tx as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(pending_tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).tp_st_key as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(tp_st_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).last_tx as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(last_tx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_transaction>())).retransmit_count as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(retransmit_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_transaction>())).retransmit_timer as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(retransmit_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).timeout_timer as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(timeout_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_transaction>())).mod_data as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_transaction),
            "::",
            stringify!(mod_data)
        )
    );
}
extern "C" {
    pub fn pjsip_tsx_layer_init_module(endpt: *mut pjsip_endpoint) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tsx_layer_instance() -> *mut pjsip_module;
}
extern "C" {
    pub fn pjsip_tsx_layer_destroy() -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tsx_layer_get_tsx_count() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjsip_tsx_layer_find_tsx(
        key: *const pj_str_t,
        lock: pj_bool_t,
    ) -> *mut pjsip_transaction;
}
extern "C" {
    pub fn pjsip_tsx_layer_find_tsx2(
        key: *const pj_str_t,
        add_ref: pj_bool_t,
    ) -> *mut pjsip_transaction;
}
extern "C" {
    pub fn pjsip_tsx_create_uac(
        tsx_user: *mut pjsip_module,
        tdata: *mut pjsip_tx_data,
        p_tsx: *mut *mut pjsip_transaction,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tsx_create_uac2(
        tsx_user: *mut pjsip_module,
        tdata: *mut pjsip_tx_data,
        grp_lock: *mut pj_grp_lock_t,
        p_tsx: *mut *mut pjsip_transaction,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tsx_create_uas(
        tsx_user: *mut pjsip_module,
        rdata: *mut pjsip_rx_data,
        p_tsx: *mut *mut pjsip_transaction,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tsx_create_uas2(
        tsx_user: *mut pjsip_module,
        rdata: *mut pjsip_rx_data,
        grp_lock: *mut pj_grp_lock_t,
        p_tsx: *mut *mut pjsip_transaction,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tsx_set_transport(
        tsx: *mut pjsip_transaction,
        sel: *const pjsip_tpselector,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tsx_recv_msg(tsx: *mut pjsip_transaction, rdata: *mut pjsip_rx_data);
}
extern "C" {
    pub fn pjsip_tsx_send_msg(
        tsx: *mut pjsip_transaction,
        tdata: *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tsx_retransmit_no_state(
        tsx: *mut pjsip_transaction,
        tdata: *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tsx_create_key(
        pool: *mut pj_pool_t,
        key: *mut pj_str_t,
        role: pjsip_role_e,
        method: *const pjsip_method,
        rdata: *const pjsip_rx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tsx_terminate(
        tsx: *mut pjsip_transaction,
        code: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tsx_stop_retransmit(tsx: *mut pjsip_transaction) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tsx_set_timeout(
        tsx: *mut pjsip_transaction,
        millisec: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_rdata_get_tsx(rdata: *mut pjsip_rx_data) -> *mut pjsip_transaction;
}
extern "C" {
    pub fn pjsip_tsx_layer_dump(detail: pj_bool_t);
}
extern "C" {
    pub fn pjsip_tsx_state_str(state: pjsip_tsx_state_e) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pjsip_role_name(role: pjsip_role_e) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_ua_init_param {
    pub on_dlg_forked: ::std::option::Option<
        unsafe extern "C" fn(
            first_set: *mut pjsip_dialog,
            res: *mut pjsip_rx_data,
        ) -> *mut pjsip_dialog,
    >,
}
#[test]
fn bindgen_test_layout_pjsip_ua_init_param() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_ua_init_param>(),
        8usize,
        concat!("Size of: ", stringify!(pjsip_ua_init_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_ua_init_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_ua_init_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_ua_init_param>())).on_dlg_forked as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_ua_init_param),
            "::",
            stringify!(on_dlg_forked)
        )
    );
}
extern "C" {
    pub fn pjsip_ua_init_module(
        endpt: *mut pjsip_endpoint,
        prm: *const pjsip_ua_init_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_ua_instance() -> *mut pjsip_user_agent;
}
extern "C" {
    pub fn pjsip_ua_get_dlg_set_count() -> pj_uint32_t;
}
extern "C" {
    pub fn pjsip_ua_find_dialog(
        call_id: *const pj_str_t,
        local_tag: *const pj_str_t,
        remote_tag: *const pj_str_t,
        lock_dialog: pj_bool_t,
    ) -> *mut pjsip_dialog;
}
extern "C" {
    pub fn pjsip_ua_destroy() -> pj_status_t;
}
extern "C" {
    pub fn pjsip_ua_dump(detail: pj_bool_t);
}
extern "C" {
    pub fn pjsip_ua_get_endpt(ua: *mut pjsip_user_agent) -> *mut pjsip_endpoint;
}
extern "C" {
    pub fn pjsip_ua_register_dlg(ua: *mut pjsip_user_agent, dlg: *mut pjsip_dialog) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_ua_unregister_dlg(
        ua: *mut pjsip_user_agent,
        dlg: *mut pjsip_dialog,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_dlg_party {
    pub info: *mut pjsip_fromto_hdr,
    pub info_str: pj_str_t,
    pub tag_hval: pj_uint32_t,
    pub contact: *mut pjsip_contact_hdr,
    pub first_cseq: pj_int32_t,
    pub cseq: pj_int32_t,
}
#[test]
fn bindgen_test_layout_pjsip_dlg_party() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_dlg_party>(),
        48usize,
        concat!("Size of: ", stringify!(pjsip_dlg_party))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_dlg_party>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_dlg_party))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dlg_party>())).info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dlg_party),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dlg_party>())).info_str as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dlg_party),
            "::",
            stringify!(info_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dlg_party>())).tag_hval as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dlg_party),
            "::",
            stringify!(tag_hval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dlg_party>())).contact as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dlg_party),
            "::",
            stringify!(contact)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dlg_party>())).first_cseq as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dlg_party),
            "::",
            stringify!(first_cseq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dlg_party>())).cseq as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dlg_party),
            "::",
            stringify!(cseq)
        )
    );
}
pub const pjsip_dialog_state_PJSIP_DIALOG_STATE_NULL: pjsip_dialog_state = 0;
pub const pjsip_dialog_state_PJSIP_DIALOG_STATE_ESTABLISHED: pjsip_dialog_state = 1;
pub type pjsip_dialog_state = ::std::os::raw::c_uint;
pub const pjsip_dialog_cap_status_PJSIP_DIALOG_CAP_UNSUPPORTED: pjsip_dialog_cap_status = 0;
pub const pjsip_dialog_cap_status_PJSIP_DIALOG_CAP_SUPPORTED: pjsip_dialog_cap_status = 1;
pub const pjsip_dialog_cap_status_PJSIP_DIALOG_CAP_UNKNOWN: pjsip_dialog_cap_status = 2;
pub type pjsip_dialog_cap_status = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsip_dialog {
    pub prev: *mut pjsip_dialog,
    pub next: *mut pjsip_dialog,
    pub obj_name: [::std::os::raw::c_char; 32usize],
    pub pool: *mut pj_pool_t,
    pub ua: *mut pjsip_user_agent,
    pub endpt: *mut pjsip_endpoint,
    pub grp_lock_: *mut pj_grp_lock_t,
    pub dlg_set: *mut ::std::os::raw::c_void,
    pub state: pjsip_dialog_state,
    pub target: *mut pjsip_uri,
    pub target_set: pjsip_target_set,
    pub inv_hdr: pjsip_hdr,
    pub local: pjsip_dlg_party,
    pub remote: pjsip_dlg_party,
    pub rem_cap_hdr: pjsip_hdr,
    pub role: pjsip_role_e,
    pub uac_has_2xx: pj_bool_t,
    pub secure: pj_bool_t,
    pub add_allow: pj_bool_t,
    pub call_id: *mut pjsip_cid_hdr,
    pub route_set: pjsip_route_hdr,
    pub route_set_frozen: pj_bool_t,
    pub auth_sess: pjsip_auth_clt_sess,
    pub sess_count: ::std::os::raw::c_int,
    pub tsx_count: ::std::os::raw::c_int,
    pub tp_sel: pjsip_tpselector,
    pub usage_cnt: ::std::os::raw::c_uint,
    pub usage: [*mut pjsip_module; 32usize],
    pub mod_data: [*mut ::std::os::raw::c_void; 32usize],
    pub via_addr: pjsip_host_port,
    pub via_tp: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pjsip_dialog() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_dialog>(),
        1272usize,
        concat!("Size of: ", stringify!(pjsip_dialog))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_dialog>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_dialog))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).obj_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(obj_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).pool as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).ua as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(ua)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).endpt as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(endpt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).grp_lock_ as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(grp_lock_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).dlg_set as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(dlg_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).state as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).target as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).target_set as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(target_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).inv_hdr as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(inv_hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).local as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(local)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).remote as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(remote)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).rem_cap_hdr as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(rem_cap_hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).role as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(role)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).uac_has_2xx as *const _ as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(uac_has_2xx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).secure as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(secure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).add_allow as *const _ as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(add_allow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).call_id as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(call_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).route_set as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(route_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).route_set_frozen as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(route_set_frozen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).auth_sess as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(auth_sess)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).sess_count as *const _ as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(sess_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).tsx_count as *const _ as usize },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(tsx_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).tp_sel as *const _ as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(tp_sel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).usage_cnt as *const _ as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(usage_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).usage as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).mod_data as *const _ as usize },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(mod_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).via_addr as *const _ as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(via_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dialog>())).via_tp as *const _ as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dialog),
            "::",
            stringify!(via_tp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_dlg_create_uac_param {
    pub ua: *mut pjsip_user_agent,
    pub local_uri: pj_str_t,
    pub local_contact: pj_str_t,
    pub remote_uri: pj_str_t,
    pub target: pj_str_t,
    pub grp_lock: *mut pj_grp_lock_t,
}
#[test]
fn bindgen_test_layout_pjsip_dlg_create_uac_param() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_dlg_create_uac_param>(),
        80usize,
        concat!("Size of: ", stringify!(pjsip_dlg_create_uac_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_dlg_create_uac_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_dlg_create_uac_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_dlg_create_uac_param>())).ua as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dlg_create_uac_param),
            "::",
            stringify!(ua)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_dlg_create_uac_param>())).local_uri as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dlg_create_uac_param),
            "::",
            stringify!(local_uri)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_dlg_create_uac_param>())).local_contact as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dlg_create_uac_param),
            "::",
            stringify!(local_contact)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_dlg_create_uac_param>())).remote_uri as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dlg_create_uac_param),
            "::",
            stringify!(remote_uri)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_dlg_create_uac_param>())).target as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dlg_create_uac_param),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_dlg_create_uac_param>())).grp_lock as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_dlg_create_uac_param),
            "::",
            stringify!(grp_lock)
        )
    );
}
extern "C" {
    pub fn pjsip_method_creates_dialog(m: *const pjsip_method) -> pj_bool_t;
}
extern "C" {
    pub fn pjsip_dlg_create_uac(
        ua: *mut pjsip_user_agent,
        local_uri: *const pj_str_t,
        local_contact: *const pj_str_t,
        remote_uri: *const pj_str_t,
        target: *const pj_str_t,
        p_dlg: *mut *mut pjsip_dialog,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_create_uac2(
        create_param: *const pjsip_dlg_create_uac_param,
        p_dlg: *mut *mut pjsip_dialog,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_create_uas_and_inc_lock(
        ua: *mut pjsip_user_agent,
        rdata: *mut pjsip_rx_data,
        contact: *const pj_str_t,
        p_dlg: *mut *mut pjsip_dialog,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_set_transport(
        dlg: *mut pjsip_dialog,
        sel: *const pjsip_tpselector,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_set_via_sent_by(
        dlg: *mut pjsip_dialog,
        via_addr: *mut pjsip_host_port,
        via_tp: *mut pjsip_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_fork(
        original_dlg: *const pjsip_dialog,
        rdata: *const pjsip_rx_data,
        new_dlg: *mut *mut pjsip_dialog,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_terminate(dlg: *mut pjsip_dialog) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_set_route_set(
        dlg: *mut pjsip_dialog,
        route_set: *const pjsip_route_hdr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_inc_session(dlg: *mut pjsip_dialog, mod_: *mut pjsip_module) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_dec_session(dlg: *mut pjsip_dialog, mod_: *mut pjsip_module) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_add_usage(
        dlg: *mut pjsip_dialog,
        module: *mut pjsip_module,
        mod_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_has_usage(dlg: *mut pjsip_dialog, module: *mut pjsip_module) -> pj_bool_t;
}
extern "C" {
    pub fn pjsip_dlg_set_mod_data(
        dlg: *mut pjsip_dialog,
        mod_id: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_get_mod_data(
        dlg: *mut pjsip_dialog,
        mod_id: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pjsip_dlg_inc_lock(dlg: *mut pjsip_dialog);
}
extern "C" {
    pub fn pjsip_dlg_try_inc_lock(dlg: *mut pjsip_dialog) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_dec_lock(dlg: *mut pjsip_dialog);
}
extern "C" {
    pub fn pjsip_dlg_get_lock(dlg: *mut pjsip_dialog) -> *mut pj_grp_lock_t;
}
extern "C" {
    pub fn pjsip_rdata_get_dlg(rdata: *mut pjsip_rx_data) -> *mut pjsip_dialog;
}
extern "C" {
    pub fn pjsip_tdata_get_dlg(tdata: *mut pjsip_tx_data) -> *mut pjsip_dialog;
}
extern "C" {
    pub fn pjsip_tsx_get_dlg(tsx: *mut pjsip_transaction) -> *mut pjsip_dialog;
}
extern "C" {
    pub fn pjsip_dlg_create_request(
        dlg: *mut pjsip_dialog,
        method: *const pjsip_method,
        cseq: ::std::os::raw::c_int,
        tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_send_request(
        dlg: *mut pjsip_dialog,
        tdata: *mut pjsip_tx_data,
        mod_data_id: ::std::os::raw::c_int,
        mod_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_create_response(
        dlg: *mut pjsip_dialog,
        rdata: *mut pjsip_rx_data,
        st_code: ::std::os::raw::c_int,
        st_text: *const pj_str_t,
        tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_modify_response(
        dlg: *mut pjsip_dialog,
        tdata: *mut pjsip_tx_data,
        st_code: ::std::os::raw::c_int,
        st_text: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_send_response(
        dlg: *mut pjsip_dialog,
        tsx: *mut pjsip_transaction,
        tdata: *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_respond(
        dlg: *mut pjsip_dialog,
        rdata: *mut pjsip_rx_data,
        st_code: ::std::os::raw::c_int,
        st_text: *const pj_str_t,
        hdr_list: *const pjsip_hdr,
        body: *const pjsip_msg_body,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_remote_has_cap(
        dlg: *mut pjsip_dialog,
        htype: ::std::os::raw::c_int,
        hname: *const pj_str_t,
        token: *const pj_str_t,
    ) -> pjsip_dialog_cap_status;
}
extern "C" {
    pub fn pjsip_dlg_get_remote_cap_hdr(
        dlg: *mut pjsip_dialog,
        htype: ::std::os::raw::c_int,
        hname: *const pj_str_t,
    ) -> *const pjsip_hdr;
}
extern "C" {
    pub fn pjsip_dlg_set_remote_cap_hdr(
        dlg: *mut pjsip_dialog,
        cap_hdr: *const pjsip_generic_array_hdr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_remove_remote_cap_hdr(
        dlg: *mut pjsip_dialog,
        htype: ::std::os::raw::c_int,
        hname: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_update_remote_cap(
        dlg: *mut pjsip_dialog,
        msg: *const pjsip_msg,
        strict: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_on_tsx_state(
        dlg: *mut pjsip_dialog,
        tsx: *mut pjsip_transaction,
        e: *mut pjsip_event,
    );
}
extern "C" {
    pub fn pjsip_dlg_on_rx_request(dlg: *mut pjsip_dialog, rdata: *mut pjsip_rx_data);
}
extern "C" {
    pub fn pjsip_dlg_on_rx_response(dlg: *mut pjsip_dialog, rdata: *mut pjsip_rx_data);
}
pub const pjmedia_type_PJMEDIA_TYPE_NONE: pjmedia_type = 0;
pub const pjmedia_type_PJMEDIA_TYPE_AUDIO: pjmedia_type = 1;
pub const pjmedia_type_PJMEDIA_TYPE_VIDEO: pjmedia_type = 2;
pub const pjmedia_type_PJMEDIA_TYPE_APPLICATION: pjmedia_type = 3;
pub const pjmedia_type_PJMEDIA_TYPE_UNKNOWN: pjmedia_type = 4;
pub type pjmedia_type = ::std::os::raw::c_uint;
pub const pjmedia_tp_proto_PJMEDIA_TP_PROTO_NONE: pjmedia_tp_proto = 0;
pub const pjmedia_tp_proto_PJMEDIA_TP_PROTO_UNKNOWN: pjmedia_tp_proto = 1;
pub const pjmedia_tp_proto_PJMEDIA_TP_PROTO_UDP: pjmedia_tp_proto = 2;
pub const pjmedia_tp_proto_PJMEDIA_TP_PROTO_RTP: pjmedia_tp_proto = 4;
pub const pjmedia_tp_proto_PJMEDIA_TP_PROTO_DTLS: pjmedia_tp_proto = 8;
pub const pjmedia_tp_proto_PJMEDIA_TP_PROFILE_RTCP_FB: pjmedia_tp_proto = 8192;
pub const pjmedia_tp_proto_PJMEDIA_TP_PROFILE_SRTP: pjmedia_tp_proto = 16384;
pub const pjmedia_tp_proto_PJMEDIA_TP_PROFILE_AVP: pjmedia_tp_proto = 32768;
pub const pjmedia_tp_proto_PJMEDIA_TP_PROTO_RTP_AVP: pjmedia_tp_proto = 32772;
pub const pjmedia_tp_proto_PJMEDIA_TP_PROTO_RTP_SAVP: pjmedia_tp_proto = 49156;
pub const pjmedia_tp_proto_PJMEDIA_TP_PROTO_DTLS_SRTP: pjmedia_tp_proto = 49164;
pub const pjmedia_tp_proto_PJMEDIA_TP_PROTO_RTP_AVPF: pjmedia_tp_proto = 40964;
pub const pjmedia_tp_proto_PJMEDIA_TP_PROTO_RTP_SAVPF: pjmedia_tp_proto = 57348;
pub const pjmedia_tp_proto_PJMEDIA_TP_PROTO_DTLS_SRTPF: pjmedia_tp_proto = 57356;
pub type pjmedia_tp_proto = ::std::os::raw::c_uint;
pub const pjmedia_dir_PJMEDIA_DIR_NONE: pjmedia_dir = 0;
pub const pjmedia_dir_PJMEDIA_DIR_ENCODING: pjmedia_dir = 1;
pub const pjmedia_dir_PJMEDIA_DIR_CAPTURE: pjmedia_dir = 1;
pub const pjmedia_dir_PJMEDIA_DIR_DECODING: pjmedia_dir = 2;
pub const pjmedia_dir_PJMEDIA_DIR_PLAYBACK: pjmedia_dir = 2;
pub const pjmedia_dir_PJMEDIA_DIR_RENDER: pjmedia_dir = 2;
pub const pjmedia_dir_PJMEDIA_DIR_ENCODING_DECODING: pjmedia_dir = 3;
pub const pjmedia_dir_PJMEDIA_DIR_CAPTURE_PLAYBACK: pjmedia_dir = 3;
pub const pjmedia_dir_PJMEDIA_DIR_CAPTURE_RENDER: pjmedia_dir = 3;
pub type pjmedia_dir = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_endpt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_stream {
    _unused: [u8; 0],
}
pub const pjmedia_coord_base_PJMEDIA_COORD_BASE_LEFT_TOP: pjmedia_coord_base = 0;
pub const pjmedia_coord_base_PJMEDIA_COORD_BASE_LEFT_BOTTOM: pjmedia_coord_base = 1;
pub type pjmedia_coord_base = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_ratio {
    pub num: ::std::os::raw::c_int,
    pub denum: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pjmedia_ratio() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_ratio>(),
        8usize,
        concat!("Size of: ", stringify!(pjmedia_ratio))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_ratio>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_ratio))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_ratio>())).num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_ratio),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_ratio>())).denum as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_ratio),
            "::",
            stringify!(denum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_coord {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pjmedia_coord() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_coord>(),
        8usize,
        concat!("Size of: ", stringify!(pjmedia_coord))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_coord>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_coord))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_coord>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_coord),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_coord>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_coord),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rect_size {
    pub w: ::std::os::raw::c_uint,
    pub h: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjmedia_rect_size() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rect_size>(),
        8usize,
        concat!("Size of: ", stringify!(pjmedia_rect_size))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rect_size>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_rect_size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rect_size>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rect_size),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rect_size>())).h as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rect_size),
            "::",
            stringify!(h)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rect {
    pub coord: pjmedia_coord,
    pub size: pjmedia_rect_size,
}
#[test]
fn bindgen_test_layout_pjmedia_rect() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rect>(),
        16usize,
        concat!("Size of: ", stringify!(pjmedia_rect))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rect>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_rect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rect>())).coord as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rect),
            "::",
            stringify!(coord)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rect>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rect),
            "::",
            stringify!(size)
        )
    );
}
pub const pjmedia_orient_PJMEDIA_ORIENT_UNKNOWN: pjmedia_orient = 0;
pub const pjmedia_orient_PJMEDIA_ORIENT_NATURAL: pjmedia_orient = 1;
pub const pjmedia_orient_PJMEDIA_ORIENT_ROTATE_90DEG: pjmedia_orient = 2;
pub const pjmedia_orient_PJMEDIA_ORIENT_ROTATE_180DEG: pjmedia_orient = 3;
pub const pjmedia_orient_PJMEDIA_ORIENT_ROTATE_270DEG: pjmedia_orient = 4;
pub type pjmedia_orient = ::std::os::raw::c_uint;
extern "C" {
    pub fn pjmedia_type_name(t: pjmedia_type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pjmedia_get_type(name: *const pj_str_t) -> pjmedia_type;
}
extern "C" {
    pub static pjmedia_linear2ulaw_tab: [pj_uint8_t; 16384usize];
}
extern "C" {
    pub static pjmedia_linear2alaw_tab: [pj_uint8_t; 16384usize];
}
extern "C" {
    pub static pjmedia_ulaw2linear_tab: [pj_int16_t; 256usize];
}
extern "C" {
    pub static pjmedia_alaw2linear_tab: [pj_int16_t; 256usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_clock_src {
    pub media_type: pjmedia_type,
    pub clock_rate: ::std::os::raw::c_uint,
    pub ptime_usec: ::std::os::raw::c_uint,
    pub timestamp: pj_timestamp,
    pub last_update: pj_timestamp,
}
#[test]
fn bindgen_test_layout_pjmedia_clock_src() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_clock_src>(),
        32usize,
        concat!("Size of: ", stringify!(pjmedia_clock_src))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_clock_src>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_clock_src))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_clock_src>())).media_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_clock_src),
            "::",
            stringify!(media_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_clock_src>())).clock_rate as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_clock_src),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_clock_src>())).ptime_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_clock_src),
            "::",
            stringify!(ptime_usec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_clock_src>())).timestamp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_clock_src),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_clock_src>())).last_update as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_clock_src),
            "::",
            stringify!(last_update)
        )
    );
}
extern "C" {
    pub fn pjmedia_clock_src_init(
        clocksrc: *mut pjmedia_clock_src,
        media_type: pjmedia_type,
        clock_rate: ::std::os::raw::c_uint,
        ptime_usec: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_clock_src_update(
        clocksrc: *mut pjmedia_clock_src,
        timestamp: *const pj_timestamp,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_clock_src_get_current_timestamp(
        clocksrc: *const pjmedia_clock_src,
        timestamp: *mut pj_timestamp,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_clock_src_get_time_msec(clocksrc: *const pjmedia_clock_src) -> pj_uint32_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_clock {
    _unused: [u8; 0],
}
pub const pjmedia_clock_options_PJMEDIA_CLOCK_NO_ASYNC: pjmedia_clock_options = 1;
pub const pjmedia_clock_options_PJMEDIA_CLOCK_NO_HIGHEST_PRIO: pjmedia_clock_options = 2;
pub type pjmedia_clock_options = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_clock_param {
    pub usec_interval: ::std::os::raw::c_uint,
    pub clock_rate: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjmedia_clock_param() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_clock_param>(),
        8usize,
        concat!("Size of: ", stringify!(pjmedia_clock_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_clock_param>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_clock_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_clock_param>())).usec_interval as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_clock_param),
            "::",
            stringify!(usec_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_clock_param>())).clock_rate as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_clock_param),
            "::",
            stringify!(clock_rate)
        )
    );
}
pub type pjmedia_clock_callback = ::std::option::Option<
    unsafe extern "C" fn(ts: *const pj_timestamp, user_data: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn pjmedia_clock_create(
        pool: *mut pj_pool_t,
        clock_rate: ::std::os::raw::c_uint,
        channel_count: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        cb: pjmedia_clock_callback,
        user_data: *mut ::std::os::raw::c_void,
        p_clock: *mut *mut pjmedia_clock,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_clock_create2(
        pool: *mut pj_pool_t,
        param: *const pjmedia_clock_param,
        options: ::std::os::raw::c_uint,
        cb: pjmedia_clock_callback,
        user_data: *mut ::std::os::raw::c_void,
        p_clock: *mut *mut pjmedia_clock,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_clock_start(clock: *mut pjmedia_clock) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_clock_stop(clock: *mut pjmedia_clock) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_clock_modify(
        clock: *mut pjmedia_clock,
        param: *const pjmedia_clock_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_clock_wait(
        clock: *mut pjmedia_clock,
        wait: pj_bool_t,
        ts: *mut pj_timestamp,
    ) -> pj_bool_t;
}
extern "C" {
    pub fn pjmedia_clock_destroy(clock: *mut pjmedia_clock) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_audiodev_strerror(
        status: pj_status_t,
        buffer: *mut ::std::os::raw::c_char,
        bufsize: pj_size_t,
    ) -> pj_str_t;
}
pub const pjmedia_format_id_PJMEDIA_FORMAT_L16: pjmedia_format_id = 0;
pub const pjmedia_format_id_PJMEDIA_FORMAT_PCM: pjmedia_format_id = 0;
pub const pjmedia_format_id_PJMEDIA_FORMAT_PCMA: pjmedia_format_id = 1463897153;
pub const pjmedia_format_id_PJMEDIA_FORMAT_ALAW: pjmedia_format_id = 1463897153;
pub const pjmedia_format_id_PJMEDIA_FORMAT_PCMU: pjmedia_format_id = 1463897205;
pub const pjmedia_format_id_PJMEDIA_FORMAT_ULAW: pjmedia_format_id = 1463897205;
pub const pjmedia_format_id_PJMEDIA_FORMAT_AMR: pjmedia_format_id = 1380794656;
pub const pjmedia_format_id_PJMEDIA_FORMAT_G729: pjmedia_format_id = 959592263;
pub const pjmedia_format_id_PJMEDIA_FORMAT_ILBC: pjmedia_format_id = 1128418377;
pub const pjmedia_format_id_PJMEDIA_FORMAT_RGB24: pjmedia_format_id = 859981650;
pub const pjmedia_format_id_PJMEDIA_FORMAT_RGBA: pjmedia_format_id = 1094862674;
pub const pjmedia_format_id_PJMEDIA_FORMAT_BGRA: pjmedia_format_id = 1095911234;
pub const pjmedia_format_id_PJMEDIA_FORMAT_RGB32: pjmedia_format_id = 1094862674;
pub const pjmedia_format_id_PJMEDIA_FORMAT_DIB: pjmedia_format_id = 541215044;
pub const pjmedia_format_id_PJMEDIA_FORMAT_GBRP: pjmedia_format_id = 1347568199;
pub const pjmedia_format_id_PJMEDIA_FORMAT_AYUV: pjmedia_format_id = 1448433985;
pub const pjmedia_format_id_PJMEDIA_FORMAT_YUY2: pjmedia_format_id = 844715353;
pub const pjmedia_format_id_PJMEDIA_FORMAT_UYVY: pjmedia_format_id = 1498831189;
pub const pjmedia_format_id_PJMEDIA_FORMAT_YVYU: pjmedia_format_id = 1431918169;
pub const pjmedia_format_id_PJMEDIA_FORMAT_I420: pjmedia_format_id = 808596553;
pub const pjmedia_format_id_PJMEDIA_FORMAT_IYUV: pjmedia_format_id = 808596553;
pub const pjmedia_format_id_PJMEDIA_FORMAT_YV12: pjmedia_format_id = 842094169;
pub const pjmedia_format_id_PJMEDIA_FORMAT_NV12: pjmedia_format_id = 842094158;
pub const pjmedia_format_id_PJMEDIA_FORMAT_NV21: pjmedia_format_id = 825382478;
pub const pjmedia_format_id_PJMEDIA_FORMAT_I422: pjmedia_format_id = 842150985;
pub const pjmedia_format_id_PJMEDIA_FORMAT_I420JPEG: pjmedia_format_id = 808596554;
pub const pjmedia_format_id_PJMEDIA_FORMAT_I422JPEG: pjmedia_format_id = 842150986;
pub const pjmedia_format_id_PJMEDIA_FORMAT_H261: pjmedia_format_id = 825635400;
pub const pjmedia_format_id_PJMEDIA_FORMAT_H263: pjmedia_format_id = 859189832;
pub const pjmedia_format_id_PJMEDIA_FORMAT_H263P: pjmedia_format_id = 859189840;
pub const pjmedia_format_id_PJMEDIA_FORMAT_H264: pjmedia_format_id = 875967048;
pub const pjmedia_format_id_PJMEDIA_FORMAT_VP8: pjmedia_format_id = 808996950;
pub const pjmedia_format_id_PJMEDIA_FORMAT_VP9: pjmedia_format_id = 809062486;
pub const pjmedia_format_id_PJMEDIA_FORMAT_MJPEG: pjmedia_format_id = 1196444237;
pub const pjmedia_format_id_PJMEDIA_FORMAT_MPEG1VIDEO: pjmedia_format_id = 1446072397;
pub const pjmedia_format_id_PJMEDIA_FORMAT_MPEG2VIDEO: pjmedia_format_id = 1446137933;
pub const pjmedia_format_id_PJMEDIA_FORMAT_MPEG4: pjmedia_format_id = 877088845;
pub const pjmedia_format_id_PJMEDIA_FORMAT_INVALID: pjmedia_format_id = 4294967295;
pub type pjmedia_format_id = ::std::os::raw::c_uint;
pub const pjmedia_format_detail_type_PJMEDIA_FORMAT_DETAIL_NONE: pjmedia_format_detail_type = 0;
pub const pjmedia_format_detail_type_PJMEDIA_FORMAT_DETAIL_AUDIO: pjmedia_format_detail_type = 1;
pub const pjmedia_format_detail_type_PJMEDIA_FORMAT_DETAIL_VIDEO: pjmedia_format_detail_type = 2;
pub const pjmedia_format_detail_type_PJMEDIA_FORMAT_DETAIL_MAX: pjmedia_format_detail_type = 3;
pub type pjmedia_format_detail_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_audio_format_detail {
    pub clock_rate: ::std::os::raw::c_uint,
    pub channel_count: ::std::os::raw::c_uint,
    pub frame_time_usec: ::std::os::raw::c_uint,
    pub bits_per_sample: ::std::os::raw::c_uint,
    pub avg_bps: pj_uint32_t,
    pub max_bps: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_audio_format_detail() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_audio_format_detail>(),
        24usize,
        concat!("Size of: ", stringify!(pjmedia_audio_format_detail))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_audio_format_detail>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_audio_format_detail))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_audio_format_detail>())).clock_rate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_audio_format_detail),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_audio_format_detail>())).channel_count as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_audio_format_detail),
            "::",
            stringify!(channel_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_audio_format_detail>())).frame_time_usec as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_audio_format_detail),
            "::",
            stringify!(frame_time_usec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_audio_format_detail>())).bits_per_sample as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_audio_format_detail),
            "::",
            stringify!(bits_per_sample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_audio_format_detail>())).avg_bps as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_audio_format_detail),
            "::",
            stringify!(avg_bps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_audio_format_detail>())).max_bps as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_audio_format_detail),
            "::",
            stringify!(max_bps)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_video_format_detail {
    pub size: pjmedia_rect_size,
    pub fps: pjmedia_ratio,
    pub avg_bps: pj_uint32_t,
    pub max_bps: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_video_format_detail() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_video_format_detail>(),
        24usize,
        concat!("Size of: ", stringify!(pjmedia_video_format_detail))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_video_format_detail>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_video_format_detail))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_video_format_detail>())).size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_video_format_detail),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_video_format_detail>())).fps as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_video_format_detail),
            "::",
            stringify!(fps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_video_format_detail>())).avg_bps as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_video_format_detail),
            "::",
            stringify!(avg_bps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_video_format_detail>())).max_bps as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_video_format_detail),
            "::",
            stringify!(max_bps)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_format {
    pub id: pj_uint32_t,
    pub type_: pjmedia_type,
    pub detail_type: pjmedia_format_detail_type,
    pub det: pjmedia_format__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjmedia_format__bindgen_ty_1 {
    pub aud: pjmedia_audio_format_detail,
    pub vid: pjmedia_video_format_detail,
    pub user: [::std::os::raw::c_char; 1usize],
    _bindgen_union_align: [u32; 6usize],
}
#[test]
fn bindgen_test_layout_pjmedia_format__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_format__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(pjmedia_format__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_format__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_format__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_format__bindgen_ty_1>())).aud as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_format__bindgen_ty_1),
            "::",
            stringify!(aud)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_format__bindgen_ty_1>())).vid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_format__bindgen_ty_1),
            "::",
            stringify!(vid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_format__bindgen_ty_1>())).user as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_format__bindgen_ty_1),
            "::",
            stringify!(user)
        )
    );
}
#[test]
fn bindgen_test_layout_pjmedia_format() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_format>(),
        36usize,
        concat!("Size of: ", stringify!(pjmedia_format))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_format>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_format))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_format>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_format),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_format>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_format),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_format>())).detail_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_format),
            "::",
            stringify!(detail_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_format>())).det as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_format),
            "::",
            stringify!(det)
        )
    );
}
pub const pjmedia_color_model_PJMEDIA_COLOR_MODEL_NONE: pjmedia_color_model = 0;
pub const pjmedia_color_model_PJMEDIA_COLOR_MODEL_RGB: pjmedia_color_model = 1;
pub const pjmedia_color_model_PJMEDIA_COLOR_MODEL_YUV: pjmedia_color_model = 2;
pub type pjmedia_color_model = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_video_apply_fmt_param {
    pub size: pjmedia_rect_size,
    pub buffer: *mut pj_uint8_t,
    pub framebytes: pj_size_t,
    pub strides: [::std::os::raw::c_int; 4usize],
    pub planes: [*mut pj_uint8_t; 4usize],
    pub plane_bytes: [pj_size_t; 4usize],
}
#[test]
fn bindgen_test_layout_pjmedia_video_apply_fmt_param() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_video_apply_fmt_param>(),
        104usize,
        concat!("Size of: ", stringify!(pjmedia_video_apply_fmt_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_video_apply_fmt_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_video_apply_fmt_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_video_apply_fmt_param>())).size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_video_apply_fmt_param),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_video_apply_fmt_param>())).buffer as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_video_apply_fmt_param),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_video_apply_fmt_param>())).framebytes as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_video_apply_fmt_param),
            "::",
            stringify!(framebytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_video_apply_fmt_param>())).strides as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_video_apply_fmt_param),
            "::",
            stringify!(strides)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_video_apply_fmt_param>())).planes as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_video_apply_fmt_param),
            "::",
            stringify!(planes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_video_apply_fmt_param>())).plane_bytes as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_video_apply_fmt_param),
            "::",
            stringify!(plane_bytes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_video_format_info {
    pub id: pj_uint32_t,
    pub name: [::std::os::raw::c_char; 8usize],
    pub color_model: pjmedia_color_model,
    pub bpp: pj_uint8_t,
    pub plane_cnt: pj_uint8_t,
    pub apply_fmt: ::std::option::Option<
        unsafe extern "C" fn(
            vfi: *const pjmedia_video_format_info,
            vafp: *mut pjmedia_video_apply_fmt_param,
        ) -> pj_status_t,
    >,
}
#[test]
fn bindgen_test_layout_pjmedia_video_format_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_video_format_info>(),
        32usize,
        concat!("Size of: ", stringify!(pjmedia_video_format_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_video_format_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_video_format_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_video_format_info>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_video_format_info),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_video_format_info>())).name as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_video_format_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_video_format_info>())).color_model as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_video_format_info),
            "::",
            stringify!(color_model)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_video_format_info>())).bpp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_video_format_info),
            "::",
            stringify!(bpp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_video_format_info>())).plane_cnt as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_video_format_info),
            "::",
            stringify!(plane_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_video_format_info>())).apply_fmt as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_video_format_info),
            "::",
            stringify!(apply_fmt)
        )
    );
}
extern "C" {
    pub fn pjmedia_format_init_video(
        fmt: *mut pjmedia_format,
        fmt_id: pj_uint32_t,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        fps_num: ::std::os::raw::c_uint,
        fps_denum: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn pjmedia_format_copy(
        dst: *mut pjmedia_format,
        src: *const pjmedia_format,
    ) -> *mut pjmedia_format;
}
extern "C" {
    pub fn pjmedia_format_get_audio_format_detail(
        fmt: *const pjmedia_format,
        assert_valid: pj_bool_t,
    ) -> *mut pjmedia_audio_format_detail;
}
extern "C" {
    pub fn pjmedia_format_get_video_format_detail(
        fmt: *const pjmedia_format,
        assert_valid: pj_bool_t,
    ) -> *mut pjmedia_video_format_detail;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_video_format_mgr {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pjmedia_video_format_mgr_create(
        pool: *mut pj_pool_t,
        max_fmt: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        p_mgr: *mut *mut pjmedia_video_format_mgr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_video_format_mgr_instance() -> *mut pjmedia_video_format_mgr;
}
extern "C" {
    pub fn pjmedia_video_format_mgr_set_instance(mgr: *mut pjmedia_video_format_mgr);
}
extern "C" {
    pub fn pjmedia_get_video_format_info(
        mgr: *mut pjmedia_video_format_mgr,
        id: pj_uint32_t,
    ) -> *const pjmedia_video_format_info;
}
extern "C" {
    pub fn pjmedia_register_video_format_info(
        mgr: *mut pjmedia_video_format_mgr,
        vfi: *mut pjmedia_video_format_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_video_format_mgr_destroy(mgr: *mut pjmedia_video_format_mgr);
}
pub const pjmedia_frame_type_PJMEDIA_FRAME_TYPE_NONE: pjmedia_frame_type = 0;
pub const pjmedia_frame_type_PJMEDIA_FRAME_TYPE_AUDIO: pjmedia_frame_type = 1;
pub const pjmedia_frame_type_PJMEDIA_FRAME_TYPE_EXTENDED: pjmedia_frame_type = 2;
pub const pjmedia_frame_type_PJMEDIA_FRAME_TYPE_VIDEO: pjmedia_frame_type = 3;
pub type pjmedia_frame_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_frame {
    pub type_: pjmedia_frame_type,
    pub buf: *mut ::std::os::raw::c_void,
    pub size: pj_size_t,
    pub timestamp: pj_timestamp,
    pub bit_info: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_frame() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_frame>(),
        40usize,
        concat!("Size of: ", stringify!(pjmedia_frame))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_frame>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_frame))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_frame>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_frame),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_frame>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_frame),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_frame>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_frame),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_frame>())).timestamp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_frame),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_frame>())).bit_info as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_frame),
            "::",
            stringify!(bit_info)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct pjmedia_frame_ext {
    pub base: pjmedia_frame,
    pub samples_cnt: pj_uint16_t,
    pub subframe_cnt: pj_uint16_t,
}
#[test]
fn bindgen_test_layout_pjmedia_frame_ext() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_frame_ext>(),
        44usize,
        concat!("Size of: ", stringify!(pjmedia_frame_ext))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_frame_ext>(),
        1usize,
        concat!("Alignment of ", stringify!(pjmedia_frame_ext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_frame_ext>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_frame_ext),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_frame_ext>())).samples_cnt as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_frame_ext),
            "::",
            stringify!(samples_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_frame_ext>())).subframe_cnt as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_frame_ext),
            "::",
            stringify!(subframe_cnt)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_frame_ext_subframe {
    pub bitlen: pj_uint16_t,
    pub data: [pj_uint8_t; 1usize],
}
#[test]
fn bindgen_test_layout_pjmedia_frame_ext_subframe() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_frame_ext_subframe>(),
        3usize,
        concat!("Size of: ", stringify!(pjmedia_frame_ext_subframe))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_frame_ext_subframe>(),
        1usize,
        concat!("Alignment of ", stringify!(pjmedia_frame_ext_subframe))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_frame_ext_subframe>())).bitlen as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_frame_ext_subframe),
            "::",
            stringify!(bitlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_frame_ext_subframe>())).data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_frame_ext_subframe),
            "::",
            stringify!(data)
        )
    );
}
pub type pjmedia_aud_dev_index = pj_int32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_aud_stream {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_aud_dev_factory {
    _unused: [u8; 0],
}
pub type pjmedia_aud_dev_factory_create_func_ptr = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut pj_pool_factory) -> *mut pjmedia_aud_dev_factory,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_aud_driver {
    pub create: pjmedia_aud_dev_factory_create_func_ptr,
    pub f: *mut pjmedia_aud_dev_factory,
    pub name: [::std::os::raw::c_char; 32usize],
    pub dev_cnt: ::std::os::raw::c_uint,
    pub start_idx: ::std::os::raw::c_uint,
    pub rec_dev_idx: ::std::os::raw::c_int,
    pub play_dev_idx: ::std::os::raw::c_int,
    pub dev_idx: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pjmedia_aud_driver() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_aud_driver>(),
        72usize,
        concat!("Size of: ", stringify!(pjmedia_aud_driver))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_aud_driver>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_aud_driver))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_driver>())).create as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_driver),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_driver>())).f as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_driver),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_driver>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_driver),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_driver>())).dev_cnt as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_driver),
            "::",
            stringify!(dev_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_driver>())).start_idx as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_driver),
            "::",
            stringify!(start_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_driver>())).rec_dev_idx as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_driver),
            "::",
            stringify!(rec_dev_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_driver>())).play_dev_idx as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_driver),
            "::",
            stringify!(play_dev_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_driver>())).dev_idx as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_driver),
            "::",
            stringify!(dev_idx)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_aud_subsys {
    pub init_count: ::std::os::raw::c_uint,
    pub pf: *mut pj_pool_factory,
    pub drv_cnt: ::std::os::raw::c_uint,
    pub drv: [pjmedia_aud_driver; 16usize],
    pub dev_cnt: ::std::os::raw::c_uint,
    pub dev_list: [pj_uint32_t; 64usize],
}
#[test]
fn bindgen_test_layout_pjmedia_aud_subsys() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_aud_subsys>(),
        1440usize,
        concat!("Size of: ", stringify!(pjmedia_aud_subsys))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_aud_subsys>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_aud_subsys))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_subsys>())).init_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_subsys),
            "::",
            stringify!(init_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_subsys>())).pf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_subsys),
            "::",
            stringify!(pf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_subsys>())).drv_cnt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_subsys),
            "::",
            stringify!(drv_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_subsys>())).drv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_subsys),
            "::",
            stringify!(drv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_subsys>())).dev_cnt as *const _ as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_subsys),
            "::",
            stringify!(dev_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_subsys>())).dev_list as *const _ as usize },
        1180usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_subsys),
            "::",
            stringify!(dev_list)
        )
    );
}
pub const pjmedia_aud_dev_cap_PJMEDIA_AUD_DEV_CAP_EXT_FORMAT: pjmedia_aud_dev_cap = 1;
pub const pjmedia_aud_dev_cap_PJMEDIA_AUD_DEV_CAP_INPUT_LATENCY: pjmedia_aud_dev_cap = 2;
pub const pjmedia_aud_dev_cap_PJMEDIA_AUD_DEV_CAP_OUTPUT_LATENCY: pjmedia_aud_dev_cap = 4;
pub const pjmedia_aud_dev_cap_PJMEDIA_AUD_DEV_CAP_INPUT_VOLUME_SETTING: pjmedia_aud_dev_cap = 8;
pub const pjmedia_aud_dev_cap_PJMEDIA_AUD_DEV_CAP_OUTPUT_VOLUME_SETTING: pjmedia_aud_dev_cap = 16;
pub const pjmedia_aud_dev_cap_PJMEDIA_AUD_DEV_CAP_INPUT_SIGNAL_METER: pjmedia_aud_dev_cap = 32;
pub const pjmedia_aud_dev_cap_PJMEDIA_AUD_DEV_CAP_OUTPUT_SIGNAL_METER: pjmedia_aud_dev_cap = 64;
pub const pjmedia_aud_dev_cap_PJMEDIA_AUD_DEV_CAP_INPUT_ROUTE: pjmedia_aud_dev_cap = 128;
pub const pjmedia_aud_dev_cap_PJMEDIA_AUD_DEV_CAP_INPUT_SOURCE: pjmedia_aud_dev_cap = 128;
pub const pjmedia_aud_dev_cap_PJMEDIA_AUD_DEV_CAP_OUTPUT_ROUTE: pjmedia_aud_dev_cap = 256;
pub const pjmedia_aud_dev_cap_PJMEDIA_AUD_DEV_CAP_EC: pjmedia_aud_dev_cap = 512;
pub const pjmedia_aud_dev_cap_PJMEDIA_AUD_DEV_CAP_EC_TAIL: pjmedia_aud_dev_cap = 1024;
pub const pjmedia_aud_dev_cap_PJMEDIA_AUD_DEV_CAP_VAD: pjmedia_aud_dev_cap = 2048;
pub const pjmedia_aud_dev_cap_PJMEDIA_AUD_DEV_CAP_CNG: pjmedia_aud_dev_cap = 4096;
pub const pjmedia_aud_dev_cap_PJMEDIA_AUD_DEV_CAP_PLC: pjmedia_aud_dev_cap = 8192;
pub const pjmedia_aud_dev_cap_PJMEDIA_AUD_DEV_CAP_MAX: pjmedia_aud_dev_cap = 16384;
pub type pjmedia_aud_dev_cap = ::std::os::raw::c_uint;
pub const pjmedia_aud_dev_route_PJMEDIA_AUD_DEV_ROUTE_DEFAULT: pjmedia_aud_dev_route = 0;
pub const pjmedia_aud_dev_route_PJMEDIA_AUD_DEV_ROUTE_LOUDSPEAKER: pjmedia_aud_dev_route = 1;
pub const pjmedia_aud_dev_route_PJMEDIA_AUD_DEV_ROUTE_EARPIECE: pjmedia_aud_dev_route = 2;
pub const pjmedia_aud_dev_route_PJMEDIA_AUD_DEV_ROUTE_BLUETOOTH: pjmedia_aud_dev_route = 4;
pub const pjmedia_aud_dev_route_PJMEDIA_AUD_DEV_ROUTE_CUSTOM: pjmedia_aud_dev_route = 128;
pub type pjmedia_aud_dev_route = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_aud_dev_info {
    pub name: [::std::os::raw::c_char; 64usize],
    pub input_count: ::std::os::raw::c_uint,
    pub output_count: ::std::os::raw::c_uint,
    pub default_samples_per_sec: ::std::os::raw::c_uint,
    pub driver: [::std::os::raw::c_char; 32usize],
    pub caps: ::std::os::raw::c_uint,
    pub routes: ::std::os::raw::c_uint,
    pub ext_fmt_cnt: ::std::os::raw::c_uint,
    pub ext_fmt: [pjmedia_format; 8usize],
}
#[test]
fn bindgen_test_layout_pjmedia_aud_dev_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_aud_dev_info>(),
        408usize,
        concat!("Size of: ", stringify!(pjmedia_aud_dev_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_aud_dev_info>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_aud_dev_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_dev_info>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_dev_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_aud_dev_info>())).input_count as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_dev_info),
            "::",
            stringify!(input_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_aud_dev_info>())).output_count as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_dev_info),
            "::",
            stringify!(output_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_aud_dev_info>())).default_samples_per_sec as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_dev_info),
            "::",
            stringify!(default_samples_per_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_dev_info>())).driver as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_dev_info),
            "::",
            stringify!(driver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_dev_info>())).caps as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_dev_info),
            "::",
            stringify!(caps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_dev_info>())).routes as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_dev_info),
            "::",
            stringify!(routes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_aud_dev_info>())).ext_fmt_cnt as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_dev_info),
            "::",
            stringify!(ext_fmt_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_dev_info>())).ext_fmt as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_dev_info),
            "::",
            stringify!(ext_fmt)
        )
    );
}
pub type pjmedia_aud_play_cb = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        frame: *mut pjmedia_frame,
    ) -> pj_status_t,
>;
pub type pjmedia_aud_rec_cb = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        frame: *mut pjmedia_frame,
    ) -> pj_status_t,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_aud_param {
    pub dir: pjmedia_dir,
    pub rec_id: pjmedia_aud_dev_index,
    pub play_id: pjmedia_aud_dev_index,
    pub clock_rate: ::std::os::raw::c_uint,
    pub channel_count: ::std::os::raw::c_uint,
    pub samples_per_frame: ::std::os::raw::c_uint,
    pub bits_per_sample: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
    pub ext_fmt: pjmedia_format,
    pub input_latency_ms: ::std::os::raw::c_uint,
    pub output_latency_ms: ::std::os::raw::c_uint,
    pub input_vol: ::std::os::raw::c_uint,
    pub output_vol: ::std::os::raw::c_uint,
    pub input_route: pjmedia_aud_dev_route,
    pub output_route: pjmedia_aud_dev_route,
    pub ec_enabled: pj_bool_t,
    pub ec_tail_ms: ::std::os::raw::c_uint,
    pub plc_enabled: pj_bool_t,
    pub cng_enabled: pj_bool_t,
    pub vad_enabled: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjmedia_aud_param() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_aud_param>(),
        112usize,
        concat!("Size of: ", stringify!(pjmedia_aud_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_aud_param>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_aud_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_param>())).dir as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_param>())).rec_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(rec_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_param>())).play_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(play_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_param>())).clock_rate as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_param>())).channel_count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(channel_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_aud_param>())).samples_per_frame as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(samples_per_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_aud_param>())).bits_per_sample as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(bits_per_sample)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_param>())).flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_param>())).ext_fmt as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(ext_fmt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_aud_param>())).input_latency_ms as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(input_latency_ms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_aud_param>())).output_latency_ms as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(output_latency_ms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_param>())).input_vol as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(input_vol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_param>())).output_vol as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(output_vol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_param>())).input_route as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(input_route)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_param>())).output_route as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(output_route)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_param>())).ec_enabled as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(ec_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_param>())).ec_tail_ms as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(ec_tail_ms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_param>())).plc_enabled as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(plc_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_param>())).cng_enabled as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(cng_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_aud_param>())).vad_enabled as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_aud_param),
            "::",
            stringify!(vad_enabled)
        )
    );
}
extern "C" {
    pub fn pjmedia_get_aud_subsys() -> *mut pjmedia_aud_subsys;
}
extern "C" {
    pub fn pjmedia_aud_driver_init(
        drv_idx: ::std::os::raw::c_uint,
        refresh: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_aud_driver_deinit(drv_idx: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn pjmedia_aud_dev_cap_name(
        cap: pjmedia_aud_dev_cap,
        p_desc: *mut *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pjmedia_aud_param_set_cap(
        param: *mut pjmedia_aud_param,
        cap: pjmedia_aud_dev_cap,
        pval: *const ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_aud_param_get_cap(
        param: *const pjmedia_aud_param,
        cap: pjmedia_aud_dev_cap,
        pval: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_aud_dev_refresh() -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_aud_dev_count() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjmedia_aud_dev_get_info(
        id: pjmedia_aud_dev_index,
        info: *mut pjmedia_aud_dev_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_aud_dev_lookup(
        drv_name: *const ::std::os::raw::c_char,
        dev_name: *const ::std::os::raw::c_char,
        id: *mut pjmedia_aud_dev_index,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_aud_dev_default_param(
        id: pjmedia_aud_dev_index,
        param: *mut pjmedia_aud_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_aud_stream_create(
        param: *const pjmedia_aud_param,
        rec_cb: pjmedia_aud_rec_cb,
        play_cb: pjmedia_aud_play_cb,
        user_data: *mut ::std::os::raw::c_void,
        p_strm: *mut *mut pjmedia_aud_stream,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_aud_stream_get_param(
        strm: *mut pjmedia_aud_stream,
        param: *mut pjmedia_aud_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_aud_stream_get_cap(
        strm: *mut pjmedia_aud_stream,
        cap: pjmedia_aud_dev_cap,
        value: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_aud_stream_set_cap(
        strm: *mut pjmedia_aud_stream,
        cap: pjmedia_aud_dev_cap,
        value: *const ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_aud_stream_start(strm: *mut pjmedia_aud_stream) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_aud_stream_stop(strm: *mut pjmedia_aud_stream) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_aud_stream_destroy(strm: *mut pjmedia_aud_stream) -> pj_status_t;
}
pub type pj_highprec_t = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_math_stat {
    pub n: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub min: ::std::os::raw::c_int,
    pub last: ::std::os::raw::c_int,
    pub mean: ::std::os::raw::c_int,
    pub fmean_: f32,
    pub m2_: pj_highprec_t,
}
#[test]
fn bindgen_test_layout_pj_math_stat() {
    assert_eq!(
        ::std::mem::size_of::<pj_math_stat>(),
        32usize,
        concat!("Size of: ", stringify!(pj_math_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_math_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_math_stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_math_stat>())).n as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_math_stat),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_math_stat>())).max as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_math_stat),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_math_stat>())).min as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_math_stat),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_math_stat>())).last as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_math_stat),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_math_stat>())).mean as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_math_stat),
            "::",
            stringify!(mean)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_math_stat>())).fmean_ as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_math_stat),
            "::",
            stringify!(fmean_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_math_stat>())).m2_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_math_stat),
            "::",
            stringify!(m2_)
        )
    );
}
pub const pjmedia_rtcp_xr_type_PJMEDIA_RTCP_XR_LOSS_RLE: pjmedia_rtcp_xr_type = 1;
pub const pjmedia_rtcp_xr_type_PJMEDIA_RTCP_XR_DUP_RLE: pjmedia_rtcp_xr_type = 2;
pub const pjmedia_rtcp_xr_type_PJMEDIA_RTCP_XR_RCPT_TIMES: pjmedia_rtcp_xr_type = 4;
pub const pjmedia_rtcp_xr_type_PJMEDIA_RTCP_XR_RR_TIME: pjmedia_rtcp_xr_type = 8;
pub const pjmedia_rtcp_xr_type_PJMEDIA_RTCP_XR_DLRR: pjmedia_rtcp_xr_type = 16;
pub const pjmedia_rtcp_xr_type_PJMEDIA_RTCP_XR_STATS: pjmedia_rtcp_xr_type = 32;
pub const pjmedia_rtcp_xr_type_PJMEDIA_RTCP_XR_VOIP_METRICS: pjmedia_rtcp_xr_type = 64;
pub type pjmedia_rtcp_xr_type = ::std::os::raw::c_uint;
pub const pjmedia_rtcp_xr_info_PJMEDIA_RTCP_XR_INFO_SIGNAL_LVL: pjmedia_rtcp_xr_info = 1;
pub const pjmedia_rtcp_xr_info_PJMEDIA_RTCP_XR_INFO_NOISE_LVL: pjmedia_rtcp_xr_info = 2;
pub const pjmedia_rtcp_xr_info_PJMEDIA_RTCP_XR_INFO_RERL: pjmedia_rtcp_xr_info = 3;
pub const pjmedia_rtcp_xr_info_PJMEDIA_RTCP_XR_INFO_R_FACTOR: pjmedia_rtcp_xr_info = 4;
pub const pjmedia_rtcp_xr_info_PJMEDIA_RTCP_XR_INFO_MOS_LQ: pjmedia_rtcp_xr_info = 5;
pub const pjmedia_rtcp_xr_info_PJMEDIA_RTCP_XR_INFO_MOS_CQ: pjmedia_rtcp_xr_info = 6;
pub const pjmedia_rtcp_xr_info_PJMEDIA_RTCP_XR_INFO_CONF_PLC: pjmedia_rtcp_xr_info = 7;
pub const pjmedia_rtcp_xr_info_PJMEDIA_RTCP_XR_INFO_CONF_JBA: pjmedia_rtcp_xr_info = 8;
pub const pjmedia_rtcp_xr_info_PJMEDIA_RTCP_XR_INFO_CONF_JBR: pjmedia_rtcp_xr_info = 9;
pub const pjmedia_rtcp_xr_info_PJMEDIA_RTCP_XR_INFO_JB_NOM: pjmedia_rtcp_xr_info = 10;
pub const pjmedia_rtcp_xr_info_PJMEDIA_RTCP_XR_INFO_JB_MAX: pjmedia_rtcp_xr_info = 11;
pub const pjmedia_rtcp_xr_info_PJMEDIA_RTCP_XR_INFO_JB_ABS_MAX: pjmedia_rtcp_xr_info = 12;
pub type pjmedia_rtcp_xr_info = ::std::os::raw::c_uint;
pub const pjmedia_rtcp_xr_plc_type_PJMEDIA_RTCP_XR_PLC_UNK: pjmedia_rtcp_xr_plc_type = 0;
pub const pjmedia_rtcp_xr_plc_type_PJMEDIA_RTCP_XR_PLC_DIS: pjmedia_rtcp_xr_plc_type = 1;
pub const pjmedia_rtcp_xr_plc_type_PJMEDIA_RTCP_XR_PLC_ENH: pjmedia_rtcp_xr_plc_type = 2;
pub const pjmedia_rtcp_xr_plc_type_PJMEDIA_RTCP_XR_PLC_STD: pjmedia_rtcp_xr_plc_type = 3;
pub type pjmedia_rtcp_xr_plc_type = ::std::os::raw::c_uint;
pub const pjmedia_rtcp_xr_jb_type_PJMEDIA_RTCP_XR_JB_UNKNOWN: pjmedia_rtcp_xr_jb_type = 0;
pub const pjmedia_rtcp_xr_jb_type_PJMEDIA_RTCP_XR_JB_FIXED: pjmedia_rtcp_xr_jb_type = 2;
pub const pjmedia_rtcp_xr_jb_type_PJMEDIA_RTCP_XR_JB_ADAPTIVE: pjmedia_rtcp_xr_jb_type = 3;
pub type pjmedia_rtcp_xr_jb_type = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_rb_header {
    pub bt: pj_uint8_t,
    pub specific: pj_uint8_t,
    pub length: pj_uint16_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_xr_rb_header() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_xr_rb_header>(),
        4usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_xr_rb_header))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_xr_rb_header>(),
        1usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_xr_rb_header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_header>())).bt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_header),
            "::",
            stringify!(bt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_header>())).specific as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_header),
            "::",
            stringify!(specific)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_header>())).length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_header),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_rb_rr_time {
    pub header: pjmedia_rtcp_xr_rb_header,
    pub ntp_sec: pj_uint32_t,
    pub ntp_frac: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_xr_rb_rr_time() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_xr_rb_rr_time>(),
        12usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_xr_rb_rr_time))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_xr_rb_rr_time>(),
        1usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_xr_rb_rr_time))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_rr_time>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_rr_time),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_rr_time>())).ntp_sec as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_rr_time),
            "::",
            stringify!(ntp_sec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_rr_time>())).ntp_frac as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_rr_time),
            "::",
            stringify!(ntp_frac)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_rb_dlrr_item {
    pub ssrc: pj_uint32_t,
    pub lrr: pj_uint32_t,
    pub dlrr: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_xr_rb_dlrr_item() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_xr_rb_dlrr_item>(),
        12usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_xr_rb_dlrr_item))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_xr_rb_dlrr_item>(),
        1usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_xr_rb_dlrr_item))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_dlrr_item>())).ssrc as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_dlrr_item),
            "::",
            stringify!(ssrc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_dlrr_item>())).lrr as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_dlrr_item),
            "::",
            stringify!(lrr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_dlrr_item>())).dlrr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_dlrr_item),
            "::",
            stringify!(dlrr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_rb_dlrr {
    pub header: pjmedia_rtcp_xr_rb_header,
    pub item: pjmedia_rtcp_xr_rb_dlrr_item,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_xr_rb_dlrr() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_xr_rb_dlrr>(),
        16usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_xr_rb_dlrr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_xr_rb_dlrr>(),
        1usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_xr_rb_dlrr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_dlrr>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_dlrr),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_dlrr>())).item as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_dlrr),
            "::",
            stringify!(item)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_rb_stats {
    pub header: pjmedia_rtcp_xr_rb_header,
    pub ssrc: pj_uint32_t,
    pub begin_seq: pj_uint16_t,
    pub end_seq: pj_uint16_t,
    pub lost: pj_uint32_t,
    pub dup: pj_uint32_t,
    pub jitter_min: pj_uint32_t,
    pub jitter_max: pj_uint32_t,
    pub jitter_mean: pj_uint32_t,
    pub jitter_dev: pj_uint32_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_xr_rb_stats() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_xr_rb_stats>(),
        40usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_xr_rb_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_xr_rb_stats>(),
        1usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_xr_rb_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_stats>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_stats),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_stats>())).ssrc as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_stats),
            "::",
            stringify!(ssrc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_stats>())).begin_seq as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_stats),
            "::",
            stringify!(begin_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_stats>())).end_seq as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_stats),
            "::",
            stringify!(end_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_stats>())).lost as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_stats),
            "::",
            stringify!(lost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_stats>())).dup as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_stats),
            "::",
            stringify!(dup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_stats>())).jitter_min as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_stats),
            "::",
            stringify!(jitter_min)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_stats>())).jitter_max as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_stats),
            "::",
            stringify!(jitter_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_stats>())).jitter_mean as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_stats),
            "::",
            stringify!(jitter_mean)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_stats>())).jitter_dev as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_stats),
            "::",
            stringify!(jitter_dev)
        )
    );
}
impl pjmedia_rtcp_xr_rb_stats {
    #[inline]
    pub fn toh_min(&self) -> pj_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_toh_min(&mut self, val: pj_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn toh_max(&self) -> pj_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_toh_max(&mut self, val: pj_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn toh_mean(&self) -> pj_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_toh_mean(&mut self, val: pj_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn toh_dev(&self) -> pj_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_toh_dev(&mut self, val: pj_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        toh_min: pj_uint32_t,
        toh_max: pj_uint32_t,
        toh_mean: pj_uint32_t,
        toh_dev: pj_uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let toh_min: u32 = unsafe { ::std::mem::transmute(toh_min) };
            toh_min as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let toh_max: u32 = unsafe { ::std::mem::transmute(toh_max) };
            toh_max as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let toh_mean: u32 = unsafe { ::std::mem::transmute(toh_mean) };
            toh_mean as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let toh_dev: u32 = unsafe { ::std::mem::transmute(toh_dev) };
            toh_dev as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_rb_voip_mtc {
    pub header: pjmedia_rtcp_xr_rb_header,
    pub ssrc: pj_uint32_t,
    pub loss_rate: pj_uint8_t,
    pub discard_rate: pj_uint8_t,
    pub burst_den: pj_uint8_t,
    pub gap_den: pj_uint8_t,
    pub burst_dur: pj_uint16_t,
    pub gap_dur: pj_uint16_t,
    pub rnd_trip_delay: pj_uint16_t,
    pub end_sys_delay: pj_uint16_t,
    pub signal_lvl: pj_uint8_t,
    pub noise_lvl: pj_uint8_t,
    pub rerl: pj_uint8_t,
    pub gmin: pj_uint8_t,
    pub r_factor: pj_uint8_t,
    pub ext_r_factor: pj_uint8_t,
    pub mos_lq: pj_uint8_t,
    pub mos_cq: pj_uint8_t,
    pub rx_config: pj_uint8_t,
    pub reserved2: pj_uint8_t,
    pub jb_nom: pj_uint16_t,
    pub jb_max: pj_uint16_t,
    pub jb_abs_max: pj_uint16_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_xr_rb_voip_mtc() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_xr_rb_voip_mtc>(),
        36usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_xr_rb_voip_mtc))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_xr_rb_voip_mtc>(),
        1usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_xr_rb_voip_mtc))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).ssrc as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(ssrc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).loss_rate as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(loss_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).discard_rate as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(discard_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).burst_den as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(burst_den)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).gap_den as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(gap_den)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).burst_dur as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(burst_dur)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).gap_dur as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(gap_dur)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).rnd_trip_delay as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(rnd_trip_delay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).end_sys_delay as *const _
                as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(end_sys_delay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).signal_lvl as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(signal_lvl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).noise_lvl as *const _ as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(noise_lvl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).rerl as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(rerl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).gmin as *const _ as usize
        },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(gmin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).r_factor as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(r_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).ext_r_factor as *const _
                as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(ext_r_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).mos_lq as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(mos_lq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).mos_cq as *const _ as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(mos_cq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).rx_config as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(rx_config)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).reserved2 as *const _ as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).jb_nom as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(jb_nom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).jb_max as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(jb_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_rb_voip_mtc>())).jb_abs_max as *const _ as usize
        },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_rb_voip_mtc),
            "::",
            stringify!(jb_abs_max)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_rtcp_xr_pkt {
    pub common: pjmedia_rtcp_xr_pkt__bindgen_ty_1,
    pub buf: [pj_int8_t; 104usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_pkt__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub ssrc: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_xr_pkt__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_xr_pkt__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_xr_pkt__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_xr_pkt__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_rtcp_xr_pkt__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_pkt__bindgen_ty_1>())).ssrc as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_pkt__bindgen_ty_1),
            "::",
            stringify!(ssrc)
        )
    );
}
impl pjmedia_rtcp_xr_pkt__bindgen_ty_1 {
    #[inline]
    pub fn count(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_count(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn p(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_p(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn version(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_version(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pt(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pt(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn length(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_length(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        count: ::std::os::raw::c_uint,
        p: ::std::os::raw::c_uint,
        version: ::std::os::raw::c_uint,
        pt: ::std::os::raw::c_uint,
        length: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let count: u32 = unsafe { ::std::mem::transmute(count) };
            count as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let p: u32 = unsafe { ::std::mem::transmute(p) };
            p as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let version: u32 = unsafe { ::std::mem::transmute(version) };
            version as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let pt: u32 = unsafe { ::std::mem::transmute(pt) };
            pt as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let length: u32 = unsafe { ::std::mem::transmute(length) };
            length as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_xr_pkt() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_xr_pkt>(),
        112usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_xr_pkt))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_xr_pkt>(),
        1usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_xr_pkt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_xr_pkt>())).common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_pkt),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_xr_pkt>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_pkt),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_stream_stat {
    pub stat_sum: pjmedia_rtcp_xr_stream_stat__bindgen_ty_1,
    pub voip_mtc: pjmedia_rtcp_xr_stream_stat__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_stream_stat__bindgen_ty_1 {
    pub update: pj_time_val,
    pub begin_seq: pj_uint32_t,
    pub end_seq: pj_uint32_t,
    pub count: ::std::os::raw::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub lost: ::std::os::raw::c_uint,
    pub dup: ::std::os::raw::c_uint,
    pub jitter: pj_math_stat,
    pub toh: pj_math_stat,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_xr_stream_stat__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_1>(),
        104usize,
        concat!(
            "Size of: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_1>())).update as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_1),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_1>())).begin_seq
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_1),
            "::",
            stringify!(begin_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_1>())).end_seq
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_1),
            "::",
            stringify!(end_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_1>())).count as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_1),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_1>())).lost as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_1),
            "::",
            stringify!(lost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_1>())).dup as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_1),
            "::",
            stringify!(dup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_1>())).jitter as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_1),
            "::",
            stringify!(jitter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_1>())).toh as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_1),
            "::",
            stringify!(toh)
        )
    );
}
impl pjmedia_rtcp_xr_stream_stat__bindgen_ty_1 {
    #[inline]
    pub fn l(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_l(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn d(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_d(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn j(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_j(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn t(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_t(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        l: ::std::os::raw::c_uint,
        d: ::std::os::raw::c_uint,
        j: ::std::os::raw::c_uint,
        t: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let l: u32 = unsafe { ::std::mem::transmute(l) };
            l as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let d: u32 = unsafe { ::std::mem::transmute(d) };
            d as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let j: u32 = unsafe { ::std::mem::transmute(j) };
            j as u64
        });
        __bindgen_bitfield_unit.set(3usize, 2u8, {
            let t: u32 = unsafe { ::std::mem::transmute(t) };
            t as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_stream_stat__bindgen_ty_2 {
    pub update: pj_time_val,
    pub loss_rate: pj_uint8_t,
    pub discard_rate: pj_uint8_t,
    pub burst_den: pj_uint8_t,
    pub gap_den: pj_uint8_t,
    pub burst_dur: pj_uint16_t,
    pub gap_dur: pj_uint16_t,
    pub rnd_trip_delay: pj_uint16_t,
    pub end_sys_delay: pj_uint16_t,
    pub signal_lvl: pj_int8_t,
    pub noise_lvl: pj_int8_t,
    pub rerl: pj_uint8_t,
    pub gmin: pj_uint8_t,
    pub r_factor: pj_uint8_t,
    pub ext_r_factor: pj_uint8_t,
    pub mos_lq: pj_uint8_t,
    pub mos_cq: pj_uint8_t,
    pub rx_config: pj_uint8_t,
    pub jb_nom: pj_uint16_t,
    pub jb_max: pj_uint16_t,
    pub jb_abs_max: pj_uint16_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_xr_stream_stat__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).update as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).loss_rate
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(loss_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).discard_rate
                as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(discard_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).burst_den
                as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(burst_den)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).gap_den
                as *const _ as usize
        },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(gap_den)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).burst_dur
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(burst_dur)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).gap_dur
                as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(gap_dur)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).rnd_trip_delay
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(rnd_trip_delay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).end_sys_delay
                as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(end_sys_delay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).signal_lvl
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(signal_lvl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).noise_lvl
                as *const _ as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(noise_lvl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).rerl as *const _
                as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(rerl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).gmin as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(gmin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).r_factor
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(r_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).ext_r_factor
                as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(ext_r_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).mos_lq as *const _
                as usize
        },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(mos_lq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).mos_cq as *const _
                as usize
        },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(mos_cq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).rx_config
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(rx_config)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).jb_nom as *const _
                as usize
        },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(jb_nom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).jb_max as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(jb_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat__bindgen_ty_2>())).jb_abs_max
                as *const _ as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat__bindgen_ty_2),
            "::",
            stringify!(jb_abs_max)
        )
    );
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_xr_stream_stat() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_xr_stream_stat>(),
        152usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_xr_stream_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_xr_stream_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_xr_stream_stat))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat>())).stat_sum as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat),
            "::",
            stringify!(stat_sum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_stream_stat>())).voip_mtc as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stream_stat),
            "::",
            stringify!(voip_mtc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_stat {
    pub rx: pjmedia_rtcp_xr_stream_stat,
    pub tx: pjmedia_rtcp_xr_stream_stat,
    pub rtt: pj_math_stat,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_xr_stat() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_xr_stat>(),
        336usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_xr_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_xr_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_xr_stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_xr_stat>())).rx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stat),
            "::",
            stringify!(rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_xr_stat>())).tx as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stat),
            "::",
            stringify!(tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_xr_stat>())).rtt as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_stat),
            "::",
            stringify!(rtt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_rtcp_xr_session {
    pub name: *mut ::std::os::raw::c_char,
    pub pkt: pjmedia_rtcp_xr_pkt,
    pub rx_lrr: pj_uint32_t,
    pub rx_lrr_time: pj_timestamp,
    pub rx_last_rr: pj_uint32_t,
    pub stat: pjmedia_rtcp_xr_stat,
    pub src_ref_seq: pj_uint32_t,
    pub uninitialized_src_ref_seq: pj_bool_t,
    pub voip_mtc_stat: pjmedia_rtcp_xr_session__bindgen_ty_1,
    pub ptime: ::std::os::raw::c_uint,
    pub frames_per_packet: ::std::os::raw::c_uint,
    pub rtcp_session: *mut pjmedia_rtcp_session,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_session__bindgen_ty_1 {
    pub pkt: pj_uint32_t,
    pub lost: pj_uint32_t,
    pub loss_count: pj_uint32_t,
    pub discard_count: pj_uint32_t,
    pub c11: pj_uint32_t,
    pub c13: pj_uint32_t,
    pub c14: pj_uint32_t,
    pub c22: pj_uint32_t,
    pub c23: pj_uint32_t,
    pub c33: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_xr_session__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_xr_session__bindgen_ty_1>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(pjmedia_rtcp_xr_session__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_xr_session__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_rtcp_xr_session__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_session__bindgen_ty_1>())).pkt as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session__bindgen_ty_1),
            "::",
            stringify!(pkt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_session__bindgen_ty_1>())).lost as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session__bindgen_ty_1),
            "::",
            stringify!(lost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_session__bindgen_ty_1>())).loss_count as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session__bindgen_ty_1),
            "::",
            stringify!(loss_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_session__bindgen_ty_1>())).discard_count
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session__bindgen_ty_1),
            "::",
            stringify!(discard_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_session__bindgen_ty_1>())).c11 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session__bindgen_ty_1),
            "::",
            stringify!(c11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_session__bindgen_ty_1>())).c13 as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session__bindgen_ty_1),
            "::",
            stringify!(c13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_session__bindgen_ty_1>())).c14 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session__bindgen_ty_1),
            "::",
            stringify!(c14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_session__bindgen_ty_1>())).c22 as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session__bindgen_ty_1),
            "::",
            stringify!(c22)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_session__bindgen_ty_1>())).c23 as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session__bindgen_ty_1),
            "::",
            stringify!(c23)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_session__bindgen_ty_1>())).c33 as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session__bindgen_ty_1),
            "::",
            stringify!(c33)
        )
    );
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_xr_session() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_xr_session>(),
        544usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_xr_session))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_xr_session>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_xr_session))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_xr_session>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_xr_session>())).pkt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session),
            "::",
            stringify!(pkt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_xr_session>())).rx_lrr as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session),
            "::",
            stringify!(rx_lrr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_session>())).rx_lrr_time as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session),
            "::",
            stringify!(rx_lrr_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_session>())).rx_last_rr as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session),
            "::",
            stringify!(rx_last_rr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_xr_session>())).stat as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session),
            "::",
            stringify!(stat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_session>())).src_ref_seq as *const _ as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session),
            "::",
            stringify!(src_ref_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_session>())).uninitialized_src_ref_seq
                as *const _ as usize
        },
        484usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session),
            "::",
            stringify!(uninitialized_src_ref_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_session>())).voip_mtc_stat as *const _ as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session),
            "::",
            stringify!(voip_mtc_stat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_xr_session>())).ptime as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session),
            "::",
            stringify!(ptime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_session>())).frames_per_packet as *const _
                as usize
        },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session),
            "::",
            stringify!(frames_per_packet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_xr_session>())).rtcp_session as *const _ as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_xr_session),
            "::",
            stringify!(rtcp_session)
        )
    );
}
extern "C" {
    pub fn pjmedia_rtcp_build_rtcp_xr(
        session: *mut pjmedia_rtcp_xr_session,
        rpt_types: ::std::os::raw::c_uint,
        rtcp_pkt: *mut *mut ::std::os::raw::c_void,
        len: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pjmedia_rtcp_xr_update_info(
        session: *mut pjmedia_rtcp_xr_session,
        info: ::std::os::raw::c_uint,
        val: pj_int32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtcp_xr_init(
        session: *mut pjmedia_rtcp_xr_session,
        r_session: *mut pjmedia_rtcp_session,
        gmin: pj_uint8_t,
        frames_per_packet: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn pjmedia_rtcp_xr_fini(session: *mut pjmedia_rtcp_xr_session);
}
extern "C" {
    pub fn pjmedia_rtcp_xr_rx_rtcp_xr(
        session: *mut pjmedia_rtcp_xr_session,
        rtcp_pkt: *const ::std::os::raw::c_void,
        size: pj_size_t,
    );
}
extern "C" {
    pub fn pjmedia_rtcp_xr_rx_rtp(
        session: *mut pjmedia_rtcp_xr_session,
        seq: ::std::os::raw::c_uint,
        lost: ::std::os::raw::c_int,
        dup: ::std::os::raw::c_int,
        discarded: ::std::os::raw::c_int,
        jitter: ::std::os::raw::c_int,
        toh: ::std::os::raw::c_int,
        toh_ipv4: pj_bool_t,
    );
}
extern "C" {
    pub fn pjmedia_rtcp_xr_tx_rtp(
        session: *mut pjmedia_rtcp_xr_session,
        ptsize: ::std::os::raw::c_uint,
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtp_hdr {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub seq: pj_uint16_t,
    pub ts: pj_uint32_t,
    pub ssrc: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtp_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtp_hdr>(),
        12usize,
        concat!("Size of: ", stringify!(pjmedia_rtp_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtp_hdr>(),
        1usize,
        concat!("Alignment of ", stringify!(pjmedia_rtp_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_hdr>())).seq as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_hdr),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_hdr>())).ts as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_hdr),
            "::",
            stringify!(ts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_hdr>())).ssrc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_hdr),
            "::",
            stringify!(ssrc)
        )
    );
}
impl pjmedia_rtp_hdr {
    #[inline]
    pub fn cc(&self) -> pj_uint16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_cc(&mut self, val: pj_uint16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn x(&self) -> pj_uint16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_x(&mut self, val: pj_uint16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn p(&self) -> pj_uint16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_p(&mut self, val: pj_uint16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn v(&self) -> pj_uint16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_v(&mut self, val: pj_uint16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pt(&self) -> pj_uint16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 7u8) as u16) }
    }
    #[inline]
    pub fn set_pt(&mut self, val: pj_uint16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn m(&self) -> pj_uint16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_m(&mut self, val: pj_uint16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cc: pj_uint16_t,
        x: pj_uint16_t,
        p: pj_uint16_t,
        v: pj_uint16_t,
        pt: pj_uint16_t,
        m: pj_uint16_t,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let cc: u16 = unsafe { ::std::mem::transmute(cc) };
            cc as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let x: u16 = unsafe { ::std::mem::transmute(x) };
            x as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let p: u16 = unsafe { ::std::mem::transmute(p) };
            p as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let v: u16 = unsafe { ::std::mem::transmute(v) };
            v as u64
        });
        __bindgen_bitfield_unit.set(8usize, 7u8, {
            let pt: u16 = unsafe { ::std::mem::transmute(pt) };
            pt as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let m: u16 = unsafe { ::std::mem::transmute(m) };
            m as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtp_ext_hdr {
    pub profile_data: pj_uint16_t,
    pub length: pj_uint16_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtp_ext_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtp_ext_hdr>(),
        4usize,
        concat!("Size of: ", stringify!(pjmedia_rtp_ext_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtp_ext_hdr>(),
        2usize,
        concat!("Alignment of ", stringify!(pjmedia_rtp_ext_hdr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtp_ext_hdr>())).profile_data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_ext_hdr),
            "::",
            stringify!(profile_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_ext_hdr>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_ext_hdr),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtp_dec_hdr {
    pub ext_hdr: *mut pjmedia_rtp_ext_hdr,
    pub ext: *mut pj_uint32_t,
    pub ext_len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjmedia_rtp_dec_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtp_dec_hdr>(),
        24usize,
        concat!("Size of: ", stringify!(pjmedia_rtp_dec_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtp_dec_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_rtp_dec_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_dec_hdr>())).ext_hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_dec_hdr),
            "::",
            stringify!(ext_hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_dec_hdr>())).ext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_dec_hdr),
            "::",
            stringify!(ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_dec_hdr>())).ext_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_dec_hdr),
            "::",
            stringify!(ext_len)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtp_dtmf_event {
    pub event: pj_uint8_t,
    pub e_vol: pj_uint8_t,
    pub duration: pj_uint16_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtp_dtmf_event() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtp_dtmf_event>(),
        4usize,
        concat!("Size of: ", stringify!(pjmedia_rtp_dtmf_event))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtp_dtmf_event>(),
        1usize,
        concat!("Alignment of ", stringify!(pjmedia_rtp_dtmf_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_dtmf_event>())).event as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_dtmf_event),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_dtmf_event>())).e_vol as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_dtmf_event),
            "::",
            stringify!(e_vol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_dtmf_event>())).duration as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_dtmf_event),
            "::",
            stringify!(duration)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtp_seq_session {
    pub max_seq: pj_uint16_t,
    pub cycles: pj_uint32_t,
    pub base_seq: pj_uint32_t,
    pub bad_seq: pj_uint32_t,
    pub probation: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtp_seq_session() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtp_seq_session>(),
        20usize,
        concat!("Size of: ", stringify!(pjmedia_rtp_seq_session))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtp_seq_session>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_rtp_seq_session))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_seq_session>())).max_seq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_seq_session),
            "::",
            stringify!(max_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_seq_session>())).cycles as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_seq_session),
            "::",
            stringify!(cycles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtp_seq_session>())).base_seq as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_seq_session),
            "::",
            stringify!(base_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_seq_session>())).bad_seq as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_seq_session),
            "::",
            stringify!(bad_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtp_seq_session>())).probation as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_seq_session),
            "::",
            stringify!(probation)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtp_session {
    pub out_hdr: pjmedia_rtp_hdr,
    pub seq_ctrl: pjmedia_rtp_seq_session,
    pub out_pt: pj_uint16_t,
    pub out_extseq: pj_uint32_t,
    pub has_peer_ssrc: pj_bool_t,
    pub peer_ssrc: pj_uint32_t,
    pub received: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtp_session() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtp_session>(),
        52usize,
        concat!("Size of: ", stringify!(pjmedia_rtp_session))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtp_session>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_rtp_session))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_session>())).out_hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_session),
            "::",
            stringify!(out_hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_session>())).seq_ctrl as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_session),
            "::",
            stringify!(seq_ctrl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_session>())).out_pt as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_session),
            "::",
            stringify!(out_pt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_session>())).out_extseq as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_session),
            "::",
            stringify!(out_extseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtp_session>())).has_peer_ssrc as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_session),
            "::",
            stringify!(has_peer_ssrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_session>())).peer_ssrc as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_session),
            "::",
            stringify!(peer_ssrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_session>())).received as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_session),
            "::",
            stringify!(received)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_rtp_status {
    pub status: pjmedia_rtp_status__bindgen_ty_1,
    pub diff: pj_uint16_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjmedia_rtp_status__bindgen_ty_1 {
    pub flag: pjmedia_rtp_status__bindgen_ty_1_flag,
    pub value: pj_uint16_t,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtp_status__bindgen_ty_1_flag {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_pjmedia_rtp_status__bindgen_ty_1_flag() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtp_status__bindgen_ty_1_flag>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(pjmedia_rtp_status__bindgen_ty_1_flag)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtp_status__bindgen_ty_1_flag>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_rtp_status__bindgen_ty_1_flag)
        )
    );
}
impl pjmedia_rtp_status__bindgen_ty_1_flag {
    #[inline]
    pub fn bad(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bad(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn badpt(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_badpt(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn badssrc(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_badssrc(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dup(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dup(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn outorder(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_outorder(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn probation(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_probation(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn restart(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_restart(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bad: ::std::os::raw::c_int,
        badpt: ::std::os::raw::c_int,
        badssrc: ::std::os::raw::c_int,
        dup: ::std::os::raw::c_int,
        outorder: ::std::os::raw::c_int,
        probation: ::std::os::raw::c_int,
        restart: ::std::os::raw::c_int,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bad: u32 = unsafe { ::std::mem::transmute(bad) };
            bad as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let badpt: u32 = unsafe { ::std::mem::transmute(badpt) };
            badpt as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let badssrc: u32 = unsafe { ::std::mem::transmute(badssrc) };
            badssrc as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let dup: u32 = unsafe { ::std::mem::transmute(dup) };
            dup as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let outorder: u32 = unsafe { ::std::mem::transmute(outorder) };
            outorder as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let probation: u32 = unsafe { ::std::mem::transmute(probation) };
            probation as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let restart: u32 = unsafe { ::std::mem::transmute(restart) };
            restart as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_pjmedia_rtp_status__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtp_status__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(pjmedia_rtp_status__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtp_status__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_rtp_status__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtp_status__bindgen_ty_1>())).flag as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_status__bindgen_ty_1),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtp_status__bindgen_ty_1>())).value as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_status__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
}
#[test]
fn bindgen_test_layout_pjmedia_rtp_status() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtp_status>(),
        8usize,
        concat!("Size of: ", stringify!(pjmedia_rtp_status))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtp_status>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_rtp_status))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_status>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_status),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_status>())).diff as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_status),
            "::",
            stringify!(diff)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtp_session_setting {
    pub flags: pj_uint8_t,
    pub default_pt: ::std::os::raw::c_int,
    pub sender_ssrc: pj_uint32_t,
    pub peer_ssrc: pj_uint32_t,
    pub seq: pj_uint16_t,
    pub ts: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtp_session_setting() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtp_session_setting>(),
        24usize,
        concat!("Size of: ", stringify!(pjmedia_rtp_session_setting))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtp_session_setting>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_rtp_session_setting))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtp_session_setting>())).flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_session_setting),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtp_session_setting>())).default_pt as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_session_setting),
            "::",
            stringify!(default_pt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtp_session_setting>())).sender_ssrc as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_session_setting),
            "::",
            stringify!(sender_ssrc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtp_session_setting>())).peer_ssrc as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_session_setting),
            "::",
            stringify!(peer_ssrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_session_setting>())).seq as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_session_setting),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtp_session_setting>())).ts as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtp_session_setting),
            "::",
            stringify!(ts)
        )
    );
}
extern "C" {
    pub fn pjmedia_rtp_session_init(
        ses: *mut pjmedia_rtp_session,
        default_pt: ::std::os::raw::c_int,
        sender_ssrc: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtp_session_init2(
        ses: *mut pjmedia_rtp_session,
        settings: pjmedia_rtp_session_setting,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtp_encode_rtp(
        ses: *mut pjmedia_rtp_session,
        pt: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        payload_len: ::std::os::raw::c_int,
        ts_len: ::std::os::raw::c_int,
        rtphdr: *mut *const ::std::os::raw::c_void,
        hdrlen: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtp_decode_rtp(
        ses: *mut pjmedia_rtp_session,
        pkt: *const ::std::os::raw::c_void,
        pkt_len: ::std::os::raw::c_int,
        hdr: *mut *const pjmedia_rtp_hdr,
        payload: *mut *const ::std::os::raw::c_void,
        payloadlen: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtp_decode_rtp2(
        ses: *mut pjmedia_rtp_session,
        pkt: *const ::std::os::raw::c_void,
        pkt_len: ::std::os::raw::c_int,
        hdr: *mut *const pjmedia_rtp_hdr,
        dec_hdr: *mut pjmedia_rtp_dec_hdr,
        payload: *mut *const ::std::os::raw::c_void,
        payloadlen: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtp_session_update(
        ses: *mut pjmedia_rtp_session,
        hdr: *const pjmedia_rtp_hdr,
        seq_st: *mut pjmedia_rtp_status,
    );
}
extern "C" {
    pub fn pjmedia_rtp_session_update2(
        ses: *mut pjmedia_rtp_session,
        hdr: *const pjmedia_rtp_hdr,
        seq_st: *mut pjmedia_rtp_status,
        check_pt: pj_bool_t,
    );
}
extern "C" {
    pub fn pjmedia_rtp_seq_init(seq_ctrl: *mut pjmedia_rtp_seq_session, seq: pj_uint16_t);
}
extern "C" {
    pub fn pjmedia_rtp_seq_update(
        seq_ctrl: *mut pjmedia_rtp_seq_session,
        seq: pj_uint16_t,
        seq_status: *mut pjmedia_rtp_status,
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_sr {
    pub ntp_sec: pj_uint32_t,
    pub ntp_frac: pj_uint32_t,
    pub rtp_ts: pj_uint32_t,
    pub sender_pcount: pj_uint32_t,
    pub sender_bcount: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_sr() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_sr>(),
        20usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_sr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_sr>(),
        1usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_sr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_sr>())).ntp_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_sr),
            "::",
            stringify!(ntp_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_sr>())).ntp_frac as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_sr),
            "::",
            stringify!(ntp_frac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_sr>())).rtp_ts as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_sr),
            "::",
            stringify!(rtp_ts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_sr>())).sender_pcount as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_sr),
            "::",
            stringify!(sender_pcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_sr>())).sender_bcount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_sr),
            "::",
            stringify!(sender_bcount)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_rr {
    pub ssrc: pj_uint32_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub last_seq: pj_uint32_t,
    pub jitter: pj_uint32_t,
    pub lsr: pj_uint32_t,
    pub dlsr: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_rr() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_rr>(),
        24usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_rr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_rr>(),
        1usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_rr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_rr>())).ssrc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_rr),
            "::",
            stringify!(ssrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_rr>())).last_seq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_rr),
            "::",
            stringify!(last_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_rr>())).jitter as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_rr),
            "::",
            stringify!(jitter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_rr>())).lsr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_rr),
            "::",
            stringify!(lsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_rr>())).dlsr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_rr),
            "::",
            stringify!(dlsr)
        )
    );
}
impl pjmedia_rtcp_rr {
    #[inline]
    pub fn fract_lost(&self) -> pj_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_fract_lost(&mut self, val: pj_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn total_lost_2(&self) -> pj_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_total_lost_2(&mut self, val: pj_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn total_lost_1(&self) -> pj_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_total_lost_1(&mut self, val: pj_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn total_lost_0(&self) -> pj_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_total_lost_0(&mut self, val: pj_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fract_lost: pj_uint32_t,
        total_lost_2: pj_uint32_t,
        total_lost_1: pj_uint32_t,
        total_lost_0: pj_uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let fract_lost: u32 = unsafe { ::std::mem::transmute(fract_lost) };
            fract_lost as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let total_lost_2: u32 = unsafe { ::std::mem::transmute(total_lost_2) };
            total_lost_2 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let total_lost_1: u32 = unsafe { ::std::mem::transmute(total_lost_1) };
            total_lost_1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let total_lost_0: u32 = unsafe { ::std::mem::transmute(total_lost_0) };
            total_lost_0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_common {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub ssrc: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_common() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_common>(),
        8usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_common))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_common>(),
        1usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_common))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_common>())).ssrc as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_common),
            "::",
            stringify!(ssrc)
        )
    );
}
impl pjmedia_rtcp_common {
    #[inline]
    pub fn count(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_count(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn p(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_p(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn version(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_version(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pt(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pt(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn length(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_length(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        count: ::std::os::raw::c_uint,
        p: ::std::os::raw::c_uint,
        version: ::std::os::raw::c_uint,
        pt: ::std::os::raw::c_uint,
        length: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let count: u32 = unsafe { ::std::mem::transmute(count) };
            count as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let p: u32 = unsafe { ::std::mem::transmute(p) };
            p as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let version: u32 = unsafe { ::std::mem::transmute(version) };
            version as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let pt: u32 = unsafe { ::std::mem::transmute(pt) };
            pt as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let length: u32 = unsafe { ::std::mem::transmute(length) };
            length as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_sr_pkt {
    pub common: pjmedia_rtcp_common,
    pub sr: pjmedia_rtcp_sr,
    pub rr: pjmedia_rtcp_rr,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_sr_pkt() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_sr_pkt>(),
        52usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_sr_pkt))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_sr_pkt>(),
        1usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_sr_pkt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_sr_pkt>())).common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_sr_pkt),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_sr_pkt>())).sr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_sr_pkt),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_sr_pkt>())).rr as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_sr_pkt),
            "::",
            stringify!(rr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_rr_pkt {
    pub common: pjmedia_rtcp_common,
    pub rr: pjmedia_rtcp_rr,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_rr_pkt() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_rr_pkt>(),
        32usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_rr_pkt))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_rr_pkt>(),
        1usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_rr_pkt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_rr_pkt>())).common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_rr_pkt),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_rr_pkt>())).rr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_rr_pkt),
            "::",
            stringify!(rr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_sdes {
    pub cname: pj_str_t,
    pub name: pj_str_t,
    pub email: pj_str_t,
    pub phone: pj_str_t,
    pub loc: pj_str_t,
    pub tool: pj_str_t,
    pub note: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_sdes() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_sdes>(),
        112usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_sdes))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_sdes>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_sdes))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_sdes>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_sdes),
            "::",
            stringify!(cname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_sdes>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_sdes),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_sdes>())).email as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_sdes),
            "::",
            stringify!(email)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_sdes>())).phone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_sdes),
            "::",
            stringify!(phone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_sdes>())).loc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_sdes),
            "::",
            stringify!(loc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_sdes>())).tool as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_sdes),
            "::",
            stringify!(tool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_sdes>())).note as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_sdes),
            "::",
            stringify!(note)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_ntp_rec {
    pub hi: pj_uint32_t,
    pub lo: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_ntp_rec() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_ntp_rec>(),
        8usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_ntp_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_ntp_rec>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_ntp_rec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_ntp_rec>())).hi as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_ntp_rec),
            "::",
            stringify!(hi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_ntp_rec>())).lo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_ntp_rec),
            "::",
            stringify!(lo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_stream_stat {
    pub update: pj_time_val,
    pub update_cnt: ::std::os::raw::c_uint,
    pub pkt: pj_uint32_t,
    pub bytes: pj_uint32_t,
    pub discard: ::std::os::raw::c_uint,
    pub loss: ::std::os::raw::c_uint,
    pub reorder: ::std::os::raw::c_uint,
    pub dup: ::std::os::raw::c_uint,
    pub loss_period: pj_math_stat,
    pub loss_type: pjmedia_rtcp_stream_stat__bindgen_ty_1,
    pub jitter: pj_math_stat,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_stream_stat__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_stream_stat__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_stream_stat__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(pjmedia_rtcp_stream_stat__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_stream_stat__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_rtcp_stream_stat__bindgen_ty_1)
        )
    );
}
impl pjmedia_rtcp_stream_stat__bindgen_ty_1 {
    #[inline]
    pub fn burst(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_burst(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn random(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_random(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        burst: ::std::os::raw::c_uint,
        random: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let burst: u32 = unsafe { ::std::mem::transmute(burst) };
            burst as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let random: u32 = unsafe { ::std::mem::transmute(random) };
            random as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_stream_stat() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_stream_stat>(),
        120usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_stream_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_stream_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_stream_stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_stream_stat>())).update as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_stream_stat),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_stream_stat>())).update_cnt as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_stream_stat),
            "::",
            stringify!(update_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_stream_stat>())).pkt as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_stream_stat),
            "::",
            stringify!(pkt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_stream_stat>())).bytes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_stream_stat),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_stream_stat>())).discard as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_stream_stat),
            "::",
            stringify!(discard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_stream_stat>())).loss as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_stream_stat),
            "::",
            stringify!(loss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_stream_stat>())).reorder as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_stream_stat),
            "::",
            stringify!(reorder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_stream_stat>())).dup as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_stream_stat),
            "::",
            stringify!(dup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_stream_stat>())).loss_period as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_stream_stat),
            "::",
            stringify!(loss_period)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_stream_stat>())).loss_type as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_stream_stat),
            "::",
            stringify!(loss_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_stream_stat>())).jitter as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_stream_stat),
            "::",
            stringify!(jitter)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_rtcp_stat {
    pub start: pj_time_val,
    pub tx: pjmedia_rtcp_stream_stat,
    pub rx: pjmedia_rtcp_stream_stat,
    pub rtt: pj_math_stat,
    pub rtp_tx_last_ts: pj_uint32_t,
    pub rtp_tx_last_seq: pj_uint16_t,
    pub peer_sdes: pjmedia_rtcp_sdes,
    pub peer_sdes_buf_: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_stat() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_stat>(),
        472usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_stat>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_stat),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_stat>())).tx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_stat),
            "::",
            stringify!(tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_stat>())).rx as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_stat),
            "::",
            stringify!(rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_stat>())).rtt as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_stat),
            "::",
            stringify!(rtt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_stat>())).rtp_tx_last_ts as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_stat),
            "::",
            stringify!(rtp_tx_last_ts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_stat>())).rtp_tx_last_seq as *const _ as usize
        },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_stat),
            "::",
            stringify!(rtp_tx_last_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_stat>())).peer_sdes as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_stat),
            "::",
            stringify!(peer_sdes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_stat>())).peer_sdes_buf_ as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_stat),
            "::",
            stringify!(peer_sdes_buf_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_rtcp_session {
    pub name: *mut ::std::os::raw::c_char,
    pub rtcp_sr_pkt: pjmedia_rtcp_sr_pkt,
    pub rtcp_rr_pkt: pjmedia_rtcp_rr_pkt,
    pub seq_ctrl: pjmedia_rtp_seq_session,
    pub rtp_last_ts: ::std::os::raw::c_uint,
    pub clock_rate: ::std::os::raw::c_uint,
    pub pkt_size: ::std::os::raw::c_uint,
    pub received: pj_uint32_t,
    pub exp_prior: pj_uint32_t,
    pub rx_prior: pj_uint32_t,
    pub transit: pj_int32_t,
    pub jitter: pj_uint32_t,
    pub tv_base: pj_time_val,
    pub ts_base: pj_timestamp,
    pub ts_freq: pj_timestamp,
    pub rtp_ts_base: pj_uint32_t,
    pub rx_lsr: pj_uint32_t,
    pub rx_lsr_time: pj_timestamp,
    pub peer_ssrc: pj_uint32_t,
    pub stat: pjmedia_rtcp_stat,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_session() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_session>(),
        672usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_session))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_session>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_session))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_session>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_session>())).rtcp_sr_pkt as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(rtcp_sr_pkt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_session>())).rtcp_rr_pkt as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(rtcp_rr_pkt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_session>())).seq_ctrl as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(seq_ctrl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_session>())).rtp_last_ts as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(rtp_last_ts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_session>())).clock_rate as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_session>())).pkt_size as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(pkt_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_session>())).received as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(received)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_session>())).exp_prior as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(exp_prior)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_session>())).rx_prior as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(rx_prior)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_session>())).transit as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(transit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_session>())).jitter as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(jitter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_session>())).tv_base as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(tv_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_session>())).ts_base as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(ts_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_session>())).ts_freq as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(ts_freq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_session>())).rtp_ts_base as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(rtp_ts_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_session>())).rx_lsr as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(rx_lsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_session>())).rx_lsr_time as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(rx_lsr_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_session>())).peer_ssrc as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(peer_ssrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_session>())).stat as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session),
            "::",
            stringify!(stat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_session_setting {
    pub name: *mut ::std::os::raw::c_char,
    pub clock_rate: ::std::os::raw::c_uint,
    pub samples_per_frame: ::std::os::raw::c_uint,
    pub ssrc: pj_uint32_t,
    pub rtp_ts_base: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_session_setting() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_session_setting>(),
        24usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_session_setting))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_session_setting>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_session_setting))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_session_setting>())).name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session_setting),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_session_setting>())).clock_rate as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session_setting),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_session_setting>())).samples_per_frame as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session_setting),
            "::",
            stringify!(samples_per_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_session_setting>())).ssrc as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session_setting),
            "::",
            stringify!(ssrc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_session_setting>())).rtp_ts_base as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_session_setting),
            "::",
            stringify!(rtp_ts_base)
        )
    );
}
extern "C" {
    pub fn pjmedia_rtcp_session_setting_default(settings: *mut pjmedia_rtcp_session_setting);
}
extern "C" {
    pub fn pjmedia_rtcp_init_stat(stat: *mut pjmedia_rtcp_stat);
}
extern "C" {
    pub fn pjmedia_rtcp_init(
        session: *mut pjmedia_rtcp_session,
        name: *mut ::std::os::raw::c_char,
        clock_rate: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        ssrc: pj_uint32_t,
    );
}
extern "C" {
    pub fn pjmedia_rtcp_init2(
        session: *mut pjmedia_rtcp_session,
        settings: *const pjmedia_rtcp_session_setting,
    );
}
extern "C" {
    pub fn pjmedia_rtcp_get_ntp_time(
        sess: *const pjmedia_rtcp_session,
        ntp: *mut pjmedia_rtcp_ntp_rec,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtcp_fini(session: *mut pjmedia_rtcp_session);
}
extern "C" {
    pub fn pjmedia_rtcp_rx_rtp(
        session: *mut pjmedia_rtcp_session,
        seq: ::std::os::raw::c_uint,
        ts: ::std::os::raw::c_uint,
        payload: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn pjmedia_rtcp_rx_rtp2(
        session: *mut pjmedia_rtcp_session,
        seq: ::std::os::raw::c_uint,
        ts: ::std::os::raw::c_uint,
        payload: ::std::os::raw::c_uint,
        discarded: pj_bool_t,
    );
}
extern "C" {
    pub fn pjmedia_rtcp_tx_rtp(session: *mut pjmedia_rtcp_session, ptsize: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn pjmedia_rtcp_rx_rtcp(
        session: *mut pjmedia_rtcp_session,
        rtcp_pkt: *const ::std::os::raw::c_void,
        size: pj_size_t,
    );
}
extern "C" {
    pub fn pjmedia_rtcp_build_rtcp(
        session: *mut pjmedia_rtcp_session,
        rtcp_pkt: *mut *mut ::std::os::raw::c_void,
        len: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pjmedia_rtcp_build_rtcp_sdes(
        session: *mut pjmedia_rtcp_session,
        buf: *mut ::std::os::raw::c_void,
        length: *mut pj_size_t,
        sdes: *const pjmedia_rtcp_sdes,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtcp_build_rtcp_bye(
        session: *mut pjmedia_rtcp_session,
        buf: *mut ::std::os::raw::c_void,
        length: *mut pj_size_t,
        reason: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtcp_enable_xr(
        session: *mut pjmedia_rtcp_session,
        enable: pj_bool_t,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_attr {
    pub name: pj_str_t,
    pub value: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjmedia_sdp_attr() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_sdp_attr>(),
        32usize,
        concat!("Size of: ", stringify!(pjmedia_sdp_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_sdp_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_sdp_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_attr>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_attr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_attr>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_attr),
            "::",
            stringify!(value)
        )
    );
}
extern "C" {
    pub fn pjmedia_sdp_attr_create(
        pool: *mut pj_pool_t,
        name: *const ::std::os::raw::c_char,
        value: *const pj_str_t,
    ) -> *mut pjmedia_sdp_attr;
}
extern "C" {
    pub fn pjmedia_sdp_attr_clone(
        pool: *mut pj_pool_t,
        attr: *const pjmedia_sdp_attr,
    ) -> *mut pjmedia_sdp_attr;
}
extern "C" {
    pub fn pjmedia_sdp_attr_find(
        count: ::std::os::raw::c_uint,
        attr_array: *const *mut pjmedia_sdp_attr,
        name: *const pj_str_t,
        fmt: *const pj_str_t,
    ) -> *mut pjmedia_sdp_attr;
}
extern "C" {
    pub fn pjmedia_sdp_attr_find2(
        count: ::std::os::raw::c_uint,
        attr_array: *const *mut pjmedia_sdp_attr,
        name: *const ::std::os::raw::c_char,
        fmt: *const pj_str_t,
    ) -> *mut pjmedia_sdp_attr;
}
extern "C" {
    pub fn pjmedia_sdp_attr_add(
        count: *mut ::std::os::raw::c_uint,
        attr_array: *mut *mut pjmedia_sdp_attr,
        attr: *mut pjmedia_sdp_attr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_attr_remove_all(
        count: *mut ::std::os::raw::c_uint,
        attr_array: *mut *mut pjmedia_sdp_attr,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjmedia_sdp_attr_remove(
        count: *mut ::std::os::raw::c_uint,
        attr_array: *mut *mut pjmedia_sdp_attr,
        attr: *mut pjmedia_sdp_attr,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_rtpmap {
    pub pt: pj_str_t,
    pub enc_name: pj_str_t,
    pub clock_rate: ::std::os::raw::c_uint,
    pub param: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjmedia_sdp_rtpmap() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_sdp_rtpmap>(),
        56usize,
        concat!("Size of: ", stringify!(pjmedia_sdp_rtpmap))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_sdp_rtpmap>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_sdp_rtpmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_rtpmap>())).pt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_rtpmap),
            "::",
            stringify!(pt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_rtpmap>())).enc_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_rtpmap),
            "::",
            stringify!(enc_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_rtpmap>())).clock_rate as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_rtpmap),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_rtpmap>())).param as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_rtpmap),
            "::",
            stringify!(param)
        )
    );
}
extern "C" {
    pub fn pjmedia_sdp_attr_to_rtpmap(
        pool: *mut pj_pool_t,
        attr: *const pjmedia_sdp_attr,
        p_rtpmap: *mut *mut pjmedia_sdp_rtpmap,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_attr_get_rtpmap(
        attr: *const pjmedia_sdp_attr,
        rtpmap: *mut pjmedia_sdp_rtpmap,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_rtpmap_to_attr(
        pool: *mut pj_pool_t,
        rtpmap: *const pjmedia_sdp_rtpmap,
        p_attr: *mut *mut pjmedia_sdp_attr,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_fmtp {
    pub fmt: pj_str_t,
    pub fmt_param: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjmedia_sdp_fmtp() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_sdp_fmtp>(),
        32usize,
        concat!("Size of: ", stringify!(pjmedia_sdp_fmtp))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_sdp_fmtp>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_sdp_fmtp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_fmtp>())).fmt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_fmtp),
            "::",
            stringify!(fmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_fmtp>())).fmt_param as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_fmtp),
            "::",
            stringify!(fmt_param)
        )
    );
}
extern "C" {
    pub fn pjmedia_sdp_attr_get_fmtp(
        attr: *const pjmedia_sdp_attr,
        fmtp: *mut pjmedia_sdp_fmtp,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_rtcp_attr {
    pub port: ::std::os::raw::c_uint,
    pub net_type: pj_str_t,
    pub addr_type: pj_str_t,
    pub addr: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjmedia_sdp_rtcp_attr() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_sdp_rtcp_attr>(),
        56usize,
        concat!("Size of: ", stringify!(pjmedia_sdp_rtcp_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_sdp_rtcp_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_sdp_rtcp_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_rtcp_attr>())).port as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_rtcp_attr),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_rtcp_attr>())).net_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_rtcp_attr),
            "::",
            stringify!(net_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_rtcp_attr>())).addr_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_rtcp_attr),
            "::",
            stringify!(addr_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_rtcp_attr>())).addr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_rtcp_attr),
            "::",
            stringify!(addr)
        )
    );
}
extern "C" {
    pub fn pjmedia_sdp_attr_get_rtcp(
        attr: *const pjmedia_sdp_attr,
        rtcp: *mut pjmedia_sdp_rtcp_attr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_attr_create_rtcp(
        pool: *mut pj_pool_t,
        a: *const pj_sockaddr,
    ) -> *mut pjmedia_sdp_attr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_ssrc_attr {
    pub ssrc: pj_uint32_t,
    pub cname: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjmedia_sdp_ssrc_attr() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_sdp_ssrc_attr>(),
        24usize,
        concat!("Size of: ", stringify!(pjmedia_sdp_ssrc_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_sdp_ssrc_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_sdp_ssrc_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_ssrc_attr>())).ssrc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_ssrc_attr),
            "::",
            stringify!(ssrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_ssrc_attr>())).cname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_ssrc_attr),
            "::",
            stringify!(cname)
        )
    );
}
extern "C" {
    pub fn pjmedia_sdp_attr_get_ssrc(
        attr: *const pjmedia_sdp_attr,
        rtcp: *mut pjmedia_sdp_ssrc_attr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_attr_create_ssrc(
        pool: *mut pj_pool_t,
        ssrc: pj_uint32_t,
        cname: *const pj_str_t,
    ) -> *mut pjmedia_sdp_attr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_conn {
    pub net_type: pj_str_t,
    pub addr_type: pj_str_t,
    pub addr: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjmedia_sdp_conn() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_sdp_conn>(),
        48usize,
        concat!("Size of: ", stringify!(pjmedia_sdp_conn))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_sdp_conn>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_sdp_conn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_conn>())).net_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_conn),
            "::",
            stringify!(net_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_conn>())).addr_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_conn),
            "::",
            stringify!(addr_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_conn>())).addr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_conn),
            "::",
            stringify!(addr)
        )
    );
}
extern "C" {
    pub fn pjmedia_sdp_conn_clone(
        pool: *mut pj_pool_t,
        rhs: *const pjmedia_sdp_conn,
    ) -> *mut pjmedia_sdp_conn;
}
extern "C" {
    pub fn pjmedia_sdp_conn_cmp(
        conn1: *const pjmedia_sdp_conn,
        conn2: *const pjmedia_sdp_conn,
        option: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_bandw {
    pub modifier: pj_str_t,
    pub value: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_sdp_bandw() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_sdp_bandw>(),
        24usize,
        concat!("Size of: ", stringify!(pjmedia_sdp_bandw))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_sdp_bandw>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_sdp_bandw))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_bandw>())).modifier as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_bandw),
            "::",
            stringify!(modifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_bandw>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_bandw),
            "::",
            stringify!(value)
        )
    );
}
extern "C" {
    pub fn pjmedia_sdp_bandw_clone(
        pool: *mut pj_pool_t,
        rhs: *const pjmedia_sdp_bandw,
    ) -> *mut pjmedia_sdp_bandw;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_sdp_media {
    pub desc: pjmedia_sdp_media__bindgen_ty_1,
    pub conn: *mut pjmedia_sdp_conn,
    pub bandw_count: ::std::os::raw::c_uint,
    pub bandw: [*mut pjmedia_sdp_bandw; 4usize],
    pub attr_count: ::std::os::raw::c_uint,
    pub attr: [*mut pjmedia_sdp_attr; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_media__bindgen_ty_1 {
    pub media: pj_str_t,
    pub port: pj_uint16_t,
    pub port_count: ::std::os::raw::c_uint,
    pub transport: pj_str_t,
    pub fmt_count: ::std::os::raw::c_uint,
    pub fmt: [pj_str_t; 32usize],
}
#[test]
fn bindgen_test_layout_pjmedia_sdp_media__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_sdp_media__bindgen_ty_1>(),
        560usize,
        concat!("Size of: ", stringify!(pjmedia_sdp_media__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_sdp_media__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_sdp_media__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_sdp_media__bindgen_ty_1>())).media as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_media__bindgen_ty_1),
            "::",
            stringify!(media)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_sdp_media__bindgen_ty_1>())).port as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_media__bindgen_ty_1),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_sdp_media__bindgen_ty_1>())).port_count as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_media__bindgen_ty_1),
            "::",
            stringify!(port_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_sdp_media__bindgen_ty_1>())).transport as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_media__bindgen_ty_1),
            "::",
            stringify!(transport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_sdp_media__bindgen_ty_1>())).fmt_count as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_media__bindgen_ty_1),
            "::",
            stringify!(fmt_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_sdp_media__bindgen_ty_1>())).fmt as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_media__bindgen_ty_1),
            "::",
            stringify!(fmt)
        )
    );
}
#[test]
fn bindgen_test_layout_pjmedia_sdp_media() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_sdp_media>(),
        1160usize,
        concat!("Size of: ", stringify!(pjmedia_sdp_media))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_sdp_media>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_sdp_media))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_media>())).desc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_media),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_media>())).conn as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_media),
            "::",
            stringify!(conn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_media>())).bandw_count as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_media),
            "::",
            stringify!(bandw_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_media>())).bandw as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_media),
            "::",
            stringify!(bandw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_media>())).attr_count as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_media),
            "::",
            stringify!(attr_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_media>())).attr as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_media),
            "::",
            stringify!(attr)
        )
    );
}
extern "C" {
    pub fn pjmedia_sdp_media_clone(
        pool: *mut pj_pool_t,
        rhs: *const pjmedia_sdp_media,
    ) -> *mut pjmedia_sdp_media;
}
extern "C" {
    pub fn pjmedia_sdp_media_find_attr(
        m: *const pjmedia_sdp_media,
        name: *const pj_str_t,
        fmt: *const pj_str_t,
    ) -> *mut pjmedia_sdp_attr;
}
extern "C" {
    pub fn pjmedia_sdp_media_find_attr2(
        m: *const pjmedia_sdp_media,
        name: *const ::std::os::raw::c_char,
        fmt: *const pj_str_t,
    ) -> *mut pjmedia_sdp_attr;
}
extern "C" {
    pub fn pjmedia_sdp_media_add_attr(
        m: *mut pjmedia_sdp_media,
        attr: *mut pjmedia_sdp_attr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_media_remove_all_attr(
        m: *mut pjmedia_sdp_media,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjmedia_sdp_media_remove_attr(
        m: *mut pjmedia_sdp_media,
        attr: *mut pjmedia_sdp_attr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_media_cmp(
        sd1: *const pjmedia_sdp_media,
        sd2: *const pjmedia_sdp_media,
        option: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_transport_cmp(t1: *const pj_str_t, t2: *const pj_str_t) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_transport_get_proto(tp: *const pj_str_t) -> pj_uint32_t;
}
extern "C" {
    pub fn pjmedia_sdp_media_deactivate(
        pool: *mut pj_pool_t,
        m: *mut pjmedia_sdp_media,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_media_clone_deactivate(
        pool: *mut pj_pool_t,
        rhs: *const pjmedia_sdp_media,
    ) -> *mut pjmedia_sdp_media;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_sdp_session {
    pub origin: pjmedia_sdp_session__bindgen_ty_1,
    pub name: pj_str_t,
    pub conn: *mut pjmedia_sdp_conn,
    pub bandw_count: ::std::os::raw::c_uint,
    pub bandw: [*mut pjmedia_sdp_bandw; 4usize],
    pub time: pjmedia_sdp_session__bindgen_ty_2,
    pub attr_count: ::std::os::raw::c_uint,
    pub attr: [*mut pjmedia_sdp_attr; 68usize],
    pub media_count: ::std::os::raw::c_uint,
    pub media: [*mut pjmedia_sdp_media; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_session__bindgen_ty_1 {
    pub user: pj_str_t,
    pub id: pj_uint32_t,
    pub version: pj_uint32_t,
    pub net_type: pj_str_t,
    pub addr_type: pj_str_t,
    pub addr: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjmedia_sdp_session__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_sdp_session__bindgen_ty_1>(),
        72usize,
        concat!("Size of: ", stringify!(pjmedia_sdp_session__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_sdp_session__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_sdp_session__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_sdp_session__bindgen_ty_1>())).user as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_session__bindgen_ty_1),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_sdp_session__bindgen_ty_1>())).id as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_session__bindgen_ty_1),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_sdp_session__bindgen_ty_1>())).version as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_session__bindgen_ty_1),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_sdp_session__bindgen_ty_1>())).net_type as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_session__bindgen_ty_1),
            "::",
            stringify!(net_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_sdp_session__bindgen_ty_1>())).addr_type as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_session__bindgen_ty_1),
            "::",
            stringify!(addr_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_sdp_session__bindgen_ty_1>())).addr as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_session__bindgen_ty_1),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_session__bindgen_ty_2 {
    pub start: pj_uint32_t,
    pub stop: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_sdp_session__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_sdp_session__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(pjmedia_sdp_session__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_sdp_session__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_sdp_session__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_sdp_session__bindgen_ty_2>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_session__bindgen_ty_2),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_sdp_session__bindgen_ty_2>())).stop as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_session__bindgen_ty_2),
            "::",
            stringify!(stop)
        )
    );
}
#[test]
fn bindgen_test_layout_pjmedia_sdp_session() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_sdp_session>(),
        832usize,
        concat!("Size of: ", stringify!(pjmedia_sdp_session))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_sdp_session>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_sdp_session))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_session>())).origin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_session),
            "::",
            stringify!(origin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_session>())).name as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_session),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_session>())).conn as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_session),
            "::",
            stringify!(conn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_session>())).bandw_count as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_session),
            "::",
            stringify!(bandw_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_session>())).bandw as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_session),
            "::",
            stringify!(bandw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_session>())).time as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_session),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_session>())).attr_count as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_session),
            "::",
            stringify!(attr_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_session>())).attr as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_session),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_session>())).media_count as *const _ as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_session),
            "::",
            stringify!(media_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sdp_session>())).media as *const _ as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sdp_session),
            "::",
            stringify!(media)
        )
    );
}
extern "C" {
    pub fn pjmedia_sdp_parse(
        pool: *mut pj_pool_t,
        buf: *mut ::std::os::raw::c_char,
        len: pj_size_t,
        p_sdp: *mut *mut pjmedia_sdp_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_print(
        sdp: *const pjmedia_sdp_session,
        buf: *mut ::std::os::raw::c_char,
        size: pj_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pjmedia_sdp_validate(sdp: *const pjmedia_sdp_session) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_validate2(sdp: *const pjmedia_sdp_session, strict: pj_bool_t)
        -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_session_clone(
        pool: *mut pj_pool_t,
        sdp: *const pjmedia_sdp_session,
    ) -> *mut pjmedia_sdp_session;
}
extern "C" {
    pub fn pjmedia_sdp_session_cmp(
        sd1: *const pjmedia_sdp_session,
        sd2: *const pjmedia_sdp_session,
        option: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_session_add_attr(
        s: *mut pjmedia_sdp_session,
        attr: *mut pjmedia_sdp_attr,
    ) -> pj_status_t;
}
pub const pjmedia_rtcp_fb_type_PJMEDIA_RTCP_FB_ACK: pjmedia_rtcp_fb_type = 0;
pub const pjmedia_rtcp_fb_type_PJMEDIA_RTCP_FB_NACK: pjmedia_rtcp_fb_type = 1;
pub const pjmedia_rtcp_fb_type_PJMEDIA_RTCP_FB_TRR_INT: pjmedia_rtcp_fb_type = 2;
pub const pjmedia_rtcp_fb_type_PJMEDIA_RTCP_FB_OTHER: pjmedia_rtcp_fb_type = 3;
pub type pjmedia_rtcp_fb_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_fb_cap {
    pub codec_id: pj_str_t,
    pub type_: pjmedia_rtcp_fb_type,
    pub type_name: pj_str_t,
    pub param: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_fb_cap() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_fb_cap>(),
        56usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_fb_cap))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_fb_cap>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_fb_cap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_fb_cap>())).codec_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_fb_cap),
            "::",
            stringify!(codec_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_fb_cap>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_fb_cap),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_fb_cap>())).type_name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_fb_cap),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_fb_cap>())).param as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_fb_cap),
            "::",
            stringify!(param)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_fb_info {
    pub cap_count: ::std::os::raw::c_uint,
    pub caps: [pjmedia_rtcp_fb_cap; 16usize],
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_fb_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_fb_info>(),
        904usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_fb_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_fb_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_fb_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_fb_info>())).cap_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_fb_info),
            "::",
            stringify!(cap_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_fb_info>())).caps as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_fb_info),
            "::",
            stringify!(caps)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_fb_setting {
    pub dont_use_avpf: pj_bool_t,
    pub cap_count: ::std::os::raw::c_uint,
    pub caps: [pjmedia_rtcp_fb_cap; 16usize],
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_fb_setting() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_fb_setting>(),
        904usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_fb_setting))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_fb_setting>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_fb_setting))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_fb_setting>())).dont_use_avpf as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_fb_setting),
            "::",
            stringify!(dont_use_avpf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_fb_setting>())).cap_count as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_fb_setting),
            "::",
            stringify!(cap_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_fb_setting>())).caps as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_fb_setting),
            "::",
            stringify!(caps)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_fb_nack {
    pub pid: pj_int32_t,
    pub blp: pj_uint16_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_fb_nack() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_fb_nack>(),
        8usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_fb_nack))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_fb_nack>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_fb_nack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_fb_nack>())).pid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_fb_nack),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_fb_nack>())).blp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_fb_nack),
            "::",
            stringify!(blp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_fb_sli {
    pub first: pj_uint16_t,
    pub number: pj_uint16_t,
    pub pict_id: pj_uint8_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_fb_sli() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_fb_sli>(),
        6usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_fb_sli))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_fb_sli>(),
        2usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_fb_sli))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_fb_sli>())).first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_fb_sli),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_fb_sli>())).number as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_fb_sli),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_fb_sli>())).pict_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_fb_sli),
            "::",
            stringify!(pict_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_fb_rpsi {
    pub pt: pj_uint8_t,
    pub rpsi: pj_str_t,
    pub rpsi_bit_len: pj_size_t,
}
#[test]
fn bindgen_test_layout_pjmedia_rtcp_fb_rpsi() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_rtcp_fb_rpsi>(),
        32usize,
        concat!("Size of: ", stringify!(pjmedia_rtcp_fb_rpsi))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_rtcp_fb_rpsi>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_rtcp_fb_rpsi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_fb_rpsi>())).pt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_fb_rpsi),
            "::",
            stringify!(pt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_rtcp_fb_rpsi>())).rpsi as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_fb_rpsi),
            "::",
            stringify!(rpsi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_rtcp_fb_rpsi>())).rpsi_bit_len as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_rtcp_fb_rpsi),
            "::",
            stringify!(rpsi_bit_len)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_event_rx_rtcp_fb_data {
    pub cap: pjmedia_rtcp_fb_cap,
    pub msg: pjmedia_event_rx_rtcp_fb_data__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjmedia_event_rx_rtcp_fb_data__bindgen_ty_1 {
    pub nack: pjmedia_rtcp_fb_nack,
    pub sli: pjmedia_rtcp_fb_sli,
    pub rpsi: pjmedia_rtcp_fb_rpsi,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pjmedia_event_rx_rtcp_fb_data__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_event_rx_rtcp_fb_data__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(pjmedia_event_rx_rtcp_fb_data__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_event_rx_rtcp_fb_data__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_event_rx_rtcp_fb_data__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event_rx_rtcp_fb_data__bindgen_ty_1>())).nack as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_rx_rtcp_fb_data__bindgen_ty_1),
            "::",
            stringify!(nack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event_rx_rtcp_fb_data__bindgen_ty_1>())).sli as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_rx_rtcp_fb_data__bindgen_ty_1),
            "::",
            stringify!(sli)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event_rx_rtcp_fb_data__bindgen_ty_1>())).rpsi as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_rx_rtcp_fb_data__bindgen_ty_1),
            "::",
            stringify!(rpsi)
        )
    );
}
#[test]
fn bindgen_test_layout_pjmedia_event_rx_rtcp_fb_data() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_event_rx_rtcp_fb_data>(),
        88usize,
        concat!("Size of: ", stringify!(pjmedia_event_rx_rtcp_fb_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_event_rx_rtcp_fb_data>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_event_rx_rtcp_fb_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event_rx_rtcp_fb_data>())).cap as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_rx_rtcp_fb_data),
            "::",
            stringify!(cap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event_rx_rtcp_fb_data>())).msg as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_rx_rtcp_fb_data),
            "::",
            stringify!(msg)
        )
    );
}
extern "C" {
    pub fn pjmedia_rtcp_fb_setting_default(opt: *mut pjmedia_rtcp_fb_setting) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtcp_fb_setting_dup(
        pool: *mut pj_pool_t,
        dst: *mut pjmedia_rtcp_fb_setting,
        src: *const pjmedia_rtcp_fb_setting,
    );
}
extern "C" {
    pub fn pjmedia_rtcp_fb_info_dup(
        pool: *mut pj_pool_t,
        dst: *mut pjmedia_rtcp_fb_info,
        src: *const pjmedia_rtcp_fb_info,
    );
}
extern "C" {
    pub fn pjmedia_rtcp_fb_encode_sdp(
        pool: *mut pj_pool_t,
        endpt: *mut pjmedia_endpt,
        opt: *const pjmedia_rtcp_fb_setting,
        sdp_local: *mut pjmedia_sdp_session,
        med_idx: ::std::os::raw::c_uint,
        sdp_remote: *const pjmedia_sdp_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtcp_fb_decode_sdp(
        pool: *mut pj_pool_t,
        endpt: *mut pjmedia_endpt,
        opt: *const ::std::os::raw::c_void,
        sdp: *const pjmedia_sdp_session,
        med_idx: ::std::os::raw::c_uint,
        info: *mut pjmedia_rtcp_fb_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtcp_fb_decode_sdp2(
        pool: *mut pj_pool_t,
        endpt: *mut pjmedia_endpt,
        opt: *const ::std::os::raw::c_void,
        sdp: *const pjmedia_sdp_session,
        med_idx: ::std::os::raw::c_uint,
        pt: ::std::os::raw::c_int,
        info: *mut pjmedia_rtcp_fb_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtcp_fb_build_nack(
        session: *mut pjmedia_rtcp_session,
        buf: *mut ::std::os::raw::c_void,
        length: *mut pj_size_t,
        nack_cnt: ::std::os::raw::c_uint,
        nack: *const pjmedia_rtcp_fb_nack,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtcp_fb_build_pli(
        session: *mut pjmedia_rtcp_session,
        buf: *mut ::std::os::raw::c_void,
        length: *mut pj_size_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtcp_fb_build_sli(
        session: *mut pjmedia_rtcp_session,
        buf: *mut ::std::os::raw::c_void,
        length: *mut pj_size_t,
        sli_cnt: ::std::os::raw::c_uint,
        sli: *const pjmedia_rtcp_fb_sli,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtcp_fb_build_rpsi(
        session: *mut pjmedia_rtcp_session,
        buf: *mut ::std::os::raw::c_void,
        length: *mut pj_size_t,
        rpsi: *const pjmedia_rtcp_fb_rpsi,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtcp_fb_parse_nack(
        buf: *const ::std::os::raw::c_void,
        length: pj_size_t,
        nack_cnt: *mut ::std::os::raw::c_uint,
        nack: *mut pjmedia_rtcp_fb_nack,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtcp_fb_parse_pli(
        buf: *const ::std::os::raw::c_void,
        length: pj_size_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtcp_fb_parse_sli(
        buf: *const ::std::os::raw::c_void,
        length: pj_size_t,
        sli_cnt: *mut ::std::os::raw::c_uint,
        sli: *mut pjmedia_rtcp_fb_sli,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_rtcp_fb_parse_rpsi(
        buf: *const ::std::os::raw::c_void,
        length: pj_size_t,
        rpsi: *mut pjmedia_rtcp_fb_rpsi,
    ) -> pj_status_t;
}
pub type pjmedia_obj_sig = pj_uint32_t;
extern "C" {
    pub fn pjmedia_videodev_strerror(
        status: pj_status_t,
        buffer: *mut ::std::os::raw::c_char,
        bufsize: pj_size_t,
    ) -> pj_str_t;
}
pub type pjmedia_vid_dev_index = pj_int32_t;
pub const pjmedia_vid_dev_hwnd_type_PJMEDIA_VID_DEV_HWND_TYPE_NONE: pjmedia_vid_dev_hwnd_type = 0;
pub const pjmedia_vid_dev_hwnd_type_PJMEDIA_VID_DEV_HWND_TYPE_WINDOWS: pjmedia_vid_dev_hwnd_type =
    1;
pub const pjmedia_vid_dev_hwnd_type_PJMEDIA_VID_DEV_HWND_TYPE_IOS: pjmedia_vid_dev_hwnd_type = 2;
pub const pjmedia_vid_dev_hwnd_type_PJMEDIA_VID_DEV_HWND_TYPE_ANDROID: pjmedia_vid_dev_hwnd_type =
    3;
pub type pjmedia_vid_dev_hwnd_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_vid_dev_hwnd {
    pub type_: pjmedia_vid_dev_hwnd_type,
    pub info: pjmedia_vid_dev_hwnd__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjmedia_vid_dev_hwnd__bindgen_ty_1 {
    pub win: pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_1,
    pub x11: pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_2,
    pub cocoa: pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_3,
    pub ios: pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_4,
    pub android: pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_5,
    pub window: *mut ::std::os::raw::c_void,
    _bindgen_union_align: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_1 {
    pub hwnd: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_1>())).hwnd
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(hwnd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_2 {
    pub window: *mut ::std::os::raw::c_void,
    pub display: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_2>())).window
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_2>())).display
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(display)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_3 {
    pub window: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_3>())).window
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(window)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_4 {
    pub window: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_4>())).window
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(window)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_5 {
    pub window: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_5>())).window
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(window)
        )
    );
}
#[test]
fn bindgen_test_layout_pjmedia_vid_dev_hwnd__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_dev_hwnd__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_dev_hwnd__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_hwnd__bindgen_ty_1>())).win as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1),
            "::",
            stringify!(win)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_hwnd__bindgen_ty_1>())).x11 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1),
            "::",
            stringify!(x11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_hwnd__bindgen_ty_1>())).cocoa as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1),
            "::",
            stringify!(cocoa)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_hwnd__bindgen_ty_1>())).ios as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1),
            "::",
            stringify!(ios)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_hwnd__bindgen_ty_1>())).android as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1),
            "::",
            stringify!(android)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_hwnd__bindgen_ty_1>())).window as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_hwnd__bindgen_ty_1),
            "::",
            stringify!(window)
        )
    );
}
#[test]
fn bindgen_test_layout_pjmedia_vid_dev_hwnd() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_dev_hwnd>(),
        24usize,
        concat!("Size of: ", stringify!(pjmedia_vid_dev_hwnd))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_dev_hwnd>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_dev_hwnd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_hwnd>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_hwnd),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_hwnd>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_hwnd),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_switch_param {
    pub target_id: pjmedia_vid_dev_index,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_dev_switch_param() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_dev_switch_param>(),
        4usize,
        concat!("Size of: ", stringify!(pjmedia_vid_dev_switch_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_dev_switch_param>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_dev_switch_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_switch_param>())).target_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_switch_param),
            "::",
            stringify!(target_id)
        )
    );
}
pub const pjmedia_vid_dev_wnd_flag_PJMEDIA_VID_DEV_WND_BORDER: pjmedia_vid_dev_wnd_flag = 1;
pub const pjmedia_vid_dev_wnd_flag_PJMEDIA_VID_DEV_WND_RESIZABLE: pjmedia_vid_dev_wnd_flag = 2;
pub type pjmedia_vid_dev_wnd_flag = ::std::os::raw::c_uint;
pub const pjmedia_vid_dev_std_index_PJMEDIA_VID_DEFAULT_CAPTURE_DEV: pjmedia_vid_dev_std_index = -1;
pub const pjmedia_vid_dev_std_index_PJMEDIA_VID_DEFAULT_RENDER_DEV: pjmedia_vid_dev_std_index = -2;
pub const pjmedia_vid_dev_std_index_PJMEDIA_VID_INVALID_DEV: pjmedia_vid_dev_std_index = -3;
pub type pjmedia_vid_dev_std_index = ::std::os::raw::c_int;
pub const pjmedia_vid_dev_cap_PJMEDIA_VID_DEV_CAP_FORMAT: pjmedia_vid_dev_cap = 1;
pub const pjmedia_vid_dev_cap_PJMEDIA_VID_DEV_CAP_INPUT_SCALE: pjmedia_vid_dev_cap = 2;
pub const pjmedia_vid_dev_cap_PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW: pjmedia_vid_dev_cap = 4;
pub const pjmedia_vid_dev_cap_PJMEDIA_VID_DEV_CAP_OUTPUT_RESIZE: pjmedia_vid_dev_cap = 8;
pub const pjmedia_vid_dev_cap_PJMEDIA_VID_DEV_CAP_OUTPUT_POSITION: pjmedia_vid_dev_cap = 16;
pub const pjmedia_vid_dev_cap_PJMEDIA_VID_DEV_CAP_OUTPUT_HIDE: pjmedia_vid_dev_cap = 32;
pub const pjmedia_vid_dev_cap_PJMEDIA_VID_DEV_CAP_INPUT_PREVIEW: pjmedia_vid_dev_cap = 64;
pub const pjmedia_vid_dev_cap_PJMEDIA_VID_DEV_CAP_ORIENTATION: pjmedia_vid_dev_cap = 128;
pub const pjmedia_vid_dev_cap_PJMEDIA_VID_DEV_CAP_SWITCH: pjmedia_vid_dev_cap = 256;
pub const pjmedia_vid_dev_cap_PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW_FLAGS: pjmedia_vid_dev_cap = 512;
pub const pjmedia_vid_dev_cap_PJMEDIA_VID_DEV_CAP_OUTPUT_FULLSCREEN: pjmedia_vid_dev_cap = 1024;
pub const pjmedia_vid_dev_cap_PJMEDIA_VID_DEV_CAP_MAX: pjmedia_vid_dev_cap = 16384;
pub type pjmedia_vid_dev_cap = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_vid_dev_info {
    pub id: pjmedia_vid_dev_index,
    pub name: [::std::os::raw::c_char; 64usize],
    pub driver: [::std::os::raw::c_char; 32usize],
    pub dir: pjmedia_dir,
    pub has_callback: pj_bool_t,
    pub caps: ::std::os::raw::c_uint,
    pub fmt_cnt: ::std::os::raw::c_uint,
    pub fmt: [pjmedia_format; 64usize],
}
#[test]
fn bindgen_test_layout_pjmedia_vid_dev_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_dev_info>(),
        2420usize,
        concat!("Size of: ", stringify!(pjmedia_vid_dev_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_dev_info>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_dev_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_info>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_info),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_info>())).name as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_info>())).driver as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_info),
            "::",
            stringify!(driver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_info>())).dir as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_info),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_info>())).has_callback as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_info),
            "::",
            stringify!(has_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_info>())).caps as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_info),
            "::",
            stringify!(caps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_info>())).fmt_cnt as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_info),
            "::",
            stringify!(fmt_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_info>())).fmt as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_info),
            "::",
            stringify!(fmt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_cb {
    pub capture_cb: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut pjmedia_vid_dev_stream,
            user_data: *mut ::std::os::raw::c_void,
            frame: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
    pub render_cb: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut pjmedia_vid_dev_stream,
            user_data: *mut ::std::os::raw::c_void,
            frame: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_dev_cb() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_dev_cb>(),
        16usize,
        concat!("Size of: ", stringify!(pjmedia_vid_dev_cb))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_dev_cb>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_dev_cb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_cb>())).capture_cb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_cb),
            "::",
            stringify!(capture_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_cb>())).render_cb as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_cb),
            "::",
            stringify!(render_cb)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_vid_dev_param {
    pub dir: pjmedia_dir,
    pub cap_id: pjmedia_vid_dev_index,
    pub rend_id: pjmedia_vid_dev_index,
    pub clock_rate: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
    pub fmt: pjmedia_format,
    pub window: pjmedia_vid_dev_hwnd,
    pub disp_size: pjmedia_rect_size,
    pub window_pos: pjmedia_coord,
    pub window_hide: pj_bool_t,
    pub native_preview: pj_bool_t,
    pub orient: pjmedia_orient,
    pub window_flags: ::std::os::raw::c_uint,
    pub window_fullscreen: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_dev_param() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_dev_param>(),
        120usize,
        concat!("Size of: ", stringify!(pjmedia_vid_dev_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_dev_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_dev_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_param>())).dir as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_param),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_param>())).cap_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_param),
            "::",
            stringify!(cap_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_param>())).rend_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_param),
            "::",
            stringify!(rend_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_param>())).clock_rate as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_param),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_param>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_param),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_param>())).fmt as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_param),
            "::",
            stringify!(fmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_param>())).window as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_param),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_param>())).disp_size as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_param),
            "::",
            stringify!(disp_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_param>())).window_pos as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_param),
            "::",
            stringify!(window_pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_param>())).window_hide as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_param),
            "::",
            stringify!(window_hide)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_param>())).native_preview as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_param),
            "::",
            stringify!(native_preview)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_param>())).orient as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_param),
            "::",
            stringify!(orient)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_param>())).window_flags as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_param),
            "::",
            stringify!(window_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_param>())).window_fullscreen as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_param),
            "::",
            stringify!(window_fullscreen)
        )
    );
}
pub type pjmedia_vid_dev_factory_create_func_ptr = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut pj_pool_factory) -> *mut pjmedia_vid_dev_factory,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_driver {
    pub create: pjmedia_vid_dev_factory_create_func_ptr,
    pub f: *mut pjmedia_vid_dev_factory,
    pub name: [::std::os::raw::c_char; 32usize],
    pub dev_cnt: ::std::os::raw::c_uint,
    pub start_idx: ::std::os::raw::c_uint,
    pub cap_dev_idx: ::std::os::raw::c_int,
    pub rend_dev_idx: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_driver() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_driver>(),
        64usize,
        concat!("Size of: ", stringify!(pjmedia_vid_driver))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_driver>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_driver))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_driver>())).create as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_driver),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_driver>())).f as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_driver),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_driver>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_driver),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_driver>())).dev_cnt as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_driver),
            "::",
            stringify!(dev_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_driver>())).start_idx as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_driver),
            "::",
            stringify!(start_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_driver>())).cap_dev_idx as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_driver),
            "::",
            stringify!(cap_dev_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_driver>())).rend_dev_idx as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_driver),
            "::",
            stringify!(rend_dev_idx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_subsys {
    pub init_count: ::std::os::raw::c_uint,
    pub pf: *mut pj_pool_factory,
    pub drv_cnt: ::std::os::raw::c_uint,
    pub drv: [pjmedia_vid_driver; 8usize],
    pub dev_cnt: ::std::os::raw::c_uint,
    pub dev_list: [pj_uint32_t; 16usize],
}
#[test]
fn bindgen_test_layout_pjmedia_vid_subsys() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_subsys>(),
        608usize,
        concat!("Size of: ", stringify!(pjmedia_vid_subsys))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_subsys>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_subsys))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_subsys>())).init_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_subsys),
            "::",
            stringify!(init_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_subsys>())).pf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_subsys),
            "::",
            stringify!(pf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_subsys>())).drv_cnt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_subsys),
            "::",
            stringify!(drv_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_subsys>())).drv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_subsys),
            "::",
            stringify!(drv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_subsys>())).dev_cnt as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_subsys),
            "::",
            stringify!(dev_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_subsys>())).dev_list as *const _ as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_subsys),
            "::",
            stringify!(dev_list)
        )
    );
}
extern "C" {
    pub fn pjmedia_get_vid_subsys() -> *mut pjmedia_vid_subsys;
}
extern "C" {
    pub fn pjmedia_vid_driver_init(
        drv_idx: ::std::os::raw::c_uint,
        refresh: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_driver_deinit(drv_idx: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn pjmedia_vid_dev_cap_name(
        cap: pjmedia_vid_dev_cap,
        p_desc: *mut *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pjmedia_vid_dev_param_set_cap(
        param: *mut pjmedia_vid_dev_param,
        cap: pjmedia_vid_dev_cap,
        pval: *const ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_dev_param_get_cap(
        param: *const pjmedia_vid_dev_param,
        cap: pjmedia_vid_dev_cap,
        pval: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_dev_refresh() -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_dev_count() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjmedia_vid_dev_get_info(
        id: pjmedia_vid_dev_index,
        info: *mut pjmedia_vid_dev_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_dev_lookup(
        drv_name: *const ::std::os::raw::c_char,
        dev_name: *const ::std::os::raw::c_char,
        id: *mut pjmedia_vid_dev_index,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_dev_default_param(
        pool: *mut pj_pool_t,
        id: pjmedia_vid_dev_index,
        param: *mut pjmedia_vid_dev_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_dev_stream_create(
        param: *mut pjmedia_vid_dev_param,
        cb: *const pjmedia_vid_dev_cb,
        user_data: *mut ::std::os::raw::c_void,
        p_strm: *mut *mut pjmedia_vid_dev_stream,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_dev_stream_get_param(
        strm: *mut pjmedia_vid_dev_stream,
        param: *mut pjmedia_vid_dev_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_dev_stream_get_cap(
        strm: *mut pjmedia_vid_dev_stream,
        cap: pjmedia_vid_dev_cap,
        value: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_dev_stream_set_cap(
        strm: *mut pjmedia_vid_dev_stream,
        cap: pjmedia_vid_dev_cap,
        value: *const ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_dev_stream_start(strm: *mut pjmedia_vid_dev_stream) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_dev_stream_is_running(strm: *mut pjmedia_vid_dev_stream) -> pj_bool_t;
}
extern "C" {
    pub fn pjmedia_vid_dev_stream_get_frame(
        strm: *mut pjmedia_vid_dev_stream,
        frame: *mut pjmedia_frame,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_dev_stream_put_frame(
        strm: *mut pjmedia_vid_dev_stream,
        frame: *const pjmedia_frame,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_dev_stream_stop(strm: *mut pjmedia_vid_dev_stream) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_dev_stream_destroy(strm: *mut pjmedia_vid_dev_stream) -> pj_status_t;
}
pub const pjmedia_event_type_PJMEDIA_EVENT_NONE: pjmedia_event_type = 0;
pub const pjmedia_event_type_PJMEDIA_EVENT_FMT_CHANGED: pjmedia_event_type = 1212370246;
pub const pjmedia_event_type_PJMEDIA_EVENT_WND_CLOSING: pjmedia_event_type = 1279479383;
pub const pjmedia_event_type_PJMEDIA_EVENT_WND_CLOSED: pjmedia_event_type = 1329811031;
pub const pjmedia_event_type_PJMEDIA_EVENT_WND_RESIZED: pjmedia_event_type = 1515343447;
pub const pjmedia_event_type_PJMEDIA_EVENT_MOUSE_BTN_DOWN: pjmedia_event_type = 1313100621;
pub const pjmedia_event_type_PJMEDIA_EVENT_KEYFRAME_FOUND: pjmedia_event_type = 1179797065;
pub const pjmedia_event_type_PJMEDIA_EVENT_KEYFRAME_MISSING: pjmedia_event_type = 1297237577;
pub const pjmedia_event_type_PJMEDIA_EVENT_ORIENT_CHANGED: pjmedia_event_type = 1414419023;
pub const pjmedia_event_type_PJMEDIA_EVENT_RX_RTCP_FB: pjmedia_event_type = 1111905362;
pub const pjmedia_event_type_PJMEDIA_EVENT_AUD_DEV_ERROR: pjmedia_event_type = 1381123393;
pub const pjmedia_event_type_PJMEDIA_EVENT_VID_DEV_ERROR: pjmedia_event_type = 1381123414;
pub const pjmedia_event_type_PJMEDIA_EVENT_MEDIA_TP_ERR: pjmedia_event_type = 1381123412;
pub const pjmedia_event_type_PJMEDIA_EVENT_CALLBACK: pjmedia_event_type = 538985027;
pub type pjmedia_event_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_event_fmt_changed_data {
    pub dir: pjmedia_dir,
    pub new_fmt: pjmedia_format,
}
#[test]
fn bindgen_test_layout_pjmedia_event_fmt_changed_data() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_event_fmt_changed_data>(),
        40usize,
        concat!("Size of: ", stringify!(pjmedia_event_fmt_changed_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_event_fmt_changed_data>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_event_fmt_changed_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event_fmt_changed_data>())).dir as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_fmt_changed_data),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event_fmt_changed_data>())).new_fmt as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_fmt_changed_data),
            "::",
            stringify!(new_fmt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_event_dummy_data {
    pub dummy: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pjmedia_event_dummy_data() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_event_dummy_data>(),
        4usize,
        concat!("Size of: ", stringify!(pjmedia_event_dummy_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_event_dummy_data>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_event_dummy_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_event_dummy_data>())).dummy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_dummy_data),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_event_wnd_resized_data {
    pub new_size: pjmedia_rect_size,
}
#[test]
fn bindgen_test_layout_pjmedia_event_wnd_resized_data() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_event_wnd_resized_data>(),
        8usize,
        concat!("Size of: ", stringify!(pjmedia_event_wnd_resized_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_event_wnd_resized_data>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_event_wnd_resized_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event_wnd_resized_data>())).new_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_wnd_resized_data),
            "::",
            stringify!(new_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_event_wnd_closing_data {
    pub cancel: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjmedia_event_wnd_closing_data() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_event_wnd_closing_data>(),
        4usize,
        concat!("Size of: ", stringify!(pjmedia_event_wnd_closing_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_event_wnd_closing_data>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_event_wnd_closing_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event_wnd_closing_data>())).cancel as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_wnd_closing_data),
            "::",
            stringify!(cancel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_event_aud_dev_err_data {
    pub dir: pjmedia_dir,
    pub id: pjmedia_aud_dev_index,
    pub status: pj_status_t,
}
#[test]
fn bindgen_test_layout_pjmedia_event_aud_dev_err_data() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_event_aud_dev_err_data>(),
        12usize,
        concat!("Size of: ", stringify!(pjmedia_event_aud_dev_err_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_event_aud_dev_err_data>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_event_aud_dev_err_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event_aud_dev_err_data>())).dir as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_aud_dev_err_data),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event_aud_dev_err_data>())).id as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_aud_dev_err_data),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event_aud_dev_err_data>())).status as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_aud_dev_err_data),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_event_vid_dev_err_data {
    pub dir: pjmedia_dir,
    pub id: pjmedia_vid_dev_index,
    pub status: pj_status_t,
}
#[test]
fn bindgen_test_layout_pjmedia_event_vid_dev_err_data() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_event_vid_dev_err_data>(),
        12usize,
        concat!("Size of: ", stringify!(pjmedia_event_vid_dev_err_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_event_vid_dev_err_data>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_event_vid_dev_err_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event_vid_dev_err_data>())).dir as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_vid_dev_err_data),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event_vid_dev_err_data>())).id as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_vid_dev_err_data),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event_vid_dev_err_data>())).status as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_vid_dev_err_data),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_event_media_tp_err_data {
    pub type_: pjmedia_type,
    pub is_rtp: pj_bool_t,
    pub dir: pjmedia_dir,
    pub status: pj_status_t,
}
#[test]
fn bindgen_test_layout_pjmedia_event_media_tp_err_data() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_event_media_tp_err_data>(),
        16usize,
        concat!("Size of: ", stringify!(pjmedia_event_media_tp_err_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_event_media_tp_err_data>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_event_media_tp_err_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event_media_tp_err_data>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_media_tp_err_data),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event_media_tp_err_data>())).is_rtp as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_media_tp_err_data),
            "::",
            stringify!(is_rtp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event_media_tp_err_data>())).dir as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_media_tp_err_data),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event_media_tp_err_data>())).status as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event_media_tp_err_data),
            "::",
            stringify!(status)
        )
    );
}
pub type pjmedia_event_wnd_closed_data = pjmedia_event_dummy_data;
pub type pjmedia_event_mouse_btn_down_data = pjmedia_event_dummy_data;
pub type pjmedia_event_keyframe_found_data = pjmedia_event_dummy_data;
pub type pjmedia_event_keyframe_missing_data = pjmedia_event_dummy_data;
pub type pjmedia_event_user_data = [::std::os::raw::c_char; 40usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_event {
    pub type_: pjmedia_event_type,
    pub timestamp: pj_timestamp,
    pub src: *const ::std::os::raw::c_void,
    pub epub: *const ::std::os::raw::c_void,
    pub data: pjmedia_event__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjmedia_event__bindgen_ty_1 {
    pub fmt_changed: pjmedia_event_fmt_changed_data,
    pub wnd_resized: pjmedia_event_wnd_resized_data,
    pub wnd_closing: pjmedia_event_wnd_closing_data,
    pub wnd_closed: pjmedia_event_wnd_closed_data,
    pub mouse_btn_down: pjmedia_event_mouse_btn_down_data,
    pub keyframe_found: pjmedia_event_keyframe_found_data,
    pub keyframe_missing: pjmedia_event_keyframe_missing_data,
    pub aud_dev_err: pjmedia_event_aud_dev_err_data,
    pub vid_dev_err: pjmedia_event_vid_dev_err_data,
    pub user: pjmedia_event_user_data,
    pub med_tp_err: pjmedia_event_media_tp_err_data,
    pub rx_rtcp_fb: pjmedia_event_rx_rtcp_fb_data,
    pub ptr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: [u64; 11usize],
}
#[test]
fn bindgen_test_layout_pjmedia_event__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_event__bindgen_ty_1>(),
        88usize,
        concat!("Size of: ", stringify!(pjmedia_event__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_event__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_event__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event__bindgen_ty_1>())).fmt_changed as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event__bindgen_ty_1),
            "::",
            stringify!(fmt_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event__bindgen_ty_1>())).wnd_resized as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event__bindgen_ty_1),
            "::",
            stringify!(wnd_resized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event__bindgen_ty_1>())).wnd_closing as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event__bindgen_ty_1),
            "::",
            stringify!(wnd_closing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event__bindgen_ty_1>())).wnd_closed as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event__bindgen_ty_1),
            "::",
            stringify!(wnd_closed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event__bindgen_ty_1>())).mouse_btn_down as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event__bindgen_ty_1),
            "::",
            stringify!(mouse_btn_down)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event__bindgen_ty_1>())).keyframe_found as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event__bindgen_ty_1),
            "::",
            stringify!(keyframe_found)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event__bindgen_ty_1>())).keyframe_missing as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event__bindgen_ty_1),
            "::",
            stringify!(keyframe_missing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event__bindgen_ty_1>())).aud_dev_err as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event__bindgen_ty_1),
            "::",
            stringify!(aud_dev_err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event__bindgen_ty_1>())).vid_dev_err as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event__bindgen_ty_1),
            "::",
            stringify!(vid_dev_err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event__bindgen_ty_1>())).user as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event__bindgen_ty_1),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event__bindgen_ty_1>())).med_tp_err as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event__bindgen_ty_1),
            "::",
            stringify!(med_tp_err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_event__bindgen_ty_1>())).rx_rtcp_fb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event__bindgen_ty_1),
            "::",
            stringify!(rx_rtcp_fb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_event__bindgen_ty_1>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
}
#[test]
fn bindgen_test_layout_pjmedia_event() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_event>(),
        120usize,
        concat!("Size of: ", stringify!(pjmedia_event))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_event>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_event>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_event>())).timestamp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_event>())).src as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_event>())).epub as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event),
            "::",
            stringify!(epub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_event>())).data as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_event),
            "::",
            stringify!(data)
        )
    );
}
pub type pjmedia_event_cb = ::std::option::Option<
    unsafe extern "C" fn(
        event: *mut pjmedia_event,
        user_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t,
>;
pub const pjmedia_event_publish_flag_PJMEDIA_EVENT_PUBLISH_DEFAULT: pjmedia_event_publish_flag = 0;
pub const pjmedia_event_publish_flag_PJMEDIA_EVENT_PUBLISH_POST_EVENT: pjmedia_event_publish_flag =
    1;
pub type pjmedia_event_publish_flag = ::std::os::raw::c_uint;
pub const pjmedia_event_mgr_flag_PJMEDIA_EVENT_MGR_NO_THREAD: pjmedia_event_mgr_flag = 1;
pub type pjmedia_event_mgr_flag = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_event_mgr {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pjmedia_event_mgr_create(
        pool: *mut pj_pool_t,
        options: ::std::os::raw::c_uint,
        mgr: *mut *mut pjmedia_event_mgr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_event_mgr_instance() -> *mut pjmedia_event_mgr;
}
extern "C" {
    pub fn pjmedia_event_mgr_set_instance(mgr: *mut pjmedia_event_mgr);
}
extern "C" {
    pub fn pjmedia_event_mgr_destroy(mgr: *mut pjmedia_event_mgr);
}
extern "C" {
    pub fn pjmedia_event_init(
        event: *mut pjmedia_event,
        type_: pjmedia_event_type,
        ts: *const pj_timestamp,
        src: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pjmedia_event_subscribe(
        mgr: *mut pjmedia_event_mgr,
        cb: pjmedia_event_cb,
        user_data: *mut ::std::os::raw::c_void,
        epub: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_event_unsubscribe(
        mgr: *mut pjmedia_event_mgr,
        cb: pjmedia_event_cb,
        user_data: *mut ::std::os::raw::c_void,
        epub: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_event_publish(
        mgr: *mut pjmedia_event_mgr,
        epub: *mut ::std::os::raw::c_void,
        event: *mut pjmedia_event,
        flag: pjmedia_event_publish_flag,
    ) -> pj_status_t;
}
pub const pj_sys_info_flag_PJ_SYS_HAS_IOS_BG: pj_sys_info_flag = 1;
pub type pj_sys_info_flag = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_sys_info {
    pub machine: pj_str_t,
    pub os_name: pj_str_t,
    pub os_ver: pj_uint32_t,
    pub sdk_name: pj_str_t,
    pub sdk_ver: pj_uint32_t,
    pub info: pj_str_t,
    pub flags: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pj_sys_info() {
    assert_eq!(
        ::std::mem::size_of::<pj_sys_info>(),
        88usize,
        concat!("Size of: ", stringify!(pj_sys_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_sys_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_sys_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sys_info>())).machine as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sys_info),
            "::",
            stringify!(machine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sys_info>())).os_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sys_info),
            "::",
            stringify!(os_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sys_info>())).os_ver as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sys_info),
            "::",
            stringify!(os_ver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sys_info>())).sdk_name as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sys_info),
            "::",
            stringify!(sdk_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sys_info>())).sdk_ver as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sys_info),
            "::",
            stringify!(sdk_ver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sys_info>())).info as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sys_info),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sys_info>())).flags as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sys_info),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn pj_get_sys_info() -> *const pj_sys_info;
}
pub const pj_thread_create_flags_PJ_THREAD_SUSPENDED: pj_thread_create_flags = 1;
pub type pj_thread_create_flags = ::std::os::raw::c_uint;
pub type pj_thread_proc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type pj_thread_desc = [::std::os::raw::c_long; 64usize];
extern "C" {
    pub fn pj_getpid() -> pj_uint32_t;
}
extern "C" {
    pub fn pj_thread_create(
        pool: *mut pj_pool_t,
        thread_name: *const ::std::os::raw::c_char,
        proc_: pj_thread_proc,
        arg: *mut ::std::os::raw::c_void,
        stack_size: pj_size_t,
        flags: ::std::os::raw::c_uint,
        thread: *mut *mut pj_thread_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_thread_register(
        thread_name: *const ::std::os::raw::c_char,
        desc: *mut ::std::os::raw::c_long,
        thread: *mut *mut pj_thread_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_thread_is_registered() -> pj_bool_t;
}
extern "C" {
    pub fn pj_thread_get_prio(thread: *mut pj_thread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_thread_set_prio(thread: *mut pj_thread_t, prio: ::std::os::raw::c_int)
        -> pj_status_t;
}
extern "C" {
    pub fn pj_thread_get_prio_min(thread: *mut pj_thread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_thread_get_prio_max(thread: *mut pj_thread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_thread_get_os_handle(thread: *mut pj_thread_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pj_thread_get_name(thread: *mut pj_thread_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_thread_resume(thread: *mut pj_thread_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_thread_this() -> *mut pj_thread_t;
}
extern "C" {
    pub fn pj_thread_join(thread: *mut pj_thread_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_thread_destroy(thread: *mut pj_thread_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_thread_sleep(msec: ::std::os::raw::c_uint) -> pj_status_t;
}
extern "C" {
    pub fn pj_symbianos_poll(
        priority: ::std::os::raw::c_int,
        ms_timeout: ::std::os::raw::c_int,
    ) -> pj_bool_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_symbianos_params {
    pub rsocketserv: *mut ::std::os::raw::c_void,
    pub rconnection: *mut ::std::os::raw::c_void,
    pub rhostresolver: *mut ::std::os::raw::c_void,
    pub rhostresolver6: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pj_symbianos_params() {
    assert_eq!(
        ::std::mem::size_of::<pj_symbianos_params>(),
        32usize,
        concat!("Size of: ", stringify!(pj_symbianos_params))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_symbianos_params>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_symbianos_params))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_symbianos_params>())).rsocketserv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_symbianos_params),
            "::",
            stringify!(rsocketserv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_symbianos_params>())).rconnection as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_symbianos_params),
            "::",
            stringify!(rconnection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_symbianos_params>())).rhostresolver as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_symbianos_params),
            "::",
            stringify!(rhostresolver)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_symbianos_params>())).rhostresolver6 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_symbianos_params),
            "::",
            stringify!(rhostresolver6)
        )
    );
}
extern "C" {
    pub fn pj_symbianos_set_params(prm: *mut pj_symbianos_params) -> pj_status_t;
}
extern "C" {
    pub fn pj_symbianos_set_connection_status(up: pj_bool_t);
}
extern "C" {
    pub fn pj_thread_local_alloc(index: *mut ::std::os::raw::c_long) -> pj_status_t;
}
extern "C" {
    pub fn pj_thread_local_free(index: ::std::os::raw::c_long);
}
extern "C" {
    pub fn pj_thread_local_set(
        index: ::std::os::raw::c_long,
        value: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_thread_local_get(index: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pj_atomic_create(
        pool: *mut pj_pool_t,
        initial: pj_atomic_value_t,
        atomic: *mut *mut pj_atomic_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_atomic_destroy(atomic_var: *mut pj_atomic_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_atomic_set(atomic_var: *mut pj_atomic_t, value: pj_atomic_value_t);
}
extern "C" {
    pub fn pj_atomic_get(atomic_var: *mut pj_atomic_t) -> pj_atomic_value_t;
}
extern "C" {
    pub fn pj_atomic_inc(atomic_var: *mut pj_atomic_t);
}
extern "C" {
    pub fn pj_atomic_inc_and_get(atomic_var: *mut pj_atomic_t) -> pj_atomic_value_t;
}
extern "C" {
    pub fn pj_atomic_dec(atomic_var: *mut pj_atomic_t);
}
extern "C" {
    pub fn pj_atomic_dec_and_get(atomic_var: *mut pj_atomic_t) -> pj_atomic_value_t;
}
extern "C" {
    pub fn pj_atomic_add(atomic_var: *mut pj_atomic_t, value: pj_atomic_value_t);
}
extern "C" {
    pub fn pj_atomic_add_and_get(
        atomic_var: *mut pj_atomic_t,
        value: pj_atomic_value_t,
    ) -> pj_atomic_value_t;
}
pub const pj_mutex_type_e_PJ_MUTEX_DEFAULT: pj_mutex_type_e = 0;
pub const pj_mutex_type_e_PJ_MUTEX_SIMPLE: pj_mutex_type_e = 1;
pub const pj_mutex_type_e_PJ_MUTEX_RECURSE: pj_mutex_type_e = 2;
pub type pj_mutex_type_e = ::std::os::raw::c_uint;
extern "C" {
    pub fn pj_mutex_create(
        pool: *mut pj_pool_t,
        name: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        mutex: *mut *mut pj_mutex_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_mutex_create_simple(
        pool: *mut pj_pool_t,
        name: *const ::std::os::raw::c_char,
        mutex: *mut *mut pj_mutex_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_mutex_create_recursive(
        pool: *mut pj_pool_t,
        name: *const ::std::os::raw::c_char,
        mutex: *mut *mut pj_mutex_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_mutex_lock(mutex: *mut pj_mutex_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_mutex_unlock(mutex: *mut pj_mutex_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_mutex_trylock(mutex: *mut pj_mutex_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_mutex_destroy(mutex: *mut pj_mutex_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_mutex_is_locked(mutex: *mut pj_mutex_t) -> pj_bool_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_rwmutex_t {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pj_rwmutex_create(
        pool: *mut pj_pool_t,
        name: *const ::std::os::raw::c_char,
        mutex: *mut *mut pj_rwmutex_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_rwmutex_lock_read(mutex: *mut pj_rwmutex_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_rwmutex_lock_write(mutex: *mut pj_rwmutex_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_rwmutex_unlock_read(mutex: *mut pj_rwmutex_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_rwmutex_unlock_write(mutex: *mut pj_rwmutex_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_rwmutex_destroy(mutex: *mut pj_rwmutex_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_enter_critical_section();
}
extern "C" {
    pub fn pj_leave_critical_section();
}
extern "C" {
    pub fn pj_sem_create(
        pool: *mut pj_pool_t,
        name: *const ::std::os::raw::c_char,
        initial: ::std::os::raw::c_uint,
        max: ::std::os::raw::c_uint,
        sem: *mut *mut pj_sem_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_sem_wait(sem: *mut pj_sem_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_sem_trywait(sem: *mut pj_sem_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_sem_post(sem: *mut pj_sem_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_sem_destroy(sem: *mut pj_sem_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_event_create(
        pool: *mut pj_pool_t,
        name: *const ::std::os::raw::c_char,
        manual_reset: pj_bool_t,
        initial: pj_bool_t,
        event: *mut *mut pj_event_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_event_wait(event: *mut pj_event_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_event_trywait(event: *mut pj_event_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_event_set(event: *mut pj_event_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_event_pulse(event: *mut pj_event_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_event_reset(event: *mut pj_event_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_event_destroy(event: *mut pj_event_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_gettimeofday(tv: *mut pj_time_val) -> pj_status_t;
}
extern "C" {
    pub fn pj_time_decode(tv: *const pj_time_val, pt: *mut pj_parsed_time) -> pj_status_t;
}
extern "C" {
    pub fn pj_time_encode(pt: *const pj_parsed_time, tv: *mut pj_time_val) -> pj_status_t;
}
extern "C" {
    pub fn pj_time_local_to_gmt(tv: *mut pj_time_val) -> pj_status_t;
}
extern "C" {
    pub fn pj_time_gmt_to_local(tv: *mut pj_time_val) -> pj_status_t;
}
extern "C" {
    pub fn pj_term_set_color(color: pj_color_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_term_get_color() -> pj_color_t;
}
extern "C" {
    pub fn pj_gettickcount(tv: *mut pj_time_val) -> pj_status_t;
}
extern "C" {
    pub fn pj_get_timestamp(ts: *mut pj_timestamp) -> pj_status_t;
}
extern "C" {
    pub fn pj_get_timestamp_freq(freq: *mut pj_timestamp) -> pj_status_t;
}
extern "C" {
    pub fn pj_elapsed_time(start: *const pj_timestamp, stop: *const pj_timestamp) -> pj_time_val;
}
extern "C" {
    pub fn pj_elapsed_msec(start: *const pj_timestamp, stop: *const pj_timestamp) -> pj_uint32_t;
}
extern "C" {
    pub fn pj_elapsed_msec64(start: *const pj_timestamp, stop: *const pj_timestamp) -> pj_uint64_t;
}
extern "C" {
    pub fn pj_elapsed_usec(start: *const pj_timestamp, stop: *const pj_timestamp) -> pj_uint32_t;
}
extern "C" {
    pub fn pj_elapsed_nanosec(start: *const pj_timestamp, stop: *const pj_timestamp)
        -> pj_uint32_t;
}
extern "C" {
    pub fn pj_elapsed_cycle(start: *const pj_timestamp, stop: *const pj_timestamp) -> pj_uint32_t;
}
pub type pj_main_func_ptr = ::std::option::Option<
    unsafe extern "C" fn(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn pj_run_app(
        main_func: pj_main_func_ptr,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_thread_init() -> pj_status_t;
}
pub const pjmedia_port_op_PJMEDIA_PORT_NO_CHANGE: pjmedia_port_op = 0;
pub const pjmedia_port_op_PJMEDIA_PORT_DISABLE: pjmedia_port_op = 1;
pub const pjmedia_port_op_PJMEDIA_PORT_MUTE: pjmedia_port_op = 2;
pub const pjmedia_port_op_PJMEDIA_PORT_ENABLE: pjmedia_port_op = 3;
pub type pjmedia_port_op = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_port_info {
    pub name: pj_str_t,
    pub signature: pj_uint32_t,
    pub dir: pjmedia_dir,
    pub fmt: pjmedia_format,
}
#[test]
fn bindgen_test_layout_pjmedia_port_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_port_info>(),
        64usize,
        concat!("Size of: ", stringify!(pjmedia_port_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_port_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_port_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_port_info>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_port_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_port_info>())).signature as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_port_info),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_port_info>())).dir as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_port_info),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_port_info>())).fmt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_port_info),
            "::",
            stringify!(fmt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_port {
    pub info: pjmedia_port_info,
    pub port_data: pjmedia_port_port_data,
    pub get_clock_src: ::std::option::Option<
        unsafe extern "C" fn(
            this_port: *mut pjmedia_port,
            dir: pjmedia_dir,
        ) -> *mut pjmedia_clock_src,
    >,
    pub put_frame: ::std::option::Option<
        unsafe extern "C" fn(
            this_port: *mut pjmedia_port,
            frame: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
    pub get_frame: ::std::option::Option<
        unsafe extern "C" fn(
            this_port: *mut pjmedia_port,
            frame: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
    pub on_destroy:
        ::std::option::Option<unsafe extern "C" fn(this_port: *mut pjmedia_port) -> pj_status_t>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_port_port_data {
    pub pdata: *mut ::std::os::raw::c_void,
    pub ldata: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pjmedia_port_port_data() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_port_port_data>(),
        16usize,
        concat!("Size of: ", stringify!(pjmedia_port_port_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_port_port_data>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_port_port_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_port_port_data>())).pdata as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_port_port_data),
            "::",
            stringify!(pdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_port_port_data>())).ldata as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_port_port_data),
            "::",
            stringify!(ldata)
        )
    );
}
#[test]
fn bindgen_test_layout_pjmedia_port() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_port>(),
        112usize,
        concat!("Size of: ", stringify!(pjmedia_port))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_port>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_port))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_port>())).info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_port),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_port>())).port_data as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_port),
            "::",
            stringify!(port_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_port>())).get_clock_src as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_port),
            "::",
            stringify!(get_clock_src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_port>())).put_frame as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_port),
            "::",
            stringify!(put_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_port>())).get_frame as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_port),
            "::",
            stringify!(get_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_port>())).on_destroy as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_port),
            "::",
            stringify!(on_destroy)
        )
    );
}
extern "C" {
    pub fn pjmedia_port_info_init(
        info: *mut pjmedia_port_info,
        name: *const pj_str_t,
        signature: ::std::os::raw::c_uint,
        clock_rate: ::std::os::raw::c_uint,
        channel_count: ::std::os::raw::c_uint,
        bits_per_sample: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_port_info_init2(
        info: *mut pjmedia_port_info,
        name: *const pj_str_t,
        signature: ::std::os::raw::c_uint,
        dir: pjmedia_dir,
        fmt: *const pjmedia_format,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_port_get_clock_src(
        port: *mut pjmedia_port,
        dir: pjmedia_dir,
    ) -> *mut pjmedia_clock_src;
}
extern "C" {
    pub fn pjmedia_port_get_frame(
        port: *mut pjmedia_port,
        frame: *mut pjmedia_frame,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_port_put_frame(
        port: *mut pjmedia_port,
        frame: *mut pjmedia_frame,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_port_destroy(port: *mut pjmedia_port) -> pj_status_t;
}
pub const pjmedia_avi_file_player_option_PJMEDIA_AVI_FILE_NO_LOOP: pjmedia_avi_file_player_option =
    1;
pub type pjmedia_avi_file_player_option = ::std::os::raw::c_uint;
pub type pjmedia_avi_stream = pjmedia_port;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_avi_streams {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pjmedia_avi_player_create_streams(
        pool: *mut pj_pool_t,
        filename: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
        p_streams: *mut *mut pjmedia_avi_streams,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_avi_streams_get_num_streams(
        streams: *mut pjmedia_avi_streams,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjmedia_avi_streams_get_stream(
        streams: *mut pjmedia_avi_streams,
        idx: ::std::os::raw::c_uint,
    ) -> *mut pjmedia_avi_stream;
}
extern "C" {
    pub fn pjmedia_avi_streams_get_stream_by_media(
        streams: *mut pjmedia_avi_streams,
        start_idx: ::std::os::raw::c_uint,
        media_type: pjmedia_type,
    ) -> *mut pjmedia_avi_stream;
}
extern "C" {
    pub fn pjmedia_avi_stream_get_len(stream: *mut pjmedia_avi_stream) -> pj_ssize_t;
}
extern "C" {
    pub fn pjmedia_avi_stream_set_eof_cb(
        stream: *mut pjmedia_avi_stream,
        user_data: *mut ::std::os::raw::c_void,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                stream: *mut pjmedia_avi_stream,
                usr_data: *mut ::std::os::raw::c_void,
            ) -> pj_status_t,
        >,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_avi_stream_set_eof_cb2(
        stream: *mut pjmedia_avi_stream,
        user_data: *mut ::std::os::raw::c_void,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                stream: *mut pjmedia_avi_stream,
                usr_data: *mut ::std::os::raw::c_void,
            ),
        >,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_bidirectional_port_create(
        pool: *mut pj_pool_t,
        get_port: *mut pjmedia_port,
        put_port: *mut pjmedia_port,
        p_port: *mut *mut pjmedia_port,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_circ_buf {
    pub buf: *mut pj_int16_t,
    pub capacity: ::std::os::raw::c_uint,
    pub start: *mut pj_int16_t,
    pub len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjmedia_circ_buf() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_circ_buf>(),
        32usize,
        concat!("Size of: ", stringify!(pjmedia_circ_buf))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_circ_buf>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_circ_buf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_circ_buf>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_circ_buf),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_circ_buf>())).capacity as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_circ_buf),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_circ_buf>())).start as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_circ_buf),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_circ_buf>())).len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_circ_buf),
            "::",
            stringify!(len)
        )
    );
}
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_PCMU: pjmedia_rtp_pt = 0;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_G721: pjmedia_rtp_pt = 2;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_GSM: pjmedia_rtp_pt = 3;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_G723: pjmedia_rtp_pt = 4;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_DVI4_8K: pjmedia_rtp_pt = 5;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_DVI4_16K: pjmedia_rtp_pt = 6;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_LPC: pjmedia_rtp_pt = 7;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_PCMA: pjmedia_rtp_pt = 8;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_G722: pjmedia_rtp_pt = 9;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_L16_2: pjmedia_rtp_pt = 10;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_L16_1: pjmedia_rtp_pt = 11;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_QCELP: pjmedia_rtp_pt = 12;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_CN: pjmedia_rtp_pt = 13;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_MPA: pjmedia_rtp_pt = 14;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_G728: pjmedia_rtp_pt = 15;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_DVI4_11K: pjmedia_rtp_pt = 16;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_DVI4_22K: pjmedia_rtp_pt = 17;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_G729: pjmedia_rtp_pt = 18;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_CELB: pjmedia_rtp_pt = 25;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_JPEG: pjmedia_rtp_pt = 26;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_NV: pjmedia_rtp_pt = 28;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_H261: pjmedia_rtp_pt = 31;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_MPV: pjmedia_rtp_pt = 32;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_MP2T: pjmedia_rtp_pt = 33;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_H263: pjmedia_rtp_pt = 34;
pub const pjmedia_rtp_pt_PJMEDIA_RTP_PT_DYNAMIC: pjmedia_rtp_pt = 96;
pub type pjmedia_rtp_pt = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_info {
    pub type_: pjmedia_type,
    pub pt: ::std::os::raw::c_uint,
    pub encoding_name: pj_str_t,
    pub clock_rate: ::std::os::raw::c_uint,
    pub channel_cnt: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjmedia_codec_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_codec_info>(),
        32usize,
        concat!("Size of: ", stringify!(pjmedia_codec_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_codec_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_codec_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_info>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_info>())).pt as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_info),
            "::",
            stringify!(pt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_info>())).encoding_name as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_info),
            "::",
            stringify!(encoding_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_info>())).clock_rate as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_info),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_info>())).channel_cnt as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_info),
            "::",
            stringify!(channel_cnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_fmtp {
    pub cnt: pj_uint8_t,
    pub param: [pjmedia_codec_fmtp_param; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_fmtp_param {
    pub name: pj_str_t,
    pub val: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjmedia_codec_fmtp_param() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_codec_fmtp_param>(),
        32usize,
        concat!("Size of: ", stringify!(pjmedia_codec_fmtp_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_codec_fmtp_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_codec_fmtp_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_fmtp_param>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_fmtp_param),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_fmtp_param>())).val as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_fmtp_param),
            "::",
            stringify!(val)
        )
    );
}
#[test]
fn bindgen_test_layout_pjmedia_codec_fmtp() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_codec_fmtp>(),
        520usize,
        concat!("Size of: ", stringify!(pjmedia_codec_fmtp))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_codec_fmtp>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_codec_fmtp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_fmtp>())).cnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_fmtp),
            "::",
            stringify!(cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_fmtp>())).param as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_fmtp),
            "::",
            stringify!(param)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_param {
    pub info: pjmedia_codec_param__bindgen_ty_1,
    pub setting: pjmedia_codec_param__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_param__bindgen_ty_1 {
    pub clock_rate: ::std::os::raw::c_uint,
    pub channel_cnt: ::std::os::raw::c_uint,
    pub avg_bps: pj_uint32_t,
    pub max_bps: pj_uint32_t,
    pub max_rx_frame_size: ::std::os::raw::c_uint,
    pub frm_ptime: pj_uint16_t,
    pub enc_ptime: pj_uint16_t,
    pub pcm_bits_per_sample: pj_uint8_t,
    pub pt: pj_uint8_t,
    pub fmt_id: pjmedia_format_id,
}
#[test]
fn bindgen_test_layout_pjmedia_codec_param__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_codec_param__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(pjmedia_codec_param__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_codec_param__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_codec_param__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_param__bindgen_ty_1>())).clock_rate as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_param__bindgen_ty_1),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_param__bindgen_ty_1>())).channel_cnt as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_param__bindgen_ty_1),
            "::",
            stringify!(channel_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_param__bindgen_ty_1>())).avg_bps as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_param__bindgen_ty_1),
            "::",
            stringify!(avg_bps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_param__bindgen_ty_1>())).max_bps as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_param__bindgen_ty_1),
            "::",
            stringify!(max_bps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_param__bindgen_ty_1>())).max_rx_frame_size
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_param__bindgen_ty_1),
            "::",
            stringify!(max_rx_frame_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_param__bindgen_ty_1>())).frm_ptime as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_param__bindgen_ty_1),
            "::",
            stringify!(frm_ptime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_param__bindgen_ty_1>())).enc_ptime as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_param__bindgen_ty_1),
            "::",
            stringify!(enc_ptime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_param__bindgen_ty_1>())).pcm_bits_per_sample
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_param__bindgen_ty_1),
            "::",
            stringify!(pcm_bits_per_sample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_param__bindgen_ty_1>())).pt as *const _ as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_param__bindgen_ty_1),
            "::",
            stringify!(pt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_param__bindgen_ty_1>())).fmt_id as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_param__bindgen_ty_1),
            "::",
            stringify!(fmt_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_param__bindgen_ty_2 {
    pub frm_per_pkt: pj_uint8_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub enc_fmtp: pjmedia_codec_fmtp,
    pub dec_fmtp: pjmedia_codec_fmtp,
}
#[test]
fn bindgen_test_layout_pjmedia_codec_param__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_codec_param__bindgen_ty_2>(),
        1048usize,
        concat!("Size of: ", stringify!(pjmedia_codec_param__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_codec_param__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_codec_param__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_param__bindgen_ty_2>())).frm_per_pkt as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_param__bindgen_ty_2),
            "::",
            stringify!(frm_per_pkt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_param__bindgen_ty_2>())).enc_fmtp as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_param__bindgen_ty_2),
            "::",
            stringify!(enc_fmtp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_param__bindgen_ty_2>())).dec_fmtp as *const _
                as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_param__bindgen_ty_2),
            "::",
            stringify!(dec_fmtp)
        )
    );
}
impl pjmedia_codec_param__bindgen_ty_2 {
    #[inline]
    pub fn vad(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vad(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cng(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cng(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn penh(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_penh(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn plc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_plc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        vad: ::std::os::raw::c_uint,
        cng: ::std::os::raw::c_uint,
        penh: ::std::os::raw::c_uint,
        plc: ::std::os::raw::c_uint,
        reserved: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let vad: u32 = unsafe { ::std::mem::transmute(vad) };
            vad as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let cng: u32 = unsafe { ::std::mem::transmute(cng) };
            cng as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let penh: u32 = unsafe { ::std::mem::transmute(penh) };
            penh as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let plc: u32 = unsafe { ::std::mem::transmute(plc) };
            plc as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_pjmedia_codec_param() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_codec_param>(),
        1080usize,
        concat!("Size of: ", stringify!(pjmedia_codec_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_codec_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_codec_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_param>())).info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_param),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_param>())).setting as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_param),
            "::",
            stringify!(setting)
        )
    );
}
extern "C" {
    pub fn pjmedia_codec_param_clone(
        pool: *mut pj_pool_t,
        src: *const pjmedia_codec_param,
    ) -> *mut pjmedia_codec_param;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_op {
    pub init: ::std::option::Option<
        unsafe extern "C" fn(codec: *mut pjmedia_codec, pool: *mut pj_pool_t) -> pj_status_t,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_codec,
            param: *mut pjmedia_codec_param,
        ) -> pj_status_t,
    >,
    pub close:
        ::std::option::Option<unsafe extern "C" fn(codec: *mut pjmedia_codec) -> pj_status_t>,
    pub modify: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_codec,
            param: *const pjmedia_codec_param,
        ) -> pj_status_t,
    >,
    pub parse: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_codec,
            pkt: *mut ::std::os::raw::c_void,
            pkt_size: pj_size_t,
            timestamp: *const pj_timestamp,
            frame_cnt: *mut ::std::os::raw::c_uint,
            frames: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
    pub encode: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_codec,
            input: *const pjmedia_frame,
            out_size: ::std::os::raw::c_uint,
            output: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
    pub decode: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_codec,
            input: *const pjmedia_frame,
            out_size: ::std::os::raw::c_uint,
            output: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
    pub recover: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_codec,
            out_size: ::std::os::raw::c_uint,
            output: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
}
#[test]
fn bindgen_test_layout_pjmedia_codec_op() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_codec_op>(),
        64usize,
        concat!("Size of: ", stringify!(pjmedia_codec_op))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_codec_op>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_codec_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_op>())).init as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_op),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_op>())).open as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_op),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_op>())).close as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_op),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_op>())).modify as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_op),
            "::",
            stringify!(modify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_op>())).parse as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_op),
            "::",
            stringify!(parse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_op>())).encode as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_op),
            "::",
            stringify!(encode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_op>())).decode as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_op),
            "::",
            stringify!(decode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_op>())).recover as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_op),
            "::",
            stringify!(recover)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec {
    pub prev: *mut pjmedia_codec,
    pub next: *mut pjmedia_codec,
    pub codec_data: *mut ::std::os::raw::c_void,
    pub factory: *mut pjmedia_codec_factory,
    pub op: *mut pjmedia_codec_op,
}
#[test]
fn bindgen_test_layout_pjmedia_codec() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_codec>(),
        40usize,
        concat!("Size of: ", stringify!(pjmedia_codec))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_codec>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_codec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec>())).codec_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec),
            "::",
            stringify!(codec_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec>())).factory as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec),
            "::",
            stringify!(factory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec>())).op as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec),
            "::",
            stringify!(op)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_factory_op {
    pub test_alloc: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_codec_factory,
            info: *const pjmedia_codec_info,
        ) -> pj_status_t,
    >,
    pub default_attr: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_codec_factory,
            info: *const pjmedia_codec_info,
            attr: *mut pjmedia_codec_param,
        ) -> pj_status_t,
    >,
    pub enum_info: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_codec_factory,
            count: *mut ::std::os::raw::c_uint,
            codecs: *mut pjmedia_codec_info,
        ) -> pj_status_t,
    >,
    pub alloc_codec: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_codec_factory,
            info: *const pjmedia_codec_info,
            p_codec: *mut *mut pjmedia_codec,
        ) -> pj_status_t,
    >,
    pub dealloc_codec: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_codec_factory,
            codec: *mut pjmedia_codec,
        ) -> pj_status_t,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn() -> pj_status_t>,
}
#[test]
fn bindgen_test_layout_pjmedia_codec_factory_op() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_codec_factory_op>(),
        48usize,
        concat!("Size of: ", stringify!(pjmedia_codec_factory_op))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_codec_factory_op>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_codec_factory_op))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_factory_op>())).test_alloc as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_factory_op),
            "::",
            stringify!(test_alloc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_factory_op>())).default_attr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_factory_op),
            "::",
            stringify!(default_attr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_factory_op>())).enum_info as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_factory_op),
            "::",
            stringify!(enum_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_factory_op>())).alloc_codec as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_factory_op),
            "::",
            stringify!(alloc_codec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_factory_op>())).dealloc_codec as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_factory_op),
            "::",
            stringify!(dealloc_codec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_factory_op>())).destroy as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_factory_op),
            "::",
            stringify!(destroy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_factory {
    pub prev: *mut pjmedia_codec_factory,
    pub next: *mut pjmedia_codec_factory,
    pub factory_data: *mut ::std::os::raw::c_void,
    pub op: *mut pjmedia_codec_factory_op,
}
#[test]
fn bindgen_test_layout_pjmedia_codec_factory() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_codec_factory>(),
        32usize,
        concat!("Size of: ", stringify!(pjmedia_codec_factory))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_codec_factory>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_codec_factory))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_factory>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_factory),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_factory>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_factory),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_factory>())).factory_data as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_factory),
            "::",
            stringify!(factory_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_factory>())).op as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_factory),
            "::",
            stringify!(op)
        )
    );
}
pub const pjmedia_codec_priority_PJMEDIA_CODEC_PRIO_HIGHEST: pjmedia_codec_priority = 255;
pub const pjmedia_codec_priority_PJMEDIA_CODEC_PRIO_NEXT_HIGHER: pjmedia_codec_priority = 254;
pub const pjmedia_codec_priority_PJMEDIA_CODEC_PRIO_NORMAL: pjmedia_codec_priority = 128;
pub const pjmedia_codec_priority_PJMEDIA_CODEC_PRIO_LOWEST: pjmedia_codec_priority = 1;
pub const pjmedia_codec_priority_PJMEDIA_CODEC_PRIO_DISABLED: pjmedia_codec_priority = 0;
pub type pjmedia_codec_priority = ::std::os::raw::c_uint;
pub type pjmedia_codec_id = [::std::os::raw::c_char; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_default_param {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_desc {
    pub info: pjmedia_codec_info,
    pub id: pjmedia_codec_id,
    pub prio: pjmedia_codec_priority,
    pub factory: *mut pjmedia_codec_factory,
    pub param: *mut pjmedia_codec_default_param,
}
#[test]
fn bindgen_test_layout_pjmedia_codec_desc() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_codec_desc>(),
        88usize,
        concat!("Size of: ", stringify!(pjmedia_codec_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_codec_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_codec_desc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_desc>())).info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_desc),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_desc>())).id as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_desc),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_desc>())).prio as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_desc),
            "::",
            stringify!(prio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_desc>())).factory as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_desc),
            "::",
            stringify!(factory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_desc>())).param as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_desc),
            "::",
            stringify!(param)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_mgr {
    pub pf: *mut pj_pool_factory,
    pub pool: *mut pj_pool_t,
    pub mutex: *mut pj_mutex_t,
    pub factory_list: pjmedia_codec_factory,
    pub codec_cnt: ::std::os::raw::c_uint,
    pub codec_desc: [pjmedia_codec_desc; 32usize],
}
#[test]
fn bindgen_test_layout_pjmedia_codec_mgr() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_codec_mgr>(),
        2880usize,
        concat!("Size of: ", stringify!(pjmedia_codec_mgr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_codec_mgr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_codec_mgr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_mgr>())).pf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_mgr),
            "::",
            stringify!(pf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_mgr>())).pool as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_mgr),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_mgr>())).mutex as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_mgr),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_mgr>())).factory_list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_mgr),
            "::",
            stringify!(factory_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_mgr>())).codec_cnt as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_mgr),
            "::",
            stringify!(codec_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_mgr>())).codec_desc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_mgr),
            "::",
            stringify!(codec_desc)
        )
    );
}
extern "C" {
    pub fn pjmedia_codec_mgr_init(
        mgr: *mut pjmedia_codec_mgr,
        pf: *mut pj_pool_factory,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_mgr_destroy(mgr: *mut pjmedia_codec_mgr) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_mgr_register_factory(
        mgr: *mut pjmedia_codec_mgr,
        factory: *mut pjmedia_codec_factory,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_mgr_unregister_factory(
        mgr: *mut pjmedia_codec_mgr,
        factory: *mut pjmedia_codec_factory,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_mgr_enum_codecs(
        mgr: *mut pjmedia_codec_mgr,
        count: *mut ::std::os::raw::c_uint,
        info: *mut pjmedia_codec_info,
        prio: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_mgr_get_codec_info(
        mgr: *mut pjmedia_codec_mgr,
        pt: ::std::os::raw::c_uint,
        inf: *mut *const pjmedia_codec_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_info_to_id(
        info: *const pjmedia_codec_info,
        id: *mut ::std::os::raw::c_char,
        max_len: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pjmedia_codec_mgr_find_codecs_by_id(
        mgr: *mut pjmedia_codec_mgr,
        codec_id: *const pj_str_t,
        count: *mut ::std::os::raw::c_uint,
        p_info: *mut *const pjmedia_codec_info,
        prio: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_mgr_set_codec_priority(
        mgr: *mut pjmedia_codec_mgr,
        codec_id: *const pj_str_t,
        prio: pj_uint8_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_mgr_get_default_param(
        mgr: *mut pjmedia_codec_mgr,
        info: *const pjmedia_codec_info,
        param: *mut pjmedia_codec_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_mgr_set_default_param(
        mgr: *mut pjmedia_codec_mgr,
        info: *const pjmedia_codec_info,
        param: *const pjmedia_codec_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_mgr_alloc_codec(
        mgr: *mut pjmedia_codec_mgr,
        info: *const pjmedia_codec_info,
        p_codec: *mut *mut pjmedia_codec,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_mgr_dealloc_codec(
        mgr: *mut pjmedia_codec_mgr,
        codec: *mut pjmedia_codec,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_conf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_conf_port_info {
    pub slot: ::std::os::raw::c_uint,
    pub name: pj_str_t,
    pub format: pjmedia_format,
    pub tx_setting: pjmedia_port_op,
    pub rx_setting: pjmedia_port_op,
    pub listener_cnt: ::std::os::raw::c_uint,
    pub listener_slots: *mut ::std::os::raw::c_uint,
    pub listener_adj_level: *mut ::std::os::raw::c_uint,
    pub transmitter_cnt: ::std::os::raw::c_uint,
    pub clock_rate: ::std::os::raw::c_uint,
    pub channel_count: ::std::os::raw::c_uint,
    pub samples_per_frame: ::std::os::raw::c_uint,
    pub bits_per_sample: ::std::os::raw::c_uint,
    pub tx_adj_level: ::std::os::raw::c_int,
    pub rx_adj_level: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pjmedia_conf_port_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_conf_port_info>(),
        120usize,
        concat!("Size of: ", stringify!(pjmedia_conf_port_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_conf_port_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_conf_port_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_conf_port_info>())).slot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_conf_port_info),
            "::",
            stringify!(slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_conf_port_info>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_conf_port_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_conf_port_info>())).format as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_conf_port_info),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_conf_port_info>())).tx_setting as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_conf_port_info),
            "::",
            stringify!(tx_setting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_conf_port_info>())).rx_setting as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_conf_port_info),
            "::",
            stringify!(rx_setting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_conf_port_info>())).listener_cnt as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_conf_port_info),
            "::",
            stringify!(listener_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_conf_port_info>())).listener_slots as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_conf_port_info),
            "::",
            stringify!(listener_slots)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_conf_port_info>())).listener_adj_level as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_conf_port_info),
            "::",
            stringify!(listener_adj_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_conf_port_info>())).transmitter_cnt as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_conf_port_info),
            "::",
            stringify!(transmitter_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_conf_port_info>())).clock_rate as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_conf_port_info),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_conf_port_info>())).channel_count as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_conf_port_info),
            "::",
            stringify!(channel_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_conf_port_info>())).samples_per_frame as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_conf_port_info),
            "::",
            stringify!(samples_per_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_conf_port_info>())).bits_per_sample as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_conf_port_info),
            "::",
            stringify!(bits_per_sample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_conf_port_info>())).tx_adj_level as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_conf_port_info),
            "::",
            stringify!(tx_adj_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_conf_port_info>())).rx_adj_level as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_conf_port_info),
            "::",
            stringify!(rx_adj_level)
        )
    );
}
pub const pjmedia_conf_option_PJMEDIA_CONF_NO_MIC: pjmedia_conf_option = 1;
pub const pjmedia_conf_option_PJMEDIA_CONF_NO_DEVICE: pjmedia_conf_option = 2;
pub const pjmedia_conf_option_PJMEDIA_CONF_SMALL_FILTER: pjmedia_conf_option = 4;
pub const pjmedia_conf_option_PJMEDIA_CONF_USE_LINEAR: pjmedia_conf_option = 8;
pub type pjmedia_conf_option = ::std::os::raw::c_uint;
extern "C" {
    pub fn pjmedia_conf_create(
        pool: *mut pj_pool_t,
        max_slots: ::std::os::raw::c_uint,
        sampling_rate: ::std::os::raw::c_uint,
        channel_count: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        bits_per_sample: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        p_conf: *mut *mut pjmedia_conf,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_conf_destroy(conf: *mut pjmedia_conf) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_conf_get_master_port(conf: *mut pjmedia_conf) -> *mut pjmedia_port;
}
extern "C" {
    pub fn pjmedia_conf_set_port0_name(
        conf: *mut pjmedia_conf,
        name: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_conf_add_port(
        conf: *mut pjmedia_conf,
        pool: *mut pj_pool_t,
        strm_port: *mut pjmedia_port,
        name: *const pj_str_t,
        p_slot: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_conf_configure_port(
        conf: *mut pjmedia_conf,
        slot: ::std::os::raw::c_uint,
        tx: pjmedia_port_op,
        rx: pjmedia_port_op,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_conf_connect_port(
        conf: *mut pjmedia_conf,
        src_slot: ::std::os::raw::c_uint,
        sink_slot: ::std::os::raw::c_uint,
        adj_level: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_conf_disconnect_port(
        conf: *mut pjmedia_conf,
        src_slot: ::std::os::raw::c_uint,
        sink_slot: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_conf_disconnect_port_from_sources(
        conf: *mut pjmedia_conf,
        sink_slot: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_conf_disconnect_port_from_sinks(
        conf: *mut pjmedia_conf,
        src_slot: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_conf_get_port_count(conf: *mut pjmedia_conf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjmedia_conf_get_connect_count(conf: *mut pjmedia_conf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjmedia_conf_remove_port(
        conf: *mut pjmedia_conf,
        slot: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_conf_enum_ports(
        conf: *mut pjmedia_conf,
        ports: *mut ::std::os::raw::c_uint,
        count: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_conf_get_port_info(
        conf: *mut pjmedia_conf,
        slot: ::std::os::raw::c_uint,
        info: *mut pjmedia_conf_port_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_conf_get_ports_info(
        conf: *mut pjmedia_conf,
        size: *mut ::std::os::raw::c_uint,
        info: *mut pjmedia_conf_port_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_conf_get_signal_level(
        conf: *mut pjmedia_conf,
        slot: ::std::os::raw::c_uint,
        tx_level: *mut ::std::os::raw::c_uint,
        rx_level: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_conf_adjust_rx_level(
        conf: *mut pjmedia_conf,
        slot: ::std::os::raw::c_uint,
        adj_level: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_conf_adjust_tx_level(
        conf: *mut pjmedia_conf,
        slot: ::std::os::raw::c_uint,
        adj_level: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_conf_adjust_conn_level(
        conf: *mut pjmedia_conf,
        src_slot: ::std::os::raw::c_uint,
        sink_slot: ::std::os::raw::c_uint,
        adj_level: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_conversion_param {
    pub src: pjmedia_format,
    pub dst: pjmedia_format,
}
#[test]
fn bindgen_test_layout_pjmedia_conversion_param() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_conversion_param>(),
        72usize,
        concat!("Size of: ", stringify!(pjmedia_conversion_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_conversion_param>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_conversion_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_conversion_param>())).src as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_conversion_param),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_conversion_param>())).dst as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_conversion_param),
            "::",
            stringify!(dst)
        )
    );
}
pub const pjmedia_converter_priority_guide_PJMEDIA_CONVERTER_PRIORITY_LOWEST:
    pjmedia_converter_priority_guide = 0;
pub const pjmedia_converter_priority_guide_PJMEDIA_CONVERTER_PRIORITY_NORMAL:
    pjmedia_converter_priority_guide = 15000;
pub const pjmedia_converter_priority_guide_PJMEDIA_CONVERTER_PRIORITY_HIGHEST:
    pjmedia_converter_priority_guide = 32000;
pub type pjmedia_converter_priority_guide = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_converter_factory {
    pub prev: *mut pjmedia_converter_factory,
    pub next: *mut pjmedia_converter_factory,
    pub name: *const ::std::os::raw::c_char,
    pub priority: ::std::os::raw::c_int,
    pub op: *mut pjmedia_converter_factory_op,
}
#[test]
fn bindgen_test_layout_pjmedia_converter_factory() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_converter_factory>(),
        40usize,
        concat!("Size of: ", stringify!(pjmedia_converter_factory))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_converter_factory>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_converter_factory))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_converter_factory>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_converter_factory),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_converter_factory>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_converter_factory),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_converter_factory>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_converter_factory),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_converter_factory>())).priority as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_converter_factory),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_converter_factory>())).op as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_converter_factory),
            "::",
            stringify!(op)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_converter {
    pub op: *mut pjmedia_converter_op,
}
#[test]
fn bindgen_test_layout_pjmedia_converter() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_converter>(),
        8usize,
        concat!("Size of: ", stringify!(pjmedia_converter))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_converter>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_converter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_converter>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_converter),
            "::",
            stringify!(op)
        )
    );
}
pub type pjmedia_converter_convert_setting = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_converter_factory_op {
    pub create_converter: ::std::option::Option<
        unsafe extern "C" fn(
            cf: *mut pjmedia_converter_factory,
            pool: *mut pj_pool_t,
            prm: *const pjmedia_conversion_param,
            p_cv: *mut *mut pjmedia_converter,
        ) -> pj_status_t,
    >,
    pub destroy_factory:
        ::std::option::Option<unsafe extern "C" fn(cf: *mut pjmedia_converter_factory)>,
}
#[test]
fn bindgen_test_layout_pjmedia_converter_factory_op() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_converter_factory_op>(),
        16usize,
        concat!("Size of: ", stringify!(pjmedia_converter_factory_op))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_converter_factory_op>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_converter_factory_op))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_converter_factory_op>())).create_converter as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_converter_factory_op),
            "::",
            stringify!(create_converter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_converter_factory_op>())).destroy_factory as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_converter_factory_op),
            "::",
            stringify!(destroy_factory)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_converter_op {
    pub convert: ::std::option::Option<
        unsafe extern "C" fn(
            cv: *mut pjmedia_converter,
            src_frame: *mut pjmedia_frame,
            dst_frame: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(cv: *mut pjmedia_converter)>,
    pub convert2: ::std::option::Option<
        unsafe extern "C" fn(
            cv: *mut pjmedia_converter,
            src_frame: *mut pjmedia_frame,
            src_frame_size: *const pjmedia_rect_size,
            src_pos: *const pjmedia_coord,
            dst_frame: *mut pjmedia_frame,
            dst_frame_size: *const pjmedia_rect_size,
            dst_pos: *const pjmedia_coord,
            param: *mut pjmedia_converter_convert_setting,
        ) -> pj_status_t,
    >,
}
#[test]
fn bindgen_test_layout_pjmedia_converter_op() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_converter_op>(),
        24usize,
        concat!("Size of: ", stringify!(pjmedia_converter_op))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_converter_op>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_converter_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_converter_op>())).convert as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_converter_op),
            "::",
            stringify!(convert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_converter_op>())).destroy as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_converter_op),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_converter_op>())).convert2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_converter_op),
            "::",
            stringify!(convert2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_converter_mgr {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pjmedia_converter_mgr_create(
        pool: *mut pj_pool_t,
        mgr: *mut *mut pjmedia_converter_mgr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_converter_mgr_instance() -> *mut pjmedia_converter_mgr;
}
extern "C" {
    pub fn pjmedia_converter_mgr_set_instance(mgr: *mut pjmedia_converter_mgr);
}
extern "C" {
    pub fn pjmedia_converter_mgr_destroy(mgr: *mut pjmedia_converter_mgr);
}
extern "C" {
    pub fn pjmedia_converter_mgr_register_factory(
        mgr: *mut pjmedia_converter_mgr,
        f: *mut pjmedia_converter_factory,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_converter_mgr_unregister_factory(
        mgr: *mut pjmedia_converter_mgr,
        f: *mut pjmedia_converter_factory,
        call_destroy: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_converter_create(
        mgr: *mut pjmedia_converter_mgr,
        pool: *mut pj_pool_t,
        param: *mut pjmedia_conversion_param,
        p_cv: *mut *mut pjmedia_converter,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_converter_convert(
        cv: *mut pjmedia_converter,
        src_frame: *mut pjmedia_frame,
        dst_frame: *mut pjmedia_frame,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_converter_convert2(
        cv: *mut pjmedia_converter,
        src_frame: *mut pjmedia_frame,
        src_frame_size: *const pjmedia_rect_size,
        src_pos: *const pjmedia_coord,
        dst_frame: *mut pjmedia_frame,
        dst_frame_size: *const pjmedia_rect_size,
        dst_pos: *const pjmedia_coord,
        param: *mut pjmedia_converter_convert_setting,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_converter_destroy(cv: *mut pjmedia_converter);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_delay_buf {
    _unused: [u8; 0],
}
pub const pjmedia_delay_buf_flag_PJMEDIA_DELAY_BUF_SIMPLE_FIFO: pjmedia_delay_buf_flag = 1;
pub type pjmedia_delay_buf_flag = ::std::os::raw::c_uint;
extern "C" {
    pub fn pjmedia_delay_buf_create(
        pool: *mut pj_pool_t,
        name: *const ::std::os::raw::c_char,
        clock_rate: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        channel_count: ::std::os::raw::c_uint,
        max_delay: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        p_b: *mut *mut pjmedia_delay_buf,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_delay_buf_put(b: *mut pjmedia_delay_buf, frame: *mut pj_int16_t) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_delay_buf_get(b: *mut pjmedia_delay_buf, frame: *mut pj_int16_t) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_delay_buf_reset(b: *mut pjmedia_delay_buf) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_delay_buf_destroy(b: *mut pjmedia_delay_buf) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_echo_state {
    _unused: [u8; 0],
}
pub const pjmedia_echo_flag_PJMEDIA_ECHO_DEFAULT: pjmedia_echo_flag = 0;
pub const pjmedia_echo_flag_PJMEDIA_ECHO_SPEEX: pjmedia_echo_flag = 1;
pub const pjmedia_echo_flag_PJMEDIA_ECHO_SIMPLE: pjmedia_echo_flag = 2;
pub const pjmedia_echo_flag_PJMEDIA_ECHO_WEBRTC: pjmedia_echo_flag = 3;
pub const pjmedia_echo_flag_PJMEDIA_ECHO_ALGO_MASK: pjmedia_echo_flag = 15;
pub const pjmedia_echo_flag_PJMEDIA_ECHO_NO_LOCK: pjmedia_echo_flag = 16;
pub const pjmedia_echo_flag_PJMEDIA_ECHO_USE_SIMPLE_FIFO: pjmedia_echo_flag = 32;
pub const pjmedia_echo_flag_PJMEDIA_ECHO_USE_SW_ECHO: pjmedia_echo_flag = 64;
pub const pjmedia_echo_flag_PJMEDIA_ECHO_USE_NOISE_SUPPRESSOR: pjmedia_echo_flag = 128;
pub const pjmedia_echo_flag_PJMEDIA_ECHO_AGGRESSIVENESS_DEFAULT: pjmedia_echo_flag = 0;
pub const pjmedia_echo_flag_PJMEDIA_ECHO_AGGRESSIVENESS_CONSERVATIVE: pjmedia_echo_flag = 256;
pub const pjmedia_echo_flag_PJMEDIA_ECHO_AGGRESSIVENESS_MODERATE: pjmedia_echo_flag = 512;
pub const pjmedia_echo_flag_PJMEDIA_ECHO_AGGRESSIVENESS_AGGRESSIVE: pjmedia_echo_flag = 768;
pub const pjmedia_echo_flag_PJMEDIA_ECHO_AGGRESSIVENESS_MASK: pjmedia_echo_flag = 3840;
pub type pjmedia_echo_flag = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_echo_stat {
    pub name: *const ::std::os::raw::c_char,
    pub median: ::std::os::raw::c_int,
    pub std: ::std::os::raw::c_int,
    pub frac_delay: f32,
    pub learning: ::std::os::raw::c_uint,
    pub duration: ::std::os::raw::c_uint,
    pub tail: ::std::os::raw::c_uint,
    pub min_factor: ::std::os::raw::c_int,
    pub avg_factor: ::std::os::raw::c_int,
    pub stat_info: pj_str_t,
    pub buf_: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_pjmedia_echo_stat() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_echo_stat>(),
        184usize,
        concat!("Size of: ", stringify!(pjmedia_echo_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_echo_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_echo_stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_echo_stat>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_echo_stat),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_echo_stat>())).median as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_echo_stat),
            "::",
            stringify!(median)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_echo_stat>())).std as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_echo_stat),
            "::",
            stringify!(std)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_echo_stat>())).frac_delay as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_echo_stat),
            "::",
            stringify!(frac_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_echo_stat>())).learning as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_echo_stat),
            "::",
            stringify!(learning)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_echo_stat>())).duration as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_echo_stat),
            "::",
            stringify!(duration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_echo_stat>())).tail as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_echo_stat),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_echo_stat>())).min_factor as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_echo_stat),
            "::",
            stringify!(min_factor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_echo_stat>())).avg_factor as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_echo_stat),
            "::",
            stringify!(avg_factor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_echo_stat>())).stat_info as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_echo_stat),
            "::",
            stringify!(stat_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_echo_stat>())).buf_ as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_echo_stat),
            "::",
            stringify!(buf_)
        )
    );
}
extern "C" {
    pub fn pjmedia_echo_stat_default(stat: *mut pjmedia_echo_stat);
}
extern "C" {
    pub fn pjmedia_echo_create(
        pool: *mut pj_pool_t,
        clock_rate: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        tail_ms: ::std::os::raw::c_uint,
        latency_ms: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        p_echo: *mut *mut pjmedia_echo_state,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_echo_create2(
        pool: *mut pj_pool_t,
        clock_rate: ::std::os::raw::c_uint,
        channel_count: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        tail_ms: ::std::os::raw::c_uint,
        latency_ms: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        p_echo: *mut *mut pjmedia_echo_state,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_echo_destroy(echo: *mut pjmedia_echo_state) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_echo_reset(echo: *mut pjmedia_echo_state) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_echo_get_stat(
        echo: *mut pjmedia_echo_state,
        p_stat: *mut pjmedia_echo_stat,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_echo_playback(
        echo: *mut pjmedia_echo_state,
        play_frm: *mut pj_int16_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_echo_capture(
        echo: *mut pjmedia_echo_state,
        rec_frm: *mut pj_int16_t,
        options: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_echo_cancel(
        echo: *mut pjmedia_echo_state,
        rec_frm: *mut pj_int16_t,
        play_frm: *const pj_int16_t,
        options: ::std::os::raw::c_uint,
        reserved: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_echo_port_create(
        pool: *mut pj_pool_t,
        dn_port: *mut pjmedia_port,
        tail_ms: ::std::os::raw::c_uint,
        latency_ms: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        p_port: *mut *mut pjmedia_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_strerror(
        status: pj_status_t,
        buffer: *mut ::std::os::raw::c_char,
        bufsize: pj_size_t,
    ) -> pj_str_t;
}
pub const pjmedia_tranport_media_option_PJMEDIA_TPMED_NO_TRANSPORT_CHECKING:
    pjmedia_tranport_media_option = 1;
pub const pjmedia_tranport_media_option_PJMEDIA_TPMED_RTCP_MUX: pjmedia_tranport_media_option = 2;
pub type pjmedia_tranport_media_option = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_sock_info {
    pub rtp_sock: pj_sock_t,
    pub rtp_addr_name: pj_sockaddr,
    pub rtcp_sock: pj_sock_t,
    pub rtcp_addr_name: pj_sockaddr,
}
#[test]
fn bindgen_test_layout_pjmedia_sock_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_sock_info>(),
        80usize,
        concat!("Size of: ", stringify!(pjmedia_sock_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_sock_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_sock_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sock_info>())).rtp_sock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sock_info),
            "::",
            stringify!(rtp_sock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sock_info>())).rtp_addr_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sock_info),
            "::",
            stringify!(rtp_addr_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_sock_info>())).rtcp_sock as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sock_info),
            "::",
            stringify!(rtcp_sock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_sock_info>())).rtcp_addr_name as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_sock_info),
            "::",
            stringify!(rtcp_addr_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_transport_op {
    pub get_info: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            info: *mut pjmedia_transport_info,
        ) -> pj_status_t,
    >,
    pub attach: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            user_data: *mut ::std::os::raw::c_void,
            rem_addr: *const pj_sockaddr_t,
            rem_rtcp: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
            rtp_cb: ::std::option::Option<
                unsafe extern "C" fn(
                    user_data: *mut ::std::os::raw::c_void,
                    pkt: *mut ::std::os::raw::c_void,
                    size: pj_ssize_t,
                ),
            >,
            rtcp_cb: ::std::option::Option<
                unsafe extern "C" fn(
                    user_data: *mut ::std::os::raw::c_void,
                    pkt: *mut ::std::os::raw::c_void,
                    size: pj_ssize_t,
                ),
            >,
        ) -> pj_status_t,
    >,
    pub detach: ::std::option::Option<
        unsafe extern "C" fn(tp: *mut pjmedia_transport, user_data: *mut ::std::os::raw::c_void),
    >,
    pub send_rtp: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            pkt: *const ::std::os::raw::c_void,
            size: pj_size_t,
        ) -> pj_status_t,
    >,
    pub send_rtcp: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            pkt: *const ::std::os::raw::c_void,
            size: pj_size_t,
        ) -> pj_status_t,
    >,
    pub send_rtcp2: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
            pkt: *const ::std::os::raw::c_void,
            size: pj_size_t,
        ) -> pj_status_t,
    >,
    pub media_create: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            sdp_pool: *mut pj_pool_t,
            options: ::std::os::raw::c_uint,
            remote_sdp: *const pjmedia_sdp_session,
            media_index: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub encode_sdp: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            sdp_pool: *mut pj_pool_t,
            sdp_local: *mut pjmedia_sdp_session,
            rem_sdp: *const pjmedia_sdp_session,
            media_index: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub media_start: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            tmp_pool: *mut pj_pool_t,
            sdp_local: *const pjmedia_sdp_session,
            sdp_remote: *const pjmedia_sdp_session,
            media_index: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub media_stop:
        ::std::option::Option<unsafe extern "C" fn(tp: *mut pjmedia_transport) -> pj_status_t>,
    pub simulate_lost: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            dir: pjmedia_dir,
            pct_lost: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub destroy:
        ::std::option::Option<unsafe extern "C" fn(tp: *mut pjmedia_transport) -> pj_status_t>,
    pub attach2: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            att_param: *mut pjmedia_transport_attach_param,
        ) -> pj_status_t,
    >,
}
#[test]
fn bindgen_test_layout_pjmedia_transport_op() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_transport_op>(),
        104usize,
        concat!("Size of: ", stringify!(pjmedia_transport_op))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_transport_op>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_transport_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_transport_op>())).get_info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_op),
            "::",
            stringify!(get_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_transport_op>())).attach as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_op),
            "::",
            stringify!(attach)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_transport_op>())).detach as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_op),
            "::",
            stringify!(detach)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_transport_op>())).send_rtp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_op),
            "::",
            stringify!(send_rtp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_transport_op>())).send_rtcp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_op),
            "::",
            stringify!(send_rtcp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_transport_op>())).send_rtcp2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_op),
            "::",
            stringify!(send_rtcp2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_transport_op>())).media_create as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_op),
            "::",
            stringify!(media_create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_transport_op>())).encode_sdp as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_op),
            "::",
            stringify!(encode_sdp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_transport_op>())).media_start as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_op),
            "::",
            stringify!(media_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_transport_op>())).media_stop as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_op),
            "::",
            stringify!(media_stop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_transport_op>())).simulate_lost as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_op),
            "::",
            stringify!(simulate_lost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_transport_op>())).destroy as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_op),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_transport_op>())).attach2 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_op),
            "::",
            stringify!(attach2)
        )
    );
}
pub const pjmedia_transport_type_PJMEDIA_TRANSPORT_TYPE_UDP: pjmedia_transport_type = 0;
pub const pjmedia_transport_type_PJMEDIA_TRANSPORT_TYPE_ICE: pjmedia_transport_type = 1;
pub const pjmedia_transport_type_PJMEDIA_TRANSPORT_TYPE_SRTP: pjmedia_transport_type = 2;
pub const pjmedia_transport_type_PJMEDIA_TRANSPORT_TYPE_LOOP: pjmedia_transport_type = 3;
pub const pjmedia_transport_type_PJMEDIA_TRANSPORT_TYPE_USER: pjmedia_transport_type = 4;
pub type pjmedia_transport_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_transport {
    pub name: [::std::os::raw::c_char; 32usize],
    pub type_: pjmedia_transport_type,
    pub op: *mut pjmedia_transport_op,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pjmedia_transport() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_transport>(),
        56usize,
        concat!("Size of: ", stringify!(pjmedia_transport))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_transport>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_transport))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_transport>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_transport>())).type_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_transport>())).op as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_transport>())).user_data as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport),
            "::",
            stringify!(user_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_transport_specific_info {
    pub type_: pjmedia_transport_type,
    pub cbsize: ::std::os::raw::c_int,
    pub buffer: [::std::os::raw::c_char; 288usize],
}
#[test]
fn bindgen_test_layout_pjmedia_transport_specific_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_transport_specific_info>(),
        296usize,
        concat!("Size of: ", stringify!(pjmedia_transport_specific_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_transport_specific_info>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_transport_specific_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_transport_specific_info>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_specific_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_transport_specific_info>())).cbsize as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_specific_info),
            "::",
            stringify!(cbsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_transport_specific_info>())).buffer as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_specific_info),
            "::",
            stringify!(buffer)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_transport_info {
    pub sock_info: pjmedia_sock_info,
    pub src_rtp_name: pj_sockaddr,
    pub src_rtcp_name: pj_sockaddr,
    pub specific_info_cnt: ::std::os::raw::c_uint,
    pub spc_info: [pjmedia_transport_specific_info; 4usize],
}
#[test]
fn bindgen_test_layout_pjmedia_transport_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_transport_info>(),
        1328usize,
        concat!("Size of: ", stringify!(pjmedia_transport_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_transport_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_transport_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_transport_info>())).sock_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_info),
            "::",
            stringify!(sock_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_transport_info>())).src_rtp_name as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_info),
            "::",
            stringify!(src_rtp_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_transport_info>())).src_rtcp_name as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_info),
            "::",
            stringify!(src_rtcp_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_transport_info>())).specific_info_cnt as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_info),
            "::",
            stringify!(specific_info_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_transport_info>())).spc_info as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_info),
            "::",
            stringify!(spc_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_tp_cb_param {
    pub user_data: *mut ::std::os::raw::c_void,
    pub pkt: *mut ::std::os::raw::c_void,
    pub size: pj_ssize_t,
    pub src_addr: *mut pj_sockaddr,
    pub rem_switch: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjmedia_tp_cb_param() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_tp_cb_param>(),
        40usize,
        concat!("Size of: ", stringify!(pjmedia_tp_cb_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_tp_cb_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_tp_cb_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_tp_cb_param>())).user_data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tp_cb_param),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_tp_cb_param>())).pkt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tp_cb_param),
            "::",
            stringify!(pkt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_tp_cb_param>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tp_cb_param),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_tp_cb_param>())).src_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tp_cb_param),
            "::",
            stringify!(src_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_tp_cb_param>())).rem_switch as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tp_cb_param),
            "::",
            stringify!(rem_switch)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_transport_attach_param {
    pub stream: *mut ::std::os::raw::c_void,
    pub media_type: pjmedia_type,
    pub rem_addr: pj_sockaddr,
    pub rem_rtcp: pj_sockaddr,
    pub addr_len: ::std::os::raw::c_uint,
    pub user_data: *mut ::std::os::raw::c_void,
    pub rtp_cb: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            pkt: *mut ::std::os::raw::c_void,
            arg1: pj_ssize_t,
        ),
    >,
    pub rtcp_cb: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            pkt: *mut ::std::os::raw::c_void,
            arg1: pj_ssize_t,
        ),
    >,
    pub rtp_cb2: ::std::option::Option<unsafe extern "C" fn(param: *mut pjmedia_tp_cb_param)>,
}
#[test]
fn bindgen_test_layout_pjmedia_transport_attach_param() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_transport_attach_param>(),
        104usize,
        concat!("Size of: ", stringify!(pjmedia_transport_attach_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_transport_attach_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_transport_attach_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_transport_attach_param>())).stream as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_attach_param),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_transport_attach_param>())).media_type as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_attach_param),
            "::",
            stringify!(media_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_transport_attach_param>())).rem_addr as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_attach_param),
            "::",
            stringify!(rem_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_transport_attach_param>())).rem_rtcp as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_attach_param),
            "::",
            stringify!(rem_rtcp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_transport_attach_param>())).addr_len as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_attach_param),
            "::",
            stringify!(addr_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_transport_attach_param>())).user_data as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_attach_param),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_transport_attach_param>())).rtp_cb as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_attach_param),
            "::",
            stringify!(rtp_cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_transport_attach_param>())).rtcp_cb as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_attach_param),
            "::",
            stringify!(rtcp_cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_transport_attach_param>())).rtp_cb2 as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_transport_attach_param),
            "::",
            stringify!(rtp_cb2)
        )
    );
}
extern "C" {
    pub fn pjmedia_aud_subsys_init(pf: *mut pj_pool_factory) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_aud_subsys_get_pool_factory() -> *mut pj_pool_factory;
}
extern "C" {
    pub fn pjmedia_aud_subsys_shutdown() -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_aud_register_factory(
        adf: pjmedia_aud_dev_factory_create_func_ptr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_aud_unregister_factory(
        adf: pjmedia_aud_dev_factory_create_func_ptr,
    ) -> pj_status_t;
}
pub const pjmedia_endpt_flag_PJMEDIA_ENDPT_HAS_TELEPHONE_EVENT_FLAG: pjmedia_endpt_flag = 0;
pub type pjmedia_endpt_flag = ::std::os::raw::c_uint;
pub type pjmedia_endpt_exit_callback =
    ::std::option::Option<unsafe extern "C" fn(endpt: *mut pjmedia_endpt)>;
extern "C" {
    pub fn pjmedia_endpt_create2(
        pf: *mut pj_pool_factory,
        ioqueue: *mut pj_ioqueue_t,
        worker_cnt: ::std::os::raw::c_uint,
        p_endpt: *mut *mut pjmedia_endpt,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_endpt_destroy2(endpt: *mut pjmedia_endpt) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_endpt_set_flag(
        endpt: *mut pjmedia_endpt,
        flag: pjmedia_endpt_flag,
        value: *const ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_endpt_get_flag(
        endpt: *mut pjmedia_endpt,
        flag: pjmedia_endpt_flag,
        value: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_endpt_get_ioqueue(endpt: *mut pjmedia_endpt) -> *mut pj_ioqueue_t;
}
extern "C" {
    pub fn pjmedia_endpt_get_thread_count(endpt: *mut pjmedia_endpt) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjmedia_endpt_get_thread(
        endpt: *mut pjmedia_endpt,
        index: ::std::os::raw::c_uint,
    ) -> *mut pj_thread_t;
}
extern "C" {
    pub fn pjmedia_endpt_stop_threads(endpt: *mut pjmedia_endpt) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_endpt_create_pool(
        endpt: *mut pjmedia_endpt,
        name: *const ::std::os::raw::c_char,
        initial: pj_size_t,
        increment: pj_size_t,
    ) -> *mut pj_pool_t;
}
extern "C" {
    pub fn pjmedia_endpt_get_codec_mgr(endpt: *mut pjmedia_endpt) -> *mut pjmedia_codec_mgr;
}
extern "C" {
    pub fn pjmedia_endpt_create_sdp(
        endpt: *mut pjmedia_endpt,
        pool: *mut pj_pool_t,
        stream_cnt: ::std::os::raw::c_uint,
        sock_info: *const pjmedia_sock_info,
        p_sdp: *mut *mut pjmedia_sdp_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_endpt_create_base_sdp(
        endpt: *mut pjmedia_endpt,
        pool: *mut pj_pool_t,
        sess_name: *const pj_str_t,
        origin: *const pj_sockaddr,
        p_sdp: *mut *mut pjmedia_sdp_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_endpt_create_audio_sdp(
        endpt: *mut pjmedia_endpt,
        pool: *mut pj_pool_t,
        si: *const pjmedia_sock_info,
        options: ::std::os::raw::c_uint,
        p_m: *mut *mut pjmedia_sdp_media,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_endpt_create_video_sdp(
        endpt: *mut pjmedia_endpt,
        pool: *mut pj_pool_t,
        si: *const pjmedia_sock_info,
        options: ::std::os::raw::c_uint,
        p_m: *mut *mut pjmedia_sdp_media,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_endpt_dump(endpt: *mut pjmedia_endpt) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_endpt_atexit(
        endpt: *mut pjmedia_endpt,
        func: pjmedia_endpt_exit_callback,
    ) -> pj_status_t;
}
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_START: pjmedia_audio_pt = 95;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_SPEEX_NB: pjmedia_audio_pt = 96;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_SPEEX_WB: pjmedia_audio_pt = 97;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_SPEEX_UWB: pjmedia_audio_pt = 98;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_SILK_NB: pjmedia_audio_pt = 99;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_SILK_MB: pjmedia_audio_pt = 100;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_SILK_WB: pjmedia_audio_pt = 101;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_SILK_SWB: pjmedia_audio_pt = 102;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_ILBC: pjmedia_audio_pt = 103;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_AMR: pjmedia_audio_pt = 104;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_AMRWB: pjmedia_audio_pt = 105;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_AMRWBE: pjmedia_audio_pt = 106;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_G726_16: pjmedia_audio_pt = 107;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_G726_24: pjmedia_audio_pt = 108;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_G726_32: pjmedia_audio_pt = 109;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_G726_40: pjmedia_audio_pt = 110;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_G722_1_16: pjmedia_audio_pt = 111;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_G722_1_24: pjmedia_audio_pt = 112;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_G722_1_32: pjmedia_audio_pt = 113;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_G7221C_24: pjmedia_audio_pt = 114;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_G7221C_32: pjmedia_audio_pt = 115;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_G7221C_48: pjmedia_audio_pt = 116;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_G7221_RSV1: pjmedia_audio_pt = 117;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_G7221_RSV2: pjmedia_audio_pt = 118;
pub const pjmedia_audio_pt_PJMEDIA_RTP_PT_OPUS: pjmedia_audio_pt = 119;
pub type pjmedia_audio_pt = ::std::os::raw::c_uint;
pub const pjmedia_video_pt_PJMEDIA_RTP_PT_VID_START: pjmedia_video_pt = 95;
pub const pjmedia_video_pt_PJMEDIA_RTP_PT_H263P: pjmedia_video_pt = 96;
pub const pjmedia_video_pt_PJMEDIA_RTP_PT_H264: pjmedia_video_pt = 97;
pub const pjmedia_video_pt_PJMEDIA_RTP_PT_H264_RSV1: pjmedia_video_pt = 98;
pub const pjmedia_video_pt_PJMEDIA_RTP_PT_H264_RSV2: pjmedia_video_pt = 99;
pub const pjmedia_video_pt_PJMEDIA_RTP_PT_H264_RSV3: pjmedia_video_pt = 100;
pub const pjmedia_video_pt_PJMEDIA_RTP_PT_H264_RSV4: pjmedia_video_pt = 101;
pub const pjmedia_video_pt_PJMEDIA_RTP_PT_VP8: pjmedia_video_pt = 102;
pub const pjmedia_video_pt_PJMEDIA_RTP_PT_VP9: pjmedia_video_pt = 103;
pub type pjmedia_video_pt = ::std::os::raw::c_uint;
extern "C" {
    pub fn pjmedia_codec_g711_init(endpt: *mut pjmedia_endpt) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_g711_deinit() -> pj_status_t;
}
pub const pjmedia_jb_frame_type_PJMEDIA_JB_MISSING_FRAME: pjmedia_jb_frame_type = 0;
pub const pjmedia_jb_frame_type_PJMEDIA_JB_NORMAL_FRAME: pjmedia_jb_frame_type = 1;
pub const pjmedia_jb_frame_type_PJMEDIA_JB_ZERO_PREFETCH_FRAME: pjmedia_jb_frame_type = 2;
pub const pjmedia_jb_frame_type_PJMEDIA_JB_ZERO_EMPTY_FRAME: pjmedia_jb_frame_type = 3;
pub type pjmedia_jb_frame_type = ::std::os::raw::c_uint;
pub const pjmedia_jb_discard_algo_PJMEDIA_JB_DISCARD_NONE: pjmedia_jb_discard_algo = 0;
pub const pjmedia_jb_discard_algo_PJMEDIA_JB_DISCARD_STATIC: pjmedia_jb_discard_algo = 1;
pub const pjmedia_jb_discard_algo_PJMEDIA_JB_DISCARD_PROGRESSIVE: pjmedia_jb_discard_algo = 2;
pub type pjmedia_jb_discard_algo = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_jb_state {
    pub frame_size: ::std::os::raw::c_uint,
    pub min_prefetch: ::std::os::raw::c_uint,
    pub max_prefetch: ::std::os::raw::c_uint,
    pub max_count: ::std::os::raw::c_uint,
    pub burst: ::std::os::raw::c_uint,
    pub prefetch: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
    pub avg_delay: ::std::os::raw::c_uint,
    pub min_delay: ::std::os::raw::c_uint,
    pub max_delay: ::std::os::raw::c_uint,
    pub dev_delay: ::std::os::raw::c_uint,
    pub avg_burst: ::std::os::raw::c_uint,
    pub lost: ::std::os::raw::c_uint,
    pub discard: ::std::os::raw::c_uint,
    pub empty: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjmedia_jb_state() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_jb_state>(),
        60usize,
        concat!("Size of: ", stringify!(pjmedia_jb_state))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_jb_state>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_jb_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_jb_state>())).frame_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_jb_state),
            "::",
            stringify!(frame_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_jb_state>())).min_prefetch as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_jb_state),
            "::",
            stringify!(min_prefetch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_jb_state>())).max_prefetch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_jb_state),
            "::",
            stringify!(max_prefetch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_jb_state>())).max_count as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_jb_state),
            "::",
            stringify!(max_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_jb_state>())).burst as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_jb_state),
            "::",
            stringify!(burst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_jb_state>())).prefetch as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_jb_state),
            "::",
            stringify!(prefetch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_jb_state>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_jb_state),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_jb_state>())).avg_delay as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_jb_state),
            "::",
            stringify!(avg_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_jb_state>())).min_delay as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_jb_state),
            "::",
            stringify!(min_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_jb_state>())).max_delay as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_jb_state),
            "::",
            stringify!(max_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_jb_state>())).dev_delay as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_jb_state),
            "::",
            stringify!(dev_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_jb_state>())).avg_burst as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_jb_state),
            "::",
            stringify!(avg_burst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_jb_state>())).lost as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_jb_state),
            "::",
            stringify!(lost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_jb_state>())).discard as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_jb_state),
            "::",
            stringify!(discard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_jb_state>())).empty as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_jb_state),
            "::",
            stringify!(empty)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_jbuf {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pjmedia_jbuf_create(
        pool: *mut pj_pool_t,
        name: *const pj_str_t,
        frame_size: ::std::os::raw::c_uint,
        ptime: ::std::os::raw::c_uint,
        max_count: ::std::os::raw::c_uint,
        p_jb: *mut *mut pjmedia_jbuf,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_jbuf_set_ptime(
        jb: *mut pjmedia_jbuf,
        ptime: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_jbuf_set_fixed(
        jb: *mut pjmedia_jbuf,
        prefetch: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_jbuf_set_adaptive(
        jb: *mut pjmedia_jbuf,
        prefetch: ::std::os::raw::c_uint,
        min_prefetch: ::std::os::raw::c_uint,
        max_prefetch: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_jbuf_set_discard(
        jb: *mut pjmedia_jbuf,
        algo: pjmedia_jb_discard_algo,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_jbuf_destroy(jb: *mut pjmedia_jbuf) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_jbuf_reset(jb: *mut pjmedia_jbuf) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_jbuf_put_frame(
        jb: *mut pjmedia_jbuf,
        frame: *const ::std::os::raw::c_void,
        size: pj_size_t,
        frame_seq: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pjmedia_jbuf_put_frame2(
        jb: *mut pjmedia_jbuf,
        frame: *const ::std::os::raw::c_void,
        size: pj_size_t,
        bit_info: pj_uint32_t,
        frame_seq: ::std::os::raw::c_int,
        discarded: *mut pj_bool_t,
    );
}
extern "C" {
    pub fn pjmedia_jbuf_put_frame3(
        jb: *mut pjmedia_jbuf,
        frame: *const ::std::os::raw::c_void,
        size: pj_size_t,
        bit_info: pj_uint32_t,
        frame_seq: ::std::os::raw::c_int,
        frame_ts: pj_uint32_t,
        discarded: *mut pj_bool_t,
    );
}
extern "C" {
    pub fn pjmedia_jbuf_get_frame(
        jb: *mut pjmedia_jbuf,
        frame: *mut ::std::os::raw::c_void,
        p_frm_type: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pjmedia_jbuf_get_frame2(
        jb: *mut pjmedia_jbuf,
        frame: *mut ::std::os::raw::c_void,
        size: *mut pj_size_t,
        p_frm_type: *mut ::std::os::raw::c_char,
        bit_info: *mut pj_uint32_t,
    );
}
extern "C" {
    pub fn pjmedia_jbuf_get_frame3(
        jb: *mut pjmedia_jbuf,
        frame: *mut ::std::os::raw::c_void,
        size: *mut pj_size_t,
        p_frm_type: *mut ::std::os::raw::c_char,
        bit_info: *mut pj_uint32_t,
        ts: *mut pj_uint32_t,
        seq: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pjmedia_jbuf_peek_frame(
        jb: *mut pjmedia_jbuf,
        offset: ::std::os::raw::c_uint,
        frame: *mut *const ::std::os::raw::c_void,
        size: *mut pj_size_t,
        p_frm_type: *mut ::std::os::raw::c_char,
        bit_info: *mut pj_uint32_t,
        ts: *mut pj_uint32_t,
        seq: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pjmedia_jbuf_remove_frame(
        jb: *mut pjmedia_jbuf,
        frame_cnt: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjmedia_jbuf_is_full(jb: *const pjmedia_jbuf) -> pj_bool_t;
}
extern "C" {
    pub fn pjmedia_jbuf_get_state(
        jb: *const pjmedia_jbuf,
        state: *mut pjmedia_jb_state,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_master_port {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pjmedia_master_port_create(
        pool: *mut pj_pool_t,
        u_port: *mut pjmedia_port,
        d_port: *mut pjmedia_port,
        options: ::std::os::raw::c_uint,
        p_m: *mut *mut pjmedia_master_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_master_port_start(m: *mut pjmedia_master_port) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_master_port_stop(m: *mut pjmedia_master_port) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_master_port_wait(
        m: *mut pjmedia_master_port,
        wait: pj_bool_t,
        ts: *mut pj_timestamp,
    ) -> pj_bool_t;
}
extern "C" {
    pub fn pjmedia_master_port_set_uport(
        m: *mut pjmedia_master_port,
        port: *mut pjmedia_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_master_port_get_uport(m: *mut pjmedia_master_port) -> *mut pjmedia_port;
}
extern "C" {
    pub fn pjmedia_master_port_set_dport(
        m: *mut pjmedia_master_port,
        port: *mut pjmedia_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_master_port_get_dport(m: *mut pjmedia_master_port) -> *mut pjmedia_port;
}
extern "C" {
    pub fn pjmedia_master_port_destroy(
        m: *mut pjmedia_master_port,
        destroy_ports: pj_bool_t,
    ) -> pj_status_t;
}
pub const pjmedia_mem_player_option_PJMEDIA_MEM_NO_LOOP: pjmedia_mem_player_option = 1;
pub type pjmedia_mem_player_option = ::std::os::raw::c_uint;
extern "C" {
    pub fn pjmedia_mem_player_create(
        pool: *mut pj_pool_t,
        buffer: *const ::std::os::raw::c_void,
        size: pj_size_t,
        clock_rate: ::std::os::raw::c_uint,
        channel_count: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        bits_per_sample: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        p_port: *mut *mut pjmedia_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_mem_player_set_eof_cb(
        port: *mut pjmedia_port,
        user_data: *mut ::std::os::raw::c_void,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                port: *mut pjmedia_port,
                usr_data: *mut ::std::os::raw::c_void,
            ) -> pj_status_t,
        >,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_mem_player_set_eof_cb2(
        port: *mut pjmedia_port,
        user_data: *mut ::std::os::raw::c_void,
        cb: ::std::option::Option<
            unsafe extern "C" fn(port: *mut pjmedia_port, usr_data: *mut ::std::os::raw::c_void),
        >,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_mem_capture_create(
        pool: *mut pj_pool_t,
        buffer: *mut ::std::os::raw::c_void,
        size: pj_size_t,
        clock_rate: ::std::os::raw::c_uint,
        channel_count: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        bits_per_sample: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        p_port: *mut *mut pjmedia_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_mem_capture_set_eof_cb(
        port: *mut pjmedia_port,
        user_data: *mut ::std::os::raw::c_void,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                port: *mut pjmedia_port,
                usr_data: *mut ::std::os::raw::c_void,
            ) -> pj_status_t,
        >,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_mem_capture_set_eof_cb2(
        port: *mut pjmedia_port,
        user_data: *mut ::std::os::raw::c_void,
        cb: ::std::option::Option<
            unsafe extern "C" fn(port: *mut pjmedia_port, usr_data: *mut ::std::os::raw::c_void),
        >,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_mem_capture_get_size(port: *mut pjmedia_port) -> pj_size_t;
}
extern "C" {
    pub fn pjmedia_null_port_create(
        pool: *mut pj_pool_t,
        sampling_rate: ::std::os::raw::c_uint,
        channel_count: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        bits_per_sample: ::std::os::raw::c_uint,
        p_port: *mut *mut pjmedia_port,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_plc {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pjmedia_plc_create(
        pool: *mut pj_pool_t,
        clock_rate: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        p_plc: *mut *mut pjmedia_plc,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_plc_save(plc: *mut pjmedia_plc, frame: *mut pj_int16_t) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_plc_generate(plc: *mut pjmedia_plc, frame: *mut pj_int16_t) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_resample {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pjmedia_resample_create(
        pool: *mut pj_pool_t,
        high_quality: pj_bool_t,
        large_filter: pj_bool_t,
        channel_count: ::std::os::raw::c_uint,
        rate_in: ::std::os::raw::c_uint,
        rate_out: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        p_resample: *mut *mut pjmedia_resample,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_resample_run(
        resample: *mut pjmedia_resample,
        input: *const pj_int16_t,
        output: *mut pj_int16_t,
    );
}
extern "C" {
    pub fn pjmedia_resample_get_input_size(
        resample: *mut pjmedia_resample,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjmedia_resample_destroy(resample: *mut pjmedia_resample);
}
pub const pjmedia_resample_port_options_PJMEDIA_RESAMPLE_USE_LINEAR: pjmedia_resample_port_options =
    1;
pub const pjmedia_resample_port_options_PJMEDIA_RESAMPLE_USE_SMALL_FILTER:
    pjmedia_resample_port_options = 2;
pub const pjmedia_resample_port_options_PJMEDIA_RESAMPLE_DONT_DESTROY_DN:
    pjmedia_resample_port_options = 4;
pub type pjmedia_resample_port_options = ::std::os::raw::c_uint;
extern "C" {
    pub fn pjmedia_resample_port_create(
        pool: *mut pj_pool_t,
        dn_port: *mut pjmedia_port,
        clock_rate: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        p_port: *mut *mut pjmedia_port,
    ) -> pj_status_t;
}
pub const pjmedia_sdp_neg_state_PJMEDIA_SDP_NEG_STATE_NULL: pjmedia_sdp_neg_state = 0;
pub const pjmedia_sdp_neg_state_PJMEDIA_SDP_NEG_STATE_LOCAL_OFFER: pjmedia_sdp_neg_state = 1;
pub const pjmedia_sdp_neg_state_PJMEDIA_SDP_NEG_STATE_REMOTE_OFFER: pjmedia_sdp_neg_state = 2;
pub const pjmedia_sdp_neg_state_PJMEDIA_SDP_NEG_STATE_WAIT_NEGO: pjmedia_sdp_neg_state = 3;
pub const pjmedia_sdp_neg_state_PJMEDIA_SDP_NEG_STATE_DONE: pjmedia_sdp_neg_state = 4;
pub type pjmedia_sdp_neg_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_neg {
    _unused: [u8; 0],
}
pub const pjmedia_mod_offer_flag_PJMEDIA_SDP_NEG_ALLOW_MEDIA_CHANGE: pjmedia_mod_offer_flag = 1;
pub type pjmedia_mod_offer_flag = ::std::os::raw::c_uint;
extern "C" {
    pub fn pjmedia_sdp_neg_state_str(state: pjmedia_sdp_neg_state)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pjmedia_sdp_neg_create_w_local_offer(
        pool: *mut pj_pool_t,
        local: *const pjmedia_sdp_session,
        p_neg: *mut *mut pjmedia_sdp_neg,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_neg_create_w_remote_offer(
        pool: *mut pj_pool_t,
        initial: *const pjmedia_sdp_session,
        remote: *const pjmedia_sdp_session,
        p_neg: *mut *mut pjmedia_sdp_neg,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_neg_set_prefer_remote_codec_order(
        neg: *mut pjmedia_sdp_neg,
        prefer_remote: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_neg_set_answer_multiple_codecs(
        neg: *mut pjmedia_sdp_neg,
        answer_multiple: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_neg_get_state(neg: *mut pjmedia_sdp_neg) -> pjmedia_sdp_neg_state;
}
extern "C" {
    pub fn pjmedia_sdp_neg_get_active_local(
        neg: *mut pjmedia_sdp_neg,
        local: *mut *const pjmedia_sdp_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_neg_get_active_remote(
        neg: *mut pjmedia_sdp_neg,
        remote: *mut *const pjmedia_sdp_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_neg_was_answer_remote(neg: *mut pjmedia_sdp_neg) -> pj_bool_t;
}
extern "C" {
    pub fn pjmedia_sdp_neg_get_neg_remote(
        neg: *mut pjmedia_sdp_neg,
        remote: *mut *const pjmedia_sdp_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_neg_get_neg_local(
        neg: *mut pjmedia_sdp_neg,
        local: *mut *const pjmedia_sdp_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_neg_modify_local_offer(
        pool: *mut pj_pool_t,
        neg: *mut pjmedia_sdp_neg,
        local: *const pjmedia_sdp_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_neg_modify_local_offer2(
        pool: *mut pj_pool_t,
        neg: *mut pjmedia_sdp_neg,
        flags: ::std::os::raw::c_uint,
        local: *const pjmedia_sdp_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_neg_send_local_offer(
        pool: *mut pj_pool_t,
        neg: *mut pjmedia_sdp_neg,
        offer: *mut *const pjmedia_sdp_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_neg_set_remote_answer(
        pool: *mut pj_pool_t,
        neg: *mut pjmedia_sdp_neg,
        remote: *const pjmedia_sdp_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_neg_set_remote_offer(
        pool: *mut pj_pool_t,
        neg: *mut pjmedia_sdp_neg,
        remote: *const pjmedia_sdp_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_neg_set_local_answer(
        pool: *mut pj_pool_t,
        neg: *mut pjmedia_sdp_neg,
        local: *const pjmedia_sdp_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_neg_has_local_answer(neg: *mut pjmedia_sdp_neg) -> pj_bool_t;
}
extern "C" {
    pub fn pjmedia_sdp_neg_cancel_offer(neg: *mut pjmedia_sdp_neg) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_neg_negotiate(
        pool: *mut pj_pool_t,
        neg: *mut pjmedia_sdp_neg,
        allow_asym: pj_bool_t,
    ) -> pj_status_t;
}
pub const pjmedia_sdp_neg_fmt_match_flag_PJMEDIA_SDP_NEG_FMT_MATCH_ALLOW_MODIFY_ANSWER:
    pjmedia_sdp_neg_fmt_match_flag = 1;
pub type pjmedia_sdp_neg_fmt_match_flag = ::std::os::raw::c_uint;
pub type pjmedia_sdp_neg_fmt_match_cb = ::std::option::Option<
    unsafe extern "C" fn(
        pool: *mut pj_pool_t,
        offer: *mut pjmedia_sdp_media,
        o_fmt_idx: ::std::os::raw::c_uint,
        answer: *mut pjmedia_sdp_media,
        a_fmt_idx: ::std::os::raw::c_uint,
        option: ::std::os::raw::c_uint,
    ) -> pj_status_t,
>;
extern "C" {
    pub fn pjmedia_sdp_neg_register_fmt_match_cb(
        fmt_name: *const pj_str_t,
        cb: pjmedia_sdp_neg_fmt_match_cb,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_sdp_neg_fmt_match(
        pool: *mut pj_pool_t,
        offer: *mut pjmedia_sdp_media,
        o_fmt_idx: ::std::os::raw::c_uint,
        answer: *mut pjmedia_sdp_media,
        a_fmt_idx: ::std::os::raw::c_uint,
        option: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_silence_det {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pjmedia_silence_det_create(
        pool: *mut pj_pool_t,
        clock_rate: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        p_sd: *mut *mut pjmedia_silence_det,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_silence_det_set_name(
        sd: *mut pjmedia_silence_det,
        name: *const ::std::os::raw::c_char,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_silence_det_set_fixed(
        sd: *mut pjmedia_silence_det,
        threshold: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_silence_det_set_adaptive(
        sd: *mut pjmedia_silence_det,
        threshold: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_silence_det_set_params(
        sd: *mut pjmedia_silence_det,
        before_silence: ::std::os::raw::c_int,
        recalc_time1: ::std::os::raw::c_int,
        recalc_time2: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_silence_det_disable(sd: *mut pjmedia_silence_det) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_silence_det_detect(
        sd: *mut pjmedia_silence_det,
        samples: *const pj_int16_t,
        count: pj_size_t,
        p_level: *mut pj_int32_t,
    ) -> pj_bool_t;
}
extern "C" {
    pub fn pjmedia_calc_avg_signal(samples: *const pj_int16_t, count: pj_size_t) -> pj_int32_t;
}
extern "C" {
    pub fn pjmedia_silence_det_apply(sd: *mut pjmedia_silence_det, level: pj_uint32_t)
        -> pj_bool_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_snd_stream {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_snd_dev_info {
    pub name: [::std::os::raw::c_char; 64usize],
    pub input_count: ::std::os::raw::c_uint,
    pub output_count: ::std::os::raw::c_uint,
    pub default_samples_per_sec: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjmedia_snd_dev_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_snd_dev_info>(),
        76usize,
        concat!("Size of: ", stringify!(pjmedia_snd_dev_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_snd_dev_info>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_snd_dev_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_snd_dev_info>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_snd_dev_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_snd_dev_info>())).input_count as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_snd_dev_info),
            "::",
            stringify!(input_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_snd_dev_info>())).output_count as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_snd_dev_info),
            "::",
            stringify!(output_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_snd_dev_info>())).default_samples_per_sec as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_snd_dev_info),
            "::",
            stringify!(default_samples_per_sec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_snd_stream_info {
    pub dir: pjmedia_dir,
    pub play_id: ::std::os::raw::c_int,
    pub rec_id: ::std::os::raw::c_int,
    pub clock_rate: ::std::os::raw::c_uint,
    pub channel_count: ::std::os::raw::c_uint,
    pub samples_per_frame: ::std::os::raw::c_uint,
    pub bits_per_sample: ::std::os::raw::c_uint,
    pub rec_latency: ::std::os::raw::c_uint,
    pub play_latency: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjmedia_snd_stream_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_snd_stream_info>(),
        36usize,
        concat!("Size of: ", stringify!(pjmedia_snd_stream_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_snd_stream_info>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_snd_stream_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_snd_stream_info>())).dir as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_snd_stream_info),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_snd_stream_info>())).play_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_snd_stream_info),
            "::",
            stringify!(play_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_snd_stream_info>())).rec_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_snd_stream_info),
            "::",
            stringify!(rec_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_snd_stream_info>())).clock_rate as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_snd_stream_info),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_snd_stream_info>())).channel_count as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_snd_stream_info),
            "::",
            stringify!(channel_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_snd_stream_info>())).samples_per_frame as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_snd_stream_info),
            "::",
            stringify!(samples_per_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_snd_stream_info>())).bits_per_sample as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_snd_stream_info),
            "::",
            stringify!(bits_per_sample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_snd_stream_info>())).rec_latency as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_snd_stream_info),
            "::",
            stringify!(rec_latency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_snd_stream_info>())).play_latency as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_snd_stream_info),
            "::",
            stringify!(play_latency)
        )
    );
}
pub type pjmedia_snd_play_cb = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        timestamp: pj_uint32_t,
        output: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
    ) -> pj_status_t,
>;
pub type pjmedia_snd_rec_cb = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        timestamp: pj_uint32_t,
        input: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
    ) -> pj_status_t,
>;
extern "C" {
    pub fn pjmedia_snd_get_dev_info(index: ::std::os::raw::c_uint) -> *const pjmedia_snd_dev_info;
}
extern "C" {
    pub fn pjmedia_snd_set_latency(
        input_latency: ::std::os::raw::c_uint,
        output_latency: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_snd_open(
        rec_id: ::std::os::raw::c_int,
        play_id: ::std::os::raw::c_int,
        clock_rate: ::std::os::raw::c_uint,
        channel_count: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        bits_per_sample: ::std::os::raw::c_uint,
        rec_cb: pjmedia_snd_rec_cb,
        play_cb: pjmedia_snd_play_cb,
        user_data: *mut ::std::os::raw::c_void,
        p_snd_strm: *mut *mut pjmedia_snd_stream,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_snd_open_rec(
        index: ::std::os::raw::c_int,
        clock_rate: ::std::os::raw::c_uint,
        channel_count: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        bits_per_sample: ::std::os::raw::c_uint,
        rec_cb: pjmedia_snd_rec_cb,
        user_data: *mut ::std::os::raw::c_void,
        p_snd_strm: *mut *mut pjmedia_snd_stream,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_snd_open_player(
        index: ::std::os::raw::c_int,
        clock_rate: ::std::os::raw::c_uint,
        channel_count: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        bits_per_sample: ::std::os::raw::c_uint,
        play_cb: pjmedia_snd_play_cb,
        user_data: *mut ::std::os::raw::c_void,
        p_snd_strm: *mut *mut pjmedia_snd_stream,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_snd_stream_get_info(
        strm: *mut pjmedia_snd_stream,
        pi: *mut pjmedia_snd_stream_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_snd_stream_start(stream: *mut pjmedia_snd_stream) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_snd_stream_stop(stream: *mut pjmedia_snd_stream) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_snd_stream_close(stream: *mut pjmedia_snd_stream) -> pj_status_t;
}
pub const pjmedia_snd_port_option_PJMEDIA_SND_PORT_NO_AUTO_START: pjmedia_snd_port_option = 1;
pub type pjmedia_snd_port_option = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_snd_port_param {
    pub base: pjmedia_aud_param,
    pub options: ::std::os::raw::c_uint,
    pub ec_options: ::std::os::raw::c_uint,
    pub user_data: *mut ::std::os::raw::c_void,
    pub on_play_frame: pjmedia_aud_play_cb,
    pub on_rec_frame: pjmedia_aud_rec_cb,
}
#[test]
fn bindgen_test_layout_pjmedia_snd_port_param() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_snd_port_param>(),
        144usize,
        concat!("Size of: ", stringify!(pjmedia_snd_port_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_snd_port_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_snd_port_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_snd_port_param>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_snd_port_param),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_snd_port_param>())).options as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_snd_port_param),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_snd_port_param>())).ec_options as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_snd_port_param),
            "::",
            stringify!(ec_options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_snd_port_param>())).user_data as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_snd_port_param),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_snd_port_param>())).on_play_frame as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_snd_port_param),
            "::",
            stringify!(on_play_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_snd_port_param>())).on_rec_frame as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_snd_port_param),
            "::",
            stringify!(on_rec_frame)
        )
    );
}
extern "C" {
    pub fn pjmedia_snd_port_param_default(prm: *mut pjmedia_snd_port_param);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_snd_port {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pjmedia_snd_port_create(
        pool: *mut pj_pool_t,
        rec_id: ::std::os::raw::c_int,
        play_id: ::std::os::raw::c_int,
        clock_rate: ::std::os::raw::c_uint,
        channel_count: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        bits_per_sample: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        p_port: *mut *mut pjmedia_snd_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_snd_port_create_rec(
        pool: *mut pj_pool_t,
        index: ::std::os::raw::c_int,
        clock_rate: ::std::os::raw::c_uint,
        channel_count: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        bits_per_sample: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        p_port: *mut *mut pjmedia_snd_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_snd_port_create_player(
        pool: *mut pj_pool_t,
        index: ::std::os::raw::c_int,
        clock_rate: ::std::os::raw::c_uint,
        channel_count: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        bits_per_sample: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        p_port: *mut *mut pjmedia_snd_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_snd_port_create2(
        pool: *mut pj_pool_t,
        prm: *const pjmedia_snd_port_param,
        p_port: *mut *mut pjmedia_snd_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_snd_port_destroy(snd_port: *mut pjmedia_snd_port) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_snd_port_get_snd_stream(
        snd_port: *mut pjmedia_snd_port,
    ) -> *mut pjmedia_aud_stream;
}
extern "C" {
    pub fn pjmedia_snd_port_set_ec(
        snd_port: *mut pjmedia_snd_port,
        pool: *mut pj_pool_t,
        tail_ms: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_snd_port_get_ec_tail(
        snd_port: *mut pjmedia_snd_port,
        p_length: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_snd_port_get_ec_stat(
        snd_port: *mut pjmedia_snd_port,
        p_stat: *mut pjmedia_echo_stat,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_snd_port_get_clock_src(
        snd_port: *mut pjmedia_snd_port,
        dir: pjmedia_dir,
    ) -> *mut pjmedia_clock_src;
}
extern "C" {
    pub fn pjmedia_snd_port_connect(
        snd_port: *mut pjmedia_snd_port,
        port: *mut pjmedia_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_snd_port_get_port(snd_port: *mut pjmedia_snd_port) -> *mut pjmedia_port;
}
extern "C" {
    pub fn pjmedia_snd_port_disconnect(snd_port: *mut pjmedia_snd_port) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_splitcomb_create(
        pool: *mut pj_pool_t,
        clock_rate: ::std::os::raw::c_uint,
        channel_count: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        bits_per_sample: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        p_splitcomb: *mut *mut pjmedia_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_splitcomb_set_channel(
        splitcomb: *mut pjmedia_port,
        ch_num: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        port: *mut pjmedia_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_splitcomb_create_rev_channel(
        pool: *mut pj_pool_t,
        splitcomb: *mut pjmedia_port,
        ch_num: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        p_chport: *mut *mut pjmedia_port,
    ) -> pj_status_t;
}
pub const pjmedia_stereo_port_options_PJMEDIA_STEREO_DONT_DESTROY_DN: pjmedia_stereo_port_options =
    4;
pub type pjmedia_stereo_port_options = ::std::os::raw::c_uint;
extern "C" {
    pub fn pjmedia_stereo_port_create(
        pool: *mut pj_pool_t,
        dn_port: *mut pjmedia_port,
        channel_count: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        p_port: *mut *mut pjmedia_port,
    ) -> pj_status_t;
}
pub const pjmedia_vid_packing_PJMEDIA_VID_PACKING_UNKNOWN: pjmedia_vid_packing = 0;
pub const pjmedia_vid_packing_PJMEDIA_VID_PACKING_PACKETS: pjmedia_vid_packing = 1;
pub const pjmedia_vid_packing_PJMEDIA_VID_PACKING_WHOLE: pjmedia_vid_packing = 2;
pub type pjmedia_vid_packing = ::std::os::raw::c_uint;
pub const pjmedia_vid_frm_bit_info_PJMEDIA_VID_FRM_KEYFRAME: pjmedia_vid_frm_bit_info = 1;
pub type pjmedia_vid_frm_bit_info = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_encode_opt {
    pub force_keyframe: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_encode_opt() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_encode_opt>(),
        4usize,
        concat!("Size of: ", stringify!(pjmedia_vid_encode_opt))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_encode_opt>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_encode_opt))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_encode_opt>())).force_keyframe as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_encode_opt),
            "::",
            stringify!(force_keyframe)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_codec_info {
    pub fmt_id: pjmedia_format_id,
    pub pt: ::std::os::raw::c_uint,
    pub encoding_name: pj_str_t,
    pub encoding_desc: pj_str_t,
    pub clock_rate: ::std::os::raw::c_uint,
    pub dir: pjmedia_dir,
    pub dec_fmt_id_cnt: ::std::os::raw::c_uint,
    pub dec_fmt_id: [pjmedia_format_id; 8usize],
    pub packings: ::std::os::raw::c_uint,
    pub fps_cnt: ::std::os::raw::c_uint,
    pub fps: [pjmedia_ratio; 16usize],
}
#[test]
fn bindgen_test_layout_pjmedia_vid_codec_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_codec_info>(),
        224usize,
        concat!("Size of: ", stringify!(pjmedia_vid_codec_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_codec_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_codec_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_info>())).fmt_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_info),
            "::",
            stringify!(fmt_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_info>())).pt as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_info),
            "::",
            stringify!(pt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_codec_info>())).encoding_name as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_info),
            "::",
            stringify!(encoding_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_codec_info>())).encoding_desc as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_info),
            "::",
            stringify!(encoding_desc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_codec_info>())).clock_rate as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_info),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_info>())).dir as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_info),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_codec_info>())).dec_fmt_id_cnt as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_info),
            "::",
            stringify!(dec_fmt_id_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_codec_info>())).dec_fmt_id as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_info),
            "::",
            stringify!(dec_fmt_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_info>())).packings as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_info),
            "::",
            stringify!(packings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_info>())).fps_cnt as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_info),
            "::",
            stringify!(fps_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_info>())).fps as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_info),
            "::",
            stringify!(fps)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_vid_codec_param {
    pub dir: pjmedia_dir,
    pub packing: pjmedia_vid_packing,
    pub enc_fmt: pjmedia_format,
    pub enc_fmtp: pjmedia_codec_fmtp,
    pub enc_mtu: ::std::os::raw::c_uint,
    pub dec_fmt: pjmedia_format,
    pub dec_fmtp: pjmedia_codec_fmtp,
    pub ignore_fmtp: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_codec_param() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_codec_param>(),
        1136usize,
        concat!("Size of: ", stringify!(pjmedia_vid_codec_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_codec_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_codec_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_param>())).dir as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_param),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_param>())).packing as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_param),
            "::",
            stringify!(packing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_param>())).enc_fmt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_param),
            "::",
            stringify!(enc_fmt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_codec_param>())).enc_fmtp as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_param),
            "::",
            stringify!(enc_fmtp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_param>())).enc_mtu as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_param),
            "::",
            stringify!(enc_mtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_param>())).dec_fmt as *const _ as usize },
        572usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_param),
            "::",
            stringify!(dec_fmt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_codec_param>())).dec_fmtp as *const _ as usize
        },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_param),
            "::",
            stringify!(dec_fmtp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_codec_param>())).ignore_fmtp as *const _ as usize
        },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_param),
            "::",
            stringify!(ignore_fmtp)
        )
    );
}
extern "C" {
    pub fn pjmedia_vid_codec_param_clone(
        pool: *mut pj_pool_t,
        src: *const pjmedia_vid_codec_param,
    ) -> *mut pjmedia_vid_codec_param;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_codec_op {
    pub init: ::std::option::Option<
        unsafe extern "C" fn(codec: *mut pjmedia_vid_codec, pool: *mut pj_pool_t) -> pj_status_t,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_vid_codec,
            param: *mut pjmedia_vid_codec_param,
        ) -> pj_status_t,
    >,
    pub close:
        ::std::option::Option<unsafe extern "C" fn(codec: *mut pjmedia_vid_codec) -> pj_status_t>,
    pub modify: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_vid_codec,
            param: *const pjmedia_vid_codec_param,
        ) -> pj_status_t,
    >,
    pub get_param: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_vid_codec,
            param: *mut pjmedia_vid_codec_param,
        ) -> pj_status_t,
    >,
    pub encode_begin: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_vid_codec,
            opt: *const pjmedia_vid_encode_opt,
            input: *const pjmedia_frame,
            out_size: ::std::os::raw::c_uint,
            output: *mut pjmedia_frame,
            has_more: *mut pj_bool_t,
        ) -> pj_status_t,
    >,
    pub encode_more: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_vid_codec,
            out_size: ::std::os::raw::c_uint,
            output: *mut pjmedia_frame,
            has_more: *mut pj_bool_t,
        ) -> pj_status_t,
    >,
    pub decode: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_vid_codec,
            count: pj_size_t,
            packets: *mut pjmedia_frame,
            out_size: ::std::os::raw::c_uint,
            output: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
    pub recover: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_vid_codec,
            out_size: ::std::os::raw::c_uint,
            output: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_codec_op() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_codec_op>(),
        72usize,
        concat!("Size of: ", stringify!(pjmedia_vid_codec_op))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_codec_op>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_codec_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_op>())).init as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_op),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_op>())).open as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_op),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_op>())).close as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_op),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_op>())).modify as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_op),
            "::",
            stringify!(modify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_op>())).get_param as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_op),
            "::",
            stringify!(get_param)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_codec_op>())).encode_begin as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_op),
            "::",
            stringify!(encode_begin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_codec_op>())).encode_more as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_op),
            "::",
            stringify!(encode_more)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_op>())).decode as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_op),
            "::",
            stringify!(decode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_op>())).recover as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_op),
            "::",
            stringify!(recover)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_codec {
    pub prev: *mut pjmedia_vid_codec,
    pub next: *mut pjmedia_vid_codec,
    pub codec_data: *mut ::std::os::raw::c_void,
    pub factory: *mut pjmedia_vid_codec_factory,
    pub op: *mut pjmedia_vid_codec_op,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_codec() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_codec>(),
        40usize,
        concat!("Size of: ", stringify!(pjmedia_vid_codec))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_codec>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_codec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec>())).codec_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec),
            "::",
            stringify!(codec_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec>())).factory as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec),
            "::",
            stringify!(factory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec>())).op as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec),
            "::",
            stringify!(op)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_codec_factory_op {
    pub test_alloc: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_vid_codec_factory,
            info: *const pjmedia_vid_codec_info,
        ) -> pj_status_t,
    >,
    pub default_attr: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_vid_codec_factory,
            info: *const pjmedia_vid_codec_info,
            attr: *mut pjmedia_vid_codec_param,
        ) -> pj_status_t,
    >,
    pub enum_info: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_vid_codec_factory,
            count: *mut ::std::os::raw::c_uint,
            codecs: *mut pjmedia_vid_codec_info,
        ) -> pj_status_t,
    >,
    pub alloc_codec: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_vid_codec_factory,
            info: *const pjmedia_vid_codec_info,
            p_codec: *mut *mut pjmedia_vid_codec,
        ) -> pj_status_t,
    >,
    pub dealloc_codec: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_vid_codec_factory,
            codec: *mut pjmedia_vid_codec,
        ) -> pj_status_t,
    >,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_codec_factory_op() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_codec_factory_op>(),
        40usize,
        concat!("Size of: ", stringify!(pjmedia_vid_codec_factory_op))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_codec_factory_op>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_codec_factory_op))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_codec_factory_op>())).test_alloc as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_factory_op),
            "::",
            stringify!(test_alloc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_codec_factory_op>())).default_attr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_factory_op),
            "::",
            stringify!(default_attr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_codec_factory_op>())).enum_info as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_factory_op),
            "::",
            stringify!(enum_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_codec_factory_op>())).alloc_codec as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_factory_op),
            "::",
            stringify!(alloc_codec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_codec_factory_op>())).dealloc_codec as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_factory_op),
            "::",
            stringify!(dealloc_codec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_codec_factory {
    pub prev: *mut pjmedia_vid_codec_factory,
    pub next: *mut pjmedia_vid_codec_factory,
    pub factory_data: *mut ::std::os::raw::c_void,
    pub op: *mut pjmedia_vid_codec_factory_op,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_codec_factory() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_codec_factory>(),
        32usize,
        concat!("Size of: ", stringify!(pjmedia_vid_codec_factory))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_codec_factory>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_codec_factory))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_factory>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_factory),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_factory>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_factory),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_codec_factory>())).factory_data as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_factory),
            "::",
            stringify!(factory_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_codec_factory>())).op as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_codec_factory),
            "::",
            stringify!(op)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_codec_mgr {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pjmedia_vid_codec_mgr_create(
        pool: *mut pj_pool_t,
        mgr: *mut *mut pjmedia_vid_codec_mgr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_codec_mgr_destroy(mgr: *mut pjmedia_vid_codec_mgr) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_codec_mgr_instance() -> *mut pjmedia_vid_codec_mgr;
}
extern "C" {
    pub fn pjmedia_vid_codec_mgr_set_instance(mgr: *mut pjmedia_vid_codec_mgr);
}
extern "C" {
    pub fn pjmedia_vid_codec_mgr_register_factory(
        mgr: *mut pjmedia_vid_codec_mgr,
        factory: *mut pjmedia_vid_codec_factory,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_codec_mgr_unregister_factory(
        mgr: *mut pjmedia_vid_codec_mgr,
        factory: *mut pjmedia_vid_codec_factory,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_codec_mgr_enum_codecs(
        mgr: *mut pjmedia_vid_codec_mgr,
        count: *mut ::std::os::raw::c_uint,
        info: *mut pjmedia_vid_codec_info,
        prio: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_codec_mgr_get_codec_info(
        mgr: *mut pjmedia_vid_codec_mgr,
        pt: ::std::os::raw::c_uint,
        info: *mut *const pjmedia_vid_codec_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_codec_mgr_get_codec_info2(
        mgr: *mut pjmedia_vid_codec_mgr,
        fmt_id: pjmedia_format_id,
        info: *mut *const pjmedia_vid_codec_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_codec_info_to_id(
        info: *const pjmedia_vid_codec_info,
        id: *mut ::std::os::raw::c_char,
        max_len: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pjmedia_vid_codec_mgr_find_codecs_by_id(
        mgr: *mut pjmedia_vid_codec_mgr,
        codec_id: *const pj_str_t,
        count: *mut ::std::os::raw::c_uint,
        p_info: *mut *const pjmedia_vid_codec_info,
        prio: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_codec_mgr_set_codec_priority(
        mgr: *mut pjmedia_vid_codec_mgr,
        codec_id: *const pj_str_t,
        prio: pj_uint8_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_codec_mgr_get_default_param(
        mgr: *mut pjmedia_vid_codec_mgr,
        info: *const pjmedia_vid_codec_info,
        param: *mut pjmedia_vid_codec_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_codec_mgr_set_default_param(
        mgr: *mut pjmedia_vid_codec_mgr,
        info: *const pjmedia_vid_codec_info,
        param: *const pjmedia_vid_codec_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_codec_mgr_alloc_codec(
        mgr: *mut pjmedia_vid_codec_mgr,
        info: *const pjmedia_vid_codec_info,
        p_codec: *mut *mut pjmedia_vid_codec,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_codec_mgr_dealloc_codec(
        mgr: *mut pjmedia_vid_codec_mgr,
        codec: *mut pjmedia_vid_codec,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_stream_rtp_sess_info {
    pub rx_rtp: *const pjmedia_rtp_session,
    pub tx_rtp: *const pjmedia_rtp_session,
    pub rtcp: *const pjmedia_rtcp_session,
}
#[test]
fn bindgen_test_layout_pjmedia_stream_rtp_sess_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_stream_rtp_sess_info>(),
        24usize,
        concat!("Size of: ", stringify!(pjmedia_stream_rtp_sess_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_stream_rtp_sess_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_stream_rtp_sess_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_stream_rtp_sess_info>())).rx_rtp as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_rtp_sess_info),
            "::",
            stringify!(rx_rtp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_stream_rtp_sess_info>())).tx_rtp as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_rtp_sess_info),
            "::",
            stringify!(tx_rtp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_stream_rtp_sess_info>())).rtcp as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_rtp_sess_info),
            "::",
            stringify!(rtcp)
        )
    );
}
extern "C" {
    pub fn pjmedia_stream_info_parse_fmtp(
        pool: *mut pj_pool_t,
        m: *const pjmedia_sdp_media,
        pt: ::std::os::raw::c_uint,
        fmtp: *mut pjmedia_codec_fmtp,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_channel {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_stream_info {
    pub type_: pjmedia_type,
    pub proto: pjmedia_tp_proto,
    pub dir: pjmedia_dir,
    pub rem_addr: pj_sockaddr,
    pub rem_rtcp: pj_sockaddr,
    pub rtcp_mux: pj_bool_t,
    pub loc_rtcp_fb: pjmedia_rtcp_fb_info,
    pub rem_rtcp_fb: pjmedia_rtcp_fb_info,
    pub fmt: pjmedia_codec_info,
    pub param: *mut pjmedia_codec_param,
    pub tx_pt: ::std::os::raw::c_uint,
    pub rx_pt: ::std::os::raw::c_uint,
    pub tx_maxptime: ::std::os::raw::c_uint,
    pub tx_event_pt: ::std::os::raw::c_int,
    pub rx_event_pt: ::std::os::raw::c_int,
    pub ssrc: pj_uint32_t,
    pub cname: pj_str_t,
    pub has_rem_ssrc: pj_bool_t,
    pub rem_ssrc: pj_uint32_t,
    pub rem_cname: pj_str_t,
    pub rtp_ts: pj_uint32_t,
    pub rtp_seq: pj_uint16_t,
    pub rtp_seq_ts_set: pj_uint8_t,
    pub jb_init: ::std::os::raw::c_int,
    pub jb_min_pre: ::std::os::raw::c_int,
    pub jb_max_pre: ::std::os::raw::c_int,
    pub jb_max: ::std::os::raw::c_int,
    pub jb_discard_algo: pjmedia_jb_discard_algo,
    pub rtcp_sdes_bye_disabled: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjmedia_stream_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_stream_info>(),
        2016usize,
        concat!("Size of: ", stringify!(pjmedia_stream_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_stream_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_stream_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).proto as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).dir as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).rem_addr as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(rem_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).rem_rtcp as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(rem_rtcp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).rtcp_mux as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(rtcp_mux)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).loc_rtcp_fb as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(loc_rtcp_fb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).rem_rtcp_fb as *const _ as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(rem_rtcp_fb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).fmt as *const _ as usize },
        1880usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(fmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).param as *const _ as usize },
        1912usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).tx_pt as *const _ as usize },
        1920usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(tx_pt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).rx_pt as *const _ as usize },
        1924usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(rx_pt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).tx_maxptime as *const _ as usize },
        1928usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(tx_maxptime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).tx_event_pt as *const _ as usize },
        1932usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(tx_event_pt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).rx_event_pt as *const _ as usize },
        1936usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(rx_event_pt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).ssrc as *const _ as usize },
        1940usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(ssrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).cname as *const _ as usize },
        1944usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(cname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_stream_info>())).has_rem_ssrc as *const _ as usize
        },
        1960usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(has_rem_ssrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).rem_ssrc as *const _ as usize },
        1964usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(rem_ssrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).rem_cname as *const _ as usize },
        1968usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(rem_cname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).rtp_ts as *const _ as usize },
        1984usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(rtp_ts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).rtp_seq as *const _ as usize },
        1988usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(rtp_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_stream_info>())).rtp_seq_ts_set as *const _ as usize
        },
        1990usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(rtp_seq_ts_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).jb_init as *const _ as usize },
        1992usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(jb_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).jb_min_pre as *const _ as usize },
        1996usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(jb_min_pre)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).jb_max_pre as *const _ as usize },
        2000usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(jb_max_pre)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_info>())).jb_max as *const _ as usize },
        2004usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(jb_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_stream_info>())).jb_discard_algo as *const _ as usize
        },
        2008usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(jb_discard_algo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_stream_info>())).rtcp_sdes_bye_disabled as *const _
                as usize
        },
        2012usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_info),
            "::",
            stringify!(rtcp_sdes_bye_disabled)
        )
    );
}
pub const pjmedia_stream_dtmf_event_flags_PJMEDIA_STREAM_DTMF_IS_UPDATE:
    pjmedia_stream_dtmf_event_flags = 1;
pub const pjmedia_stream_dtmf_event_flags_PJMEDIA_STREAM_DTMF_IS_END:
    pjmedia_stream_dtmf_event_flags = 2;
pub type pjmedia_stream_dtmf_event_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_stream_dtmf_event {
    pub digit: ::std::os::raw::c_int,
    pub timestamp: pj_uint32_t,
    pub duration: pj_uint16_t,
    pub flags: pj_uint16_t,
}
#[test]
fn bindgen_test_layout_pjmedia_stream_dtmf_event() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_stream_dtmf_event>(),
        12usize,
        concat!("Size of: ", stringify!(pjmedia_stream_dtmf_event))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_stream_dtmf_event>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_stream_dtmf_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_dtmf_event>())).digit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_dtmf_event),
            "::",
            stringify!(digit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_stream_dtmf_event>())).timestamp as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_dtmf_event),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_stream_dtmf_event>())).duration as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_dtmf_event),
            "::",
            stringify!(duration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_stream_dtmf_event>())).flags as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_stream_dtmf_event),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn pjmedia_stream_info_from_sdp(
        si: *mut pjmedia_stream_info,
        pool: *mut pj_pool_t,
        endpt: *mut pjmedia_endpt,
        local: *const pjmedia_sdp_session,
        remote: *const pjmedia_sdp_session,
        stream_idx: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_stream_create(
        endpt: *mut pjmedia_endpt,
        pool: *mut pj_pool_t,
        info: *const pjmedia_stream_info,
        tp: *mut pjmedia_transport,
        user_data: *mut ::std::os::raw::c_void,
        p_stream: *mut *mut pjmedia_stream,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_stream_destroy(stream: *mut pjmedia_stream) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_stream_get_last_jb_frame_type(
        stream: *mut pjmedia_stream,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn pjmedia_stream_get_port(
        stream: *mut pjmedia_stream,
        p_port: *mut *mut pjmedia_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_stream_get_transport(st: *mut pjmedia_stream) -> *mut pjmedia_transport;
}
extern "C" {
    pub fn pjmedia_stream_start(stream: *mut pjmedia_stream) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_stream_get_info(
        stream: *const pjmedia_stream,
        info: *mut pjmedia_stream_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_stream_get_stat(
        stream: *const pjmedia_stream,
        stat: *mut pjmedia_rtcp_stat,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_stream_reset_stat(stream: *mut pjmedia_stream) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_stream_get_stat_jbuf(
        stream: *const pjmedia_stream,
        state: *mut pjmedia_jb_state,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_stream_pause(stream: *mut pjmedia_stream, dir: pjmedia_dir) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_stream_resume(stream: *mut pjmedia_stream, dir: pjmedia_dir) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_stream_dial_dtmf(
        stream: *mut pjmedia_stream,
        ascii_digit: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_stream_check_dtmf(stream: *mut pjmedia_stream) -> pj_bool_t;
}
extern "C" {
    pub fn pjmedia_stream_get_dtmf(
        stream: *mut pjmedia_stream,
        ascii_digits: *mut ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_stream_set_dtmf_callback(
        stream: *mut pjmedia_stream,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut pjmedia_stream,
                user_data: *mut ::std::os::raw::c_void,
                digit: ::std::os::raw::c_int,
            ),
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_stream_set_dtmf_event_callback(
        stream: *mut pjmedia_stream,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut pjmedia_stream,
                user_data: *mut ::std::os::raw::c_void,
                event: *const pjmedia_stream_dtmf_event,
            ),
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_stream_send_rtcp_sdes(stream: *mut pjmedia_stream) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_stream_send_rtcp_bye(stream: *mut pjmedia_stream) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_stream_get_rtp_session_info(
        stream: *mut pjmedia_stream,
        session_info: *mut pjmedia_stream_rtp_sess_info,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_tone_desc {
    pub freq1: ::std::os::raw::c_short,
    pub freq2: ::std::os::raw::c_short,
    pub on_msec: ::std::os::raw::c_short,
    pub off_msec: ::std::os::raw::c_short,
    pub volume: ::std::os::raw::c_short,
    pub flags: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_pjmedia_tone_desc() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_tone_desc>(),
        12usize,
        concat!("Size of: ", stringify!(pjmedia_tone_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_tone_desc>(),
        2usize,
        concat!("Alignment of ", stringify!(pjmedia_tone_desc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_tone_desc>())).freq1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tone_desc),
            "::",
            stringify!(freq1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_tone_desc>())).freq2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tone_desc),
            "::",
            stringify!(freq2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_tone_desc>())).on_msec as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tone_desc),
            "::",
            stringify!(on_msec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_tone_desc>())).off_msec as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tone_desc),
            "::",
            stringify!(off_msec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_tone_desc>())).volume as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tone_desc),
            "::",
            stringify!(volume)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_tone_desc>())).flags as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tone_desc),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_tone_digit {
    pub digit: ::std::os::raw::c_char,
    pub on_msec: ::std::os::raw::c_short,
    pub off_msec: ::std::os::raw::c_short,
    pub volume: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_pjmedia_tone_digit() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_tone_digit>(),
        8usize,
        concat!("Size of: ", stringify!(pjmedia_tone_digit))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_tone_digit>(),
        2usize,
        concat!("Alignment of ", stringify!(pjmedia_tone_digit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_tone_digit>())).digit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tone_digit),
            "::",
            stringify!(digit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_tone_digit>())).on_msec as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tone_digit),
            "::",
            stringify!(on_msec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_tone_digit>())).off_msec as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tone_digit),
            "::",
            stringify!(off_msec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_tone_digit>())).volume as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tone_digit),
            "::",
            stringify!(volume)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_tone_digit_map {
    pub count: ::std::os::raw::c_uint,
    pub digits: [pjmedia_tone_digit_map__bindgen_ty_1; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_tone_digit_map__bindgen_ty_1 {
    pub digit: ::std::os::raw::c_char,
    pub freq1: ::std::os::raw::c_short,
    pub freq2: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_pjmedia_tone_digit_map__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_tone_digit_map__bindgen_ty_1>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(pjmedia_tone_digit_map__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_tone_digit_map__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_tone_digit_map__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_tone_digit_map__bindgen_ty_1>())).digit as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tone_digit_map__bindgen_ty_1),
            "::",
            stringify!(digit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_tone_digit_map__bindgen_ty_1>())).freq1 as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tone_digit_map__bindgen_ty_1),
            "::",
            stringify!(freq1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_tone_digit_map__bindgen_ty_1>())).freq2 as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tone_digit_map__bindgen_ty_1),
            "::",
            stringify!(freq2)
        )
    );
}
#[test]
fn bindgen_test_layout_pjmedia_tone_digit_map() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_tone_digit_map>(),
        100usize,
        concat!("Size of: ", stringify!(pjmedia_tone_digit_map))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_tone_digit_map>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_tone_digit_map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_tone_digit_map>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tone_digit_map),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_tone_digit_map>())).digits as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_tone_digit_map),
            "::",
            stringify!(digits)
        )
    );
}
pub const PJMEDIA_TONEGEN_LOOP: ::std::os::raw::c_uint = 1;
pub const PJMEDIA_TONEGEN_NO_LOCK: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pjmedia_tonegen_create(
        pool: *mut pj_pool_t,
        clock_rate: ::std::os::raw::c_uint,
        channel_count: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        bits_per_sample: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        p_port: *mut *mut pjmedia_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_tonegen_create2(
        pool: *mut pj_pool_t,
        name: *const pj_str_t,
        clock_rate: ::std::os::raw::c_uint,
        channel_count: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        bits_per_sample: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        p_port: *mut *mut pjmedia_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_tonegen_is_busy(tonegen: *mut pjmedia_port) -> pj_bool_t;
}
extern "C" {
    pub fn pjmedia_tonegen_stop(tonegen: *mut pjmedia_port) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_tonegen_stop_loop(tonegen: *mut pjmedia_port) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_tonegen_rewind(tonegen: *mut pjmedia_port) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_tonegen_play(
        tonegen: *mut pjmedia_port,
        count: ::std::os::raw::c_uint,
        tones: *const pjmedia_tone_desc,
        options: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_tonegen_play_digits(
        tonegen: *mut pjmedia_port,
        count: ::std::os::raw::c_uint,
        digits: *const pjmedia_tone_digit,
        options: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_tonegen_get_digit_map(
        tonegen: *mut pjmedia_port,
        m: *mut *const pjmedia_tone_digit_map,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_tonegen_set_digit_map(
        tonegen: *mut pjmedia_port,
        m: *mut pjmedia_tone_digit_map,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_tp_adapter_create(
        endpt: *mut pjmedia_endpt,
        name: *const ::std::os::raw::c_char,
        base_tp: *mut pjmedia_transport,
        del_base: pj_bool_t,
        p_tp: *mut *mut pjmedia_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjnath_init() -> pj_status_t;
}
extern "C" {
    pub fn pjnath_perror(
        sender: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
        status: pj_status_t,
    );
}
pub const pj_stun_method_e_PJ_STUN_BINDING_METHOD: pj_stun_method_e = 1;
pub const pj_stun_method_e_PJ_STUN_SHARED_SECRET_METHOD: pj_stun_method_e = 2;
pub const pj_stun_method_e_PJ_STUN_ALLOCATE_METHOD: pj_stun_method_e = 3;
pub const pj_stun_method_e_PJ_STUN_REFRESH_METHOD: pj_stun_method_e = 4;
pub const pj_stun_method_e_PJ_STUN_SEND_METHOD: pj_stun_method_e = 6;
pub const pj_stun_method_e_PJ_STUN_DATA_METHOD: pj_stun_method_e = 7;
pub const pj_stun_method_e_PJ_STUN_CREATE_PERM_METHOD: pj_stun_method_e = 8;
pub const pj_stun_method_e_PJ_STUN_CHANNEL_BIND_METHOD: pj_stun_method_e = 9;
pub const pj_stun_method_e_PJ_STUN_CONNECT_METHOD: pj_stun_method_e = 10;
pub const pj_stun_method_e_PJ_STUN_CONNECTION_BIND_METHOD: pj_stun_method_e = 11;
pub const pj_stun_method_e_PJ_STUN_CONNECTION_ATTEMPT_METHOD: pj_stun_method_e = 12;
pub const pj_stun_method_e_PJ_STUN_METHOD_MAX: pj_stun_method_e = 13;
pub type pj_stun_method_e = ::std::os::raw::c_uint;
pub const pj_stun_msg_class_e_PJ_STUN_REQUEST_CLASS: pj_stun_msg_class_e = 0;
pub const pj_stun_msg_class_e_PJ_STUN_INDICATION_CLASS: pj_stun_msg_class_e = 1;
pub const pj_stun_msg_class_e_PJ_STUN_SUCCESS_CLASS: pj_stun_msg_class_e = 2;
pub const pj_stun_msg_class_e_PJ_STUN_ERROR_CLASS: pj_stun_msg_class_e = 3;
pub type pj_stun_msg_class_e = ::std::os::raw::c_uint;
pub const pj_stun_msg_type_PJ_STUN_BINDING_REQUEST: pj_stun_msg_type = 1;
pub const pj_stun_msg_type_PJ_STUN_BINDING_RESPONSE: pj_stun_msg_type = 257;
pub const pj_stun_msg_type_PJ_STUN_BINDING_ERROR_RESPONSE: pj_stun_msg_type = 273;
pub const pj_stun_msg_type_PJ_STUN_BINDING_INDICATION: pj_stun_msg_type = 17;
pub const pj_stun_msg_type_PJ_STUN_SHARED_SECRET_REQUEST: pj_stun_msg_type = 2;
pub const pj_stun_msg_type_PJ_STUN_SHARED_SECRET_RESPONSE: pj_stun_msg_type = 258;
pub const pj_stun_msg_type_PJ_STUN_SHARED_SECRET_ERROR_RESPONSE: pj_stun_msg_type = 274;
pub const pj_stun_msg_type_PJ_STUN_ALLOCATE_REQUEST: pj_stun_msg_type = 3;
pub const pj_stun_msg_type_PJ_STUN_ALLOCATE_RESPONSE: pj_stun_msg_type = 259;
pub const pj_stun_msg_type_PJ_STUN_ALLOCATE_ERROR_RESPONSE: pj_stun_msg_type = 275;
pub const pj_stun_msg_type_PJ_STUN_REFRESH_REQUEST: pj_stun_msg_type = 4;
pub const pj_stun_msg_type_PJ_STUN_REFRESH_RESPONSE: pj_stun_msg_type = 260;
pub const pj_stun_msg_type_PJ_STUN_REFRESH_ERROR_RESPONSE: pj_stun_msg_type = 276;
pub const pj_stun_msg_type_PJ_STUN_SEND_INDICATION: pj_stun_msg_type = 22;
pub const pj_stun_msg_type_PJ_STUN_DATA_INDICATION: pj_stun_msg_type = 23;
pub const pj_stun_msg_type_PJ_STUN_CREATE_PERM_REQUEST: pj_stun_msg_type = 8;
pub const pj_stun_msg_type_PJ_STUN_CREATE_PERM_RESPONSE: pj_stun_msg_type = 264;
pub const pj_stun_msg_type_PJ_STUN_CREATE_PERM_ERROR_RESPONSE: pj_stun_msg_type = 280;
pub const pj_stun_msg_type_PJ_STUN_CHANNEL_BIND_REQUEST: pj_stun_msg_type = 9;
pub const pj_stun_msg_type_PJ_STUN_CHANNEL_BIND_RESPONSE: pj_stun_msg_type = 265;
pub const pj_stun_msg_type_PJ_STUN_CHANNEL_BIND_ERROR_RESPONSE: pj_stun_msg_type = 281;
pub const pj_stun_msg_type_PJ_STUN_CONNECTION_BIND_REQUEST: pj_stun_msg_type = 11;
pub const pj_stun_msg_type_PJ_STUN_CONNECTION_ATTEMPT_INDICATION: pj_stun_msg_type = 28;
pub type pj_stun_msg_type = ::std::os::raw::c_uint;
pub const pj_stun_attr_type_PJ_STUN_ATTR_MAPPED_ADDR: pj_stun_attr_type = 1;
pub const pj_stun_attr_type_PJ_STUN_ATTR_RESPONSE_ADDR: pj_stun_attr_type = 2;
pub const pj_stun_attr_type_PJ_STUN_ATTR_CHANGE_REQUEST: pj_stun_attr_type = 3;
pub const pj_stun_attr_type_PJ_STUN_ATTR_SOURCE_ADDR: pj_stun_attr_type = 4;
pub const pj_stun_attr_type_PJ_STUN_ATTR_CHANGED_ADDR: pj_stun_attr_type = 5;
pub const pj_stun_attr_type_PJ_STUN_ATTR_USERNAME: pj_stun_attr_type = 6;
pub const pj_stun_attr_type_PJ_STUN_ATTR_PASSWORD: pj_stun_attr_type = 7;
pub const pj_stun_attr_type_PJ_STUN_ATTR_MESSAGE_INTEGRITY: pj_stun_attr_type = 8;
pub const pj_stun_attr_type_PJ_STUN_ATTR_ERROR_CODE: pj_stun_attr_type = 9;
pub const pj_stun_attr_type_PJ_STUN_ATTR_UNKNOWN_ATTRIBUTES: pj_stun_attr_type = 10;
pub const pj_stun_attr_type_PJ_STUN_ATTR_REFLECTED_FROM: pj_stun_attr_type = 11;
pub const pj_stun_attr_type_PJ_STUN_ATTR_CHANNEL_NUMBER: pj_stun_attr_type = 12;
pub const pj_stun_attr_type_PJ_STUN_ATTR_LIFETIME: pj_stun_attr_type = 13;
pub const pj_stun_attr_type_PJ_STUN_ATTR_MAGIC_COOKIE: pj_stun_attr_type = 15;
pub const pj_stun_attr_type_PJ_STUN_ATTR_BANDWIDTH: pj_stun_attr_type = 16;
pub const pj_stun_attr_type_PJ_STUN_ATTR_XOR_PEER_ADDR: pj_stun_attr_type = 18;
pub const pj_stun_attr_type_PJ_STUN_ATTR_DATA: pj_stun_attr_type = 19;
pub const pj_stun_attr_type_PJ_STUN_ATTR_REALM: pj_stun_attr_type = 20;
pub const pj_stun_attr_type_PJ_STUN_ATTR_NONCE: pj_stun_attr_type = 21;
pub const pj_stun_attr_type_PJ_STUN_ATTR_XOR_RELAYED_ADDR: pj_stun_attr_type = 22;
pub const pj_stun_attr_type_PJ_STUN_ATTR_REQ_ADDR_TYPE: pj_stun_attr_type = 23;
pub const pj_stun_attr_type_PJ_STUN_ATTR_REQ_ADDR_FAMILY: pj_stun_attr_type = 23;
pub const pj_stun_attr_type_PJ_STUN_ATTR_EVEN_PORT: pj_stun_attr_type = 24;
pub const pj_stun_attr_type_PJ_STUN_ATTR_REQ_TRANSPORT: pj_stun_attr_type = 25;
pub const pj_stun_attr_type_PJ_STUN_ATTR_DONT_FRAGMENT: pj_stun_attr_type = 26;
pub const pj_stun_attr_type_PJ_STUN_ATTR_XOR_MAPPED_ADDR: pj_stun_attr_type = 32;
pub const pj_stun_attr_type_PJ_STUN_ATTR_TIMER_VAL: pj_stun_attr_type = 33;
pub const pj_stun_attr_type_PJ_STUN_ATTR_RESERVATION_TOKEN: pj_stun_attr_type = 34;
pub const pj_stun_attr_type_PJ_STUN_ATTR_XOR_REFLECTED_FROM: pj_stun_attr_type = 35;
pub const pj_stun_attr_type_PJ_STUN_ATTR_PRIORITY: pj_stun_attr_type = 36;
pub const pj_stun_attr_type_PJ_STUN_ATTR_USE_CANDIDATE: pj_stun_attr_type = 37;
pub const pj_stun_attr_type_PJ_STUN_ATTR_CONNECTION_ID: pj_stun_attr_type = 42;
pub const pj_stun_attr_type_PJ_STUN_ATTR_ICMP: pj_stun_attr_type = 48;
pub const pj_stun_attr_type_PJ_STUN_ATTR_END_MANDATORY_ATTR: pj_stun_attr_type = 49;
pub const pj_stun_attr_type_PJ_STUN_ATTR_START_EXTENDED_ATTR: pj_stun_attr_type = 32801;
pub const pj_stun_attr_type_PJ_STUN_ATTR_SOFTWARE: pj_stun_attr_type = 32802;
pub const pj_stun_attr_type_PJ_STUN_ATTR_ALTERNATE_SERVER: pj_stun_attr_type = 32803;
pub const pj_stun_attr_type_PJ_STUN_ATTR_REFRESH_INTERVAL: pj_stun_attr_type = 32804;
pub const pj_stun_attr_type_PJ_STUN_ATTR_FINGERPRINT: pj_stun_attr_type = 32808;
pub const pj_stun_attr_type_PJ_STUN_ATTR_ICE_CONTROLLED: pj_stun_attr_type = 32809;
pub const pj_stun_attr_type_PJ_STUN_ATTR_ICE_CONTROLLING: pj_stun_attr_type = 32810;
pub const pj_stun_attr_type_PJ_STUN_ATTR_END_EXTENDED_ATTR: pj_stun_attr_type = 32811;
pub type pj_stun_attr_type = ::std::os::raw::c_uint;
pub const pj_stun_status_PJ_STUN_SC_TRY_ALTERNATE: pj_stun_status = 300;
pub const pj_stun_status_PJ_STUN_SC_BAD_REQUEST: pj_stun_status = 400;
pub const pj_stun_status_PJ_STUN_SC_UNAUTHORIZED: pj_stun_status = 401;
pub const pj_stun_status_PJ_STUN_SC_FORBIDDEN: pj_stun_status = 403;
pub const pj_stun_status_PJ_STUN_SC_UNKNOWN_ATTRIBUTE: pj_stun_status = 420;
pub const pj_stun_status_PJ_STUN_SC_ALLOCATION_MISMATCH: pj_stun_status = 437;
pub const pj_stun_status_PJ_STUN_SC_STALE_NONCE: pj_stun_status = 438;
pub const pj_stun_status_PJ_STUN_SC_TRANSITIONING: pj_stun_status = 439;
pub const pj_stun_status_PJ_STUN_SC_WRONG_CREDENTIALS: pj_stun_status = 441;
pub const pj_stun_status_PJ_STUN_SC_UNSUPP_TRANSPORT_PROTO: pj_stun_status = 442;
pub const pj_stun_status_PJ_STUN_SC_OPER_TCP_ONLY: pj_stun_status = 445;
pub const pj_stun_status_PJ_STUN_SC_CONNECTION_FAILURE: pj_stun_status = 446;
pub const pj_stun_status_PJ_STUN_SC_CONNECTION_TIMEOUT: pj_stun_status = 447;
pub const pj_stun_status_PJ_STUN_SC_ALLOCATION_QUOTA_REACHED: pj_stun_status = 486;
pub const pj_stun_status_PJ_STUN_SC_ROLE_CONFLICT: pj_stun_status = 487;
pub const pj_stun_status_PJ_STUN_SC_SERVER_ERROR: pj_stun_status = 500;
pub const pj_stun_status_PJ_STUN_SC_INSUFFICIENT_CAPACITY: pj_stun_status = 508;
pub const pj_stun_status_PJ_STUN_SC_GLOBAL_FAILURE: pj_stun_status = 600;
pub type pj_stun_status = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_msg_hdr {
    pub type_: pj_uint16_t,
    pub length: pj_uint16_t,
    pub magic: pj_uint32_t,
    pub tsx_id: [pj_uint8_t; 12usize],
}
#[test]
fn bindgen_test_layout_pj_stun_msg_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_msg_hdr>(),
        20usize,
        concat!("Size of: ", stringify!(pj_stun_msg_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_msg_hdr>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_stun_msg_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_msg_hdr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_msg_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_msg_hdr>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_msg_hdr),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_msg_hdr>())).magic as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_msg_hdr),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_msg_hdr>())).tsx_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_msg_hdr),
            "::",
            stringify!(tsx_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_attr_hdr {
    pub type_: pj_uint16_t,
    pub length: pj_uint16_t,
}
#[test]
fn bindgen_test_layout_pj_stun_attr_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_attr_hdr>(),
        4usize,
        concat!("Size of: ", stringify!(pj_stun_attr_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_attr_hdr>(),
        2usize,
        concat!("Alignment of ", stringify!(pj_stun_attr_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_attr_hdr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_attr_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_attr_hdr>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_attr_hdr),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_stun_sockaddr_attr {
    pub hdr: pj_stun_attr_hdr,
    pub xor_ed: pj_bool_t,
    pub sockaddr: pj_sockaddr,
}
#[test]
fn bindgen_test_layout_pj_stun_sockaddr_attr() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_sockaddr_attr>(),
        36usize,
        concat!("Size of: ", stringify!(pj_stun_sockaddr_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_sockaddr_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_stun_sockaddr_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sockaddr_attr>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sockaddr_attr),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sockaddr_attr>())).xor_ed as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sockaddr_attr),
            "::",
            stringify!(xor_ed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sockaddr_attr>())).sockaddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sockaddr_attr),
            "::",
            stringify!(sockaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_empty_attr {
    pub hdr: pj_stun_attr_hdr,
}
#[test]
fn bindgen_test_layout_pj_stun_empty_attr() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_empty_attr>(),
        4usize,
        concat!("Size of: ", stringify!(pj_stun_empty_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_empty_attr>(),
        2usize,
        concat!("Alignment of ", stringify!(pj_stun_empty_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_empty_attr>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_empty_attr),
            "::",
            stringify!(hdr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_string_attr {
    pub hdr: pj_stun_attr_hdr,
    pub value: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_stun_string_attr() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_string_attr>(),
        24usize,
        concat!("Size of: ", stringify!(pj_stun_string_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_string_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_stun_string_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_string_attr>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_string_attr),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_string_attr>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_string_attr),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_uint_attr {
    pub hdr: pj_stun_attr_hdr,
    pub value: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pj_stun_uint_attr() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_uint_attr>(),
        8usize,
        concat!("Size of: ", stringify!(pj_stun_uint_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_uint_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_stun_uint_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_uint_attr>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_uint_attr),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_uint_attr>())).value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_uint_attr),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_stun_uint64_attr {
    pub hdr: pj_stun_attr_hdr,
    pub value: pj_timestamp,
}
#[test]
fn bindgen_test_layout_pj_stun_uint64_attr() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_uint64_attr>(),
        16usize,
        concat!("Size of: ", stringify!(pj_stun_uint64_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_uint64_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_stun_uint64_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_uint64_attr>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_uint64_attr),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_uint64_attr>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_uint64_attr),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_binary_attr {
    pub hdr: pj_stun_attr_hdr,
    pub magic: pj_uint32_t,
    pub length: ::std::os::raw::c_uint,
    pub data: *mut pj_uint8_t,
}
#[test]
fn bindgen_test_layout_pj_stun_binary_attr() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_binary_attr>(),
        24usize,
        concat!("Size of: ", stringify!(pj_stun_binary_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_binary_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_stun_binary_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_binary_attr>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_binary_attr),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_binary_attr>())).magic as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_binary_attr),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_binary_attr>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_binary_attr),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_binary_attr>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_binary_attr),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_msgint_attr {
    pub hdr: pj_stun_attr_hdr,
    pub hmac: [pj_uint8_t; 20usize],
}
#[test]
fn bindgen_test_layout_pj_stun_msgint_attr() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_msgint_attr>(),
        24usize,
        concat!("Size of: ", stringify!(pj_stun_msgint_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_msgint_attr>(),
        2usize,
        concat!("Alignment of ", stringify!(pj_stun_msgint_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_msgint_attr>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_msgint_attr),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_msgint_attr>())).hmac as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_msgint_attr),
            "::",
            stringify!(hmac)
        )
    );
}
pub type pj_stun_fingerprint_attr = pj_stun_uint_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_errcode_attr {
    pub hdr: pj_stun_attr_hdr,
    pub err_code: ::std::os::raw::c_int,
    pub reason: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_stun_errcode_attr() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_errcode_attr>(),
        24usize,
        concat!("Size of: ", stringify!(pj_stun_errcode_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_errcode_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_stun_errcode_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_errcode_attr>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_errcode_attr),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_errcode_attr>())).err_code as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_errcode_attr),
            "::",
            stringify!(err_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_errcode_attr>())).reason as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_errcode_attr),
            "::",
            stringify!(reason)
        )
    );
}
pub type pj_stun_realm_attr = pj_stun_string_attr;
pub type pj_stun_nonce_attr = pj_stun_string_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_unknown_attr {
    pub hdr: pj_stun_attr_hdr,
    pub attr_count: ::std::os::raw::c_uint,
    pub attrs: [pj_uint16_t; 16usize],
}
#[test]
fn bindgen_test_layout_pj_stun_unknown_attr() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_unknown_attr>(),
        40usize,
        concat!("Size of: ", stringify!(pj_stun_unknown_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_unknown_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_stun_unknown_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_unknown_attr>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_unknown_attr),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_unknown_attr>())).attr_count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_unknown_attr),
            "::",
            stringify!(attr_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_unknown_attr>())).attrs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_unknown_attr),
            "::",
            stringify!(attrs)
        )
    );
}
pub type pj_stun_mapped_addr_attr = pj_stun_sockaddr_attr;
pub type pj_stun_xor_mapped_addr_attr = pj_stun_sockaddr_attr;
pub type pj_stun_software_attr = pj_stun_string_attr;
pub type pj_stun_alt_server_attr = pj_stun_sockaddr_attr;
pub type pj_stun_refresh_interval_attr = pj_stun_uint_attr;
pub type pj_stun_response_addr_attr = pj_stun_sockaddr_attr;
pub type pj_stun_changed_addr_attr = pj_stun_sockaddr_attr;
pub type pj_stun_change_request_attr = pj_stun_uint_attr;
pub type pj_stun_src_addr_attr = pj_stun_sockaddr_attr;
pub type pj_stun_reflected_from_attr = pj_stun_sockaddr_attr;
pub type pj_stun_username_attr = pj_stun_string_attr;
pub type pj_stun_password_attr = pj_stun_string_attr;
pub type pj_stun_channel_number_attr = pj_stun_uint_attr;
pub type pj_stun_lifetime_attr = pj_stun_uint_attr;
pub type pj_stun_bandwidth_attr = pj_stun_uint_attr;
pub type pj_stun_xor_peer_addr_attr = pj_stun_sockaddr_attr;
pub type pj_stun_data_attr = pj_stun_binary_attr;
pub type pj_stun_xor_relayed_addr_attr = pj_stun_sockaddr_attr;
pub type pj_stun_req_addr_type_attr = pj_stun_uint_attr;
pub type pj_stun_even_port_attr = pj_stun_uint_attr;
pub type pj_stun_req_transport_attr = pj_stun_uint_attr;
pub type pj_stun_dont_fragment_attr = pj_stun_empty_attr;
pub type pj_stun_res_token_attr = pj_stun_uint64_attr;
pub type pj_stun_xor_reflected_from_attr = pj_stun_sockaddr_attr;
pub type pj_stun_priority_attr = pj_stun_uint_attr;
pub type pj_stun_use_candidate_attr = pj_stun_empty_attr;
pub type pj_stun_timer_val_attr = pj_stun_uint_attr;
pub type pj_stun_ice_controlling_attr = pj_stun_uint64_attr;
pub type pj_stun_ice_controlled_attr = pj_stun_uint64_attr;
pub type pj_stun_icmp_attr = pj_stun_uint_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_msg {
    pub hdr: pj_stun_msg_hdr,
    pub attr_count: ::std::os::raw::c_uint,
    pub attr: [*mut pj_stun_attr_hdr; 16usize],
}
#[test]
fn bindgen_test_layout_pj_stun_msg() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_msg>(),
        152usize,
        concat!("Size of: ", stringify!(pj_stun_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_stun_msg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_msg>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_msg),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_msg>())).attr_count as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_msg),
            "::",
            stringify!(attr_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_msg>())).attr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_msg),
            "::",
            stringify!(attr)
        )
    );
}
pub const pj_stun_decode_options_PJ_STUN_IS_DATAGRAM: pj_stun_decode_options = 1;
pub const pj_stun_decode_options_PJ_STUN_CHECK_PACKET: pj_stun_decode_options = 2;
pub const pj_stun_decode_options_PJ_STUN_NO_AUTHENTICATE: pj_stun_decode_options = 4;
pub const pj_stun_decode_options_PJ_STUN_NO_FINGERPRINT_CHECK: pj_stun_decode_options = 8;
pub type pj_stun_decode_options = ::std::os::raw::c_uint;
extern "C" {
    pub fn pj_stun_get_method_name(
        msg_type: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_stun_get_class_name(
        msg_type: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_stun_get_attr_name(
        attr_type: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_stun_get_err_reason(err_code: ::std::os::raw::c_int) -> pj_str_t;
}
extern "C" {
    pub fn pj_stun_set_padding_char(chr: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_stun_msg_init(
        msg: *mut pj_stun_msg,
        msg_type: ::std::os::raw::c_uint,
        magic: pj_uint32_t,
        tsx_id: *const pj_uint8_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_msg_create(
        pool: *mut pj_pool_t,
        msg_type: ::std::os::raw::c_uint,
        magic: pj_uint32_t,
        tsx_id: *const pj_uint8_t,
        p_msg: *mut *mut pj_stun_msg,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_msg_clone(pool: *mut pj_pool_t, msg: *const pj_stun_msg) -> *mut pj_stun_msg;
}
extern "C" {
    pub fn pj_stun_msg_create_response(
        pool: *mut pj_pool_t,
        req_msg: *const pj_stun_msg,
        err_code: ::std::os::raw::c_uint,
        err_msg: *const pj_str_t,
        p_response: *mut *mut pj_stun_msg,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_msg_add_attr(msg: *mut pj_stun_msg, attr: *mut pj_stun_attr_hdr) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_msg_encode(
        msg: *mut pj_stun_msg,
        pkt_buf: *mut pj_uint8_t,
        buf_size: pj_size_t,
        options: ::std::os::raw::c_uint,
        key: *const pj_str_t,
        p_msg_len: *mut pj_size_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_msg_check(
        pdu: *const pj_uint8_t,
        pdu_len: pj_size_t,
        options: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_msg_decode(
        pool: *mut pj_pool_t,
        pdu: *const pj_uint8_t,
        pdu_len: pj_size_t,
        options: ::std::os::raw::c_uint,
        p_msg: *mut *mut pj_stun_msg,
        p_parsed_len: *mut pj_size_t,
        p_response: *mut *mut pj_stun_msg,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_msg_dump(
        msg: *const pj_stun_msg,
        buffer: *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_uint,
        printed_len: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_stun_msg_find_attr(
        msg: *const pj_stun_msg,
        attr_type: ::std::os::raw::c_int,
        start_index: ::std::os::raw::c_uint,
    ) -> *mut pj_stun_attr_hdr;
}
extern "C" {
    pub fn pj_stun_attr_clone(
        pool: *mut pj_pool_t,
        attr: *const pj_stun_attr_hdr,
    ) -> *mut pj_stun_attr_hdr;
}
extern "C" {
    pub fn pj_stun_sockaddr_attr_init(
        attr: *mut pj_stun_sockaddr_attr,
        attr_type: ::std::os::raw::c_int,
        xor_ed: pj_bool_t,
        addr: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_sockaddr_attr_create(
        pool: *mut pj_pool_t,
        attr_type: ::std::os::raw::c_int,
        xor_ed: pj_bool_t,
        addr: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_uint,
        p_attr: *mut *mut pj_stun_sockaddr_attr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_msg_add_sockaddr_attr(
        pool: *mut pj_pool_t,
        msg: *mut pj_stun_msg,
        attr_type: ::std::os::raw::c_int,
        xor_ed: pj_bool_t,
        addr: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_string_attr_init(
        attr: *mut pj_stun_string_attr,
        pool: *mut pj_pool_t,
        attr_type: ::std::os::raw::c_int,
        value: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_string_attr_create(
        pool: *mut pj_pool_t,
        attr_type: ::std::os::raw::c_int,
        value: *const pj_str_t,
        p_attr: *mut *mut pj_stun_string_attr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_msg_add_string_attr(
        pool: *mut pj_pool_t,
        msg: *mut pj_stun_msg,
        attr_type: ::std::os::raw::c_int,
        value: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_uint_attr_create(
        pool: *mut pj_pool_t,
        attr_type: ::std::os::raw::c_int,
        value: pj_uint32_t,
        p_attr: *mut *mut pj_stun_uint_attr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_msg_add_uint_attr(
        pool: *mut pj_pool_t,
        msg: *mut pj_stun_msg,
        attr_type: ::std::os::raw::c_int,
        value: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_uint64_attr_create(
        pool: *mut pj_pool_t,
        attr_type: ::std::os::raw::c_int,
        value: *const pj_timestamp,
        p_attr: *mut *mut pj_stun_uint64_attr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_msg_add_uint64_attr(
        pool: *mut pj_pool_t,
        msg: *mut pj_stun_msg,
        attr_type: ::std::os::raw::c_int,
        value: *const pj_timestamp,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_msgint_attr_create(
        pool: *mut pj_pool_t,
        p_attr: *mut *mut pj_stun_msgint_attr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_msg_add_msgint_attr(pool: *mut pj_pool_t, msg: *mut pj_stun_msg) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_errcode_attr_create(
        pool: *mut pj_pool_t,
        err_code: ::std::os::raw::c_int,
        err_reason: *const pj_str_t,
        p_attr: *mut *mut pj_stun_errcode_attr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_msg_add_errcode_attr(
        pool: *mut pj_pool_t,
        msg: *mut pj_stun_msg,
        err_code: ::std::os::raw::c_int,
        err_reason: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_unknown_attr_create(
        pool: *mut pj_pool_t,
        attr_cnt: ::std::os::raw::c_uint,
        attr: *const pj_uint16_t,
        p_attr: *mut *mut pj_stun_unknown_attr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_msg_add_unknown_attr(
        pool: *mut pj_pool_t,
        msg: *mut pj_stun_msg,
        attr_cnt: ::std::os::raw::c_uint,
        attr: *const pj_uint16_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_binary_attr_init(
        attr: *mut pj_stun_binary_attr,
        pool: *mut pj_pool_t,
        attr_type: ::std::os::raw::c_int,
        data: *const pj_uint8_t,
        length: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_binary_attr_create(
        pool: *mut pj_pool_t,
        attr_type: ::std::os::raw::c_int,
        data: *const pj_uint8_t,
        length: ::std::os::raw::c_uint,
        p_attr: *mut *mut pj_stun_binary_attr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_msg_add_binary_attr(
        pool: *mut pj_pool_t,
        msg: *mut pj_stun_msg,
        attr_type: ::std::os::raw::c_int,
        data: *const pj_uint8_t,
        length: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_empty_attr_create(
        pool: *mut pj_pool_t,
        attr_type: ::std::os::raw::c_int,
        p_attr: *mut *mut pj_stun_empty_attr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_msg_add_empty_attr(
        pool: *mut pj_pool_t,
        msg: *mut pj_stun_msg,
        attr_type: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
pub const pj_stun_auth_type_PJ_STUN_AUTH_NONE: pj_stun_auth_type = 0;
pub const pj_stun_auth_type_PJ_STUN_AUTH_SHORT_TERM: pj_stun_auth_type = 1;
pub const pj_stun_auth_type_PJ_STUN_AUTH_LONG_TERM: pj_stun_auth_type = 2;
pub type pj_stun_auth_type = ::std::os::raw::c_uint;
pub const pj_stun_auth_cred_type_PJ_STUN_AUTH_CRED_STATIC: pj_stun_auth_cred_type = 0;
pub const pj_stun_auth_cred_type_PJ_STUN_AUTH_CRED_DYNAMIC: pj_stun_auth_cred_type = 1;
pub type pj_stun_auth_cred_type = ::std::os::raw::c_uint;
pub const pj_stun_passwd_type_PJ_STUN_PASSWD_PLAIN: pj_stun_passwd_type = 0;
pub const pj_stun_passwd_type_PJ_STUN_PASSWD_HASHED: pj_stun_passwd_type = 1;
pub type pj_stun_passwd_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_stun_auth_cred {
    pub type_: pj_stun_auth_cred_type,
    pub data: pj_stun_auth_cred__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pj_stun_auth_cred__bindgen_ty_1 {
    pub static_cred: pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_1,
    pub dyn_cred: pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_2,
    _bindgen_union_align: [u64; 9usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_1 {
    pub realm: pj_str_t,
    pub username: pj_str_t,
    pub data_type: pj_stun_passwd_type,
    pub data: pj_str_t,
    pub nonce: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_1>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_1>())).realm
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(realm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_1>())).username
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(username)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_1>())).data_type
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(data_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_1>())).data
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_1>())).nonce
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(nonce)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_2 {
    pub user_data: *mut ::std::os::raw::c_void,
    pub get_auth: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            pool: *mut pj_pool_t,
            realm: *mut pj_str_t,
            nonce: *mut pj_str_t,
        ) -> pj_status_t,
    >,
    pub get_cred: ::std::option::Option<
        unsafe extern "C" fn(
            msg: *const pj_stun_msg,
            user_data: *mut ::std::os::raw::c_void,
            pool: *mut pj_pool_t,
            realm: *mut pj_str_t,
            username: *mut pj_str_t,
            nonce: *mut pj_str_t,
            data_type: *mut pj_stun_passwd_type,
            data: *mut pj_str_t,
        ) -> pj_status_t,
    >,
    pub get_password: ::std::option::Option<
        unsafe extern "C" fn(
            msg: *const pj_stun_msg,
            user_data: *mut ::std::os::raw::c_void,
            realm: *const pj_str_t,
            username: *const pj_str_t,
            pool: *mut pj_pool_t,
            data_type: *mut pj_stun_passwd_type,
            data: *mut pj_str_t,
        ) -> pj_status_t,
    >,
    pub verify_nonce: ::std::option::Option<
        unsafe extern "C" fn(
            msg: *const pj_stun_msg,
            user_data: *mut ::std::os::raw::c_void,
            realm: *const pj_str_t,
            username: *const pj_str_t,
            nonce: *const pj_str_t,
        ) -> pj_bool_t,
    >,
}
#[test]
fn bindgen_test_layout_pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_2>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_2>())).user_data
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_2>())).get_auth
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(get_auth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_2>())).get_cred
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(get_cred)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_2>())).get_password
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(get_password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_2>())).verify_nonce
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(verify_nonce)
        )
    );
}
#[test]
fn bindgen_test_layout_pj_stun_auth_cred__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_auth_cred__bindgen_ty_1>(),
        72usize,
        concat!("Size of: ", stringify!(pj_stun_auth_cred__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_auth_cred__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_stun_auth_cred__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_auth_cred__bindgen_ty_1>())).static_cred as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_auth_cred__bindgen_ty_1),
            "::",
            stringify!(static_cred)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_auth_cred__bindgen_ty_1>())).dyn_cred as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_auth_cred__bindgen_ty_1),
            "::",
            stringify!(dyn_cred)
        )
    );
}
#[test]
fn bindgen_test_layout_pj_stun_auth_cred() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_auth_cred>(),
        80usize,
        concat!("Size of: ", stringify!(pj_stun_auth_cred))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_auth_cred>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_stun_auth_cred))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_auth_cred>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_auth_cred),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_auth_cred>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_auth_cred),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_req_cred_info {
    pub realm: pj_str_t,
    pub username: pj_str_t,
    pub nonce: pj_str_t,
    pub auth_key: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_stun_req_cred_info() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_req_cred_info>(),
        64usize,
        concat!("Size of: ", stringify!(pj_stun_req_cred_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_req_cred_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_stun_req_cred_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_req_cred_info>())).realm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_req_cred_info),
            "::",
            stringify!(realm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_req_cred_info>())).username as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_req_cred_info),
            "::",
            stringify!(username)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_req_cred_info>())).nonce as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_req_cred_info),
            "::",
            stringify!(nonce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_req_cred_info>())).auth_key as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_req_cred_info),
            "::",
            stringify!(auth_key)
        )
    );
}
extern "C" {
    pub fn pj_stun_auth_cred_dup(
        pool: *mut pj_pool_t,
        dst: *mut pj_stun_auth_cred,
        src: *const pj_stun_auth_cred,
    );
}
extern "C" {
    pub fn pj_stun_req_cred_info_dup(
        pool: *mut pj_pool_t,
        dst: *mut pj_stun_req_cred_info,
        src: *const pj_stun_req_cred_info,
    );
}
extern "C" {
    pub fn pj_stun_create_key(
        pool: *mut pj_pool_t,
        key: *mut pj_str_t,
        realm: *const pj_str_t,
        username: *const pj_str_t,
        data_type: pj_stun_passwd_type,
        data: *const pj_str_t,
    );
}
extern "C" {
    pub fn pj_stun_authenticate_request(
        pkt: *const pj_uint8_t,
        pkt_len: ::std::os::raw::c_uint,
        msg: *const pj_stun_msg,
        cred: *mut pj_stun_auth_cred,
        pool: *mut pj_pool_t,
        info: *mut pj_stun_req_cred_info,
        p_response: *mut *mut pj_stun_msg,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_auth_valid_for_msg(msg: *const pj_stun_msg) -> pj_bool_t;
}
extern "C" {
    pub fn pj_stun_authenticate_response(
        pkt: *const pj_uint8_t,
        pkt_len: ::std::os::raw::c_uint,
        msg: *const pj_stun_msg,
        key: *const pj_str_t,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_config {
    pub pf: *mut pj_pool_factory,
    pub ioqueue: *mut pj_ioqueue_t,
    pub timer_heap: *mut pj_timer_heap_t,
    pub options: ::std::os::raw::c_uint,
    pub rto_msec: ::std::os::raw::c_uint,
    pub res_cache_msec: ::std::os::raw::c_uint,
    pub software_name: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_stun_config() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_config>(),
        56usize,
        concat!("Size of: ", stringify!(pj_stun_config))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_config>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_stun_config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_config>())).pf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_config),
            "::",
            stringify!(pf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_config>())).ioqueue as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_config),
            "::",
            stringify!(ioqueue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_config>())).timer_heap as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_config),
            "::",
            stringify!(timer_heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_config>())).options as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_config),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_config>())).rto_msec as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_config),
            "::",
            stringify!(rto_msec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_config>())).res_cache_msec as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_config),
            "::",
            stringify!(res_cache_msec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_config>())).software_name as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_config),
            "::",
            stringify!(software_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_client_tsx {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_tsx_cb {
    pub on_complete: ::std::option::Option<
        unsafe extern "C" fn(
            tsx: *mut pj_stun_client_tsx,
            status: pj_status_t,
            response: *const pj_stun_msg,
            src_addr: *const pj_sockaddr_t,
            src_addr_len: ::std::os::raw::c_uint,
        ),
    >,
    pub on_send_msg: ::std::option::Option<
        unsafe extern "C" fn(
            tsx: *mut pj_stun_client_tsx,
            stun_pkt: *const ::std::os::raw::c_void,
            pkt_size: pj_size_t,
        ) -> pj_status_t,
    >,
    pub on_destroy: ::std::option::Option<unsafe extern "C" fn(tsx: *mut pj_stun_client_tsx)>,
}
#[test]
fn bindgen_test_layout_pj_stun_tsx_cb() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_tsx_cb>(),
        24usize,
        concat!("Size of: ", stringify!(pj_stun_tsx_cb))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_tsx_cb>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_stun_tsx_cb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tsx_cb>())).on_complete as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tsx_cb),
            "::",
            stringify!(on_complete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tsx_cb>())).on_send_msg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tsx_cb),
            "::",
            stringify!(on_send_msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tsx_cb>())).on_destroy as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tsx_cb),
            "::",
            stringify!(on_destroy)
        )
    );
}
extern "C" {
    pub fn pj_stun_client_tsx_create(
        cfg: *mut pj_stun_config,
        pool: *mut pj_pool_t,
        grp_lock: *mut pj_grp_lock_t,
        cb: *const pj_stun_tsx_cb,
        p_tsx: *mut *mut pj_stun_client_tsx,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_client_tsx_schedule_destroy(
        tsx: *mut pj_stun_client_tsx,
        delay: *const pj_time_val,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_client_tsx_destroy(tsx: *mut pj_stun_client_tsx) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_client_tsx_stop(tsx: *mut pj_stun_client_tsx) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_client_tsx_is_complete(tsx: *mut pj_stun_client_tsx) -> pj_bool_t;
}
extern "C" {
    pub fn pj_stun_client_tsx_set_data(
        tsx: *mut pj_stun_client_tsx,
        data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_client_tsx_get_data(tsx: *mut pj_stun_client_tsx)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pj_stun_client_tsx_send_msg(
        tsx: *mut pj_stun_client_tsx,
        retransmit: pj_bool_t,
        pkt: *mut ::std::os::raw::c_void,
        pkt_len: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_client_tsx_retransmit(
        tsx: *mut pj_stun_client_tsx,
        mod_count: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_client_tsx_on_rx_msg(
        tsx: *mut pj_stun_client_tsx,
        msg: *const pj_stun_msg,
        src_addr: *const pj_sockaddr_t,
        src_addr_len: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_session {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_session_cb {
    pub on_send_msg: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_stun_session,
            token: *mut ::std::os::raw::c_void,
            pkt: *const ::std::os::raw::c_void,
            pkt_size: pj_size_t,
            dst_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub on_rx_request: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_stun_session,
            pkt: *const pj_uint8_t,
            pkt_len: ::std::os::raw::c_uint,
            rdata: *const pj_stun_rx_data,
            token: *mut ::std::os::raw::c_void,
            src_addr: *const pj_sockaddr_t,
            src_addr_len: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub on_request_complete: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_stun_session,
            status: pj_status_t,
            token: *mut ::std::os::raw::c_void,
            tdata: *mut pj_stun_tx_data,
            response: *const pj_stun_msg,
            src_addr: *const pj_sockaddr_t,
            src_addr_len: ::std::os::raw::c_uint,
        ),
    >,
    pub on_rx_indication: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_stun_session,
            pkt: *const pj_uint8_t,
            pkt_len: ::std::os::raw::c_uint,
            msg: *const pj_stun_msg,
            token: *mut ::std::os::raw::c_void,
            src_addr: *const pj_sockaddr_t,
            src_addr_len: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
}
#[test]
fn bindgen_test_layout_pj_stun_session_cb() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_session_cb>(),
        32usize,
        concat!("Size of: ", stringify!(pj_stun_session_cb))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_session_cb>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_stun_session_cb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_session_cb>())).on_send_msg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_session_cb),
            "::",
            stringify!(on_send_msg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_session_cb>())).on_rx_request as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_session_cb),
            "::",
            stringify!(on_rx_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_session_cb>())).on_request_complete as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_session_cb),
            "::",
            stringify!(on_request_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_session_cb>())).on_rx_indication as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_session_cb),
            "::",
            stringify!(on_rx_indication)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_rx_data {
    pub msg: *mut pj_stun_msg,
    pub info: pj_stun_req_cred_info,
}
#[test]
fn bindgen_test_layout_pj_stun_rx_data() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_rx_data>(),
        72usize,
        concat!("Size of: ", stringify!(pj_stun_rx_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_rx_data>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_stun_rx_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_rx_data>())).msg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_rx_data),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_rx_data>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_rx_data),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_tx_data {
    pub prev: *mut pj_stun_tx_data,
    pub next: *mut pj_stun_tx_data,
    pub pool: *mut pj_pool_t,
    pub sess: *mut pj_stun_session,
    pub msg: *mut pj_stun_msg,
    pub token: *mut ::std::os::raw::c_void,
    pub client_tsx: *mut pj_stun_client_tsx,
    pub retransmit: pj_bool_t,
    pub msg_magic: pj_uint32_t,
    pub msg_key: [pj_uint8_t; 12usize],
    pub grp_lock: *mut pj_grp_lock_t,
    pub auth_info: pj_stun_req_cred_info,
    pub pkt: *mut ::std::os::raw::c_void,
    pub max_len: ::std::os::raw::c_uint,
    pub pkt_size: pj_size_t,
    pub addr_len: ::std::os::raw::c_uint,
    pub dst_addr: *const pj_sockaddr_t,
    pub res_timer: pj_timer_entry,
}
#[test]
fn bindgen_test_layout_pj_stun_tx_data() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_tx_data>(),
        224usize,
        concat!("Size of: ", stringify!(pj_stun_tx_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_tx_data>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_stun_tx_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tx_data>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tx_data),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tx_data>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tx_data),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tx_data>())).pool as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tx_data),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tx_data>())).sess as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tx_data),
            "::",
            stringify!(sess)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tx_data>())).msg as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tx_data),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tx_data>())).token as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tx_data),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tx_data>())).client_tsx as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tx_data),
            "::",
            stringify!(client_tsx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tx_data>())).retransmit as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tx_data),
            "::",
            stringify!(retransmit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tx_data>())).msg_magic as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tx_data),
            "::",
            stringify!(msg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tx_data>())).msg_key as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tx_data),
            "::",
            stringify!(msg_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tx_data>())).grp_lock as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tx_data),
            "::",
            stringify!(grp_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tx_data>())).auth_info as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tx_data),
            "::",
            stringify!(auth_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tx_data>())).pkt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tx_data),
            "::",
            stringify!(pkt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tx_data>())).max_len as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tx_data),
            "::",
            stringify!(max_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tx_data>())).pkt_size as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tx_data),
            "::",
            stringify!(pkt_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tx_data>())).addr_len as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tx_data),
            "::",
            stringify!(addr_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tx_data>())).dst_addr as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tx_data),
            "::",
            stringify!(dst_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_tx_data>())).res_timer as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_tx_data),
            "::",
            stringify!(res_timer)
        )
    );
}
pub const pj_stun_sess_msg_log_flag_PJ_STUN_SESS_LOG_TX_REQ: pj_stun_sess_msg_log_flag = 1;
pub const pj_stun_sess_msg_log_flag_PJ_STUN_SESS_LOG_TX_RES: pj_stun_sess_msg_log_flag = 2;
pub const pj_stun_sess_msg_log_flag_PJ_STUN_SESS_LOG_TX_IND: pj_stun_sess_msg_log_flag = 4;
pub const pj_stun_sess_msg_log_flag_PJ_STUN_SESS_LOG_RX_REQ: pj_stun_sess_msg_log_flag = 8;
pub const pj_stun_sess_msg_log_flag_PJ_STUN_SESS_LOG_RX_RES: pj_stun_sess_msg_log_flag = 16;
pub const pj_stun_sess_msg_log_flag_PJ_STUN_SESS_LOG_RX_IND: pj_stun_sess_msg_log_flag = 32;
pub type pj_stun_sess_msg_log_flag = ::std::os::raw::c_uint;
extern "C" {
    pub fn pj_stun_session_create(
        cfg: *mut pj_stun_config,
        name: *const ::std::os::raw::c_char,
        cb: *const pj_stun_session_cb,
        fingerprint: pj_bool_t,
        grp_lock: *mut pj_grp_lock_t,
        p_sess: *mut *mut pj_stun_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_session_destroy(sess: *mut pj_stun_session) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_session_set_user_data(
        sess: *mut pj_stun_session,
        user_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_session_get_user_data(sess: *mut pj_stun_session)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pj_stun_session_get_grp_lock(sess: *mut pj_stun_session) -> *mut pj_grp_lock_t;
}
extern "C" {
    pub fn pj_stun_session_set_software_name(
        sess: *mut pj_stun_session,
        sw: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_session_set_credential(
        sess: *mut pj_stun_session,
        auth_type: pj_stun_auth_type,
        cred: *const pj_stun_auth_cred,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_session_set_log(sess: *mut pj_stun_session, flags: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn pj_stun_session_use_fingerprint(
        sess: *mut pj_stun_session,
        use_: pj_bool_t,
    ) -> pj_bool_t;
}
extern "C" {
    pub fn pj_stun_session_create_req(
        sess: *mut pj_stun_session,
        msg_type: ::std::os::raw::c_int,
        magic: pj_uint32_t,
        tsx_id: *const pj_uint8_t,
        p_tdata: *mut *mut pj_stun_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_session_create_ind(
        sess: *mut pj_stun_session,
        msg_type: ::std::os::raw::c_int,
        p_tdata: *mut *mut pj_stun_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_session_create_res(
        sess: *mut pj_stun_session,
        rdata: *const pj_stun_rx_data,
        err_code: ::std::os::raw::c_uint,
        err_msg: *const pj_str_t,
        p_tdata: *mut *mut pj_stun_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_session_send_msg(
        sess: *mut pj_stun_session,
        token: *mut ::std::os::raw::c_void,
        cache_res: pj_bool_t,
        retransmit: pj_bool_t,
        dst_addr: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_uint,
        tdata: *mut pj_stun_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_session_respond(
        sess: *mut pj_stun_session,
        rdata: *const pj_stun_rx_data,
        code: ::std::os::raw::c_uint,
        err_msg: *const ::std::os::raw::c_char,
        token: *mut ::std::os::raw::c_void,
        cache: pj_bool_t,
        dst_addr: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_session_cancel_req(
        sess: *mut pj_stun_session,
        tdata: *mut pj_stun_tx_data,
        notify: pj_bool_t,
        status: pj_status_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_session_retransmit_req(
        sess: *mut pj_stun_session,
        tdata: *mut pj_stun_tx_data,
        mod_count: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_session_on_rx_pkt(
        sess: *mut pj_stun_session,
        packet: *const ::std::os::raw::c_void,
        pkt_size: pj_size_t,
        options: ::std::os::raw::c_uint,
        token: *mut ::std::os::raw::c_void,
        parsed_len: *mut pj_size_t,
        src_addr: *const pj_sockaddr_t,
        src_addr_len: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_msg_destroy_tdata(sess: *mut pj_stun_session, tdata: *mut pj_stun_tx_data);
}
pub const pj_ice_cand_type_PJ_ICE_CAND_TYPE_HOST: pj_ice_cand_type = 0;
pub const pj_ice_cand_type_PJ_ICE_CAND_TYPE_SRFLX: pj_ice_cand_type = 1;
pub const pj_ice_cand_type_PJ_ICE_CAND_TYPE_PRFLX: pj_ice_cand_type = 2;
pub const pj_ice_cand_type_PJ_ICE_CAND_TYPE_RELAYED: pj_ice_cand_type = 3;
pub const pj_ice_cand_type_PJ_ICE_CAND_TYPE_MAX: pj_ice_cand_type = 4;
pub type pj_ice_cand_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ice_sess_comp {
    pub valid_check: *mut pj_ice_sess_check,
    pub nominated_check: *mut pj_ice_sess_check,
    pub stun_sess: *mut pj_stun_session,
}
#[test]
fn bindgen_test_layout_pj_ice_sess_comp() {
    assert_eq!(
        ::std::mem::size_of::<pj_ice_sess_comp>(),
        24usize,
        concat!("Size of: ", stringify!(pj_ice_sess_comp))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ice_sess_comp>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ice_sess_comp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_comp>())).valid_check as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_comp),
            "::",
            stringify!(valid_check)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_sess_comp>())).nominated_check as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_comp),
            "::",
            stringify!(nominated_check)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_comp>())).stun_sess as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_comp),
            "::",
            stringify!(stun_sess)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ice_msg_data {
    pub transport_id: ::std::os::raw::c_uint,
    pub has_req_data: pj_bool_t,
    pub data: pj_ice_msg_data_data,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pj_ice_msg_data_data {
    pub req: pj_ice_msg_data_data_request_data,
    _bindgen_union_align: [u64; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ice_msg_data_data_request_data {
    pub ice: *mut pj_ice_sess,
    pub clist: *mut pj_ice_sess_checklist,
    pub ckid: ::std::os::raw::c_uint,
    pub lcand: *mut pj_ice_sess_cand,
    pub rcand: *mut pj_ice_sess_cand,
}
#[test]
fn bindgen_test_layout_pj_ice_msg_data_data_request_data() {
    assert_eq!(
        ::std::mem::size_of::<pj_ice_msg_data_data_request_data>(),
        40usize,
        concat!("Size of: ", stringify!(pj_ice_msg_data_data_request_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ice_msg_data_data_request_data>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pj_ice_msg_data_data_request_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_msg_data_data_request_data>())).ice as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_msg_data_data_request_data),
            "::",
            stringify!(ice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_msg_data_data_request_data>())).clist as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_msg_data_data_request_data),
            "::",
            stringify!(clist)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_msg_data_data_request_data>())).ckid as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_msg_data_data_request_data),
            "::",
            stringify!(ckid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_msg_data_data_request_data>())).lcand as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_msg_data_data_request_data),
            "::",
            stringify!(lcand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_msg_data_data_request_data>())).rcand as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_msg_data_data_request_data),
            "::",
            stringify!(rcand)
        )
    );
}
#[test]
fn bindgen_test_layout_pj_ice_msg_data_data() {
    assert_eq!(
        ::std::mem::size_of::<pj_ice_msg_data_data>(),
        40usize,
        concat!("Size of: ", stringify!(pj_ice_msg_data_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ice_msg_data_data>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ice_msg_data_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_msg_data_data>())).req as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_msg_data_data),
            "::",
            stringify!(req)
        )
    );
}
#[test]
fn bindgen_test_layout_pj_ice_msg_data() {
    assert_eq!(
        ::std::mem::size_of::<pj_ice_msg_data>(),
        48usize,
        concat!("Size of: ", stringify!(pj_ice_msg_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ice_msg_data>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ice_msg_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_msg_data>())).transport_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_msg_data),
            "::",
            stringify!(transport_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_msg_data>())).has_req_data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_msg_data),
            "::",
            stringify!(has_req_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_msg_data>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_msg_data),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ice_sess_cand {
    pub id: ::std::os::raw::c_uint,
    pub type_: pj_ice_cand_type,
    pub status: pj_status_t,
    pub comp_id: pj_uint8_t,
    pub transport_id: pj_uint8_t,
    pub local_pref: pj_uint16_t,
    pub foundation: pj_str_t,
    pub prio: pj_uint32_t,
    pub addr: pj_sockaddr,
    pub base_addr: pj_sockaddr,
    pub rel_addr: pj_sockaddr,
}
#[test]
fn bindgen_test_layout_pj_ice_sess_cand() {
    assert_eq!(
        ::std::mem::size_of::<pj_ice_sess_cand>(),
        120usize,
        concat!("Size of: ", stringify!(pj_ice_sess_cand))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ice_sess_cand>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ice_sess_cand))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_cand>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_cand),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_cand>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_cand),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_cand>())).status as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_cand),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_cand>())).comp_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_cand),
            "::",
            stringify!(comp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_cand>())).transport_id as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_cand),
            "::",
            stringify!(transport_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_cand>())).local_pref as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_cand),
            "::",
            stringify!(local_pref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_cand>())).foundation as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_cand),
            "::",
            stringify!(foundation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_cand>())).prio as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_cand),
            "::",
            stringify!(prio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_cand>())).addr as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_cand),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_cand>())).base_addr as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_cand),
            "::",
            stringify!(base_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_cand>())).rel_addr as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_cand),
            "::",
            stringify!(rel_addr)
        )
    );
}
pub const pj_ice_sess_check_state_PJ_ICE_SESS_CHECK_STATE_FROZEN: pj_ice_sess_check_state = 0;
pub const pj_ice_sess_check_state_PJ_ICE_SESS_CHECK_STATE_WAITING: pj_ice_sess_check_state = 1;
pub const pj_ice_sess_check_state_PJ_ICE_SESS_CHECK_STATE_IN_PROGRESS: pj_ice_sess_check_state = 2;
pub const pj_ice_sess_check_state_PJ_ICE_SESS_CHECK_STATE_SUCCEEDED: pj_ice_sess_check_state = 3;
pub const pj_ice_sess_check_state_PJ_ICE_SESS_CHECK_STATE_FAILED: pj_ice_sess_check_state = 4;
pub type pj_ice_sess_check_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ice_sess_check {
    pub lcand: *mut pj_ice_sess_cand,
    pub rcand: *mut pj_ice_sess_cand,
    pub foundation_idx: ::std::os::raw::c_int,
    pub prio: pj_timestamp,
    pub state: pj_ice_sess_check_state,
    pub tdata: *mut pj_stun_tx_data,
    pub nominated: pj_bool_t,
    pub err_code: pj_status_t,
}
#[test]
fn bindgen_test_layout_pj_ice_sess_check() {
    assert_eq!(
        ::std::mem::size_of::<pj_ice_sess_check>(),
        56usize,
        concat!("Size of: ", stringify!(pj_ice_sess_check))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ice_sess_check>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ice_sess_check))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_check>())).lcand as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_check),
            "::",
            stringify!(lcand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_check>())).rcand as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_check),
            "::",
            stringify!(rcand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_sess_check>())).foundation_idx as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_check),
            "::",
            stringify!(foundation_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_check>())).prio as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_check),
            "::",
            stringify!(prio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_check>())).state as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_check),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_check>())).tdata as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_check),
            "::",
            stringify!(tdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_check>())).nominated as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_check),
            "::",
            stringify!(nominated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_check>())).err_code as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_check),
            "::",
            stringify!(err_code)
        )
    );
}
pub const pj_ice_sess_checklist_state_PJ_ICE_SESS_CHECKLIST_ST_IDLE: pj_ice_sess_checklist_state =
    0;
pub const pj_ice_sess_checklist_state_PJ_ICE_SESS_CHECKLIST_ST_RUNNING:
    pj_ice_sess_checklist_state = 1;
pub const pj_ice_sess_checklist_state_PJ_ICE_SESS_CHECKLIST_ST_COMPLETED:
    pj_ice_sess_checklist_state = 2;
pub type pj_ice_sess_checklist_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ice_sess_checklist {
    pub state: pj_ice_sess_checklist_state,
    pub count: ::std::os::raw::c_uint,
    pub checks: [pj_ice_sess_check; 32usize],
    pub foundation_cnt: ::std::os::raw::c_uint,
    pub foundation: [pj_str_t; 32usize],
    pub timer: pj_timer_entry,
}
#[test]
fn bindgen_test_layout_pj_ice_sess_checklist() {
    assert_eq!(
        ::std::mem::size_of::<pj_ice_sess_checklist>(),
        2352usize,
        concat!("Size of: ", stringify!(pj_ice_sess_checklist))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ice_sess_checklist>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ice_sess_checklist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_checklist>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_checklist),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_checklist>())).count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_checklist),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_checklist>())).checks as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_checklist),
            "::",
            stringify!(checks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_sess_checklist>())).foundation_cnt as *const _ as usize
        },
        1800usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_checklist),
            "::",
            stringify!(foundation_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_sess_checklist>())).foundation as *const _ as usize
        },
        1808usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_checklist),
            "::",
            stringify!(foundation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_checklist>())).timer as *const _ as usize },
        2320usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_checklist),
            "::",
            stringify!(timer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ice_sess_cb {
    pub on_valid_pair: ::std::option::Option<unsafe extern "C" fn(ice: *mut pj_ice_sess)>,
    pub on_ice_complete:
        ::std::option::Option<unsafe extern "C" fn(ice: *mut pj_ice_sess, status: pj_status_t)>,
    pub on_tx_pkt: ::std::option::Option<
        unsafe extern "C" fn(
            ice: *mut pj_ice_sess,
            comp_id: ::std::os::raw::c_uint,
            transport_id: ::std::os::raw::c_uint,
            pkt: *const ::std::os::raw::c_void,
            size: pj_size_t,
            dst_addr: *const pj_sockaddr_t,
            dst_addr_len: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub on_rx_data: ::std::option::Option<
        unsafe extern "C" fn(
            ice: *mut pj_ice_sess,
            comp_id: ::std::os::raw::c_uint,
            transport_id: ::std::os::raw::c_uint,
            pkt: *mut ::std::os::raw::c_void,
            size: pj_size_t,
            src_addr: *const pj_sockaddr_t,
            src_addr_len: ::std::os::raw::c_uint,
        ),
    >,
}
#[test]
fn bindgen_test_layout_pj_ice_sess_cb() {
    assert_eq!(
        ::std::mem::size_of::<pj_ice_sess_cb>(),
        32usize,
        concat!("Size of: ", stringify!(pj_ice_sess_cb))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ice_sess_cb>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ice_sess_cb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_cb>())).on_valid_pair as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_cb),
            "::",
            stringify!(on_valid_pair)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_cb>())).on_ice_complete as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_cb),
            "::",
            stringify!(on_ice_complete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_cb>())).on_tx_pkt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_cb),
            "::",
            stringify!(on_tx_pkt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_cb>())).on_rx_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_cb),
            "::",
            stringify!(on_rx_data)
        )
    );
}
pub const pj_ice_sess_role_PJ_ICE_SESS_ROLE_UNKNOWN: pj_ice_sess_role = 0;
pub const pj_ice_sess_role_PJ_ICE_SESS_ROLE_CONTROLLED: pj_ice_sess_role = 1;
pub const pj_ice_sess_role_PJ_ICE_SESS_ROLE_CONTROLLING: pj_ice_sess_role = 2;
pub type pj_ice_sess_role = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ice_rx_check {
    pub prev: *mut pj_ice_rx_check,
    pub next: *mut pj_ice_rx_check,
    pub comp_id: ::std::os::raw::c_uint,
    pub transport_id: ::std::os::raw::c_uint,
    pub src_addr: pj_sockaddr,
    pub src_addr_len: ::std::os::raw::c_uint,
    pub use_candidate: pj_bool_t,
    pub priority: pj_uint32_t,
    pub role_attr: *mut pj_stun_uint64_attr,
}
#[test]
fn bindgen_test_layout_pj_ice_rx_check() {
    assert_eq!(
        ::std::mem::size_of::<pj_ice_rx_check>(),
        72usize,
        concat!("Size of: ", stringify!(pj_ice_rx_check))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ice_rx_check>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ice_rx_check))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_rx_check>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_rx_check),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_rx_check>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_rx_check),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_rx_check>())).comp_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_rx_check),
            "::",
            stringify!(comp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_rx_check>())).transport_id as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_rx_check),
            "::",
            stringify!(transport_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_rx_check>())).src_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_rx_check),
            "::",
            stringify!(src_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_rx_check>())).src_addr_len as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_rx_check),
            "::",
            stringify!(src_addr_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_rx_check>())).use_candidate as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_rx_check),
            "::",
            stringify!(use_candidate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_rx_check>())).priority as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_rx_check),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_rx_check>())).role_attr as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_rx_check),
            "::",
            stringify!(role_attr)
        )
    );
}
pub const pj_ice_sess_trickle_PJ_ICE_SESS_TRICKLE_DISABLED: pj_ice_sess_trickle = 0;
pub const pj_ice_sess_trickle_PJ_ICE_SESS_TRICKLE_HALF: pj_ice_sess_trickle = 1;
pub const pj_ice_sess_trickle_PJ_ICE_SESS_TRICKLE_FULL: pj_ice_sess_trickle = 2;
pub type pj_ice_sess_trickle = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ice_sess_options {
    pub aggressive: pj_bool_t,
    pub nominated_check_delay: ::std::os::raw::c_uint,
    pub controlled_agent_want_nom_timeout: ::std::os::raw::c_int,
    pub trickle: pj_ice_sess_trickle,
}
#[test]
fn bindgen_test_layout_pj_ice_sess_options() {
    assert_eq!(
        ::std::mem::size_of::<pj_ice_sess_options>(),
        16usize,
        concat!("Size of: ", stringify!(pj_ice_sess_options))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ice_sess_options>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_ice_sess_options))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_options>())).aggressive as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_options),
            "::",
            stringify!(aggressive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_sess_options>())).nominated_check_delay as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_options),
            "::",
            stringify!(nominated_check_delay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_sess_options>())).controlled_agent_want_nom_timeout
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_options),
            "::",
            stringify!(controlled_agent_want_nom_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess_options>())).trickle as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess_options),
            "::",
            stringify!(trickle)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ice_sess {
    pub obj_name: [::std::os::raw::c_char; 32usize],
    pub pool: *mut pj_pool_t,
    pub user_data: *mut ::std::os::raw::c_void,
    pub grp_lock: *mut pj_grp_lock_t,
    pub role: pj_ice_sess_role,
    pub opt: pj_ice_sess_options,
    pub tie_breaker: pj_timestamp,
    pub prefs: *mut pj_uint8_t,
    pub is_nominating: pj_bool_t,
    pub is_complete: pj_bool_t,
    pub is_destroying: pj_bool_t,
    pub valid_pair_found: pj_bool_t,
    pub is_trickling: pj_bool_t,
    pub ice_status: pj_status_t,
    pub timer: pj_timer_entry,
    pub cb: pj_ice_sess_cb,
    pub stun_cfg: pj_stun_config,
    pub tx_ufrag: pj_str_t,
    pub tx_uname: pj_str_t,
    pub tx_pass: pj_str_t,
    pub rx_ufrag: pj_str_t,
    pub rx_uname: pj_str_t,
    pub rx_pass: pj_str_t,
    pub comp_cnt: ::std::os::raw::c_uint,
    pub comp: [pj_ice_sess_comp; 2usize],
    pub comp_ka: ::std::os::raw::c_uint,
    pub lcand_cnt: ::std::os::raw::c_uint,
    pub lcand: [pj_ice_sess_cand; 16usize],
    pub lcand_paired: ::std::os::raw::c_uint,
    pub rcand_cnt: ::std::os::raw::c_uint,
    pub rcand: [pj_ice_sess_cand; 16usize],
    pub rcand_paired: ::std::os::raw::c_uint,
    pub tp_data: [pj_ice_msg_data; 5usize],
    pub early_check: pj_ice_rx_check,
    pub clist: pj_ice_sess_checklist,
    pub valid_list: pj_ice_sess_checklist,
    pub tmp: pj_ice_sess__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pj_ice_sess__bindgen_ty_1 {
    pub txt: [::std::os::raw::c_char; 128usize],
    pub errmsg: [::std::os::raw::c_char; 80usize],
    _bindgen_union_align: [u8; 128usize],
}
#[test]
fn bindgen_test_layout_pj_ice_sess__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pj_ice_sess__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(pj_ice_sess__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ice_sess__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(pj_ice_sess__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess__bindgen_ty_1>())).txt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess__bindgen_ty_1),
            "::",
            stringify!(txt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_sess__bindgen_ty_1>())).errmsg as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess__bindgen_ty_1),
            "::",
            stringify!(errmsg)
        )
    );
}
#[test]
fn bindgen_test_layout_pj_ice_sess() {
    assert_eq!(
        ::std::mem::size_of::<pj_ice_sess>(),
        9400usize,
        concat!("Size of: ", stringify!(pj_ice_sess))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ice_sess>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ice_sess))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).obj_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(obj_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).pool as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).user_data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).grp_lock as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(grp_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).role as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(role)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).opt as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).tie_breaker as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(tie_breaker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).prefs as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(prefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).is_nominating as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(is_nominating)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).is_complete as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(is_complete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).is_destroying as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(is_destroying)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).valid_pair_found as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(valid_pair_found)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).is_trickling as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(is_trickling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).ice_status as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(ice_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).timer as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).cb as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).stun_cfg as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(stun_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).tx_ufrag as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(tx_ufrag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).tx_uname as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(tx_uname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).tx_pass as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(tx_pass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).rx_ufrag as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(rx_ufrag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).rx_uname as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(rx_uname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).rx_pass as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(rx_pass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).comp_cnt as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(comp_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).comp as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(comp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).comp_ka as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(comp_ka)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).lcand_cnt as *const _ as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(lcand_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).lcand as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(lcand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).lcand_paired as *const _ as usize },
        2320usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(lcand_paired)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).rcand_cnt as *const _ as usize },
        2324usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(rcand_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).rcand as *const _ as usize },
        2328usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(rcand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).rcand_paired as *const _ as usize },
        4248usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(rcand_paired)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).tp_data as *const _ as usize },
        4256usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(tp_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).early_check as *const _ as usize },
        4496usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(early_check)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).clist as *const _ as usize },
        4568usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(clist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).valid_list as *const _ as usize },
        6920usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(valid_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_sess>())).tmp as *const _ as usize },
        9272usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_sess),
            "::",
            stringify!(tmp)
        )
    );
}
extern "C" {
    pub fn pj_ice_get_cand_type_name(type_: pj_ice_cand_type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_ice_sess_role_name(role: pj_ice_sess_role) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_ice_calc_foundation(
        pool: *mut pj_pool_t,
        foundation: *mut pj_str_t,
        type_: pj_ice_cand_type,
        base_addr: *const pj_sockaddr,
    );
}
extern "C" {
    pub fn pj_ice_sess_options_default(opt: *mut pj_ice_sess_options);
}
extern "C" {
    pub fn pj_ice_sess_create(
        stun_cfg: *mut pj_stun_config,
        name: *const ::std::os::raw::c_char,
        role: pj_ice_sess_role,
        comp_cnt: ::std::os::raw::c_uint,
        cb: *const pj_ice_sess_cb,
        local_ufrag: *const pj_str_t,
        local_passwd: *const pj_str_t,
        grp_lock: *mut pj_grp_lock_t,
        p_ice: *mut *mut pj_ice_sess,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_sess_get_options(
        ice: *mut pj_ice_sess,
        opt: *mut pj_ice_sess_options,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_sess_set_options(
        ice: *mut pj_ice_sess,
        opt: *const pj_ice_sess_options,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_sess_destroy(ice: *mut pj_ice_sess) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_sess_change_role(
        ice: *mut pj_ice_sess,
        new_role: pj_ice_sess_role,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_sess_set_prefs(ice: *mut pj_ice_sess, prefs: *const pj_uint8_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_sess_add_cand(
        ice: *mut pj_ice_sess,
        comp_id: ::std::os::raw::c_uint,
        transport_id: ::std::os::raw::c_uint,
        type_: pj_ice_cand_type,
        local_pref: pj_uint16_t,
        foundation: *const pj_str_t,
        addr: *const pj_sockaddr_t,
        base_addr: *const pj_sockaddr_t,
        rel_addr: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_int,
        p_cand_id: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_sess_find_default_cand(
        ice: *mut pj_ice_sess,
        comp_id: ::std::os::raw::c_uint,
        p_cand_id: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_sess_create_check_list(
        ice: *mut pj_ice_sess,
        rem_ufrag: *const pj_str_t,
        rem_passwd: *const pj_str_t,
        rem_cand_cnt: ::std::os::raw::c_uint,
        rem_cand: *const pj_ice_sess_cand,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_sess_update_check_list(
        ice: *mut pj_ice_sess,
        rem_ufrag: *const pj_str_t,
        rem_passwd: *const pj_str_t,
        rem_cand_cnt: ::std::os::raw::c_uint,
        rem_cand: *const pj_ice_sess_cand,
        trickle_done: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_sess_start_check(ice: *mut pj_ice_sess) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_sess_send_data(
        ice: *mut pj_ice_sess,
        comp_id: ::std::os::raw::c_uint,
        data: *const ::std::os::raw::c_void,
        data_len: pj_size_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_sess_on_rx_pkt(
        ice: *mut pj_ice_sess,
        comp_id: ::std::os::raw::c_uint,
        transport_id: ::std::os::raw::c_uint,
        pkt: *mut ::std::os::raw::c_void,
        pkt_size: pj_size_t,
        src_addr: *const pj_sockaddr_t,
        src_addr_len: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_sock {
    _unused: [u8; 0],
}
pub const pj_stun_sock_op_PJ_STUN_SOCK_DNS_OP: pj_stun_sock_op = 1;
pub const pj_stun_sock_op_PJ_STUN_SOCK_BINDING_OP: pj_stun_sock_op = 2;
pub const pj_stun_sock_op_PJ_STUN_SOCK_KEEP_ALIVE_OP: pj_stun_sock_op = 3;
pub const pj_stun_sock_op_PJ_STUN_SOCK_MAPPED_ADDR_CHANGE: pj_stun_sock_op = 4;
pub type pj_stun_sock_op = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_sock_cb {
    pub on_rx_data: ::std::option::Option<
        unsafe extern "C" fn(
            stun_sock: *mut pj_stun_sock,
            pkt: *mut ::std::os::raw::c_void,
            pkt_len: ::std::os::raw::c_uint,
            src_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ) -> pj_bool_t,
    >,
    pub on_data_sent: ::std::option::Option<
        unsafe extern "C" fn(
            stun_sock: *mut pj_stun_sock,
            send_key: *mut pj_ioqueue_op_key_t,
            sent: pj_ssize_t,
        ) -> pj_bool_t,
    >,
    pub on_status: ::std::option::Option<
        unsafe extern "C" fn(
            stun_sock: *mut pj_stun_sock,
            op: pj_stun_sock_op,
            status: pj_status_t,
        ) -> pj_bool_t,
    >,
}
#[test]
fn bindgen_test_layout_pj_stun_sock_cb() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_sock_cb>(),
        24usize,
        concat!("Size of: ", stringify!(pj_stun_sock_cb))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_sock_cb>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_stun_sock_cb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sock_cb>())).on_rx_data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sock_cb),
            "::",
            stringify!(on_rx_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sock_cb>())).on_data_sent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sock_cb),
            "::",
            stringify!(on_data_sent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sock_cb>())).on_status as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sock_cb),
            "::",
            stringify!(on_status)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_stun_sock_info {
    pub bound_addr: pj_sockaddr,
    pub srv_addr: pj_sockaddr,
    pub mapped_addr: pj_sockaddr,
    pub alias_cnt: ::std::os::raw::c_uint,
    pub aliases: [pj_sockaddr; 8usize],
}
#[test]
fn bindgen_test_layout_pj_stun_sock_info() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_sock_info>(),
        312usize,
        concat!("Size of: ", stringify!(pj_stun_sock_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_sock_info>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_stun_sock_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sock_info>())).bound_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sock_info),
            "::",
            stringify!(bound_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sock_info>())).srv_addr as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sock_info),
            "::",
            stringify!(srv_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sock_info>())).mapped_addr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sock_info),
            "::",
            stringify!(mapped_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sock_info>())).alias_cnt as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sock_info),
            "::",
            stringify!(alias_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sock_info>())).aliases as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sock_info),
            "::",
            stringify!(aliases)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_stun_sock_cfg {
    pub grp_lock: *mut pj_grp_lock_t,
    pub max_pkt_size: ::std::os::raw::c_uint,
    pub async_cnt: ::std::os::raw::c_uint,
    pub bound_addr: pj_sockaddr,
    pub port_range: pj_uint16_t,
    pub ka_interval: ::std::os::raw::c_int,
    pub qos_type: pj_qos_type,
    pub qos_params: pj_qos_params,
    pub qos_ignore_error: pj_bool_t,
    pub so_rcvbuf_size: ::std::os::raw::c_uint,
    pub so_sndbuf_size: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pj_stun_sock_cfg() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_sock_cfg>(),
        80usize,
        concat!("Size of: ", stringify!(pj_stun_sock_cfg))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_sock_cfg>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_stun_sock_cfg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sock_cfg>())).grp_lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sock_cfg),
            "::",
            stringify!(grp_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sock_cfg>())).max_pkt_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sock_cfg),
            "::",
            stringify!(max_pkt_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sock_cfg>())).async_cnt as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sock_cfg),
            "::",
            stringify!(async_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sock_cfg>())).bound_addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sock_cfg),
            "::",
            stringify!(bound_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sock_cfg>())).port_range as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sock_cfg),
            "::",
            stringify!(port_range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sock_cfg>())).ka_interval as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sock_cfg),
            "::",
            stringify!(ka_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sock_cfg>())).qos_type as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sock_cfg),
            "::",
            stringify!(qos_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sock_cfg>())).qos_params as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sock_cfg),
            "::",
            stringify!(qos_params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_sock_cfg>())).qos_ignore_error as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sock_cfg),
            "::",
            stringify!(qos_ignore_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sock_cfg>())).so_rcvbuf_size as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sock_cfg),
            "::",
            stringify!(so_rcvbuf_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_sock_cfg>())).so_sndbuf_size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_sock_cfg),
            "::",
            stringify!(so_sndbuf_size)
        )
    );
}
extern "C" {
    pub fn pj_stun_sock_op_name(op: pj_stun_sock_op) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_stun_sock_cfg_default(cfg: *mut pj_stun_sock_cfg);
}
extern "C" {
    pub fn pj_stun_sock_create(
        stun_cfg: *mut pj_stun_config,
        name: *const ::std::os::raw::c_char,
        af: ::std::os::raw::c_int,
        cb: *const pj_stun_sock_cb,
        cfg: *const pj_stun_sock_cfg,
        user_data: *mut ::std::os::raw::c_void,
        p_sock: *mut *mut pj_stun_sock,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_sock_start(
        stun_sock: *mut pj_stun_sock,
        domain: *const pj_str_t,
        default_port: pj_uint16_t,
        resolver: *mut pj_dns_resolver,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_sock_destroy(sock: *mut pj_stun_sock) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_sock_set_user_data(
        stun_sock: *mut pj_stun_sock,
        user_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_sock_get_user_data(stun_sock: *mut pj_stun_sock) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pj_stun_sock_get_grp_lock(stun_sock: *mut pj_stun_sock) -> *mut pj_grp_lock_t;
}
extern "C" {
    pub fn pj_stun_sock_get_info(
        stun_sock: *mut pj_stun_sock,
        info: *mut pj_stun_sock_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_sock_sendto(
        stun_sock: *mut pj_stun_sock,
        send_key: *mut pj_ioqueue_op_key_t,
        pkt: *const ::std::os::raw::c_void,
        pkt_len: ::std::os::raw::c_uint,
        flag: ::std::os::raw::c_uint,
        dst_addr: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_turn_session {
    _unused: [u8; 0],
}
pub const pj_turn_tp_type_PJ_TURN_TP_UDP: pj_turn_tp_type = 17;
pub const pj_turn_tp_type_PJ_TURN_TP_TCP: pj_turn_tp_type = 6;
pub const pj_turn_tp_type_PJ_TURN_TP_TLS: pj_turn_tp_type = 56;
pub type pj_turn_tp_type = ::std::os::raw::c_uint;
pub const pj_turn_state_t_PJ_TURN_STATE_NULL: pj_turn_state_t = 0;
pub const pj_turn_state_t_PJ_TURN_STATE_RESOLVING: pj_turn_state_t = 1;
pub const pj_turn_state_t_PJ_TURN_STATE_RESOLVED: pj_turn_state_t = 2;
pub const pj_turn_state_t_PJ_TURN_STATE_ALLOCATING: pj_turn_state_t = 3;
pub const pj_turn_state_t_PJ_TURN_STATE_READY: pj_turn_state_t = 4;
pub const pj_turn_state_t_PJ_TURN_STATE_DEALLOCATING: pj_turn_state_t = 5;
pub const pj_turn_state_t_PJ_TURN_STATE_DEALLOCATED: pj_turn_state_t = 6;
pub const pj_turn_state_t_PJ_TURN_STATE_DESTROYING: pj_turn_state_t = 7;
pub type pj_turn_state_t = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pj_turn_channel_data {
    pub ch_number: pj_uint16_t,
    pub length: pj_uint16_t,
}
#[test]
fn bindgen_test_layout_pj_turn_channel_data() {
    assert_eq!(
        ::std::mem::size_of::<pj_turn_channel_data>(),
        4usize,
        concat!("Size of: ", stringify!(pj_turn_channel_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_turn_channel_data>(),
        1usize,
        concat!("Alignment of ", stringify!(pj_turn_channel_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_channel_data>())).ch_number as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_channel_data),
            "::",
            stringify!(ch_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_channel_data>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_channel_data),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_turn_session_cb {
    pub on_send_pkt: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_turn_session,
            pkt: *const pj_uint8_t,
            pkt_len: ::std::os::raw::c_uint,
            dst_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub on_stun_send_pkt: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_turn_session,
            pkt: *const pj_uint8_t,
            pkt_len: ::std::os::raw::c_uint,
            dst_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub on_channel_bound: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_turn_session,
            peer_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
            ch_num: ::std::os::raw::c_uint,
        ),
    >,
    pub on_rx_data: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_turn_session,
            pkt: *mut ::std::os::raw::c_void,
            pkt_len: ::std::os::raw::c_uint,
            peer_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ),
    >,
    pub on_state: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_turn_session,
            old_state: pj_turn_state_t,
            new_state: pj_turn_state_t,
        ),
    >,
    pub on_connection_attempt: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_turn_session,
            conn_id: pj_uint32_t,
            peer_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ),
    >,
    pub on_connection_bind_status: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_turn_session,
            status: pj_status_t,
            conn_id: pj_uint32_t,
            peer_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ),
    >,
}
#[test]
fn bindgen_test_layout_pj_turn_session_cb() {
    assert_eq!(
        ::std::mem::size_of::<pj_turn_session_cb>(),
        56usize,
        concat!("Size of: ", stringify!(pj_turn_session_cb))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_turn_session_cb>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_turn_session_cb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_session_cb>())).on_send_pkt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_session_cb),
            "::",
            stringify!(on_send_pkt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_session_cb>())).on_stun_send_pkt as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_session_cb),
            "::",
            stringify!(on_stun_send_pkt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_session_cb>())).on_channel_bound as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_session_cb),
            "::",
            stringify!(on_channel_bound)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_session_cb>())).on_rx_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_session_cb),
            "::",
            stringify!(on_rx_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_session_cb>())).on_state as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_session_cb),
            "::",
            stringify!(on_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_session_cb>())).on_connection_attempt as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_session_cb),
            "::",
            stringify!(on_connection_attempt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_session_cb>())).on_connection_bind_status as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_session_cb),
            "::",
            stringify!(on_connection_bind_status)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_turn_alloc_param {
    pub bandwidth: ::std::os::raw::c_int,
    pub lifetime: ::std::os::raw::c_int,
    pub ka_interval: ::std::os::raw::c_int,
    pub af: ::std::os::raw::c_int,
    pub peer_conn_type: pj_turn_tp_type,
}
#[test]
fn bindgen_test_layout_pj_turn_alloc_param() {
    assert_eq!(
        ::std::mem::size_of::<pj_turn_alloc_param>(),
        20usize,
        concat!("Size of: ", stringify!(pj_turn_alloc_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_turn_alloc_param>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_turn_alloc_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_alloc_param>())).bandwidth as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_alloc_param),
            "::",
            stringify!(bandwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_alloc_param>())).lifetime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_alloc_param),
            "::",
            stringify!(lifetime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_alloc_param>())).ka_interval as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_alloc_param),
            "::",
            stringify!(ka_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_alloc_param>())).af as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_alloc_param),
            "::",
            stringify!(af)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_alloc_param>())).peer_conn_type as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_alloc_param),
            "::",
            stringify!(peer_conn_type)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_turn_session_info {
    pub state: pj_turn_state_t,
    pub last_status: pj_status_t,
    pub conn_type: pj_turn_tp_type,
    pub server: pj_sockaddr,
    pub mapped_addr: pj_sockaddr,
    pub relay_addr: pj_sockaddr,
    pub lifetime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pj_turn_session_info() {
    assert_eq!(
        ::std::mem::size_of::<pj_turn_session_info>(),
        100usize,
        concat!("Size of: ", stringify!(pj_turn_session_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_turn_session_info>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_turn_session_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_session_info>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_session_info),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_session_info>())).last_status as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_session_info),
            "::",
            stringify!(last_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_session_info>())).conn_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_session_info),
            "::",
            stringify!(conn_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_session_info>())).server as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_session_info),
            "::",
            stringify!(server)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_session_info>())).mapped_addr as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_session_info),
            "::",
            stringify!(mapped_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_session_info>())).relay_addr as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_session_info),
            "::",
            stringify!(relay_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_session_info>())).lifetime as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_session_info),
            "::",
            stringify!(lifetime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_turn_session_on_rx_pkt_param {
    pub pkt: *mut ::std::os::raw::c_void,
    pub pkt_len: pj_size_t,
    pub parsed_len: pj_size_t,
    pub src_addr: *const pj_sockaddr_t,
    pub src_addr_len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pj_turn_session_on_rx_pkt_param() {
    assert_eq!(
        ::std::mem::size_of::<pj_turn_session_on_rx_pkt_param>(),
        40usize,
        concat!("Size of: ", stringify!(pj_turn_session_on_rx_pkt_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_turn_session_on_rx_pkt_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_turn_session_on_rx_pkt_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_session_on_rx_pkt_param>())).pkt as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_session_on_rx_pkt_param),
            "::",
            stringify!(pkt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_session_on_rx_pkt_param>())).pkt_len as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_session_on_rx_pkt_param),
            "::",
            stringify!(pkt_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_session_on_rx_pkt_param>())).parsed_len as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_session_on_rx_pkt_param),
            "::",
            stringify!(parsed_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_session_on_rx_pkt_param>())).src_addr as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_session_on_rx_pkt_param),
            "::",
            stringify!(src_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_session_on_rx_pkt_param>())).src_addr_len as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_session_on_rx_pkt_param),
            "::",
            stringify!(src_addr_len)
        )
    );
}
extern "C" {
    pub fn pj_turn_alloc_param_default(prm: *mut pj_turn_alloc_param);
}
extern "C" {
    pub fn pj_turn_alloc_param_copy(
        pool: *mut pj_pool_t,
        dst: *mut pj_turn_alloc_param,
        src: *const pj_turn_alloc_param,
    );
}
extern "C" {
    pub fn pj_turn_state_name(state: pj_turn_state_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_turn_session_create(
        cfg: *const pj_stun_config,
        name: *const ::std::os::raw::c_char,
        af: ::std::os::raw::c_int,
        conn_type: pj_turn_tp_type,
        grp_lock: *mut pj_grp_lock_t,
        cb: *const pj_turn_session_cb,
        options: ::std::os::raw::c_uint,
        user_data: *mut ::std::os::raw::c_void,
        p_sess: *mut *mut pj_turn_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_session_shutdown(sess: *mut pj_turn_session) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_session_destroy(
        sess: *mut pj_turn_session,
        last_err: pj_status_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_session_get_info(
        sess: *mut pj_turn_session,
        info: *mut pj_turn_session_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_session_set_user_data(
        sess: *mut pj_turn_session,
        user_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_session_get_user_data(sess: *mut pj_turn_session)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pj_turn_session_get_grp_lock(sess: *mut pj_turn_session) -> *mut pj_grp_lock_t;
}
extern "C" {
    pub fn pj_turn_session_set_log(sess: *mut pj_turn_session, flags: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn pj_turn_session_set_software_name(
        sess: *mut pj_turn_session,
        sw: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_session_set_server(
        sess: *mut pj_turn_session,
        domain: *const pj_str_t,
        default_port: ::std::os::raw::c_int,
        resolver: *mut pj_dns_resolver,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_session_set_credential(
        sess: *mut pj_turn_session,
        cred: *const pj_stun_auth_cred,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_session_alloc(
        sess: *mut pj_turn_session,
        param: *const pj_turn_alloc_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_session_set_perm(
        sess: *mut pj_turn_session,
        addr_cnt: ::std::os::raw::c_uint,
        addr: *const pj_sockaddr,
        options: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_session_sendto(
        sess: *mut pj_turn_session,
        pkt: *const pj_uint8_t,
        pkt_len: ::std::os::raw::c_uint,
        peer_addr: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_session_bind_channel(
        sess: *mut pj_turn_session,
        peer: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_session_on_rx_pkt(
        sess: *mut pj_turn_session,
        pkt: *mut ::std::os::raw::c_void,
        pkt_len: pj_size_t,
        parsed_len: *mut pj_size_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_session_on_rx_pkt2(
        sess: *mut pj_turn_session,
        prm: *mut pj_turn_session_on_rx_pkt_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_session_connection_bind(
        sess: *mut pj_turn_session,
        pool: *mut pj_pool_t,
        conn_id: pj_uint32_t,
        peer_addr: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_turn_sock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_turn_sock_cb {
    pub on_rx_data: ::std::option::Option<
        unsafe extern "C" fn(
            turn_sock: *mut pj_turn_sock,
            pkt: *mut ::std::os::raw::c_void,
            pkt_len: ::std::os::raw::c_uint,
            peer_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ),
    >,
    pub on_data_sent: ::std::option::Option<
        unsafe extern "C" fn(sock: *mut pj_turn_sock, sent: pj_ssize_t) -> pj_bool_t,
    >,
    pub on_state: ::std::option::Option<
        unsafe extern "C" fn(
            turn_sock: *mut pj_turn_sock,
            old_state: pj_turn_state_t,
            new_state: pj_turn_state_t,
        ),
    >,
    pub on_connection_attempt: ::std::option::Option<
        unsafe extern "C" fn(
            turn_sock: *mut pj_turn_sock,
            conn_id: pj_uint32_t,
            peer_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub on_connection_status: ::std::option::Option<
        unsafe extern "C" fn(
            turn_sock: *mut pj_turn_sock,
            status: pj_status_t,
            conn_id: pj_uint32_t,
            peer_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ),
    >,
}
#[test]
fn bindgen_test_layout_pj_turn_sock_cb() {
    assert_eq!(
        ::std::mem::size_of::<pj_turn_sock_cb>(),
        40usize,
        concat!("Size of: ", stringify!(pj_turn_sock_cb))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_turn_sock_cb>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_turn_sock_cb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_sock_cb>())).on_rx_data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_cb),
            "::",
            stringify!(on_rx_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_sock_cb>())).on_data_sent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_cb),
            "::",
            stringify!(on_data_sent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_sock_cb>())).on_state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_cb),
            "::",
            stringify!(on_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_sock_cb>())).on_connection_attempt as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_cb),
            "::",
            stringify!(on_connection_attempt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_sock_cb>())).on_connection_status as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_cb),
            "::",
            stringify!(on_connection_status)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_turn_sock_tls_cfg {
    pub ca_list_file: pj_str_t,
    pub ca_list_path: pj_str_t,
    pub cert_file: pj_str_t,
    pub privkey_file: pj_str_t,
    pub ca_buf: pj_ssl_cert_buffer,
    pub cert_buf: pj_ssl_cert_buffer,
    pub privkey_buf: pj_ssl_cert_buffer,
    pub password: pj_str_t,
    pub ssock_param: pj_ssl_sock_param,
}
#[test]
fn bindgen_test_layout_pj_turn_sock_tls_cfg() {
    assert_eq!(
        ::std::mem::size_of::<pj_turn_sock_tls_cfg>(),
        496usize,
        concat!("Size of: ", stringify!(pj_turn_sock_tls_cfg))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_turn_sock_tls_cfg>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_turn_sock_tls_cfg))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_sock_tls_cfg>())).ca_list_file as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_tls_cfg),
            "::",
            stringify!(ca_list_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_sock_tls_cfg>())).ca_list_path as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_tls_cfg),
            "::",
            stringify!(ca_list_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_sock_tls_cfg>())).cert_file as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_tls_cfg),
            "::",
            stringify!(cert_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_sock_tls_cfg>())).privkey_file as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_tls_cfg),
            "::",
            stringify!(privkey_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_sock_tls_cfg>())).ca_buf as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_tls_cfg),
            "::",
            stringify!(ca_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_sock_tls_cfg>())).cert_buf as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_tls_cfg),
            "::",
            stringify!(cert_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_sock_tls_cfg>())).privkey_buf as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_tls_cfg),
            "::",
            stringify!(privkey_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_sock_tls_cfg>())).password as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_tls_cfg),
            "::",
            stringify!(password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_sock_tls_cfg>())).ssock_param as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_tls_cfg),
            "::",
            stringify!(ssock_param)
        )
    );
}
extern "C" {
    pub fn pj_turn_sock_tls_cfg_default(tls_cfg: *mut pj_turn_sock_tls_cfg);
}
extern "C" {
    pub fn pj_turn_sock_tls_cfg_dup(
        pool: *mut pj_pool_t,
        dst: *mut pj_turn_sock_tls_cfg,
        src: *const pj_turn_sock_tls_cfg,
    );
}
extern "C" {
    pub fn pj_turn_sock_tls_cfg_wipe_keys(tls_cfg: *mut pj_turn_sock_tls_cfg);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_turn_sock_cfg {
    pub grp_lock: *mut pj_grp_lock_t,
    pub max_pkt_size: ::std::os::raw::c_uint,
    pub qos_type: pj_qos_type,
    pub qos_params: pj_qos_params,
    pub qos_ignore_error: pj_bool_t,
    pub bound_addr: pj_sockaddr,
    pub port_range: pj_uint16_t,
    pub so_rcvbuf_size: ::std::os::raw::c_uint,
    pub so_sndbuf_size: ::std::os::raw::c_uint,
    pub tls_cfg: pj_turn_sock_tls_cfg,
}
#[test]
fn bindgen_test_layout_pj_turn_sock_cfg() {
    assert_eq!(
        ::std::mem::size_of::<pj_turn_sock_cfg>(),
        568usize,
        concat!("Size of: ", stringify!(pj_turn_sock_cfg))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_turn_sock_cfg>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_turn_sock_cfg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_sock_cfg>())).grp_lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_cfg),
            "::",
            stringify!(grp_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_sock_cfg>())).max_pkt_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_cfg),
            "::",
            stringify!(max_pkt_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_sock_cfg>())).qos_type as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_cfg),
            "::",
            stringify!(qos_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_sock_cfg>())).qos_params as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_cfg),
            "::",
            stringify!(qos_params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_turn_sock_cfg>())).qos_ignore_error as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_cfg),
            "::",
            stringify!(qos_ignore_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_sock_cfg>())).bound_addr as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_cfg),
            "::",
            stringify!(bound_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_sock_cfg>())).port_range as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_cfg),
            "::",
            stringify!(port_range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_sock_cfg>())).so_rcvbuf_size as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_cfg),
            "::",
            stringify!(so_rcvbuf_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_sock_cfg>())).so_sndbuf_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_cfg),
            "::",
            stringify!(so_sndbuf_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_turn_sock_cfg>())).tls_cfg as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_turn_sock_cfg),
            "::",
            stringify!(tls_cfg)
        )
    );
}
extern "C" {
    pub fn pj_turn_sock_cfg_default(cfg: *mut pj_turn_sock_cfg);
}
extern "C" {
    pub fn pj_turn_sock_create(
        cfg: *mut pj_stun_config,
        af: ::std::os::raw::c_int,
        conn_type: pj_turn_tp_type,
        cb: *const pj_turn_sock_cb,
        setting: *const pj_turn_sock_cfg,
        user_data: *mut ::std::os::raw::c_void,
        p_turn_sock: *mut *mut pj_turn_sock,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_sock_destroy(turn_sock: *mut pj_turn_sock);
}
extern "C" {
    pub fn pj_turn_sock_set_user_data(
        turn_sock: *mut pj_turn_sock,
        user_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_sock_get_user_data(turn_sock: *mut pj_turn_sock) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pj_turn_sock_get_grp_lock(turn_sock: *mut pj_turn_sock) -> *mut pj_grp_lock_t;
}
extern "C" {
    pub fn pj_turn_sock_get_info(
        turn_sock: *mut pj_turn_sock,
        info: *mut pj_turn_session_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_sock_lock(turn_sock: *mut pj_turn_sock) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_sock_unlock(turn_sock: *mut pj_turn_sock) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_sock_set_log(turn_sock: *mut pj_turn_sock, flags: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn pj_turn_sock_set_software_name(
        turn_sock: *mut pj_turn_sock,
        sw: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_sock_alloc(
        turn_sock: *mut pj_turn_sock,
        domain: *const pj_str_t,
        default_port: ::std::os::raw::c_int,
        resolver: *mut pj_dns_resolver,
        cred: *const pj_stun_auth_cred,
        param: *const pj_turn_alloc_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_sock_set_perm(
        turn_sock: *mut pj_turn_sock,
        addr_cnt: ::std::os::raw::c_uint,
        addr: *const pj_sockaddr,
        options: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_sock_sendto(
        turn_sock: *mut pj_turn_sock,
        pkt: *const pj_uint8_t,
        pkt_len: ::std::os::raw::c_uint,
        peer_addr: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_turn_sock_bind_channel(
        turn_sock: *mut pj_turn_sock,
        peer: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ice_strans {
    _unused: [u8; 0],
}
pub const pj_ice_strans_op_PJ_ICE_STRANS_OP_INIT: pj_ice_strans_op = 0;
pub const pj_ice_strans_op_PJ_ICE_STRANS_OP_NEGOTIATION: pj_ice_strans_op = 1;
pub const pj_ice_strans_op_PJ_ICE_STRANS_OP_KEEP_ALIVE: pj_ice_strans_op = 2;
pub const pj_ice_strans_op_PJ_ICE_STRANS_OP_ADDR_CHANGE: pj_ice_strans_op = 3;
pub type pj_ice_strans_op = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ice_strans_cb {
    pub on_rx_data: ::std::option::Option<
        unsafe extern "C" fn(
            ice_st: *mut pj_ice_strans,
            comp_id: ::std::os::raw::c_uint,
            pkt: *mut ::std::os::raw::c_void,
            size: pj_size_t,
            src_addr: *const pj_sockaddr_t,
            src_addr_len: ::std::os::raw::c_uint,
        ),
    >,
    pub on_data_sent:
        ::std::option::Option<unsafe extern "C" fn(sock: *mut pj_ice_strans, sent: pj_ssize_t)>,
    pub on_valid_pair: ::std::option::Option<unsafe extern "C" fn(ice_st: *mut pj_ice_strans)>,
    pub on_ice_complete: ::std::option::Option<
        unsafe extern "C" fn(ice_st: *mut pj_ice_strans, op: pj_ice_strans_op, status: pj_status_t),
    >,
    pub on_new_candidate: ::std::option::Option<
        unsafe extern "C" fn(
            ice_st: *mut pj_ice_strans,
            cand: *const pj_ice_sess_cand,
            end_of_cand: pj_bool_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout_pj_ice_strans_cb() {
    assert_eq!(
        ::std::mem::size_of::<pj_ice_strans_cb>(),
        40usize,
        concat!("Size of: ", stringify!(pj_ice_strans_cb))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ice_strans_cb>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ice_strans_cb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_cb>())).on_rx_data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cb),
            "::",
            stringify!(on_rx_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_cb>())).on_data_sent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cb),
            "::",
            stringify!(on_data_sent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_cb>())).on_valid_pair as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cb),
            "::",
            stringify!(on_valid_pair)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_strans_cb>())).on_ice_complete as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cb),
            "::",
            stringify!(on_ice_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_strans_cb>())).on_new_candidate as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cb),
            "::",
            stringify!(on_new_candidate)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ice_strans_stun_cfg {
    pub af: ::std::os::raw::c_int,
    pub cfg: pj_stun_sock_cfg,
    pub max_host_cands: ::std::os::raw::c_uint,
    pub loop_addr: pj_bool_t,
    pub server: pj_str_t,
    pub port: pj_uint16_t,
    pub ignore_stun_error: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pj_ice_strans_stun_cfg() {
    assert_eq!(
        ::std::mem::size_of::<pj_ice_strans_stun_cfg>(),
        120usize,
        concat!("Size of: ", stringify!(pj_ice_strans_stun_cfg))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ice_strans_stun_cfg>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ice_strans_stun_cfg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_stun_cfg>())).af as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_stun_cfg),
            "::",
            stringify!(af)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_stun_cfg>())).cfg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_stun_cfg),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_strans_stun_cfg>())).max_host_cands as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_stun_cfg),
            "::",
            stringify!(max_host_cands)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_strans_stun_cfg>())).loop_addr as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_stun_cfg),
            "::",
            stringify!(loop_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_stun_cfg>())).server as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_stun_cfg),
            "::",
            stringify!(server)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_stun_cfg>())).port as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_stun_cfg),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_strans_stun_cfg>())).ignore_stun_error as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_stun_cfg),
            "::",
            stringify!(ignore_stun_error)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ice_strans_turn_cfg {
    pub af: ::std::os::raw::c_int,
    pub cfg: pj_turn_sock_cfg,
    pub server: pj_str_t,
    pub port: pj_uint16_t,
    pub conn_type: pj_turn_tp_type,
    pub auth_cred: pj_stun_auth_cred,
    pub alloc_param: pj_turn_alloc_param,
}
#[test]
fn bindgen_test_layout_pj_ice_strans_turn_cfg() {
    assert_eq!(
        ::std::mem::size_of::<pj_ice_strans_turn_cfg>(),
        704usize,
        concat!("Size of: ", stringify!(pj_ice_strans_turn_cfg))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ice_strans_turn_cfg>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ice_strans_turn_cfg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_turn_cfg>())).af as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_turn_cfg),
            "::",
            stringify!(af)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_turn_cfg>())).cfg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_turn_cfg),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_turn_cfg>())).server as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_turn_cfg),
            "::",
            stringify!(server)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_turn_cfg>())).port as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_turn_cfg),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_strans_turn_cfg>())).conn_type as *const _ as usize
        },
        596usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_turn_cfg),
            "::",
            stringify!(conn_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_strans_turn_cfg>())).auth_cred as *const _ as usize
        },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_turn_cfg),
            "::",
            stringify!(auth_cred)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_strans_turn_cfg>())).alloc_param as *const _ as usize
        },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_turn_cfg),
            "::",
            stringify!(alloc_param)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ice_strans_cfg {
    pub af: ::std::os::raw::c_int,
    pub stun_cfg: pj_stun_config,
    pub resolver: *mut pj_dns_resolver,
    pub opt: pj_ice_sess_options,
    pub stun: pj_ice_strans_stun_cfg,
    pub stun_tp_cnt: ::std::os::raw::c_uint,
    pub stun_tp: [pj_ice_strans_stun_cfg; 2usize],
    pub turn: pj_ice_strans_turn_cfg,
    pub turn_tp_cnt: ::std::os::raw::c_uint,
    pub turn_tp: [pj_ice_strans_turn_cfg; 3usize],
    pub num_send_buf: ::std::os::raw::c_uint,
    pub send_buf_size: ::std::os::raw::c_uint,
    pub comp: [pj_ice_strans_cfg__bindgen_ty_1; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ice_strans_cfg__bindgen_ty_1 {
    pub qos_type: pj_qos_type,
    pub qos_params: pj_qos_params,
    pub so_rcvbuf_size: ::std::os::raw::c_uint,
    pub so_sndbuf_size: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pj_ice_strans_cfg__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pj_ice_strans_cfg__bindgen_ty_1>(),
        20usize,
        concat!("Size of: ", stringify!(pj_ice_strans_cfg__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ice_strans_cfg__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_ice_strans_cfg__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_strans_cfg__bindgen_ty_1>())).qos_type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cfg__bindgen_ty_1),
            "::",
            stringify!(qos_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_strans_cfg__bindgen_ty_1>())).qos_params as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cfg__bindgen_ty_1),
            "::",
            stringify!(qos_params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_strans_cfg__bindgen_ty_1>())).so_rcvbuf_size as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cfg__bindgen_ty_1),
            "::",
            stringify!(so_rcvbuf_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ice_strans_cfg__bindgen_ty_1>())).so_sndbuf_size as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cfg__bindgen_ty_1),
            "::",
            stringify!(so_sndbuf_size)
        )
    );
}
#[test]
fn bindgen_test_layout_pj_ice_strans_cfg() {
    assert_eq!(
        ::std::mem::size_of::<pj_ice_strans_cfg>(),
        3328usize,
        concat!("Size of: ", stringify!(pj_ice_strans_cfg))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ice_strans_cfg>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_ice_strans_cfg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_cfg>())).af as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cfg),
            "::",
            stringify!(af)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_cfg>())).stun_cfg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cfg),
            "::",
            stringify!(stun_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_cfg>())).resolver as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cfg),
            "::",
            stringify!(resolver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_cfg>())).opt as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cfg),
            "::",
            stringify!(opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_cfg>())).stun as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cfg),
            "::",
            stringify!(stun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_cfg>())).stun_tp_cnt as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cfg),
            "::",
            stringify!(stun_tp_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_cfg>())).stun_tp as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cfg),
            "::",
            stringify!(stun_tp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_cfg>())).turn as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cfg),
            "::",
            stringify!(turn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_cfg>())).turn_tp_cnt as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cfg),
            "::",
            stringify!(turn_tp_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_cfg>())).turn_tp as *const _ as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cfg),
            "::",
            stringify!(turn_tp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_cfg>())).num_send_buf as *const _ as usize },
        3280usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cfg),
            "::",
            stringify!(num_send_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_cfg>())).send_buf_size as *const _ as usize },
        3284usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cfg),
            "::",
            stringify!(send_buf_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ice_strans_cfg>())).comp as *const _ as usize },
        3288usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ice_strans_cfg),
            "::",
            stringify!(comp)
        )
    );
}
pub const pj_ice_strans_state_PJ_ICE_STRANS_STATE_NULL: pj_ice_strans_state = 0;
pub const pj_ice_strans_state_PJ_ICE_STRANS_STATE_INIT: pj_ice_strans_state = 1;
pub const pj_ice_strans_state_PJ_ICE_STRANS_STATE_READY: pj_ice_strans_state = 2;
pub const pj_ice_strans_state_PJ_ICE_STRANS_STATE_SESS_READY: pj_ice_strans_state = 3;
pub const pj_ice_strans_state_PJ_ICE_STRANS_STATE_NEGO: pj_ice_strans_state = 4;
pub const pj_ice_strans_state_PJ_ICE_STRANS_STATE_RUNNING: pj_ice_strans_state = 5;
pub const pj_ice_strans_state_PJ_ICE_STRANS_STATE_FAILED: pj_ice_strans_state = 6;
pub type pj_ice_strans_state = ::std::os::raw::c_uint;
extern "C" {
    pub fn pj_ice_strans_cfg_default(cfg: *mut pj_ice_strans_cfg);
}
extern "C" {
    pub fn pj_ice_strans_stun_cfg_default(cfg: *mut pj_ice_strans_stun_cfg);
}
extern "C" {
    pub fn pj_ice_strans_turn_cfg_default(cfg: *mut pj_ice_strans_turn_cfg);
}
extern "C" {
    pub fn pj_ice_strans_cfg_copy(
        pool: *mut pj_pool_t,
        dst: *mut pj_ice_strans_cfg,
        src: *const pj_ice_strans_cfg,
    );
}
extern "C" {
    pub fn pj_ice_strans_create(
        name: *const ::std::os::raw::c_char,
        cfg: *const pj_ice_strans_cfg,
        comp_cnt: ::std::os::raw::c_uint,
        user_data: *mut ::std::os::raw::c_void,
        cb: *const pj_ice_strans_cb,
        p_ice_st: *mut *mut pj_ice_strans,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_strans_get_state(ice_st: *mut pj_ice_strans) -> pj_ice_strans_state;
}
extern "C" {
    pub fn pj_ice_strans_state_name(state: pj_ice_strans_state) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_ice_strans_destroy(ice_st: *mut pj_ice_strans) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_strans_get_user_data(ice_st: *mut pj_ice_strans) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pj_ice_strans_get_options(
        ice_st: *mut pj_ice_strans,
        opt: *mut pj_ice_sess_options,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_strans_set_options(
        ice_st: *mut pj_ice_strans,
        opt: *const pj_ice_sess_options,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_strans_update_comp_cnt(
        ice_st: *mut pj_ice_strans,
        comp_cnt: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_strans_get_grp_lock(ice_st: *mut pj_ice_strans) -> *mut pj_grp_lock_t;
}
extern "C" {
    pub fn pj_ice_strans_init_ice(
        ice_st: *mut pj_ice_strans,
        role: pj_ice_sess_role,
        local_ufrag: *const pj_str_t,
        local_passwd: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_strans_has_sess(ice_st: *mut pj_ice_strans) -> pj_bool_t;
}
extern "C" {
    pub fn pj_ice_strans_sess_is_running(ice_st: *mut pj_ice_strans) -> pj_bool_t;
}
extern "C" {
    pub fn pj_ice_strans_sess_is_complete(ice_st: *mut pj_ice_strans) -> pj_bool_t;
}
extern "C" {
    pub fn pj_ice_strans_get_running_comp_cnt(ice_st: *mut pj_ice_strans)
        -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pj_ice_strans_get_ufrag_pwd(
        ice_st: *mut pj_ice_strans,
        loc_ufrag: *mut pj_str_t,
        loc_pwd: *mut pj_str_t,
        rem_ufrag: *mut pj_str_t,
        rem_pwd: *mut pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_strans_get_cands_count(
        ice_st: *mut pj_ice_strans,
        comp_id: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pj_ice_strans_enum_cands(
        ice_st: *mut pj_ice_strans,
        comp_id: ::std::os::raw::c_uint,
        count: *mut ::std::os::raw::c_uint,
        cand: *mut pj_ice_sess_cand,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_strans_get_def_cand(
        ice_st: *mut pj_ice_strans,
        comp_id: ::std::os::raw::c_uint,
        cand: *mut pj_ice_sess_cand,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_strans_get_role(ice_st: *mut pj_ice_strans) -> pj_ice_sess_role;
}
extern "C" {
    pub fn pj_ice_strans_change_role(
        ice_st: *mut pj_ice_strans,
        new_role: pj_ice_sess_role,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_strans_start_ice(
        ice_st: *mut pj_ice_strans,
        rem_ufrag: *const pj_str_t,
        rem_passwd: *const pj_str_t,
        rcand_cnt: ::std::os::raw::c_uint,
        rcand: *const pj_ice_sess_cand,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_strans_update_check_list(
        ice_st: *mut pj_ice_strans,
        rem_ufrag: *const pj_str_t,
        rem_passwd: *const pj_str_t,
        rcand_cnt: ::std::os::raw::c_uint,
        rcand: *const pj_ice_sess_cand,
        rcand_end: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_strans_get_valid_pair(
        ice_st: *const pj_ice_strans,
        comp_id: ::std::os::raw::c_uint,
    ) -> *const pj_ice_sess_check;
}
extern "C" {
    pub fn pj_ice_strans_stop_ice(ice_st: *mut pj_ice_strans) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_strans_sendto(
        ice_st: *mut pj_ice_strans,
        comp_id: ::std::os::raw::c_uint,
        data: *const ::std::os::raw::c_void,
        data_len: pj_size_t,
        dst_addr: *const pj_sockaddr_t,
        dst_addr_len: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_ice_strans_sendto2(
        ice_st: *mut pj_ice_strans,
        comp_id: ::std::os::raw::c_uint,
        data: *const ::std::os::raw::c_void,
        data_len: pj_size_t,
        dst_addr: *const pj_sockaddr_t,
        dst_addr_len: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_ice_cb {
    pub on_ice_complete: ::std::option::Option<
        unsafe extern "C" fn(tp: *mut pjmedia_transport, op: pj_ice_strans_op, status: pj_status_t),
    >,
    pub on_ice_complete2: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            op: pj_ice_strans_op,
            status: pj_status_t,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub on_new_candidate: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            cand: *const pj_ice_sess_cand,
            last: pj_bool_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout_pjmedia_ice_cb() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_ice_cb>(),
        24usize,
        concat!("Size of: ", stringify!(pjmedia_ice_cb))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_ice_cb>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_ice_cb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_ice_cb>())).on_ice_complete as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_ice_cb),
            "::",
            stringify!(on_ice_complete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_ice_cb>())).on_ice_complete2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_ice_cb),
            "::",
            stringify!(on_ice_complete2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_ice_cb>())).on_new_candidate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_ice_cb),
            "::",
            stringify!(on_new_candidate)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_ice_transport_info {
    pub active: pj_bool_t,
    pub sess_state: pj_ice_strans_state,
    pub role: pj_ice_sess_role,
    pub comp_cnt: ::std::os::raw::c_uint,
    pub comp: [pjmedia_ice_transport_info__bindgen_ty_1; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_ice_transport_info__bindgen_ty_1 {
    pub lcand_type: pj_ice_cand_type,
    pub lcand_addr: pj_sockaddr,
    pub rcand_type: pj_ice_cand_type,
    pub rcand_addr: pj_sockaddr,
}
#[test]
fn bindgen_test_layout_pjmedia_ice_transport_info__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_ice_transport_info__bindgen_ty_1>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(pjmedia_ice_transport_info__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_ice_transport_info__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_ice_transport_info__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_ice_transport_info__bindgen_ty_1>())).lcand_type
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_ice_transport_info__bindgen_ty_1),
            "::",
            stringify!(lcand_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_ice_transport_info__bindgen_ty_1>())).lcand_addr
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_ice_transport_info__bindgen_ty_1),
            "::",
            stringify!(lcand_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_ice_transport_info__bindgen_ty_1>())).rcand_type
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_ice_transport_info__bindgen_ty_1),
            "::",
            stringify!(rcand_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_ice_transport_info__bindgen_ty_1>())).rcand_addr
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_ice_transport_info__bindgen_ty_1),
            "::",
            stringify!(rcand_addr)
        )
    );
}
#[test]
fn bindgen_test_layout_pjmedia_ice_transport_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_ice_transport_info>(),
        144usize,
        concat!("Size of: ", stringify!(pjmedia_ice_transport_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_ice_transport_info>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_ice_transport_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_ice_transport_info>())).active as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_ice_transport_info),
            "::",
            stringify!(active)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_ice_transport_info>())).sess_state as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_ice_transport_info),
            "::",
            stringify!(sess_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_ice_transport_info>())).role as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_ice_transport_info),
            "::",
            stringify!(role)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_ice_transport_info>())).comp_cnt as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_ice_transport_info),
            "::",
            stringify!(comp_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_ice_transport_info>())).comp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_ice_transport_info),
            "::",
            stringify!(comp)
        )
    );
}
pub const pjmedia_transport_ice_options_PJMEDIA_ICE_NO_SRC_ADDR_CHECKING:
    pjmedia_transport_ice_options = 1;
pub const pjmedia_transport_ice_options_PJMEDIA_ICE_DISABLE_ICE_MISMATCH:
    pjmedia_transport_ice_options = 2;
pub type pjmedia_transport_ice_options = ::std::os::raw::c_uint;
extern "C" {
    pub fn pjmedia_ice_create(
        endpt: *mut pjmedia_endpt,
        name: *const ::std::os::raw::c_char,
        comp_cnt: ::std::os::raw::c_uint,
        cfg: *const pj_ice_strans_cfg,
        cb: *const pjmedia_ice_cb,
        p_tp: *mut *mut pjmedia_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_ice_create2(
        endpt: *mut pjmedia_endpt,
        name: *const ::std::os::raw::c_char,
        comp_cnt: ::std::os::raw::c_uint,
        cfg: *const pj_ice_strans_cfg,
        cb: *const pjmedia_ice_cb,
        options: ::std::os::raw::c_uint,
        p_tp: *mut *mut pjmedia_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_ice_create3(
        endpt: *mut pjmedia_endpt,
        name: *const ::std::os::raw::c_char,
        comp_cnt: ::std::os::raw::c_uint,
        cfg: *const pj_ice_strans_cfg,
        cb: *const pjmedia_ice_cb,
        options: ::std::os::raw::c_uint,
        user_data: *mut ::std::os::raw::c_void,
        p_tp: *mut *mut pjmedia_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_ice_get_grp_lock(tp: *mut pjmedia_transport) -> *mut pj_grp_lock_t;
}
extern "C" {
    pub fn pjmedia_ice_add_ice_cb(
        tp: *mut pjmedia_transport,
        cb: *const pjmedia_ice_cb,
        user_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_ice_remove_ice_cb(
        tp: *mut pjmedia_transport,
        cb: *const pjmedia_ice_cb,
        user_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_ice_sdp_has_trickle(
        sdp: *const pjmedia_sdp_session,
        med_idx: ::std::os::raw::c_uint,
    ) -> pj_bool_t;
}
extern "C" {
    pub fn pjmedia_ice_trickle_update(
        tp: *mut pjmedia_transport,
        rem_ufrag: *const pj_str_t,
        rem_passwd: *const pj_str_t,
        rcand_cnt: ::std::os::raw::c_uint,
        rcand: *const pj_ice_sess_cand,
        rcand_end: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_ice_trickle_decode_sdp(
        sdp: *const pjmedia_sdp_session,
        media_index: ::std::os::raw::c_uint,
        mid: *mut pj_str_t,
        ufrag: *mut pj_str_t,
        passwd: *mut pj_str_t,
        cand_cnt: *mut ::std::os::raw::c_uint,
        cand: *mut pj_ice_sess_cand,
        end_of_cand: *mut pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_ice_trickle_encode_sdp(
        sdp_pool: *mut pj_pool_t,
        sdp: *mut pjmedia_sdp_session,
        mid: *const pj_str_t,
        ufrag: *const pj_str_t,
        passwd: *const pj_str_t,
        cand_cnt: ::std::os::raw::c_uint,
        cand: *const pj_ice_sess_cand,
        end_of_cand: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_ice_trickle_has_new_cand(tp: *mut pjmedia_transport) -> pj_bool_t;
}
extern "C" {
    pub fn pjmedia_ice_trickle_send_local_cand(
        tp: *mut pjmedia_transport,
        sdp_pool: *mut pj_pool_t,
        sdp: *mut pjmedia_sdp_session,
        p_end_of_cand: *mut pj_bool_t,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_loop_tp_setting {
    pub af: ::std::os::raw::c_int,
    pub addr: pj_str_t,
    pub port: ::std::os::raw::c_int,
    pub disable_rx: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjmedia_loop_tp_setting() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_loop_tp_setting>(),
        32usize,
        concat!("Size of: ", stringify!(pjmedia_loop_tp_setting))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_loop_tp_setting>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_loop_tp_setting))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_loop_tp_setting>())).af as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_loop_tp_setting),
            "::",
            stringify!(af)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_loop_tp_setting>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_loop_tp_setting),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_loop_tp_setting>())).port as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_loop_tp_setting),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_loop_tp_setting>())).disable_rx as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_loop_tp_setting),
            "::",
            stringify!(disable_rx)
        )
    );
}
extern "C" {
    pub fn pjmedia_loop_tp_setting_default(opt: *mut pjmedia_loop_tp_setting);
}
extern "C" {
    pub fn pjmedia_transport_loop_create(
        endpt: *mut pjmedia_endpt,
        p_tp: *mut *mut pjmedia_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_transport_loop_create2(
        endpt: *mut pjmedia_endpt,
        opt: *const pjmedia_loop_tp_setting,
        p_tp: *mut *mut pjmedia_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_transport_loop_disable_rx(
        tp: *mut pjmedia_transport,
        user: *mut ::std::os::raw::c_void,
        disabled: pj_bool_t,
    ) -> pj_status_t;
}
pub const pjmedia_srtp_crypto_option_PJMEDIA_SRTP_NO_ENCRYPTION: pjmedia_srtp_crypto_option = 1;
pub const pjmedia_srtp_crypto_option_PJMEDIA_SRTP_NO_AUTHENTICATION: pjmedia_srtp_crypto_option = 2;
pub type pjmedia_srtp_crypto_option = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_srtp_crypto {
    pub key: pj_str_t,
    pub name: pj_str_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjmedia_srtp_crypto() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_srtp_crypto>(),
        40usize,
        concat!("Size of: ", stringify!(pjmedia_srtp_crypto))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_srtp_crypto>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_srtp_crypto))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_srtp_crypto>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_crypto),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_srtp_crypto>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_crypto),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_srtp_crypto>())).flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_crypto),
            "::",
            stringify!(flags)
        )
    );
}
pub const pjmedia_srtp_use_PJMEDIA_SRTP_DISABLED: pjmedia_srtp_use = 0;
pub const pjmedia_srtp_use_PJMEDIA_SRTP_UNKNOWN: pjmedia_srtp_use = 0;
pub const pjmedia_srtp_use_PJMEDIA_SRTP_OPTIONAL: pjmedia_srtp_use = 1;
pub const pjmedia_srtp_use_PJMEDIA_SRTP_MANDATORY: pjmedia_srtp_use = 2;
pub type pjmedia_srtp_use = ::std::os::raw::c_uint;
pub const pjmedia_srtp_keying_method_PJMEDIA_SRTP_KEYING_SDES: pjmedia_srtp_keying_method = 0;
pub const pjmedia_srtp_keying_method_PJMEDIA_SRTP_KEYING_DTLS_SRTP: pjmedia_srtp_keying_method = 1;
pub const pjmedia_srtp_keying_method_PJMEDIA_SRTP_KEYINGS_COUNT: pjmedia_srtp_keying_method = 2;
pub type pjmedia_srtp_keying_method = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_srtp_cb {
    pub on_srtp_nego_complete: ::std::option::Option<
        unsafe extern "C" fn(tp: *mut pjmedia_transport, status: pj_status_t),
    >,
}
#[test]
fn bindgen_test_layout_pjmedia_srtp_cb() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_srtp_cb>(),
        8usize,
        concat!("Size of: ", stringify!(pjmedia_srtp_cb))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_srtp_cb>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_srtp_cb))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_srtp_cb>())).on_srtp_nego_complete as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_cb),
            "::",
            stringify!(on_srtp_nego_complete)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_srtp_setting {
    pub use_: pjmedia_srtp_use,
    pub close_member_tp: pj_bool_t,
    pub crypto_count: ::std::os::raw::c_uint,
    pub crypto: [pjmedia_srtp_crypto; 16usize],
    pub keying_count: ::std::os::raw::c_uint,
    pub keying: [pjmedia_srtp_keying_method; 2usize],
    pub cb: pjmedia_srtp_cb,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pjmedia_srtp_setting() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_srtp_setting>(),
        688usize,
        concat!("Size of: ", stringify!(pjmedia_srtp_setting))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_srtp_setting>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_srtp_setting))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_srtp_setting>())).use_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_setting),
            "::",
            stringify!(use_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_srtp_setting>())).close_member_tp as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_setting),
            "::",
            stringify!(close_member_tp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_srtp_setting>())).crypto_count as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_setting),
            "::",
            stringify!(crypto_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_srtp_setting>())).crypto as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_setting),
            "::",
            stringify!(crypto)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_srtp_setting>())).keying_count as *const _ as usize
        },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_setting),
            "::",
            stringify!(keying_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_srtp_setting>())).keying as *const _ as usize },
        660usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_setting),
            "::",
            stringify!(keying)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_srtp_setting>())).cb as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_setting),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_srtp_setting>())).user_data as *const _ as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_setting),
            "::",
            stringify!(user_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_srtp_info {
    pub active: pj_bool_t,
    pub rx_policy: pjmedia_srtp_crypto,
    pub tx_policy: pjmedia_srtp_crypto,
    pub use_: pjmedia_srtp_use,
    pub peer_use: pjmedia_srtp_use,
}
#[test]
fn bindgen_test_layout_pjmedia_srtp_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_srtp_info>(),
        96usize,
        concat!("Size of: ", stringify!(pjmedia_srtp_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_srtp_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_srtp_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_srtp_info>())).active as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_info),
            "::",
            stringify!(active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_srtp_info>())).rx_policy as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_info),
            "::",
            stringify!(rx_policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_srtp_info>())).tx_policy as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_info),
            "::",
            stringify!(tx_policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_srtp_info>())).use_ as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_info),
            "::",
            stringify!(use_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_srtp_info>())).peer_use as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_info),
            "::",
            stringify!(peer_use)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_srtp_dtls_nego_param {
    pub rem_fingerprint: pj_str_t,
    pub rem_addr: pj_sockaddr,
    pub rem_rtcp: pj_sockaddr,
    pub is_role_active: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjmedia_srtp_dtls_nego_param() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_srtp_dtls_nego_param>(),
        80usize,
        concat!("Size of: ", stringify!(pjmedia_srtp_dtls_nego_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_srtp_dtls_nego_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_srtp_dtls_nego_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_srtp_dtls_nego_param>())).rem_fingerprint as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_dtls_nego_param),
            "::",
            stringify!(rem_fingerprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_srtp_dtls_nego_param>())).rem_addr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_dtls_nego_param),
            "::",
            stringify!(rem_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_srtp_dtls_nego_param>())).rem_rtcp as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_dtls_nego_param),
            "::",
            stringify!(rem_rtcp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_srtp_dtls_nego_param>())).is_role_active as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_srtp_dtls_nego_param),
            "::",
            stringify!(is_role_active)
        )
    );
}
extern "C" {
    pub fn pjmedia_srtp_init_lib(endpt: *mut pjmedia_endpt) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_srtp_setting_default(opt: *mut pjmedia_srtp_setting);
}
extern "C" {
    pub fn pjmedia_srtp_enum_crypto(
        count: *mut ::std::os::raw::c_uint,
        crypto: *mut pjmedia_srtp_crypto,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_srtp_enum_keying(
        count: *mut ::std::os::raw::c_uint,
        keying: *mut pjmedia_srtp_keying_method,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_transport_srtp_create(
        endpt: *mut pjmedia_endpt,
        tp: *mut pjmedia_transport,
        opt: *const pjmedia_srtp_setting,
        p_tp: *mut *mut pjmedia_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_transport_srtp_dtls_get_fingerprint(
        srtp: *mut pjmedia_transport,
        hash: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        len: *mut pj_size_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_transport_srtp_dtls_start_nego(
        srtp: *mut pjmedia_transport,
        param: *const pjmedia_srtp_dtls_nego_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_transport_srtp_start(
        srtp: *mut pjmedia_transport,
        tx: *const pjmedia_srtp_crypto,
        rx: *const pjmedia_srtp_crypto,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_transport_srtp_stop(srtp: *mut pjmedia_transport) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_transport_srtp_decrypt_pkt(
        tp: *mut pjmedia_transport,
        is_rtp: pj_bool_t,
        pkt: *mut ::std::os::raw::c_void,
        pkt_len: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_transport_srtp_get_member(
        srtp: *mut pjmedia_transport,
    ) -> *mut pjmedia_transport;
}
pub const pjmedia_transport_udp_options_PJMEDIA_UDP_NO_SRC_ADDR_CHECKING:
    pjmedia_transport_udp_options = 1;
pub type pjmedia_transport_udp_options = ::std::os::raw::c_uint;
extern "C" {
    pub fn pjmedia_transport_udp_create(
        endpt: *mut pjmedia_endpt,
        name: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        options: ::std::os::raw::c_uint,
        p_tp: *mut *mut pjmedia_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_transport_udp_create2(
        endpt: *mut pjmedia_endpt,
        name: *const ::std::os::raw::c_char,
        addr: *const pj_str_t,
        port: ::std::os::raw::c_int,
        options: ::std::os::raw::c_uint,
        p_tp: *mut *mut pjmedia_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_transport_udp_create3(
        endpt: *mut pjmedia_endpt,
        af: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        addr: *const pj_str_t,
        port: ::std::os::raw::c_int,
        options: ::std::os::raw::c_uint,
        p_tp: *mut *mut pjmedia_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_transport_udp_attach(
        endpt: *mut pjmedia_endpt,
        name: *const ::std::os::raw::c_char,
        si: *const pjmedia_sock_info,
        options: ::std::os::raw::c_uint,
        p_tp: *mut *mut pjmedia_transport,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_conf {
    _unused: [u8; 0],
}
pub const pjmedia_vid_conf_layout_PJMEDIA_VID_CONF_LAYOUT_DEFAULT: pjmedia_vid_conf_layout = 0;
pub const pjmedia_vid_conf_layout_PJMEDIA_VID_CONF_LAYOUT_SELECTIVE_FOCUS: pjmedia_vid_conf_layout =
    1;
pub const pjmedia_vid_conf_layout_PJMEDIA_VID_CONF_LAYOUT_INTERVAL_FOCUS: pjmedia_vid_conf_layout =
    2;
pub const pjmedia_vid_conf_layout_PJMEDIA_VID_CONF_LAYOUT_CUSTOM: pjmedia_vid_conf_layout = 3;
pub type pjmedia_vid_conf_layout = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_conf_setting {
    pub max_slot_cnt: ::std::os::raw::c_uint,
    pub frame_rate: ::std::os::raw::c_uint,
    pub layout: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_conf_setting() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_conf_setting>(),
        12usize,
        concat!("Size of: ", stringify!(pjmedia_vid_conf_setting))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_conf_setting>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_conf_setting))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_conf_setting>())).max_slot_cnt as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_conf_setting),
            "::",
            stringify!(max_slot_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_conf_setting>())).frame_rate as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_conf_setting),
            "::",
            stringify!(frame_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_conf_setting>())).layout as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_conf_setting),
            "::",
            stringify!(layout)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_vid_conf_port_info {
    pub slot: ::std::os::raw::c_uint,
    pub name: pj_str_t,
    pub format: pjmedia_format,
    pub listener_cnt: ::std::os::raw::c_uint,
    pub listener_slots: *mut ::std::os::raw::c_uint,
    pub transmitter_cnt: ::std::os::raw::c_uint,
    pub transmitter_slots: *mut ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_conf_port_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_conf_port_info>(),
        88usize,
        concat!("Size of: ", stringify!(pjmedia_vid_conf_port_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_conf_port_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_conf_port_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_conf_port_info>())).slot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_conf_port_info),
            "::",
            stringify!(slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_conf_port_info>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_conf_port_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_conf_port_info>())).format as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_conf_port_info),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_conf_port_info>())).listener_cnt as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_conf_port_info),
            "::",
            stringify!(listener_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_conf_port_info>())).listener_slots as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_conf_port_info),
            "::",
            stringify!(listener_slots)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_conf_port_info>())).transmitter_cnt as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_conf_port_info),
            "::",
            stringify!(transmitter_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_conf_port_info>())).transmitter_slots as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_conf_port_info),
            "::",
            stringify!(transmitter_slots)
        )
    );
}
extern "C" {
    pub fn pjmedia_vid_conf_setting_default(opt: *mut pjmedia_vid_conf_setting);
}
extern "C" {
    pub fn pjmedia_vid_conf_create(
        pool: *mut pj_pool_t,
        opt: *const pjmedia_vid_conf_setting,
        p_vid_conf: *mut *mut pjmedia_vid_conf,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_conf_destroy(vid_conf: *mut pjmedia_vid_conf) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_conf_add_port(
        vid_conf: *mut pjmedia_vid_conf,
        pool: *mut pj_pool_t,
        port: *mut pjmedia_port,
        name: *const pj_str_t,
        opt: *mut ::std::os::raw::c_void,
        p_slot: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_conf_remove_port(
        vid_conf: *mut pjmedia_vid_conf,
        slot: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_conf_get_port_count(
        vid_conf: *mut pjmedia_vid_conf,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjmedia_vid_conf_enum_ports(
        vid_conf: *mut pjmedia_vid_conf,
        slots: *mut ::std::os::raw::c_uint,
        count: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_conf_get_port_info(
        vid_conf: *mut pjmedia_vid_conf,
        slot: ::std::os::raw::c_uint,
        info: *mut pjmedia_vid_conf_port_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_conf_connect_port(
        vid_conf: *mut pjmedia_vid_conf,
        src_slot: ::std::os::raw::c_uint,
        sink_slot: ::std::os::raw::c_uint,
        opt: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_conf_disconnect_port(
        vid_conf: *mut pjmedia_vid_conf,
        src_slot: ::std::os::raw::c_uint,
        sink_slot: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_dev_subsys_init(pf: *mut pj_pool_factory) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_dev_subsys_get_pool_factory() -> *mut pj_pool_factory;
}
extern "C" {
    pub fn pjmedia_vid_dev_subsys_shutdown() -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_register_factory(
        vdf: pjmedia_vid_dev_factory_create_func_ptr,
        factory: *mut pjmedia_vid_dev_factory,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_unregister_factory(
        vdf: pjmedia_vid_dev_factory_create_func_ptr,
        factory: *mut pjmedia_vid_dev_factory,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_vid_port_param {
    pub vidparam: pjmedia_vid_dev_param,
    pub active: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_port_param() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_port_param>(),
        128usize,
        concat!("Size of: ", stringify!(pjmedia_vid_port_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_port_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_port_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_port_param>())).vidparam as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_port_param),
            "::",
            stringify!(vidparam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_port_param>())).active as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_port_param),
            "::",
            stringify!(active)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_port {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pjmedia_vid_port_param_default(prm: *mut pjmedia_vid_port_param);
}
extern "C" {
    pub fn pjmedia_vid_port_create(
        pool: *mut pj_pool_t,
        prm: *const pjmedia_vid_port_param,
        p_vp: *mut *mut pjmedia_vid_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_port_set_cb(
        vid_port: *mut pjmedia_vid_port,
        cb: *const pjmedia_vid_dev_cb,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pjmedia_vid_port_get_stream(
        vid_port: *mut pjmedia_vid_port,
    ) -> *mut pjmedia_vid_dev_stream;
}
extern "C" {
    pub fn pjmedia_vid_port_get_passive_port(vid_port: *mut pjmedia_vid_port) -> *mut pjmedia_port;
}
extern "C" {
    pub fn pjmedia_vid_port_get_clock_src(
        vid_port: *mut pjmedia_vid_port,
    ) -> *mut pjmedia_clock_src;
}
extern "C" {
    pub fn pjmedia_vid_port_set_clock_src(
        vid_port: *mut pjmedia_vid_port,
        clocksrc: *mut pjmedia_clock_src,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_port_subscribe_event(
        vid_port: *mut pjmedia_vid_port,
        port: *mut pjmedia_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_port_connect(
        vid_port: *mut pjmedia_vid_port,
        port: *mut pjmedia_port,
        destroy: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_port_disconnect(vid_port: *mut pjmedia_vid_port) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_port_get_connected_port(
        vid_port: *mut pjmedia_vid_port,
    ) -> *mut pjmedia_port;
}
extern "C" {
    pub fn pjmedia_vid_port_start(vid_port: *mut pjmedia_vid_port) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_port_is_running(vid_port: *mut pjmedia_vid_port) -> pj_bool_t;
}
extern "C" {
    pub fn pjmedia_vid_port_stop(vid_port: *mut pjmedia_vid_port) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_port_destroy(vid_port: *mut pjmedia_vid_port);
}
pub const pjmedia_vid_stream_rc_method_PJMEDIA_VID_STREAM_RC_NONE: pjmedia_vid_stream_rc_method = 0;
pub const pjmedia_vid_stream_rc_method_PJMEDIA_VID_STREAM_RC_SIMPLE_BLOCKING:
    pjmedia_vid_stream_rc_method = 1;
pub type pjmedia_vid_stream_rc_method = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_stream_rc_config {
    pub method: pjmedia_vid_stream_rc_method,
    pub bandwidth: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_stream_rc_config() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_stream_rc_config>(),
        8usize,
        concat!("Size of: ", stringify!(pjmedia_vid_stream_rc_config))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_stream_rc_config>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_stream_rc_config))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_stream_rc_config>())).method as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_rc_config),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_stream_rc_config>())).bandwidth as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_rc_config),
            "::",
            stringify!(bandwidth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_stream_sk_config {
    pub count: ::std::os::raw::c_uint,
    pub interval: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_stream_sk_config() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_stream_sk_config>(),
        8usize,
        concat!("Size of: ", stringify!(pjmedia_vid_stream_sk_config))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_stream_sk_config>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_stream_sk_config))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_stream_sk_config>())).count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_sk_config),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_stream_sk_config>())).interval as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_sk_config),
            "::",
            stringify!(interval)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_vid_stream_info {
    pub type_: pjmedia_type,
    pub proto: pjmedia_tp_proto,
    pub dir: pjmedia_dir,
    pub rem_addr: pj_sockaddr,
    pub rem_rtcp: pj_sockaddr,
    pub rtcp_mux: pj_bool_t,
    pub loc_rtcp_fb: pjmedia_rtcp_fb_info,
    pub rem_rtcp_fb: pjmedia_rtcp_fb_info,
    pub tx_pt: ::std::os::raw::c_uint,
    pub rx_pt: ::std::os::raw::c_uint,
    pub ssrc: pj_uint32_t,
    pub cname: pj_str_t,
    pub has_rem_ssrc: pj_bool_t,
    pub rem_ssrc: pj_uint32_t,
    pub rem_cname: pj_str_t,
    pub rtp_ts: pj_uint32_t,
    pub rtp_seq: pj_uint16_t,
    pub rtp_seq_ts_set: pj_uint8_t,
    pub jb_init: ::std::os::raw::c_int,
    pub jb_min_pre: ::std::os::raw::c_int,
    pub jb_max_pre: ::std::os::raw::c_int,
    pub jb_max: ::std::os::raw::c_int,
    pub codec_info: pjmedia_vid_codec_info,
    pub codec_param: *mut pjmedia_vid_codec_param,
    pub rtcp_sdes_bye_disabled: pj_bool_t,
    pub rc_cfg: pjmedia_vid_stream_rc_config,
    pub sk_cfg: pjmedia_vid_stream_sk_config,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_stream_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_stream_info>(),
        2216usize,
        concat!("Size of: ", stringify!(pjmedia_vid_stream_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_stream_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_stream_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).proto as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).dir as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).rem_addr as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(rem_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).rem_rtcp as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(rem_rtcp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).rtcp_mux as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(rtcp_mux)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).loc_rtcp_fb as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(loc_rtcp_fb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).rem_rtcp_fb as *const _ as usize
        },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(rem_rtcp_fb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).tx_pt as *const _ as usize },
        1880usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(tx_pt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).rx_pt as *const _ as usize },
        1884usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(rx_pt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).ssrc as *const _ as usize },
        1888usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(ssrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).cname as *const _ as usize },
        1896usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(cname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).has_rem_ssrc as *const _ as usize
        },
        1912usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(has_rem_ssrc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).rem_ssrc as *const _ as usize
        },
        1916usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(rem_ssrc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).rem_cname as *const _ as usize
        },
        1920usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(rem_cname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).rtp_ts as *const _ as usize },
        1936usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(rtp_ts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).rtp_seq as *const _ as usize },
        1940usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(rtp_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).rtp_seq_ts_set as *const _ as usize
        },
        1942usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(rtp_seq_ts_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).jb_init as *const _ as usize },
        1944usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(jb_init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).jb_min_pre as *const _ as usize
        },
        1948usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(jb_min_pre)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).jb_max_pre as *const _ as usize
        },
        1952usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(jb_max_pre)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).jb_max as *const _ as usize },
        1956usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(jb_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).codec_info as *const _ as usize
        },
        1960usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(codec_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).codec_param as *const _ as usize
        },
        2184usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(codec_param)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).rtcp_sdes_bye_disabled as *const _
                as usize
        },
        2192usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(rtcp_sdes_bye_disabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).rc_cfg as *const _ as usize },
        2196usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(rc_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_stream_info>())).sk_cfg as *const _ as usize },
        2204usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_stream_info),
            "::",
            stringify!(sk_cfg)
        )
    );
}
extern "C" {
    pub fn pjmedia_vid_stream_info_from_sdp(
        si: *mut pjmedia_vid_stream_info,
        pool: *mut pj_pool_t,
        endpt: *mut pjmedia_endpt,
        local: *const pjmedia_sdp_session,
        remote: *const pjmedia_sdp_session,
        stream_idx: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_stream_rc_config_default(cfg: *mut pjmedia_vid_stream_rc_config);
}
extern "C" {
    pub fn pjmedia_vid_stream_sk_config_default(cfg: *mut pjmedia_vid_stream_sk_config);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_stream {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pjmedia_vid_stream_create(
        endpt: *mut pjmedia_endpt,
        pool: *mut pj_pool_t,
        info: *mut pjmedia_vid_stream_info,
        tp: *mut pjmedia_transport,
        user_data: *mut ::std::os::raw::c_void,
        p_stream: *mut *mut pjmedia_vid_stream,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_stream_destroy(stream: *mut pjmedia_vid_stream) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_stream_get_port(
        stream: *mut pjmedia_vid_stream,
        dir: pjmedia_dir,
        p_port: *mut *mut pjmedia_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_stream_get_transport(st: *mut pjmedia_vid_stream) -> *mut pjmedia_transport;
}
extern "C" {
    pub fn pjmedia_vid_stream_get_stat(
        stream: *const pjmedia_vid_stream,
        stat: *mut pjmedia_rtcp_stat,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_stream_reset_stat(stream: *mut pjmedia_vid_stream) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_stream_get_stat_jbuf(
        stream: *const pjmedia_vid_stream,
        state: *mut pjmedia_jb_state,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_stream_get_info(
        stream: *const pjmedia_vid_stream,
        info: *mut pjmedia_vid_stream_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_stream_start(stream: *mut pjmedia_vid_stream) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_stream_is_running(
        stream: *mut pjmedia_vid_stream,
        dir: pjmedia_dir,
    ) -> pj_bool_t;
}
extern "C" {
    pub fn pjmedia_vid_stream_pause(
        stream: *mut pjmedia_vid_stream,
        dir: pjmedia_dir,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_stream_resume(
        stream: *mut pjmedia_vid_stream,
        dir: pjmedia_dir,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_stream_send_keyframe(stream: *mut pjmedia_vid_stream) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_stream_send_rtcp_sdes(stream: *mut pjmedia_vid_stream) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_stream_send_rtcp_bye(stream: *mut pjmedia_vid_stream) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_stream_send_rtcp_pli(stream: *mut pjmedia_vid_stream) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_stream_get_rtp_session_info(
        stream: *mut pjmedia_vid_stream,
        session_info: *mut pjmedia_stream_rtp_sess_info,
    ) -> pj_status_t;
}
pub const pjmedia_file_player_option_PJMEDIA_FILE_NO_LOOP: pjmedia_file_player_option = 1;
pub type pjmedia_file_player_option = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_wav_player_info {
    pub fmt_id: pjmedia_format_id,
    pub payload_bits_per_sample: ::std::os::raw::c_uint,
    pub size_bytes: pj_uint32_t,
    pub size_samples: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_wav_player_info() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_wav_player_info>(),
        16usize,
        concat!("Size of: ", stringify!(pjmedia_wav_player_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_wav_player_info>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_wav_player_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_wav_player_info>())).fmt_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wav_player_info),
            "::",
            stringify!(fmt_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_wav_player_info>())).payload_bits_per_sample as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wav_player_info),
            "::",
            stringify!(payload_bits_per_sample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_wav_player_info>())).size_bytes as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wav_player_info),
            "::",
            stringify!(size_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_wav_player_info>())).size_samples as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wav_player_info),
            "::",
            stringify!(size_samples)
        )
    );
}
extern "C" {
    pub fn pjmedia_wav_player_port_create(
        pool: *mut pj_pool_t,
        filename: *const ::std::os::raw::c_char,
        ptime: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        buff_size: pj_ssize_t,
        p_port: *mut *mut pjmedia_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_wav_player_get_info(
        port: *mut pjmedia_port,
        i: *mut pjmedia_wav_player_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_wav_player_get_len(port: *mut pjmedia_port) -> pj_ssize_t;
}
extern "C" {
    pub fn pjmedia_wav_player_port_set_pos(
        port: *mut pjmedia_port,
        offset: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_wav_player_port_get_pos(port: *mut pjmedia_port) -> pj_ssize_t;
}
extern "C" {
    pub fn pjmedia_wav_player_set_eof_cb(
        port: *mut pjmedia_port,
        user_data: *mut ::std::os::raw::c_void,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                port: *mut pjmedia_port,
                usr_data: *mut ::std::os::raw::c_void,
            ) -> pj_status_t,
        >,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_wav_player_set_eof_cb2(
        port: *mut pjmedia_port,
        user_data: *mut ::std::os::raw::c_void,
        cb: ::std::option::Option<
            unsafe extern "C" fn(port: *mut pjmedia_port, usr_data: *mut ::std::os::raw::c_void),
        >,
    ) -> pj_status_t;
}
pub const pjmedia_file_writer_option_PJMEDIA_FILE_WRITE_PCM: pjmedia_file_writer_option = 0;
pub const pjmedia_file_writer_option_PJMEDIA_FILE_WRITE_ALAW: pjmedia_file_writer_option = 1;
pub const pjmedia_file_writer_option_PJMEDIA_FILE_WRITE_ULAW: pjmedia_file_writer_option = 2;
pub type pjmedia_file_writer_option = ::std::os::raw::c_uint;
extern "C" {
    pub fn pjmedia_wav_writer_port_create(
        pool: *mut pj_pool_t,
        filename: *const ::std::os::raw::c_char,
        clock_rate: ::std::os::raw::c_uint,
        channel_count: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        bits_per_sample: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        buff_size: pj_ssize_t,
        p_port: *mut *mut pjmedia_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_wav_writer_port_get_pos(port: *mut pjmedia_port) -> pj_ssize_t;
}
extern "C" {
    pub fn pjmedia_wav_writer_port_set_cb(
        port: *mut pjmedia_port,
        pos: pj_size_t,
        user_data: *mut ::std::os::raw::c_void,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                port: *mut pjmedia_port,
                usr_data: *mut ::std::os::raw::c_void,
            ) -> pj_status_t,
        >,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_wav_writer_port_set_cb2(
        port: *mut pjmedia_port,
        pos: pj_size_t,
        user_data: *mut ::std::os::raw::c_void,
        cb: ::std::option::Option<
            unsafe extern "C" fn(port: *mut pjmedia_port, usr_data: *mut ::std::os::raw::c_void),
        >,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_wav_playlist_create(
        pool: *mut pj_pool_t,
        port_label: *const pj_str_t,
        file_list: *const pj_str_t,
        file_count: ::std::os::raw::c_int,
        ptime: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        buff_size: pj_ssize_t,
        p_port: *mut *mut pjmedia_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_wav_playlist_set_eof_cb(
        port: *mut pjmedia_port,
        user_data: *mut ::std::os::raw::c_void,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                port: *mut pjmedia_port,
                usr_data: *mut ::std::os::raw::c_void,
            ) -> pj_status_t,
        >,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_wav_playlist_set_eof_cb2(
        port: *mut pjmedia_port,
        user_data: *mut ::std::os::raw::c_void,
        cb: ::std::option::Option<
            unsafe extern "C" fn(port: *mut pjmedia_port, usr_data: *mut ::std::os::raw::c_void),
        >,
    ) -> pj_status_t;
}
pub const pjmedia_wave_fmt_tag_PJMEDIA_WAVE_FMT_TAG_PCM: pjmedia_wave_fmt_tag = 1;
pub const pjmedia_wave_fmt_tag_PJMEDIA_WAVE_FMT_TAG_ALAW: pjmedia_wave_fmt_tag = 6;
pub const pjmedia_wave_fmt_tag_PJMEDIA_WAVE_FMT_TAG_ULAW: pjmedia_wave_fmt_tag = 7;
pub type pjmedia_wave_fmt_tag = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_wave_hdr {
    pub riff_hdr: pjmedia_wave_hdr__bindgen_ty_1,
    pub fmt_hdr: pjmedia_wave_hdr__bindgen_ty_2,
    pub data_hdr: pjmedia_wave_hdr__bindgen_ty_3,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_wave_hdr__bindgen_ty_1 {
    pub riff: pj_uint32_t,
    pub file_len: pj_uint32_t,
    pub wave: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_wave_hdr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_wave_hdr__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(pjmedia_wave_hdr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_wave_hdr__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(pjmedia_wave_hdr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_wave_hdr__bindgen_ty_1>())).riff as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wave_hdr__bindgen_ty_1),
            "::",
            stringify!(riff)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_wave_hdr__bindgen_ty_1>())).file_len as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wave_hdr__bindgen_ty_1),
            "::",
            stringify!(file_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_wave_hdr__bindgen_ty_1>())).wave as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wave_hdr__bindgen_ty_1),
            "::",
            stringify!(wave)
        )
    );
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_wave_hdr__bindgen_ty_2 {
    pub fmt: pj_uint32_t,
    pub len: pj_uint32_t,
    pub fmt_tag: pj_uint16_t,
    pub nchan: pj_uint16_t,
    pub sample_rate: pj_uint32_t,
    pub bytes_per_sec: pj_uint32_t,
    pub block_align: pj_uint16_t,
    pub bits_per_sample: pj_uint16_t,
}
#[test]
fn bindgen_test_layout_pjmedia_wave_hdr__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_wave_hdr__bindgen_ty_2>(),
        24usize,
        concat!("Size of: ", stringify!(pjmedia_wave_hdr__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_wave_hdr__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(pjmedia_wave_hdr__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_wave_hdr__bindgen_ty_2>())).fmt as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wave_hdr__bindgen_ty_2),
            "::",
            stringify!(fmt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_wave_hdr__bindgen_ty_2>())).len as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wave_hdr__bindgen_ty_2),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_wave_hdr__bindgen_ty_2>())).fmt_tag as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wave_hdr__bindgen_ty_2),
            "::",
            stringify!(fmt_tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_wave_hdr__bindgen_ty_2>())).nchan as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wave_hdr__bindgen_ty_2),
            "::",
            stringify!(nchan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_wave_hdr__bindgen_ty_2>())).sample_rate as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wave_hdr__bindgen_ty_2),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_wave_hdr__bindgen_ty_2>())).bytes_per_sec as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wave_hdr__bindgen_ty_2),
            "::",
            stringify!(bytes_per_sec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_wave_hdr__bindgen_ty_2>())).block_align as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wave_hdr__bindgen_ty_2),
            "::",
            stringify!(block_align)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_wave_hdr__bindgen_ty_2>())).bits_per_sample as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wave_hdr__bindgen_ty_2),
            "::",
            stringify!(bits_per_sample)
        )
    );
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_wave_hdr__bindgen_ty_3 {
    pub data: pj_uint32_t,
    pub len: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_wave_hdr__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_wave_hdr__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(pjmedia_wave_hdr__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_wave_hdr__bindgen_ty_3>(),
        2usize,
        concat!("Alignment of ", stringify!(pjmedia_wave_hdr__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_wave_hdr__bindgen_ty_3>())).data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wave_hdr__bindgen_ty_3),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_wave_hdr__bindgen_ty_3>())).len as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wave_hdr__bindgen_ty_3),
            "::",
            stringify!(len)
        )
    );
}
#[test]
fn bindgen_test_layout_pjmedia_wave_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_wave_hdr>(),
        44usize,
        concat!("Size of: ", stringify!(pjmedia_wave_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_wave_hdr>(),
        2usize,
        concat!("Alignment of ", stringify!(pjmedia_wave_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_wave_hdr>())).riff_hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wave_hdr),
            "::",
            stringify!(riff_hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_wave_hdr>())).fmt_hdr as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wave_hdr),
            "::",
            stringify!(fmt_hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_wave_hdr>())).data_hdr as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wave_hdr),
            "::",
            stringify!(data_hdr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_wave_subchunk {
    pub id: pj_uint32_t,
    pub len: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjmedia_wave_subchunk() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_wave_subchunk>(),
        8usize,
        concat!("Size of: ", stringify!(pjmedia_wave_subchunk))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_wave_subchunk>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_wave_subchunk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_wave_subchunk>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wave_subchunk),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_wave_subchunk>())).len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_wave_subchunk),
            "::",
            stringify!(len)
        )
    );
}
extern "C" {
    pub fn pjmedia_wave_hdr_file_to_host(hdr: *mut pjmedia_wave_hdr);
}
extern "C" {
    pub fn pjmedia_wave_hdr_host_to_file(hdr: *mut pjmedia_wave_hdr);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_wsola {
    _unused: [u8; 0],
}
pub const pjmedia_wsola_option_PJMEDIA_WSOLA_NO_HANNING: pjmedia_wsola_option = 1;
pub const pjmedia_wsola_option_PJMEDIA_WSOLA_NO_PLC: pjmedia_wsola_option = 2;
pub const pjmedia_wsola_option_PJMEDIA_WSOLA_NO_DISCARD: pjmedia_wsola_option = 4;
pub const pjmedia_wsola_option_PJMEDIA_WSOLA_NO_FADING: pjmedia_wsola_option = 8;
pub type pjmedia_wsola_option = ::std::os::raw::c_uint;
extern "C" {
    pub fn pjmedia_wsola_create(
        pool: *mut pj_pool_t,
        clock_rate: ::std::os::raw::c_uint,
        samples_per_frame: ::std::os::raw::c_uint,
        channel_count: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
        p_wsola: *mut *mut pjmedia_wsola,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_wsola_set_max_expand(
        wsola: *mut pjmedia_wsola,
        msec: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_wsola_destroy(wsola: *mut pjmedia_wsola) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_wsola_reset(
        wsola: *mut pjmedia_wsola,
        options: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_wsola_save(
        wsola: *mut pjmedia_wsola,
        frm: *mut pj_int16_t,
        prev_lost: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_wsola_generate(wsola: *mut pjmedia_wsola, frm: *mut pj_int16_t) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_wsola_discard(
        wsola: *mut pjmedia_wsola,
        buf1: *mut pj_int16_t,
        buf1_cnt: ::std::os::raw::c_uint,
        buf2: *mut pj_int16_t,
        buf2_cnt: ::std::os::raw::c_uint,
        erase_cnt: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_passthrough_setting {
    pub fmt_cnt: ::std::os::raw::c_uint,
    pub fmts: *mut pjmedia_format,
    pub ilbc_mode: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjmedia_codec_passthrough_setting() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_codec_passthrough_setting>(),
        24usize,
        concat!("Size of: ", stringify!(pjmedia_codec_passthrough_setting))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_codec_passthrough_setting>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_codec_passthrough_setting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_passthrough_setting>())).fmt_cnt as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_passthrough_setting),
            "::",
            stringify!(fmt_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_passthrough_setting>())).fmts as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_passthrough_setting),
            "::",
            stringify!(fmts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_passthrough_setting>())).ilbc_mode as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_passthrough_setting),
            "::",
            stringify!(ilbc_mode)
        )
    );
}
extern "C" {
    pub fn pjmedia_codec_passthrough_init(endpt: *mut pjmedia_endpt) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_passthrough_init2(
        endpt: *mut pjmedia_endpt,
        setting: *const pjmedia_codec_passthrough_setting,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_passthrough_deinit() -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_audio_codec_config {
    pub speex: pjmedia_audio_codec_config__bindgen_ty_1,
    pub ilbc: pjmedia_audio_codec_config__bindgen_ty_2,
    pub passthrough: pjmedia_audio_codec_config__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_audio_codec_config__bindgen_ty_1 {
    pub option: ::std::os::raw::c_uint,
    pub quality: ::std::os::raw::c_int,
    pub complexity: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pjmedia_audio_codec_config__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_audio_codec_config__bindgen_ty_1>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(pjmedia_audio_codec_config__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_audio_codec_config__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_audio_codec_config__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_audio_codec_config__bindgen_ty_1>())).option as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_audio_codec_config__bindgen_ty_1),
            "::",
            stringify!(option)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_audio_codec_config__bindgen_ty_1>())).quality as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_audio_codec_config__bindgen_ty_1),
            "::",
            stringify!(quality)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_audio_codec_config__bindgen_ty_1>())).complexity
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_audio_codec_config__bindgen_ty_1),
            "::",
            stringify!(complexity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_audio_codec_config__bindgen_ty_2 {
    pub mode: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjmedia_audio_codec_config__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_audio_codec_config__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(pjmedia_audio_codec_config__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_audio_codec_config__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_audio_codec_config__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_audio_codec_config__bindgen_ty_2>())).mode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_audio_codec_config__bindgen_ty_2),
            "::",
            stringify!(mode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_audio_codec_config__bindgen_ty_3 {
    pub setting: pjmedia_codec_passthrough_setting,
}
#[test]
fn bindgen_test_layout_pjmedia_audio_codec_config__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_audio_codec_config__bindgen_ty_3>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(pjmedia_audio_codec_config__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_audio_codec_config__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_audio_codec_config__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_audio_codec_config__bindgen_ty_3>())).setting as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_audio_codec_config__bindgen_ty_3),
            "::",
            stringify!(setting)
        )
    );
}
#[test]
fn bindgen_test_layout_pjmedia_audio_codec_config() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_audio_codec_config>(),
        40usize,
        concat!("Size of: ", stringify!(pjmedia_audio_codec_config))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_audio_codec_config>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_audio_codec_config))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_audio_codec_config>())).speex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_audio_codec_config),
            "::",
            stringify!(speex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_audio_codec_config>())).ilbc as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_audio_codec_config),
            "::",
            stringify!(ilbc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_audio_codec_config>())).passthrough as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_audio_codec_config),
            "::",
            stringify!(passthrough)
        )
    );
}
extern "C" {
    pub fn pjmedia_audio_codec_config_default(cfg: *mut pjmedia_audio_codec_config);
}
extern "C" {
    pub fn pjmedia_codec_register_audio_codecs(
        endpt: *mut pjmedia_endpt,
        c: *const pjmedia_audio_codec_config,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_bcg729_init(endpt: *mut pjmedia_endpt) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_bcg729_deinit() -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_ffmpeg_vid_init(
        mgr: *mut pjmedia_vid_codec_mgr,
        pf: *mut pj_pool_factory,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_ffmpeg_vid_deinit() -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_g722_init(endpt: *mut pjmedia_endpt) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_g722_deinit() -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_g722_set_pcm_shift(val: ::std::os::raw::c_uint) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_g7221_init(endpt: *mut pjmedia_endpt) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_g7221_set_mode(
        sample_rate: ::std::os::raw::c_uint,
        bitrate: ::std::os::raw::c_uint,
        enabled: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_g7221_set_pcm_shift(val: ::std::os::raw::c_int) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_g7221_deinit() -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_gsm_init(endpt: *mut pjmedia_endpt) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_gsm_deinit() -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_ilbc_init(
        endpt: *mut pjmedia_endpt,
        mode: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_ilbc_deinit() -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_ipp_init(endpt: *mut pjmedia_endpt) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_ipp_deinit() -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_l16_init(
        endpt: *mut pjmedia_endpt,
        options: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_l16_deinit() -> pj_status_t;
}
pub const pjmedia_amr_options_PJMEDIA_AMR_NO_NB: pjmedia_amr_options = 1;
pub const pjmedia_amr_options_PJMEDIA_AMR_NO_WB: pjmedia_amr_options = 2;
pub type pjmedia_amr_options = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_amr_config {
    pub octet_align: pj_bool_t,
    pub bitrate: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjmedia_codec_amr_config() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_codec_amr_config>(),
        8usize,
        concat!("Size of: ", stringify!(pjmedia_codec_amr_config))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_codec_amr_config>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_codec_amr_config))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_amr_config>())).octet_align as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_amr_config),
            "::",
            stringify!(octet_align)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_amr_config>())).bitrate as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_amr_config),
            "::",
            stringify!(bitrate)
        )
    );
}
pub type pjmedia_codec_amrnb_config = pjmedia_codec_amr_config;
pub type pjmedia_codec_amrwb_config = pjmedia_codec_amr_config;
extern "C" {
    pub fn pjmedia_codec_opencore_amr_init(
        endpt: *mut pjmedia_endpt,
        options: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_opencore_amr_init_default(endpt: *mut pjmedia_endpt) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_opencore_amr_deinit() -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_opencore_amrnb_init(endpt: *mut pjmedia_endpt) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_opencore_amrnb_deinit() -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_opencore_amrnb_set_config(
        cfg: *const pjmedia_codec_amrnb_config,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_opencore_amrwb_set_config(
        cfg: *const pjmedia_codec_amrwb_config,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_openh264_vid_init(
        mgr: *mut pjmedia_vid_codec_mgr,
        pf: *mut pj_pool_factory,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_openh264_vid_deinit() -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_opus_config {
    pub sample_rate: ::std::os::raw::c_uint,
    pub channel_cnt: ::std::os::raw::c_uint,
    pub frm_ptime: ::std::os::raw::c_uint,
    pub bit_rate: ::std::os::raw::c_uint,
    pub packet_loss: ::std::os::raw::c_uint,
    pub complexity: ::std::os::raw::c_uint,
    pub cbr: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjmedia_codec_opus_config() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_codec_opus_config>(),
        28usize,
        concat!("Size of: ", stringify!(pjmedia_codec_opus_config))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_codec_opus_config>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_codec_opus_config))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_opus_config>())).sample_rate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_opus_config),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_opus_config>())).channel_cnt as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_opus_config),
            "::",
            stringify!(channel_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_opus_config>())).frm_ptime as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_opus_config),
            "::",
            stringify!(frm_ptime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_opus_config>())).bit_rate as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_opus_config),
            "::",
            stringify!(bit_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_opus_config>())).packet_loss as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_opus_config),
            "::",
            stringify!(packet_loss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_opus_config>())).complexity as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_opus_config),
            "::",
            stringify!(complexity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_codec_opus_config>())).cbr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_opus_config),
            "::",
            stringify!(cbr)
        )
    );
}
extern "C" {
    pub fn pjmedia_codec_opus_init(endpt: *mut pjmedia_endpt) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_opus_deinit() -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_opus_get_config(cfg: *mut pjmedia_codec_opus_config) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_opus_set_default_param(
        cfg: *const pjmedia_codec_opus_config,
        param: *mut pjmedia_codec_param,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_silk_setting {
    pub enabled: pj_bool_t,
    pub quality: ::std::os::raw::c_int,
    pub complexity: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pjmedia_codec_silk_setting() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_codec_silk_setting>(),
        12usize,
        concat!("Size of: ", stringify!(pjmedia_codec_silk_setting))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_codec_silk_setting>(),
        4usize,
        concat!("Alignment of ", stringify!(pjmedia_codec_silk_setting))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_silk_setting>())).enabled as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_silk_setting),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_silk_setting>())).quality as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_silk_setting),
            "::",
            stringify!(quality)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_codec_silk_setting>())).complexity as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_codec_silk_setting),
            "::",
            stringify!(complexity)
        )
    );
}
extern "C" {
    pub fn pjmedia_codec_silk_init(endpt: *mut pjmedia_endpt) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_silk_set_config(
        clock_rate: ::std::os::raw::c_uint,
        opt: *const pjmedia_codec_silk_setting,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_silk_deinit() -> pj_status_t;
}
pub const pjmedia_speex_options_PJMEDIA_SPEEX_NO_NB: pjmedia_speex_options = 1;
pub const pjmedia_speex_options_PJMEDIA_SPEEX_NO_WB: pjmedia_speex_options = 2;
pub const pjmedia_speex_options_PJMEDIA_SPEEX_NO_UWB: pjmedia_speex_options = 4;
pub type pjmedia_speex_options = ::std::os::raw::c_uint;
extern "C" {
    pub fn pjmedia_codec_speex_init(
        endpt: *mut pjmedia_endpt,
        options: ::std::os::raw::c_uint,
        quality: ::std::os::raw::c_int,
        complexity: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_speex_init_default(endpt: *mut pjmedia_endpt) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_speex_set_param(
        clock_rate: ::std::os::raw::c_uint,
        quality: ::std::os::raw::c_int,
        complexity: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_speex_deinit() -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_vid_toolbox_init(
        mgr: *mut pjmedia_vid_codec_mgr,
        pf: *mut pj_pool_factory,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_vid_toolbox_deinit() -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_vpx_vid_init(
        mgr: *mut pjmedia_vid_codec_mgr,
        pf: *mut pj_pool_factory,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_vpx_vid_deinit() -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_factory_op {
    pub init:
        ::std::option::Option<unsafe extern "C" fn(f: *mut pjmedia_vid_dev_factory) -> pj_status_t>,
    pub destroy:
        ::std::option::Option<unsafe extern "C" fn(f: *mut pjmedia_vid_dev_factory) -> pj_status_t>,
    pub get_dev_count: ::std::option::Option<
        unsafe extern "C" fn(f: *mut pjmedia_vid_dev_factory) -> ::std::os::raw::c_uint,
    >,
    pub get_dev_info: ::std::option::Option<
        unsafe extern "C" fn(
            f: *mut pjmedia_vid_dev_factory,
            index: ::std::os::raw::c_uint,
            info: *mut pjmedia_vid_dev_info,
        ) -> pj_status_t,
    >,
    pub default_param: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut pj_pool_t,
            f: *mut pjmedia_vid_dev_factory,
            index: ::std::os::raw::c_uint,
            param: *mut pjmedia_vid_dev_param,
        ) -> pj_status_t,
    >,
    pub create_stream: ::std::option::Option<
        unsafe extern "C" fn(
            f: *mut pjmedia_vid_dev_factory,
            param: *mut pjmedia_vid_dev_param,
            cb: *const pjmedia_vid_dev_cb,
            user_data: *mut ::std::os::raw::c_void,
            p_vid_strm: *mut *mut pjmedia_vid_dev_stream,
        ) -> pj_status_t,
    >,
    pub refresh:
        ::std::option::Option<unsafe extern "C" fn(f: *mut pjmedia_vid_dev_factory) -> pj_status_t>,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_dev_factory_op() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_dev_factory_op>(),
        56usize,
        concat!("Size of: ", stringify!(pjmedia_vid_dev_factory_op))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_dev_factory_op>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_dev_factory_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_factory_op>())).init as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_factory_op),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_factory_op>())).destroy as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_factory_op),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_factory_op>())).get_dev_count as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_factory_op),
            "::",
            stringify!(get_dev_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_factory_op>())).get_dev_info as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_factory_op),
            "::",
            stringify!(get_dev_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_factory_op>())).default_param as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_factory_op),
            "::",
            stringify!(default_param)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_factory_op>())).create_stream as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_factory_op),
            "::",
            stringify!(create_stream)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_factory_op>())).refresh as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_factory_op),
            "::",
            stringify!(refresh)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_factory {
    pub sys: pjmedia_vid_dev_factory__bindgen_ty_1,
    pub op: *mut pjmedia_vid_dev_factory_op,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_factory__bindgen_ty_1 {
    pub drv_idx: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_dev_factory__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_dev_factory__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(pjmedia_vid_dev_factory__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_dev_factory__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_vid_dev_factory__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_factory__bindgen_ty_1>())).drv_idx as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_factory__bindgen_ty_1),
            "::",
            stringify!(drv_idx)
        )
    );
}
#[test]
fn bindgen_test_layout_pjmedia_vid_dev_factory() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_dev_factory>(),
        16usize,
        concat!("Size of: ", stringify!(pjmedia_vid_dev_factory))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_dev_factory>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_dev_factory))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_factory>())).sys as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_factory),
            "::",
            stringify!(sys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_factory>())).op as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_factory),
            "::",
            stringify!(op)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_stream_op {
    pub get_param: ::std::option::Option<
        unsafe extern "C" fn(
            strm: *mut pjmedia_vid_dev_stream,
            param: *mut pjmedia_vid_dev_param,
        ) -> pj_status_t,
    >,
    pub get_cap: ::std::option::Option<
        unsafe extern "C" fn(
            strm: *mut pjmedia_vid_dev_stream,
            cap: pjmedia_vid_dev_cap,
            value: *mut ::std::os::raw::c_void,
        ) -> pj_status_t,
    >,
    pub set_cap: ::std::option::Option<
        unsafe extern "C" fn(
            strm: *mut pjmedia_vid_dev_stream,
            cap: pjmedia_vid_dev_cap,
            value: *const ::std::os::raw::c_void,
        ) -> pj_status_t,
    >,
    pub start: ::std::option::Option<
        unsafe extern "C" fn(strm: *mut pjmedia_vid_dev_stream) -> pj_status_t,
    >,
    pub get_frame: ::std::option::Option<
        unsafe extern "C" fn(
            strm: *mut pjmedia_vid_dev_stream,
            frame: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
    pub put_frame: ::std::option::Option<
        unsafe extern "C" fn(
            strm: *mut pjmedia_vid_dev_stream,
            frame: *const pjmedia_frame,
        ) -> pj_status_t,
    >,
    pub stop: ::std::option::Option<
        unsafe extern "C" fn(strm: *mut pjmedia_vid_dev_stream) -> pj_status_t,
    >,
    pub destroy: ::std::option::Option<
        unsafe extern "C" fn(strm: *mut pjmedia_vid_dev_stream) -> pj_status_t,
    >,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_dev_stream_op() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_dev_stream_op>(),
        64usize,
        concat!("Size of: ", stringify!(pjmedia_vid_dev_stream_op))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_dev_stream_op>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_dev_stream_op))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_stream_op>())).get_param as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_stream_op),
            "::",
            stringify!(get_param)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_stream_op>())).get_cap as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_stream_op),
            "::",
            stringify!(get_cap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_stream_op>())).set_cap as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_stream_op),
            "::",
            stringify!(set_cap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_stream_op>())).start as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_stream_op),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_stream_op>())).get_frame as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_stream_op),
            "::",
            stringify!(get_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_stream_op>())).put_frame as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_stream_op),
            "::",
            stringify!(put_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_stream_op>())).stop as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_stream_op),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_stream_op>())).destroy as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_stream_op),
            "::",
            stringify!(destroy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_stream {
    pub sys: pjmedia_vid_dev_stream__bindgen_ty_1,
    pub op: *mut pjmedia_vid_dev_stream_op,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_stream__bindgen_ty_1 {
    pub drv_idx: ::std::os::raw::c_uint,
    pub is_running: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjmedia_vid_dev_stream__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_dev_stream__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(pjmedia_vid_dev_stream__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_dev_stream__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjmedia_vid_dev_stream__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_stream__bindgen_ty_1>())).drv_idx as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_stream__bindgen_ty_1),
            "::",
            stringify!(drv_idx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_vid_dev_stream__bindgen_ty_1>())).is_running as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_stream__bindgen_ty_1),
            "::",
            stringify!(is_running)
        )
    );
}
#[test]
fn bindgen_test_layout_pjmedia_vid_dev_stream() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_vid_dev_stream>(),
        16usize,
        concat!("Size of: ", stringify!(pjmedia_vid_dev_stream))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_vid_dev_stream>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_vid_dev_stream))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_stream>())).sys as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_stream),
            "::",
            stringify!(sys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_vid_dev_stream>())).op as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_vid_dev_stream),
            "::",
            stringify!(op)
        )
    );
}
extern "C" {
    pub fn pjmedia_vid_dev_get_local_index(
        id: pjmedia_vid_dev_index,
        p_f: *mut *mut pjmedia_vid_dev_factory,
        p_local_index: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_vid_dev_get_global_index(
        f: *const pjmedia_vid_dev_factory,
        local_idx: ::std::os::raw::c_uint,
        pid: *mut pjmedia_vid_dev_index,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_avi_dev_param {
    pub path: pj_str_t,
    pub title: pj_str_t,
    pub avi_streams: *mut pjmedia_avi_streams,
}
#[test]
fn bindgen_test_layout_pjmedia_avi_dev_param() {
    assert_eq!(
        ::std::mem::size_of::<pjmedia_avi_dev_param>(),
        40usize,
        concat!("Size of: ", stringify!(pjmedia_avi_dev_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjmedia_avi_dev_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjmedia_avi_dev_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_avi_dev_param>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_avi_dev_param),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjmedia_avi_dev_param>())).title as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_avi_dev_param),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjmedia_avi_dev_param>())).avi_streams as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjmedia_avi_dev_param),
            "::",
            stringify!(avi_streams)
        )
    );
}
extern "C" {
    pub fn pjmedia_avi_dev_param_default(p: *mut pjmedia_avi_dev_param);
}
extern "C" {
    pub fn pjmedia_avi_dev_create_factory(
        pf: *mut pj_pool_factory,
        max_dev: ::std::os::raw::c_uint,
        p_ret: *mut *mut pjmedia_vid_dev_factory,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_avi_dev_alloc(
        f: *mut pjmedia_vid_dev_factory,
        param: *mut pjmedia_avi_dev_param,
        p_id: *mut pjmedia_vid_dev_index,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_avi_dev_get_param(
        id: pjmedia_vid_dev_index,
        param: *mut pjmedia_avi_dev_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_avi_dev_free(id: pjmedia_vid_dev_index) -> pj_status_t;
}
pub const pjsip_inv_state_PJSIP_INV_STATE_NULL: pjsip_inv_state = 0;
pub const pjsip_inv_state_PJSIP_INV_STATE_CALLING: pjsip_inv_state = 1;
pub const pjsip_inv_state_PJSIP_INV_STATE_INCOMING: pjsip_inv_state = 2;
pub const pjsip_inv_state_PJSIP_INV_STATE_EARLY: pjsip_inv_state = 3;
pub const pjsip_inv_state_PJSIP_INV_STATE_CONNECTING: pjsip_inv_state = 4;
pub const pjsip_inv_state_PJSIP_INV_STATE_CONFIRMED: pjsip_inv_state = 5;
pub const pjsip_inv_state_PJSIP_INV_STATE_DISCONNECTED: pjsip_inv_state = 6;
pub type pjsip_inv_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_inv_on_rx_offer_cb_param {
    pub offer: *const pjmedia_sdp_session,
    pub rdata: *const pjsip_rx_data,
}
#[test]
fn bindgen_test_layout_pjsip_inv_on_rx_offer_cb_param() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_inv_on_rx_offer_cb_param>(),
        16usize,
        concat!("Size of: ", stringify!(pjsip_inv_on_rx_offer_cb_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_inv_on_rx_offer_cb_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_inv_on_rx_offer_cb_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_inv_on_rx_offer_cb_param>())).offer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_on_rx_offer_cb_param),
            "::",
            stringify!(offer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_inv_on_rx_offer_cb_param>())).rdata as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_on_rx_offer_cb_param),
            "::",
            stringify!(rdata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_inv_callback {
    pub on_state_changed: ::std::option::Option<
        unsafe extern "C" fn(inv: *mut pjsip_inv_session, e: *mut pjsip_event),
    >,
    pub on_new_session: ::std::option::Option<
        unsafe extern "C" fn(inv: *mut pjsip_inv_session, e: *mut pjsip_event),
    >,
    pub on_tsx_state_changed: ::std::option::Option<
        unsafe extern "C" fn(
            inv: *mut pjsip_inv_session,
            tsx: *mut pjsip_transaction,
            e: *mut pjsip_event,
        ),
    >,
    pub on_rx_offer: ::std::option::Option<
        unsafe extern "C" fn(inv: *mut pjsip_inv_session, offer: *const pjmedia_sdp_session),
    >,
    pub on_rx_offer2: ::std::option::Option<
        unsafe extern "C" fn(
            inv: *mut pjsip_inv_session,
            param: *mut pjsip_inv_on_rx_offer_cb_param,
        ),
    >,
    pub on_rx_reinvite: ::std::option::Option<
        unsafe extern "C" fn(
            inv: *mut pjsip_inv_session,
            offer: *const pjmedia_sdp_session,
            rdata: *mut pjsip_rx_data,
        ) -> pj_status_t,
    >,
    pub on_create_offer: ::std::option::Option<
        unsafe extern "C" fn(inv: *mut pjsip_inv_session, p_offer: *mut *mut pjmedia_sdp_session),
    >,
    pub on_media_update: ::std::option::Option<
        unsafe extern "C" fn(inv_ses: *mut pjsip_inv_session, status: pj_status_t),
    >,
    pub on_send_ack: ::std::option::Option<
        unsafe extern "C" fn(inv: *mut pjsip_inv_session, rdata: *mut pjsip_rx_data),
    >,
    pub on_redirected: ::std::option::Option<
        unsafe extern "C" fn(
            inv: *mut pjsip_inv_session,
            target: *const pjsip_uri,
            e: *const pjsip_event,
        ) -> pjsip_redirect_op,
    >,
}
#[test]
fn bindgen_test_layout_pjsip_inv_callback() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_inv_callback>(),
        80usize,
        concat!("Size of: ", stringify!(pjsip_inv_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_inv_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_inv_callback))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_inv_callback>())).on_state_changed as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_callback),
            "::",
            stringify!(on_state_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_inv_callback>())).on_new_session as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_callback),
            "::",
            stringify!(on_new_session)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_inv_callback>())).on_tsx_state_changed as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_callback),
            "::",
            stringify!(on_tsx_state_changed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_callback>())).on_rx_offer as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_callback),
            "::",
            stringify!(on_rx_offer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_callback>())).on_rx_offer2 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_callback),
            "::",
            stringify!(on_rx_offer2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_inv_callback>())).on_rx_reinvite as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_callback),
            "::",
            stringify!(on_rx_reinvite)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_inv_callback>())).on_create_offer as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_callback),
            "::",
            stringify!(on_create_offer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_inv_callback>())).on_media_update as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_callback),
            "::",
            stringify!(on_media_update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_callback>())).on_send_ack as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_callback),
            "::",
            stringify!(on_send_ack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_inv_callback>())).on_redirected as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_callback),
            "::",
            stringify!(on_redirected)
        )
    );
}
pub const pjsip_inv_option_PJSIP_INV_SUPPORT_100REL: pjsip_inv_option = 1;
pub const pjsip_inv_option_PJSIP_INV_SUPPORT_TIMER: pjsip_inv_option = 2;
pub const pjsip_inv_option_PJSIP_INV_SUPPORT_UPDATE: pjsip_inv_option = 4;
pub const pjsip_inv_option_PJSIP_INV_SUPPORT_ICE: pjsip_inv_option = 8;
pub const pjsip_inv_option_PJSIP_INV_REQUIRE_ICE: pjsip_inv_option = 16;
pub const pjsip_inv_option_PJSIP_INV_REQUIRE_100REL: pjsip_inv_option = 32;
pub const pjsip_inv_option_PJSIP_INV_REQUIRE_TIMER: pjsip_inv_option = 64;
pub const pjsip_inv_option_PJSIP_INV_ALWAYS_USE_TIMER: pjsip_inv_option = 128;
pub const pjsip_inv_option_PJSIP_INV_SUPPORT_TRICKLE_ICE: pjsip_inv_option = 256;
pub const pjsip_inv_option_PJSIP_INV_REQUIRE_TRICKLE_ICE: pjsip_inv_option = 512;
pub type pjsip_inv_option = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_timer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_inv_session {
    pub obj_name: [::std::os::raw::c_char; 32usize],
    pub pool: *mut pj_pool_t,
    pub pool_prov: *mut pj_pool_t,
    pub pool_active: *mut pj_pool_t,
    pub state: pjsip_inv_state,
    pub cancelling: pj_bool_t,
    pub pending_cancel: pj_bool_t,
    pub pending_bye: *mut pjsip_tx_data,
    pub cause: pjsip_status_code,
    pub cause_text: pj_str_t,
    pub notify: pj_bool_t,
    pub cb_called: ::std::os::raw::c_uint,
    pub dlg: *mut pjsip_dialog,
    pub role: pjsip_role_e,
    pub options: ::std::os::raw::c_uint,
    pub neg: *mut pjmedia_sdp_neg,
    pub sdp_neg_flags: ::std::os::raw::c_uint,
    pub invite_tsx: *mut pjsip_transaction,
    pub invite_req: *mut pjsip_tx_data,
    pub last_answer: *mut pjsip_tx_data,
    pub last_ack: *mut pjsip_tx_data,
    pub last_ack_cseq: pj_int32_t,
    pub mod_data: [*mut ::std::os::raw::c_void; 32usize],
    pub timer: *mut pjsip_timer,
    pub following_fork: pj_bool_t,
    pub ref_cnt: *mut pj_atomic_t,
    pub updated_sdp_answer: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjsip_inv_session() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_inv_session>(),
        472usize,
        concat!("Size of: ", stringify!(pjsip_inv_session))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_inv_session>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_inv_session))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).obj_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(obj_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).pool as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).pool_prov as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(pool_prov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).pool_active as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(pool_active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).state as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).cancelling as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(cancelling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_inv_session>())).pending_cancel as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(pending_cancel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).pending_bye as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(pending_bye)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).cause as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).cause_text as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(cause_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).notify as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(notify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).cb_called as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(cb_called)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).dlg as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(dlg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).role as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(role)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).options as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).neg as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(neg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).sdp_neg_flags as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(sdp_neg_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).invite_tsx as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(invite_tsx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).invite_req as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(invite_req)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).last_answer as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(last_answer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).last_ack as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(last_ack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).last_ack_cseq as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(last_ack_cseq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).mod_data as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(mod_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).timer as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(timer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_inv_session>())).following_fork as *const _ as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(following_fork)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_inv_session>())).ref_cnt as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(ref_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_inv_session>())).updated_sdp_answer as *const _ as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_inv_session),
            "::",
            stringify!(updated_sdp_answer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_rdata_sdp_info {
    pub body: pj_str_t,
    pub sdp_err: pj_status_t,
    pub sdp: *mut pjmedia_sdp_session,
}
#[test]
fn bindgen_test_layout_pjsip_rdata_sdp_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_rdata_sdp_info>(),
        32usize,
        concat!("Size of: ", stringify!(pjsip_rdata_sdp_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_rdata_sdp_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_rdata_sdp_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_rdata_sdp_info>())).body as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rdata_sdp_info),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_rdata_sdp_info>())).sdp_err as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rdata_sdp_info),
            "::",
            stringify!(sdp_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_rdata_sdp_info>())).sdp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_rdata_sdp_info),
            "::",
            stringify!(sdp)
        )
    );
}
extern "C" {
    pub fn pjsip_inv_usage_init(
        endpt: *mut pjsip_endpoint,
        cb: *const pjsip_inv_callback,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_usage_instance() -> *mut pjsip_module;
}
extern "C" {
    pub fn pjsip_inv_usage_dump();
}
extern "C" {
    pub fn pjsip_inv_create_uac(
        dlg: *mut pjsip_dialog,
        local_sdp: *const pjmedia_sdp_session,
        options: ::std::os::raw::c_uint,
        p_inv: *mut *mut pjsip_inv_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_verify_request(
        rdata: *mut pjsip_rx_data,
        options: *mut ::std::os::raw::c_uint,
        sdp: *const pjmedia_sdp_session,
        dlg: *mut pjsip_dialog,
        endpt: *mut pjsip_endpoint,
        tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_verify_request2(
        rdata: *mut pjsip_rx_data,
        options: *mut ::std::os::raw::c_uint,
        offer: *const pjmedia_sdp_session,
        answer: *const pjmedia_sdp_session,
        dlg: *mut pjsip_dialog,
        endpt: *mut pjsip_endpoint,
        tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_verify_request3(
        rdata: *mut pjsip_rx_data,
        tmp_pool: *mut pj_pool_t,
        options: *mut ::std::os::raw::c_uint,
        offer: *const pjmedia_sdp_session,
        answer: *const pjmedia_sdp_session,
        dlg: *mut pjsip_dialog,
        endpt: *mut pjsip_endpoint,
        tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_create_uas(
        dlg: *mut pjsip_dialog,
        rdata: *mut pjsip_rx_data,
        local_sdp: *const pjmedia_sdp_session,
        options: ::std::os::raw::c_uint,
        p_inv: *mut *mut pjsip_inv_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_add_ref(inv: *mut pjsip_inv_session) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_dec_ref(inv: *mut pjsip_inv_session) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_terminate(
        inv: *mut pjsip_inv_session,
        st_code: ::std::os::raw::c_int,
        notify: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_uac_restart(inv: *mut pjsip_inv_session, new_offer: pj_bool_t) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_process_redirect(
        inv: *mut pjsip_inv_session,
        cmd: pjsip_redirect_op,
        e: *mut pjsip_event,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_invite(
        inv: *mut pjsip_inv_session,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_initial_answer(
        inv: *mut pjsip_inv_session,
        rdata: *mut pjsip_rx_data,
        st_code: ::std::os::raw::c_int,
        st_text: *const pj_str_t,
        sdp: *const pjmedia_sdp_session,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_answer(
        inv: *mut pjsip_inv_session,
        st_code: ::std::os::raw::c_int,
        st_text: *const pj_str_t,
        local_sdp: *const pjmedia_sdp_session,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_set_local_sdp(
        inv: *mut pjsip_inv_session,
        sdp: *const pjmedia_sdp_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_set_sdp_answer(
        inv: *mut pjsip_inv_session,
        sdp: *const pjmedia_sdp_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_end_session(
        inv: *mut pjsip_inv_session,
        st_code: ::std::os::raw::c_int,
        st_text: *const pj_str_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_cancel_reinvite(
        inv: *mut pjsip_inv_session,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_reinvite(
        inv: *mut pjsip_inv_session,
        new_contact: *const pj_str_t,
        new_offer: *const pjmedia_sdp_session,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_update(
        inv: *mut pjsip_inv_session,
        new_contact: *const pj_str_t,
        offer: *const pjmedia_sdp_session,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_create_ack(
        inv: *mut pjsip_inv_session,
        cseq: ::std::os::raw::c_int,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_send_msg(
        inv: *mut pjsip_inv_session,
        tdata: *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_get_inv_session(dlg: *mut pjsip_dialog) -> *mut pjsip_inv_session;
}
extern "C" {
    pub fn pjsip_tsx_get_inv_session(tsx: *mut pjsip_transaction) -> *mut pjsip_inv_session;
}
extern "C" {
    pub fn pjsip_inv_state_name(state: pjsip_inv_state) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pjsip_create_sdp_body(
        pool: *mut pj_pool_t,
        sdp: *mut pjmedia_sdp_session,
        p_body: *mut *mut pjsip_msg_body,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_rdata_get_sdp_info(rdata: *mut pjsip_rx_data) -> *mut pjsip_rdata_sdp_info;
}
extern "C" {
    pub fn pjsip_rdata_get_sdp_info2(
        rdata: *mut pjsip_rx_data,
        med_type: *const pjsip_media_type,
    ) -> *mut pjsip_rdata_sdp_info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_regc {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_regc_cbparam {
    pub regc: *mut pjsip_regc,
    pub token: *mut ::std::os::raw::c_void,
    pub status: pj_status_t,
    pub code: ::std::os::raw::c_int,
    pub reason: pj_str_t,
    pub rdata: *mut pjsip_rx_data,
    pub expiration: ::std::os::raw::c_uint,
    pub contact_cnt: ::std::os::raw::c_int,
    pub contact: [*mut pjsip_contact_hdr; 10usize],
    pub is_unreg: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjsip_regc_cbparam() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_regc_cbparam>(),
        144usize,
        concat!("Size of: ", stringify!(pjsip_regc_cbparam))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_regc_cbparam>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_regc_cbparam))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_regc_cbparam>())).regc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_cbparam),
            "::",
            stringify!(regc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_regc_cbparam>())).token as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_cbparam),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_regc_cbparam>())).status as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_cbparam),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_regc_cbparam>())).code as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_cbparam),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_regc_cbparam>())).reason as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_cbparam),
            "::",
            stringify!(reason)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_regc_cbparam>())).rdata as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_cbparam),
            "::",
            stringify!(rdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_regc_cbparam>())).expiration as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_cbparam),
            "::",
            stringify!(expiration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_regc_cbparam>())).contact_cnt as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_cbparam),
            "::",
            stringify!(contact_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_regc_cbparam>())).contact as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_cbparam),
            "::",
            stringify!(contact)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_regc_cbparam>())).is_unreg as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_cbparam),
            "::",
            stringify!(is_unreg)
        )
    );
}
pub type pjsip_regc_cb =
    ::std::option::Option<unsafe extern "C" fn(param: *mut pjsip_regc_cbparam)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_regc_tsx_cb_param {
    pub cbparam: pjsip_regc_cbparam,
    pub contact_cnt: ::std::os::raw::c_int,
    pub contact: [pj_str_t; 10usize],
}
#[test]
fn bindgen_test_layout_pjsip_regc_tsx_cb_param() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_regc_tsx_cb_param>(),
        312usize,
        concat!("Size of: ", stringify!(pjsip_regc_tsx_cb_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_regc_tsx_cb_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_regc_tsx_cb_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_regc_tsx_cb_param>())).cbparam as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_tsx_cb_param),
            "::",
            stringify!(cbparam)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_regc_tsx_cb_param>())).contact_cnt as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_tsx_cb_param),
            "::",
            stringify!(contact_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_regc_tsx_cb_param>())).contact as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_tsx_cb_param),
            "::",
            stringify!(contact)
        )
    );
}
pub type pjsip_regc_tsx_cb =
    ::std::option::Option<unsafe extern "C" fn(param: *mut pjsip_regc_tsx_cb_param)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_regc_info {
    pub server_uri: pj_str_t,
    pub client_uri: pj_str_t,
    pub is_busy: pj_bool_t,
    pub auto_reg: pj_bool_t,
    pub interval: ::std::os::raw::c_uint,
    pub next_reg: ::std::os::raw::c_uint,
    pub transport: *mut pjsip_transport,
}
#[test]
fn bindgen_test_layout_pjsip_regc_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_regc_info>(),
        56usize,
        concat!("Size of: ", stringify!(pjsip_regc_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_regc_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_regc_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_regc_info>())).server_uri as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_info),
            "::",
            stringify!(server_uri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_regc_info>())).client_uri as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_info),
            "::",
            stringify!(client_uri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_regc_info>())).is_busy as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_info),
            "::",
            stringify!(is_busy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_regc_info>())).auto_reg as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_info),
            "::",
            stringify!(auto_reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_regc_info>())).interval as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_info),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_regc_info>())).next_reg as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_info),
            "::",
            stringify!(next_reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_regc_info>())).transport as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_regc_info),
            "::",
            stringify!(transport)
        )
    );
}
extern "C" {
    pub fn pjsip_regc_get_module() -> *mut pjsip_module;
}
extern "C" {
    pub fn pjsip_regc_create(
        endpt: *mut pjsip_endpoint,
        token: *mut ::std::os::raw::c_void,
        cb: pjsip_regc_cb,
        p_regc: *mut *mut pjsip_regc,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_destroy(regc: *mut pjsip_regc) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_get_info(regc: *mut pjsip_regc, info: *mut pjsip_regc_info) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_get_pool(regc: *mut pjsip_regc) -> *mut pj_pool_t;
}
extern "C" {
    pub fn pjsip_regc_init(
        regc: *mut pjsip_regc,
        srv_url: *const pj_str_t,
        from_url: *const pj_str_t,
        to_url: *const pj_str_t,
        ccnt: ::std::os::raw::c_int,
        contact: *const pj_str_t,
        expires: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_add_ref(regc: *mut pjsip_regc);
}
extern "C" {
    pub fn pjsip_regc_dec_ref(regc: *mut pjsip_regc) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_set_reg_tsx_cb(
        regc: *mut pjsip_regc,
        tsx_cb: pjsip_regc_tsx_cb,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_set_via_sent_by(
        regc: *mut pjsip_regc,
        via_addr: *mut pjsip_host_port,
        via_tp: *mut pjsip_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_set_delay_before_refresh(
        regc: *mut pjsip_regc,
        delay: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_set_credentials(
        regc: *mut pjsip_regc,
        count: ::std::os::raw::c_int,
        cred: *const pjsip_cred_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_set_prefs(
        regc: *mut pjsip_regc,
        pref: *const pjsip_auth_clt_pref,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_set_route_set(
        regc: *mut pjsip_regc,
        route_set: *const pjsip_route_hdr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_set_transport(
        regc: *mut pjsip_regc,
        sel: *const pjsip_tpselector,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_release_transport(regc: *mut pjsip_regc) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_add_headers(regc: *mut pjsip_regc, hdr_list: *const pjsip_hdr)
        -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_register(
        regc: *mut pjsip_regc,
        autoreg: pj_bool_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_unregister(
        regc: *mut pjsip_regc,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_unregister_all(
        regc: *mut pjsip_regc,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_update_contact(
        regc: *mut pjsip_regc,
        ccnt: ::std::os::raw::c_int,
        contact: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_update_expires(regc: *mut pjsip_regc, expires: pj_uint32_t) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_send(regc: *mut pjsip_regc, tdata: *mut pjsip_tx_data) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_replaces_hdr {
    pub prev: *mut pjsip_replaces_hdr,
    pub next: *mut pjsip_replaces_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub call_id: pj_str_t,
    pub to_tag: pj_str_t,
    pub from_tag: pj_str_t,
    pub early_only: pj_bool_t,
    pub other_param: pjsip_param,
}
#[test]
fn bindgen_test_layout_pjsip_replaces_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_replaces_hdr>(),
        168usize,
        concat!("Size of: ", stringify!(pjsip_replaces_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_replaces_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_replaces_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_replaces_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_replaces_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_replaces_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_replaces_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_replaces_hdr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_replaces_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_replaces_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_replaces_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_replaces_hdr>())).sname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_replaces_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_replaces_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_replaces_hdr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_replaces_hdr>())).call_id as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_replaces_hdr),
            "::",
            stringify!(call_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_replaces_hdr>())).to_tag as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_replaces_hdr),
            "::",
            stringify!(to_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_replaces_hdr>())).from_tag as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_replaces_hdr),
            "::",
            stringify!(from_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_replaces_hdr>())).early_only as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_replaces_hdr),
            "::",
            stringify!(early_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_replaces_hdr>())).other_param as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_replaces_hdr),
            "::",
            stringify!(other_param)
        )
    );
}
extern "C" {
    pub fn pjsip_replaces_init_module(endpt: *mut pjsip_endpoint) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_replaces_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_replaces_hdr;
}
extern "C" {
    pub fn pjsip_replaces_verify_request(
        rdata: *mut pjsip_rx_data,
        p_dlg: *mut *mut pjsip_dialog,
        lock_dlg: pj_bool_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_evsub {
    _unused: [u8; 0],
}
pub const pjsip_evsub_state_PJSIP_EVSUB_STATE_NULL: pjsip_evsub_state = 0;
pub const pjsip_evsub_state_PJSIP_EVSUB_STATE_SENT: pjsip_evsub_state = 1;
pub const pjsip_evsub_state_PJSIP_EVSUB_STATE_ACCEPTED: pjsip_evsub_state = 2;
pub const pjsip_evsub_state_PJSIP_EVSUB_STATE_PENDING: pjsip_evsub_state = 3;
pub const pjsip_evsub_state_PJSIP_EVSUB_STATE_ACTIVE: pjsip_evsub_state = 4;
pub const pjsip_evsub_state_PJSIP_EVSUB_STATE_TERMINATED: pjsip_evsub_state = 5;
pub const pjsip_evsub_state_PJSIP_EVSUB_STATE_UNKNOWN: pjsip_evsub_state = 6;
pub type pjsip_evsub_state = ::std::os::raw::c_uint;
pub const PJSIP_EVSUB_NO_EVENT_ID: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_evsub_user {
    pub on_evsub_state:
        ::std::option::Option<unsafe extern "C" fn(sub: *mut pjsip_evsub, event: *mut pjsip_event)>,
    pub on_tsx_state: ::std::option::Option<
        unsafe extern "C" fn(
            sub: *mut pjsip_evsub,
            tsx: *mut pjsip_transaction,
            event: *mut pjsip_event,
        ),
    >,
    pub on_rx_refresh: ::std::option::Option<
        unsafe extern "C" fn(
            sub: *mut pjsip_evsub,
            rdata: *mut pjsip_rx_data,
            p_st_code: *mut ::std::os::raw::c_int,
            p_st_text: *mut *mut pj_str_t,
            res_hdr: *mut pjsip_hdr,
            p_body: *mut *mut pjsip_msg_body,
        ),
    >,
    pub on_rx_notify: ::std::option::Option<
        unsafe extern "C" fn(
            sub: *mut pjsip_evsub,
            rdata: *mut pjsip_rx_data,
            p_st_code: *mut ::std::os::raw::c_int,
            p_st_text: *mut *mut pj_str_t,
            res_hdr: *mut pjsip_hdr,
            p_body: *mut *mut pjsip_msg_body,
        ),
    >,
    pub on_client_refresh: ::std::option::Option<unsafe extern "C" fn(sub: *mut pjsip_evsub)>,
    pub on_server_timeout: ::std::option::Option<unsafe extern "C" fn(sub: *mut pjsip_evsub)>,
}
#[test]
fn bindgen_test_layout_pjsip_evsub_user() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_evsub_user>(),
        48usize,
        concat!("Size of: ", stringify!(pjsip_evsub_user))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_evsub_user>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_evsub_user))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_evsub_user>())).on_evsub_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_evsub_user),
            "::",
            stringify!(on_evsub_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_evsub_user>())).on_tsx_state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_evsub_user),
            "::",
            stringify!(on_tsx_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_evsub_user>())).on_rx_refresh as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_evsub_user),
            "::",
            stringify!(on_rx_refresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_evsub_user>())).on_rx_notify as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_evsub_user),
            "::",
            stringify!(on_rx_notify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_evsub_user>())).on_client_refresh as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_evsub_user),
            "::",
            stringify!(on_client_refresh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_evsub_user>())).on_server_timeout as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_evsub_user),
            "::",
            stringify!(on_server_timeout)
        )
    );
}
extern "C" {
    pub static pjsip_subscribe_method: pjsip_method;
}
extern "C" {
    pub static pjsip_notify_method: pjsip_method;
}
extern "C" {
    pub fn pjsip_get_subscribe_method() -> *const pjsip_method;
}
extern "C" {
    pub fn pjsip_get_notify_method() -> *const pjsip_method;
}
extern "C" {
    pub fn pjsip_evsub_init_module(endpt: *mut pjsip_endpoint) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_instance() -> *mut pjsip_module;
}
extern "C" {
    pub fn pjsip_evsub_register_pkg(
        pkg_mod: *mut pjsip_module,
        event_name: *const pj_str_t,
        expires: ::std::os::raw::c_uint,
        accept_cnt: ::std::os::raw::c_uint,
        accept: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_get_allow_events_hdr(m: *mut pjsip_module) -> *const pjsip_hdr;
}
extern "C" {
    pub fn pjsip_evsub_create_uac(
        dlg: *mut pjsip_dialog,
        user_cb: *const pjsip_evsub_user,
        event: *const pj_str_t,
        option: ::std::os::raw::c_uint,
        p_evsub: *mut *mut pjsip_evsub,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_create_uas(
        dlg: *mut pjsip_dialog,
        user_cb: *const pjsip_evsub_user,
        rdata: *mut pjsip_rx_data,
        option: ::std::os::raw::c_uint,
        p_evsub: *mut *mut pjsip_evsub,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_terminate(sub: *mut pjsip_evsub, notify: pj_bool_t) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_get_state(sub: *mut pjsip_evsub) -> pjsip_evsub_state;
}
extern "C" {
    pub fn pjsip_evsub_get_state_name(sub: *mut pjsip_evsub) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pjsip_evsub_get_termination_reason(sub: *mut pjsip_evsub) -> *const pj_str_t;
}
extern "C" {
    pub fn pjsip_evsub_initiate(
        sub: *mut pjsip_evsub,
        method: *const pjsip_method,
        expires: pj_uint32_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_add_header(sub: *mut pjsip_evsub, hdr_list: *const pjsip_hdr)
        -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_accept(
        sub: *mut pjsip_evsub,
        rdata: *mut pjsip_rx_data,
        st_code: ::std::os::raw::c_int,
        hdr_list: *const pjsip_hdr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_notify(
        sub: *mut pjsip_evsub,
        state: pjsip_evsub_state,
        state_str: *const pj_str_t,
        reason: *const pj_str_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_current_notify(
        sub: *mut pjsip_evsub,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_send_request(
        sub: *mut pjsip_evsub,
        tdata: *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tsx_get_evsub(tsx: *mut pjsip_transaction) -> *mut pjsip_evsub;
}
extern "C" {
    pub fn pjsip_evsub_set_mod_data(
        sub: *mut pjsip_evsub,
        mod_id: ::std::os::raw::c_uint,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pjsip_evsub_get_mod_data(
        sub: *mut pjsip_evsub,
        mod_id: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pjsip_evsub_add_ref(sub: *mut pjsip_evsub) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_dec_ref(sub: *mut pjsip_evsub) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_uas_set_timeout(sub: *mut pjsip_evsub, seconds: pj_uint32_t);
}
extern "C" {
    pub static pjsip_refer_method: pjsip_method;
}
extern "C" {
    pub fn pjsip_get_refer_method() -> *const pjsip_method;
}
extern "C" {
    pub fn pjsip_xfer_init_module(endpt: *mut pjsip_endpoint) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_xfer_create_uac(
        dlg: *mut pjsip_dialog,
        user_cb: *const pjsip_evsub_user,
        p_evsub: *mut *mut pjsip_evsub,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_xfer_create_uas(
        dlg: *mut pjsip_dialog,
        user_cb: *const pjsip_evsub_user,
        rdata: *mut pjsip_rx_data,
        p_evsub: *mut *mut pjsip_evsub,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_xfer_initiate(
        sub: *mut pjsip_evsub,
        refer_to_uri: *const pj_str_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_xfer_accept(
        sub: *mut pjsip_evsub,
        rdata: *mut pjsip_rx_data,
        st_code: ::std::os::raw::c_int,
        hdr_list: *const pjsip_hdr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_xfer_notify(
        sub: *mut pjsip_evsub,
        state: pjsip_evsub_state,
        xfer_st_code: ::std::os::raw::c_int,
        xfer_st_text: *const pj_str_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_xfer_current_notify(
        sub: *mut pjsip_evsub,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_xfer_send_request(sub: *mut pjsip_evsub, tdata: *mut pjsip_tx_data)
        -> pj_status_t;
}
extern "C" {
    pub static pjsip_prack_method: pjsip_method;
}
extern "C" {
    pub fn pjsip_get_prack_method() -> *const pjsip_method;
}
extern "C" {
    pub fn pjsip_100rel_init_module(endpt: *mut pjsip_endpoint) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_100rel_attach(inv: *mut pjsip_inv_session) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_100rel_is_reliable(rdata: *mut pjsip_rx_data) -> pj_bool_t;
}
extern "C" {
    pub fn pjsip_100rel_create_prack(
        inv: *mut pjsip_inv_session,
        rdata: *mut pjsip_rx_data,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_100rel_send_prack(
        inv: *mut pjsip_inv_session,
        tdata: *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_100rel_on_rx_prack(
        inv: *mut pjsip_inv_session,
        rdata: *mut pjsip_rx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_100rel_tx_response(
        inv: *mut pjsip_inv_session,
        tdata: *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_100rel_end_session(inv: *mut pjsip_inv_session) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_timer_setting {
    pub min_se: ::std::os::raw::c_uint,
    pub sess_expires: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjsip_timer_setting() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_timer_setting>(),
        8usize,
        concat!("Size of: ", stringify!(pjsip_timer_setting))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_timer_setting>(),
        4usize,
        concat!("Alignment of ", stringify!(pjsip_timer_setting))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_timer_setting>())).min_se as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_timer_setting),
            "::",
            stringify!(min_se)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_timer_setting>())).sess_expires as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_timer_setting),
            "::",
            stringify!(sess_expires)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_sess_expires_hdr {
    pub prev: *mut pjsip_sess_expires_hdr,
    pub next: *mut pjsip_sess_expires_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub sess_expires: ::std::os::raw::c_uint,
    pub refresher: pj_str_t,
    pub other_param: pjsip_param,
}
#[test]
fn bindgen_test_layout_pjsip_sess_expires_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_sess_expires_hdr>(),
        136usize,
        concat!("Size of: ", stringify!(pjsip_sess_expires_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_sess_expires_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_sess_expires_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sess_expires_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sess_expires_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sess_expires_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sess_expires_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sess_expires_hdr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sess_expires_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sess_expires_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sess_expires_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sess_expires_hdr>())).sname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sess_expires_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sess_expires_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sess_expires_hdr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_sess_expires_hdr>())).sess_expires as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sess_expires_hdr),
            "::",
            stringify!(sess_expires)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_sess_expires_hdr>())).refresher as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sess_expires_hdr),
            "::",
            stringify!(refresher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_sess_expires_hdr>())).other_param as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sess_expires_hdr),
            "::",
            stringify!(other_param)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_min_se_hdr {
    pub prev: *mut pjsip_min_se_hdr,
    pub next: *mut pjsip_min_se_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub min_se: ::std::os::raw::c_uint,
    pub other_param: pjsip_param,
}
#[test]
fn bindgen_test_layout_pjsip_min_se_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_min_se_hdr>(),
        120usize,
        concat!("Size of: ", stringify!(pjsip_min_se_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_min_se_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_min_se_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_min_se_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_min_se_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_min_se_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_min_se_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_min_se_hdr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_min_se_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_min_se_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_min_se_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_min_se_hdr>())).sname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_min_se_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_min_se_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_min_se_hdr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_min_se_hdr>())).min_se as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_min_se_hdr),
            "::",
            stringify!(min_se)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_min_se_hdr>())).other_param as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_min_se_hdr),
            "::",
            stringify!(other_param)
        )
    );
}
extern "C" {
    pub fn pjsip_timer_init_module(endpt: *mut pjsip_endpoint) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_timer_setting_default(setting: *mut pjsip_timer_setting) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_timer_init_session(
        inv: *mut pjsip_inv_session,
        setting: *const pjsip_timer_setting,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_sess_expires_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_sess_expires_hdr;
}
extern "C" {
    pub fn pjsip_min_se_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_min_se_hdr;
}
extern "C" {
    pub fn pjsip_timer_update_req(
        inv: *mut pjsip_inv_session,
        tdata: *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_timer_process_resp(
        inv: *mut pjsip_inv_session,
        rdata: *const pjsip_rx_data,
        st_code: *mut pjsip_status_code,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_timer_handle_refresh_error(
        inv: *mut pjsip_inv_session,
        event: *mut pjsip_event,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_timer_process_req(
        inv: *mut pjsip_inv_session,
        rdata: *const pjsip_rx_data,
        st_code: *mut pjsip_status_code,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_timer_update_resp(
        inv: *mut pjsip_inv_session,
        tdata: *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_timer_end_session(inv: *mut pjsip_inv_session) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_event_hdr {
    pub prev: *mut pjsip_event_hdr,
    pub next: *mut pjsip_event_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub event_type: pj_str_t,
    pub id_param: pj_str_t,
    pub other_param: pjsip_param,
}
#[test]
fn bindgen_test_layout_pjsip_event_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_event_hdr>(),
        144usize,
        concat!("Size of: ", stringify!(pjsip_event_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_event_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_event_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_event_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_event_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_event_hdr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_event_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_event_hdr>())).sname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_event_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event_hdr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_event_hdr>())).event_type as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event_hdr),
            "::",
            stringify!(event_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_event_hdr>())).id_param as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event_hdr),
            "::",
            stringify!(id_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_event_hdr>())).other_param as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_event_hdr),
            "::",
            stringify!(other_param)
        )
    );
}
extern "C" {
    pub fn pjsip_event_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_event_hdr;
}
pub type pjsip_allow_events_hdr = pjsip_generic_array_hdr;
extern "C" {
    pub fn pjsip_allow_events_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_allow_events_hdr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_sub_state_hdr {
    pub prev: *mut pjsip_sub_state_hdr,
    pub next: *mut pjsip_sub_state_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub sub_state: pj_str_t,
    pub reason_param: pj_str_t,
    pub expires_param: ::std::os::raw::c_uint,
    pub retry_after: ::std::os::raw::c_int,
    pub other_param: pjsip_param,
}
#[test]
fn bindgen_test_layout_pjsip_sub_state_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_sub_state_hdr>(),
        152usize,
        concat!("Size of: ", stringify!(pjsip_sub_state_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_sub_state_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_sub_state_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sub_state_hdr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sub_state_hdr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sub_state_hdr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sub_state_hdr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sub_state_hdr>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sub_state_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sub_state_hdr>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sub_state_hdr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sub_state_hdr>())).sname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sub_state_hdr),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sub_state_hdr>())).vptr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sub_state_hdr),
            "::",
            stringify!(vptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sub_state_hdr>())).sub_state as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sub_state_hdr),
            "::",
            stringify!(sub_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_sub_state_hdr>())).reason_param as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sub_state_hdr),
            "::",
            stringify!(reason_param)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_sub_state_hdr>())).expires_param as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sub_state_hdr),
            "::",
            stringify!(expires_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sub_state_hdr>())).retry_after as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sub_state_hdr),
            "::",
            stringify!(retry_after)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_sub_state_hdr>())).other_param as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_sub_state_hdr),
            "::",
            stringify!(other_param)
        )
    );
}
extern "C" {
    pub fn pjsip_sub_state_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_sub_state_hdr;
}
extern "C" {
    pub fn pjsip_evsub_init_parser();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_xml_attr {
    pub prev: *mut pj_xml_attr,
    pub next: *mut pj_xml_attr,
    pub name: pj_str_t,
    pub value: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_xml_attr() {
    assert_eq!(
        ::std::mem::size_of::<pj_xml_attr>(),
        48usize,
        concat!("Size of: ", stringify!(pj_xml_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_xml_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_xml_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_xml_attr>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_xml_attr),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_xml_attr>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_xml_attr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_xml_attr>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_xml_attr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_xml_attr>())).value as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_xml_attr),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_xml_node_head {
    pub prev: *mut pj_xml_node,
    pub next: *mut pj_xml_node,
}
#[test]
fn bindgen_test_layout_pj_xml_node_head() {
    assert_eq!(
        ::std::mem::size_of::<pj_xml_node_head>(),
        16usize,
        concat!("Size of: ", stringify!(pj_xml_node_head))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_xml_node_head>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_xml_node_head))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_xml_node_head>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_xml_node_head),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_xml_node_head>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_xml_node_head),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_xml_node {
    pub prev: *mut pj_xml_node,
    pub next: *mut pj_xml_node,
    pub name: pj_str_t,
    pub attr_head: pj_xml_attr,
    pub node_head: pj_xml_node_head,
    pub content: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_xml_node() {
    assert_eq!(
        ::std::mem::size_of::<pj_xml_node>(),
        112usize,
        concat!("Size of: ", stringify!(pj_xml_node))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_xml_node>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_xml_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_xml_node>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_xml_node),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_xml_node>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_xml_node),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_xml_node>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_xml_node),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_xml_node>())).attr_head as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_xml_node),
            "::",
            stringify!(attr_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_xml_node>())).node_head as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_xml_node),
            "::",
            stringify!(node_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_xml_node>())).content as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_xml_node),
            "::",
            stringify!(content)
        )
    );
}
extern "C" {
    pub fn pj_xml_parse(
        pool: *mut pj_pool_t,
        msg: *mut ::std::os::raw::c_char,
        len: pj_size_t,
    ) -> *mut pj_xml_node;
}
extern "C" {
    pub fn pj_xml_print(
        node: *const pj_xml_node,
        buf: *mut ::std::os::raw::c_char,
        len: pj_size_t,
        prolog: pj_bool_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_xml_clone(pool: *mut pj_pool_t, rhs: *const pj_xml_node) -> *mut pj_xml_node;
}
extern "C" {
    pub fn pj_xml_node_new(pool: *mut pj_pool_t, name: *const pj_str_t) -> *mut pj_xml_node;
}
extern "C" {
    pub fn pj_xml_attr_new(
        pool: *mut pj_pool_t,
        name: *const pj_str_t,
        value: *const pj_str_t,
    ) -> *mut pj_xml_attr;
}
extern "C" {
    pub fn pj_xml_add_node(parent: *mut pj_xml_node, node: *mut pj_xml_node);
}
extern "C" {
    pub fn pj_xml_add_attr(node: *mut pj_xml_node, attr: *mut pj_xml_attr);
}
extern "C" {
    pub fn pj_xml_find_node(parent: *const pj_xml_node, name: *const pj_str_t) -> *mut pj_xml_node;
}
extern "C" {
    pub fn pj_xml_find_next_node(
        parent: *const pj_xml_node,
        node: *const pj_xml_node,
        name: *const pj_str_t,
    ) -> *mut pj_xml_node;
}
extern "C" {
    pub fn pj_xml_find_node_rec(
        parent: *const pj_xml_node,
        name: *const pj_str_t,
    ) -> *mut pj_xml_node;
}
extern "C" {
    pub fn pj_xml_find_attr(
        node: *const pj_xml_node,
        name: *const pj_str_t,
        value: *const pj_str_t,
    ) -> *mut pj_xml_attr;
}
extern "C" {
    pub fn pj_xml_find(
        parent: *const pj_xml_node,
        name: *const pj_str_t,
        data: *const ::std::os::raw::c_void,
        match_: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const pj_xml_node,
                arg2: *const ::std::os::raw::c_void,
            ) -> pj_bool_t,
        >,
    ) -> *mut pj_xml_node;
}
extern "C" {
    pub fn pj_xml_find_rec(
        parent: *const pj_xml_node,
        name: *const pj_str_t,
        data: *const ::std::os::raw::c_void,
        match_: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const pj_xml_node,
                arg2: *const ::std::os::raw::c_void,
            ) -> pj_bool_t,
        >,
    ) -> *mut pj_xml_node;
}
extern "C" {
    pub fn pjsip_iscomposing_create_xml(
        pool: *mut pj_pool_t,
        is_composing: pj_bool_t,
        lst_actv: *const pj_time_val,
        content_tp: *const pj_str_t,
        refresh: ::std::os::raw::c_int,
    ) -> *mut pj_xml_node;
}
extern "C" {
    pub fn pjsip_iscomposing_create_body(
        pool: *mut pj_pool_t,
        is_composing: pj_bool_t,
        lst_actv: *const pj_time_val,
        content_tp: *const pj_str_t,
        refresh: ::std::os::raw::c_int,
    ) -> *mut pjsip_msg_body;
}
extern "C" {
    pub fn pjsip_iscomposing_parse(
        pool: *mut pj_pool_t,
        msg: *mut ::std::os::raw::c_char,
        len: pj_size_t,
        p_is_composing: *mut pj_bool_t,
        p_last_active: *mut *mut pj_str_t,
        p_content_type: *mut *mut pj_str_t,
        p_refresh: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_mwi_init_module(
        endpt: *mut pjsip_endpoint,
        mod_evsub: *mut pjsip_module,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_mwi_instance() -> *mut pjsip_module;
}
extern "C" {
    pub fn pjsip_mwi_create_uac(
        dlg: *mut pjsip_dialog,
        user_cb: *const pjsip_evsub_user,
        options: ::std::os::raw::c_uint,
        p_evsub: *mut *mut pjsip_evsub,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_mwi_create_uas(
        dlg: *mut pjsip_dialog,
        user_cb: *const pjsip_evsub_user,
        rdata: *mut pjsip_rx_data,
        p_evsub: *mut *mut pjsip_evsub,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_mwi_terminate(sub: *mut pjsip_evsub, notify: pj_bool_t) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_mwi_initiate(
        sub: *mut pjsip_evsub,
        expires: pj_uint32_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_mwi_accept(
        sub: *mut pjsip_evsub,
        rdata: *mut pjsip_rx_data,
        st_code: ::std::os::raw::c_int,
        hdr_list: *const pjsip_hdr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_mwi_notify(
        sub: *mut pjsip_evsub,
        state: pjsip_evsub_state,
        state_str: *const pj_str_t,
        reason: *const pj_str_t,
        mime_type: *const pjsip_media_type,
        body: *const pj_str_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_mwi_current_notify(
        sub: *mut pjsip_evsub,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_mwi_send_request(sub: *mut pjsip_evsub, tdata: *mut pjsip_tx_data) -> pj_status_t;
}
pub type pjpidf_pres = pj_xml_node;
pub type pjpidf_tuple = pj_xml_node;
pub type pjpidf_status = pj_xml_node;
pub type pjpidf_note = pj_xml_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjpidf_status_op {
    pub construct:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut pj_pool_t, arg2: *mut pjpidf_status)>,
    pub is_basic_open:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const pjpidf_status) -> pj_bool_t>,
    pub set_basic_open:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut pjpidf_status, arg2: pj_bool_t)>,
}
#[test]
fn bindgen_test_layout_pjpidf_status_op() {
    assert_eq!(
        ::std::mem::size_of::<pjpidf_status_op>(),
        24usize,
        concat!("Size of: ", stringify!(pjpidf_status_op))
    );
    assert_eq!(
        ::std::mem::align_of::<pjpidf_status_op>(),
        8usize,
        concat!("Alignment of ", stringify!(pjpidf_status_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_status_op>())).construct as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_status_op),
            "::",
            stringify!(construct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_status_op>())).is_basic_open as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_status_op),
            "::",
            stringify!(is_basic_open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_status_op>())).set_basic_open as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_status_op),
            "::",
            stringify!(set_basic_open)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjpidf_tuple_op {
    pub construct: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pj_pool_t, arg2: *mut pjpidf_tuple, arg3: *const pj_str_t),
    >,
    pub get_id:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const pjpidf_tuple) -> *const pj_str_t>,
    pub set_id: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pj_pool_t, arg2: *mut pjpidf_tuple, arg3: *const pj_str_t),
    >,
    pub get_status:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut pjpidf_tuple) -> *mut pjpidf_status>,
    pub get_contact:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const pjpidf_tuple) -> *const pj_str_t>,
    pub set_contact: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pj_pool_t, arg2: *mut pjpidf_tuple, arg3: *const pj_str_t),
    >,
    pub set_contact_prio: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pj_pool_t, arg2: *mut pjpidf_tuple, arg3: *const pj_str_t),
    >,
    pub get_contact_prio:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const pjpidf_tuple) -> *const pj_str_t>,
    pub add_note: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut pj_pool_t,
            arg2: *mut pjpidf_tuple,
            arg3: *const pj_str_t,
        ) -> *mut pjpidf_note,
    >,
    pub get_first_note:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut pjpidf_tuple) -> *mut pjpidf_note>,
    pub get_next_note: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pjpidf_tuple, arg2: *mut pjpidf_note) -> *mut pjpidf_note,
    >,
    pub get_timestamp:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const pjpidf_tuple) -> *const pj_str_t>,
    pub set_timestamp: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pj_pool_t, arg2: *mut pjpidf_tuple, arg3: *const pj_str_t),
    >,
    pub set_timestamp_np: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pj_pool_t, arg2: *mut pjpidf_tuple, arg3: *mut pj_str_t),
    >,
}
#[test]
fn bindgen_test_layout_pjpidf_tuple_op() {
    assert_eq!(
        ::std::mem::size_of::<pjpidf_tuple_op>(),
        112usize,
        concat!("Size of: ", stringify!(pjpidf_tuple_op))
    );
    assert_eq!(
        ::std::mem::align_of::<pjpidf_tuple_op>(),
        8usize,
        concat!("Alignment of ", stringify!(pjpidf_tuple_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_tuple_op>())).construct as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_tuple_op),
            "::",
            stringify!(construct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_tuple_op>())).get_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_tuple_op),
            "::",
            stringify!(get_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_tuple_op>())).set_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_tuple_op),
            "::",
            stringify!(set_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_tuple_op>())).get_status as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_tuple_op),
            "::",
            stringify!(get_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_tuple_op>())).get_contact as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_tuple_op),
            "::",
            stringify!(get_contact)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_tuple_op>())).set_contact as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_tuple_op),
            "::",
            stringify!(set_contact)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjpidf_tuple_op>())).set_contact_prio as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_tuple_op),
            "::",
            stringify!(set_contact_prio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjpidf_tuple_op>())).get_contact_prio as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_tuple_op),
            "::",
            stringify!(get_contact_prio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_tuple_op>())).add_note as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_tuple_op),
            "::",
            stringify!(add_note)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_tuple_op>())).get_first_note as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_tuple_op),
            "::",
            stringify!(get_first_note)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_tuple_op>())).get_next_note as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_tuple_op),
            "::",
            stringify!(get_next_note)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_tuple_op>())).get_timestamp as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_tuple_op),
            "::",
            stringify!(get_timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_tuple_op>())).set_timestamp as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_tuple_op),
            "::",
            stringify!(set_timestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjpidf_tuple_op>())).set_timestamp_np as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_tuple_op),
            "::",
            stringify!(set_timestamp_np)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjpidf_pres_op {
    pub construct: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pj_pool_t, arg2: *mut pjpidf_pres, arg3: *const pj_str_t),
    >,
    pub add_tuple: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut pj_pool_t,
            arg2: *mut pjpidf_pres,
            arg3: *const pj_str_t,
        ) -> *mut pjpidf_tuple,
    >,
    pub get_first_tuple:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut pjpidf_pres) -> *mut pjpidf_tuple>,
    pub get_next_tuple: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pjpidf_pres, arg2: *mut pjpidf_tuple) -> *mut pjpidf_tuple,
    >,
    pub find_tuple: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pjpidf_pres, arg2: *const pj_str_t) -> *mut pjpidf_tuple,
    >,
    pub remove_tuple: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pjpidf_pres, arg2: *mut pjpidf_tuple),
    >,
    pub add_note: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut pj_pool_t,
            arg2: *mut pjpidf_pres,
            arg3: *const pj_str_t,
        ) -> *mut pjpidf_note,
    >,
    pub get_first_note:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut pjpidf_pres) -> *mut pjpidf_note>,
    pub get_next_note: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pjpidf_pres, arg2: *mut pjpidf_note) -> *mut pjpidf_note,
    >,
}
#[test]
fn bindgen_test_layout_pjpidf_pres_op() {
    assert_eq!(
        ::std::mem::size_of::<pjpidf_pres_op>(),
        72usize,
        concat!("Size of: ", stringify!(pjpidf_pres_op))
    );
    assert_eq!(
        ::std::mem::align_of::<pjpidf_pres_op>(),
        8usize,
        concat!("Alignment of ", stringify!(pjpidf_pres_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_pres_op>())).construct as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_pres_op),
            "::",
            stringify!(construct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_pres_op>())).add_tuple as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_pres_op),
            "::",
            stringify!(add_tuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_pres_op>())).get_first_tuple as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_pres_op),
            "::",
            stringify!(get_first_tuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_pres_op>())).get_next_tuple as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_pres_op),
            "::",
            stringify!(get_next_tuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_pres_op>())).find_tuple as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_pres_op),
            "::",
            stringify!(find_tuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_pres_op>())).remove_tuple as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_pres_op),
            "::",
            stringify!(remove_tuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_pres_op>())).add_note as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_pres_op),
            "::",
            stringify!(add_note)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_pres_op>())).get_first_note as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_pres_op),
            "::",
            stringify!(get_first_note)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_pres_op>())).get_next_note as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_pres_op),
            "::",
            stringify!(get_next_note)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjpidf_op_desc {
    pub pres: pjpidf_pres_op,
    pub tuple: pjpidf_tuple_op,
    pub status: pjpidf_status_op,
}
#[test]
fn bindgen_test_layout_pjpidf_op_desc() {
    assert_eq!(
        ::std::mem::size_of::<pjpidf_op_desc>(),
        208usize,
        concat!("Size of: ", stringify!(pjpidf_op_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<pjpidf_op_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(pjpidf_op_desc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_op_desc>())).pres as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_op_desc),
            "::",
            stringify!(pres)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_op_desc>())).tuple as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_op_desc),
            "::",
            stringify!(tuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjpidf_op_desc>())).status as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(pjpidf_op_desc),
            "::",
            stringify!(status)
        )
    );
}
extern "C" {
    pub static mut pjpidf_op: pjpidf_op_desc;
}
extern "C" {
    pub fn pjpidf_create(pool: *mut pj_pool_t, entity: *const pj_str_t) -> *mut pjpidf_pres;
}
extern "C" {
    pub fn pjpidf_parse(
        pool: *mut pj_pool_t,
        text: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut pjpidf_pres;
}
extern "C" {
    pub fn pjpidf_print(
        pres: *const pjpidf_pres,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pjpidf_pres_construct(
        pool: *mut pj_pool_t,
        pres: *mut pjpidf_pres,
        entity: *const pj_str_t,
    );
}
extern "C" {
    pub fn pjpidf_pres_add_tuple(
        pool: *mut pj_pool_t,
        pres: *mut pjpidf_pres,
        id: *const pj_str_t,
    ) -> *mut pjpidf_tuple;
}
extern "C" {
    pub fn pjpidf_pres_get_first_tuple(pres: *mut pjpidf_pres) -> *mut pjpidf_tuple;
}
extern "C" {
    pub fn pjpidf_pres_get_next_tuple(
        pres: *mut pjpidf_pres,
        t: *mut pjpidf_tuple,
    ) -> *mut pjpidf_tuple;
}
extern "C" {
    pub fn pjpidf_pres_find_tuple(pres: *mut pjpidf_pres, id: *const pj_str_t)
        -> *mut pjpidf_tuple;
}
extern "C" {
    pub fn pjpidf_pres_remove_tuple(pres: *mut pjpidf_pres, arg1: *mut pjpidf_tuple);
}
extern "C" {
    pub fn pjpidf_pres_add_note(
        pool: *mut pj_pool_t,
        pres: *mut pjpidf_pres,
        text: *const pj_str_t,
    ) -> *mut pjpidf_note;
}
extern "C" {
    pub fn pjpidf_pres_get_first_note(pres: *mut pjpidf_pres) -> *mut pjpidf_note;
}
extern "C" {
    pub fn pjpidf_pres_get_next_note(
        arg1: *mut pjpidf_pres,
        arg2: *mut pjpidf_note,
    ) -> *mut pjpidf_note;
}
extern "C" {
    pub fn pjpidf_tuple_construct(pool: *mut pj_pool_t, t: *mut pjpidf_tuple, id: *const pj_str_t);
}
extern "C" {
    pub fn pjpidf_tuple_get_id(t: *const pjpidf_tuple) -> *const pj_str_t;
}
extern "C" {
    pub fn pjpidf_tuple_set_id(pool: *mut pj_pool_t, t: *mut pjpidf_tuple, id: *const pj_str_t);
}
extern "C" {
    pub fn pjpidf_tuple_get_status(t: *mut pjpidf_tuple) -> *mut pjpidf_status;
}
extern "C" {
    pub fn pjpidf_tuple_get_contact(t: *const pjpidf_tuple) -> *const pj_str_t;
}
extern "C" {
    pub fn pjpidf_tuple_set_contact(
        pool: *mut pj_pool_t,
        t: *mut pjpidf_tuple,
        contact: *const pj_str_t,
    );
}
extern "C" {
    pub fn pjpidf_tuple_set_contact_prio(
        pool: *mut pj_pool_t,
        t: *mut pjpidf_tuple,
        prio: *const pj_str_t,
    );
}
extern "C" {
    pub fn pjpidf_tuple_get_contact_prio(t: *const pjpidf_tuple) -> *const pj_str_t;
}
extern "C" {
    pub fn pjpidf_tuple_add_note(
        pool: *mut pj_pool_t,
        t: *mut pjpidf_tuple,
        text: *const pj_str_t,
    ) -> *mut pjpidf_note;
}
extern "C" {
    pub fn pjpidf_tuple_get_first_note(t: *mut pjpidf_tuple) -> *mut pjpidf_note;
}
extern "C" {
    pub fn pjpidf_tuple_get_next_note(
        t: *mut pjpidf_tuple,
        n: *mut pjpidf_note,
    ) -> *mut pjpidf_note;
}
extern "C" {
    pub fn pjpidf_tuple_get_timestamp(t: *const pjpidf_tuple) -> *const pj_str_t;
}
extern "C" {
    pub fn pjpidf_tuple_set_timestamp(
        pool: *mut pj_pool_t,
        t: *mut pjpidf_tuple,
        ts: *const pj_str_t,
    );
}
extern "C" {
    pub fn pjpidf_tuple_set_timestamp_np(
        arg1: *mut pj_pool_t,
        t: *mut pjpidf_tuple,
        ts: *mut pj_str_t,
    );
}
extern "C" {
    pub fn pjpidf_status_construct(arg1: *mut pj_pool_t, arg2: *mut pjpidf_status);
}
extern "C" {
    pub fn pjpidf_status_is_basic_open(arg1: *const pjpidf_status) -> pj_bool_t;
}
extern "C" {
    pub fn pjpidf_status_set_basic_open(arg1: *mut pjpidf_status, arg2: pj_bool_t);
}
pub type pjxpidf_pres = pj_xml_node;
extern "C" {
    pub fn pjxpidf_create(pool: *mut pj_pool_t, uri: *const pj_str_t) -> *mut pjxpidf_pres;
}
extern "C" {
    pub fn pjxpidf_parse(
        pool: *mut pj_pool_t,
        text: *mut ::std::os::raw::c_char,
        len: pj_size_t,
    ) -> *mut pjxpidf_pres;
}
extern "C" {
    pub fn pjxpidf_print(
        pres: *mut pjxpidf_pres,
        text: *mut ::std::os::raw::c_char,
        len: pj_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pjxpidf_get_uri(pres: *mut pjxpidf_pres) -> *mut pj_str_t;
}
extern "C" {
    pub fn pjxpidf_set_uri(
        pool: *mut pj_pool_t,
        pres: *mut pjxpidf_pres,
        uri: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjxpidf_get_status(pres: *mut pjxpidf_pres) -> pj_bool_t;
}
extern "C" {
    pub fn pjxpidf_set_status(pres: *mut pjxpidf_pres, status: pj_bool_t) -> pj_status_t;
}
pub const pjrpid_activity_PJRPID_ACTIVITY_UNKNOWN: pjrpid_activity = 0;
pub const pjrpid_activity_PJRPID_ACTIVITY_AWAY: pjrpid_activity = 1;
pub const pjrpid_activity_PJRPID_ACTIVITY_BUSY: pjrpid_activity = 2;
pub type pjrpid_activity = ::std::os::raw::c_uint;
pub const pjrpid_element_type_PJRPID_ELEMENT_TYPE_PERSON: pjrpid_element_type = 0;
pub type pjrpid_element_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjrpid_element {
    pub type_: pjrpid_element_type,
    pub id: pj_str_t,
    pub activity: pjrpid_activity,
    pub note: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjrpid_element() {
    assert_eq!(
        ::std::mem::size_of::<pjrpid_element>(),
        48usize,
        concat!("Size of: ", stringify!(pjrpid_element))
    );
    assert_eq!(
        ::std::mem::align_of::<pjrpid_element>(),
        8usize,
        concat!("Alignment of ", stringify!(pjrpid_element))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjrpid_element>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjrpid_element),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjrpid_element>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjrpid_element),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjrpid_element>())).activity as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjrpid_element),
            "::",
            stringify!(activity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjrpid_element>())).note as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjrpid_element),
            "::",
            stringify!(note)
        )
    );
}
extern "C" {
    pub fn pjrpid_element_dup(
        pool: *mut pj_pool_t,
        dst: *mut pjrpid_element,
        src: *const pjrpid_element,
    );
}
extern "C" {
    pub fn pjrpid_add_element(
        pres: *mut pjpidf_pres,
        pool: *mut pj_pool_t,
        options: ::std::os::raw::c_uint,
        elem: *const pjrpid_element,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjrpid_get_element(
        pres: *const pjpidf_pres,
        pool: *mut pj_pool_t,
        elem: *mut pjrpid_element,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_init_module(
        endpt: *mut pjsip_endpoint,
        mod_evsub: *mut pjsip_module,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_instance() -> *mut pjsip_module;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_pres_status {
    pub info_cnt: ::std::os::raw::c_uint,
    pub info: [pjsip_pres_status__bindgen_ty_1; 8usize],
    pub _is_valid: pj_bool_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_pres_status__bindgen_ty_1 {
    pub basic_open: pj_bool_t,
    pub rpid: pjrpid_element,
    pub id: pj_str_t,
    pub contact: pj_str_t,
    pub tuple_node: *mut pj_xml_node,
}
#[test]
fn bindgen_test_layout_pjsip_pres_status__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_pres_status__bindgen_ty_1>(),
        96usize,
        concat!("Size of: ", stringify!(pjsip_pres_status__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_pres_status__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_pres_status__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_pres_status__bindgen_ty_1>())).basic_open as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pres_status__bindgen_ty_1),
            "::",
            stringify!(basic_open)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_pres_status__bindgen_ty_1>())).rpid as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pres_status__bindgen_ty_1),
            "::",
            stringify!(rpid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_pres_status__bindgen_ty_1>())).id as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pres_status__bindgen_ty_1),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_pres_status__bindgen_ty_1>())).contact as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pres_status__bindgen_ty_1),
            "::",
            stringify!(contact)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_pres_status__bindgen_ty_1>())).tuple_node as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pres_status__bindgen_ty_1),
            "::",
            stringify!(tuple_node)
        )
    );
}
#[test]
fn bindgen_test_layout_pjsip_pres_status() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_pres_status>(),
        784usize,
        concat!("Size of: ", stringify!(pjsip_pres_status))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_pres_status>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_pres_status))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_pres_status>())).info_cnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pres_status),
            "::",
            stringify!(info_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_pres_status>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pres_status),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_pres_status>()))._is_valid as *const _ as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_pres_status),
            "::",
            stringify!(_is_valid)
        )
    );
}
extern "C" {
    pub fn pjsip_pres_create_uac(
        dlg: *mut pjsip_dialog,
        user_cb: *const pjsip_evsub_user,
        options: ::std::os::raw::c_uint,
        p_evsub: *mut *mut pjsip_evsub,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_create_uas(
        dlg: *mut pjsip_dialog,
        user_cb: *const pjsip_evsub_user,
        rdata: *mut pjsip_rx_data,
        p_evsub: *mut *mut pjsip_evsub,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_terminate(sub: *mut pjsip_evsub, notify: pj_bool_t) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_initiate(
        sub: *mut pjsip_evsub,
        expires: pj_uint32_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_add_header(sub: *mut pjsip_evsub, hdr_list: *const pjsip_hdr) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_accept(
        sub: *mut pjsip_evsub,
        rdata: *mut pjsip_rx_data,
        st_code: ::std::os::raw::c_int,
        hdr_list: *const pjsip_hdr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_notify(
        sub: *mut pjsip_evsub,
        state: pjsip_evsub_state,
        state_str: *const pj_str_t,
        reason: *const pj_str_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_current_notify(
        sub: *mut pjsip_evsub,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_send_request(sub: *mut pjsip_evsub, tdata: *mut pjsip_tx_data)
        -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_get_status(
        sub: *mut pjsip_evsub,
        status: *mut pjsip_pres_status,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_set_status(
        sub: *mut pjsip_evsub,
        status: *const pjsip_pres_status,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_create_pidf(
        pool: *mut pj_pool_t,
        status: *const pjsip_pres_status,
        entity: *const pj_str_t,
        p_body: *mut *mut pjsip_msg_body,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_create_xpidf(
        pool: *mut pj_pool_t,
        status: *const pjsip_pres_status,
        entity: *const pj_str_t,
        p_body: *mut *mut pjsip_msg_body,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_parse_pidf(
        rdata: *mut pjsip_rx_data,
        pool: *mut pj_pool_t,
        status: *mut pjsip_pres_status,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_parse_pidf2(
        body: *mut ::std::os::raw::c_char,
        body_len: ::std::os::raw::c_uint,
        pool: *mut pj_pool_t,
        status: *mut pjsip_pres_status,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_parse_xpidf(
        rdata: *mut pjsip_rx_data,
        pool: *mut pj_pool_t,
        status: *mut pjsip_pres_status,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_parse_xpidf2(
        body: *mut ::std::os::raw::c_char,
        body_len: ::std::os::raw::c_uint,
        pool: *mut pj_pool_t,
        status: *mut pjsip_pres_status,
    ) -> pj_status_t;
}
extern "C" {
    pub static pjsip_publish_method: pjsip_method;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_publishc {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_publishc_opt {
    pub queue_request: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjsip_publishc_opt() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_publishc_opt>(),
        4usize,
        concat!("Size of: ", stringify!(pjsip_publishc_opt))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_publishc_opt>(),
        4usize,
        concat!("Alignment of ", stringify!(pjsip_publishc_opt))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_publishc_opt>())).queue_request as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_publishc_opt),
            "::",
            stringify!(queue_request)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_publishc_cbparam {
    pub pubc: *mut pjsip_publishc,
    pub token: *mut ::std::os::raw::c_void,
    pub status: pj_status_t,
    pub code: ::std::os::raw::c_int,
    pub reason: pj_str_t,
    pub rdata: *mut pjsip_rx_data,
    pub expiration: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjsip_publishc_cbparam() {
    assert_eq!(
        ::std::mem::size_of::<pjsip_publishc_cbparam>(),
        56usize,
        concat!("Size of: ", stringify!(pjsip_publishc_cbparam))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsip_publishc_cbparam>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsip_publishc_cbparam))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_publishc_cbparam>())).pubc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_publishc_cbparam),
            "::",
            stringify!(pubc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_publishc_cbparam>())).token as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_publishc_cbparam),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_publishc_cbparam>())).status as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_publishc_cbparam),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_publishc_cbparam>())).code as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_publishc_cbparam),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_publishc_cbparam>())).reason as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_publishc_cbparam),
            "::",
            stringify!(reason)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsip_publishc_cbparam>())).rdata as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_publishc_cbparam),
            "::",
            stringify!(rdata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsip_publishc_cbparam>())).expiration as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsip_publishc_cbparam),
            "::",
            stringify!(expiration)
        )
    );
}
pub type pjsip_publishc_cb =
    ::std::option::Option<unsafe extern "C" fn(param: *mut pjsip_publishc_cbparam)>;
extern "C" {
    pub fn pjsip_publishc_opt_default(opt: *mut pjsip_publishc_opt);
}
extern "C" {
    pub fn pjsip_publishc_init_module(endpt: *mut pjsip_endpoint) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_create(
        endpt: *mut pjsip_endpoint,
        opt: *const pjsip_publishc_opt,
        token: *mut ::std::os::raw::c_void,
        cb: pjsip_publishc_cb,
        p_pubc: *mut *mut pjsip_publishc,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_destroy(pubc: *mut pjsip_publishc) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_get_pool(pubc: *mut pjsip_publishc) -> *mut pj_pool_t;
}
extern "C" {
    pub fn pjsip_publishc_init(
        pubc: *mut pjsip_publishc,
        event: *const pj_str_t,
        target_uri: *const pj_str_t,
        from_uri: *const pj_str_t,
        to_uri: *const pj_str_t,
        expires: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_set_credentials(
        pubc: *mut pjsip_publishc,
        count: ::std::os::raw::c_int,
        c: *const pjsip_cred_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_set_route_set(
        pubc: *mut pjsip_publishc,
        rs: *const pjsip_route_hdr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_set_headers(
        pubc: *mut pjsip_publishc,
        hdr_list: *const pjsip_hdr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_set_via_sent_by(
        pubc: *mut pjsip_publishc,
        via_addr: *mut pjsip_host_port,
        via_tp: *mut pjsip_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_publish(
        pubc: *mut pjsip_publishc,
        auto_refresh: pj_bool_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_unpublish(
        pubc: *mut pjsip_publishc,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_update_expires(
        pubc: *mut pjsip_publishc,
        expires: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_send(pubc: *mut pjsip_publishc, tdata: *mut pjsip_tx_data)
        -> pj_status_t;
}
pub const pj_stun_nat_type_PJ_STUN_NAT_TYPE_UNKNOWN: pj_stun_nat_type = 0;
pub const pj_stun_nat_type_PJ_STUN_NAT_TYPE_ERR_UNKNOWN: pj_stun_nat_type = 1;
pub const pj_stun_nat_type_PJ_STUN_NAT_TYPE_OPEN: pj_stun_nat_type = 2;
pub const pj_stun_nat_type_PJ_STUN_NAT_TYPE_BLOCKED: pj_stun_nat_type = 3;
pub const pj_stun_nat_type_PJ_STUN_NAT_TYPE_SYMMETRIC_UDP: pj_stun_nat_type = 4;
pub const pj_stun_nat_type_PJ_STUN_NAT_TYPE_FULL_CONE: pj_stun_nat_type = 5;
pub const pj_stun_nat_type_PJ_STUN_NAT_TYPE_SYMMETRIC: pj_stun_nat_type = 6;
pub const pj_stun_nat_type_PJ_STUN_NAT_TYPE_RESTRICTED: pj_stun_nat_type = 7;
pub const pj_stun_nat_type_PJ_STUN_NAT_TYPE_PORT_RESTRICTED: pj_stun_nat_type = 8;
pub type pj_stun_nat_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_nat_detect_result {
    pub status: pj_status_t,
    pub status_text: *const ::std::os::raw::c_char,
    pub nat_type: pj_stun_nat_type,
    pub nat_type_name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_pj_stun_nat_detect_result() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_nat_detect_result>(),
        32usize,
        concat!("Size of: ", stringify!(pj_stun_nat_detect_result))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_nat_detect_result>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_stun_nat_detect_result))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_nat_detect_result>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_nat_detect_result),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_nat_detect_result>())).status_text as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_nat_detect_result),
            "::",
            stringify!(status_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_nat_detect_result>())).nat_type as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_nat_detect_result),
            "::",
            stringify!(nat_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_stun_nat_detect_result>())).nat_type_name as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_nat_detect_result),
            "::",
            stringify!(nat_type_name)
        )
    );
}
pub type pj_stun_nat_detect_cb = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        res: *const pj_stun_nat_detect_result,
    ),
>;
extern "C" {
    pub fn pj_stun_get_nat_name(type_: pj_stun_nat_type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_stun_detect_nat_type(
        server: *const pj_sockaddr_in,
        stun_cfg: *mut pj_stun_config,
        user_data: *mut ::std::os::raw::c_void,
        cb: pj_stun_nat_detect_cb,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_stun_detect_nat_type2(
        server: *const pj_sockaddr,
        stun_cfg: *mut pj_stun_config,
        user_data: *mut ::std::os::raw::c_void,
        cb: pj_stun_nat_detect_cb,
    ) -> pj_status_t;
}
extern "C" {
    pub static mut pj_optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut pj_optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut pj_optopt: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_getopt_option {
    pub name: *const ::std::os::raw::c_char,
    pub has_arg: ::std::os::raw::c_int,
    pub flag: *mut ::std::os::raw::c_int,
    pub val: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pj_getopt_option() {
    assert_eq!(
        ::std::mem::size_of::<pj_getopt_option>(),
        32usize,
        concat!("Size of: ", stringify!(pj_getopt_option))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_getopt_option>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_getopt_option))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_getopt_option>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_getopt_option),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_getopt_option>())).has_arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_getopt_option),
            "::",
            stringify!(has_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_getopt_option>())).flag as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_getopt_option),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_getopt_option>())).val as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_getopt_option),
            "::",
            stringify!(val)
        )
    );
}
extern "C" {
    pub fn pj_getopt(
        argc: ::std::os::raw::c_int,
        argv: *const *mut ::std::os::raw::c_char,
        shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_getopt_long(
        argc: ::std::os::raw::c_int,
        argv: *const *mut ::std::os::raw::c_char,
        options: *const ::std::os::raw::c_char,
        longopts: *const pj_getopt_option,
        longind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_getopt_long_only(
        argc: ::std::os::raw::c_int,
        argv: *const *mut ::std::os::raw::c_char,
        shortopts: *const ::std::os::raw::c_char,
        longopts: *const pj_getopt_option,
        longind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_base64_encode(
        input: *const pj_uint8_t,
        in_len: ::std::os::raw::c_int,
        output: *mut ::std::os::raw::c_char,
        out_len: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_base64_decode(
        input: *const pj_str_t,
        out: *mut pj_uint8_t,
        out_len: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_crc32_context {
    pub crc_state: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pj_crc32_context() {
    assert_eq!(
        ::std::mem::size_of::<pj_crc32_context>(),
        4usize,
        concat!("Size of: ", stringify!(pj_crc32_context))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_crc32_context>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_crc32_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_crc32_context>())).crc_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_crc32_context),
            "::",
            stringify!(crc_state)
        )
    );
}
extern "C" {
    pub fn pj_crc32_init(ctx: *mut pj_crc32_context);
}
extern "C" {
    pub fn pj_crc32_update(
        ctx: *mut pj_crc32_context,
        data: *const pj_uint8_t,
        nbytes: pj_size_t,
    ) -> pj_uint32_t;
}
extern "C" {
    pub fn pj_crc32_final(ctx: *mut pj_crc32_context) -> pj_uint32_t;
}
extern "C" {
    pub fn pj_crc32_calc(data: *const pj_uint8_t, nbytes: pj_size_t) -> pj_uint32_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_md5_context {
    pub buf: [pj_uint32_t; 4usize],
    pub bits: [pj_uint32_t; 2usize],
    pub in_: [pj_uint8_t; 64usize],
}
#[test]
fn bindgen_test_layout_pj_md5_context() {
    assert_eq!(
        ::std::mem::size_of::<pj_md5_context>(),
        88usize,
        concat!("Size of: ", stringify!(pj_md5_context))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_md5_context>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_md5_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_md5_context>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_md5_context),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_md5_context>())).bits as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_md5_context),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_md5_context>())).in_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_md5_context),
            "::",
            stringify!(in_)
        )
    );
}
extern "C" {
    pub fn pj_md5_init(pms: *mut pj_md5_context);
}
extern "C" {
    pub fn pj_md5_update(
        pms: *mut pj_md5_context,
        data: *const pj_uint8_t,
        nbytes: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn pj_md5_final(pms: *mut pj_md5_context, digest: *mut pj_uint8_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_hmac_md5_context {
    pub context: pj_md5_context,
    pub k_opad: [pj_uint8_t; 64usize],
}
#[test]
fn bindgen_test_layout_pj_hmac_md5_context() {
    assert_eq!(
        ::std::mem::size_of::<pj_hmac_md5_context>(),
        152usize,
        concat!("Size of: ", stringify!(pj_hmac_md5_context))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_hmac_md5_context>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_hmac_md5_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_hmac_md5_context>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_hmac_md5_context),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_hmac_md5_context>())).k_opad as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_hmac_md5_context),
            "::",
            stringify!(k_opad)
        )
    );
}
extern "C" {
    pub fn pj_hmac_md5(
        input: *const pj_uint8_t,
        input_len: ::std::os::raw::c_uint,
        key: *const pj_uint8_t,
        key_len: ::std::os::raw::c_uint,
        digest: *mut pj_uint8_t,
    );
}
extern "C" {
    pub fn pj_hmac_md5_init(
        hctx: *mut pj_hmac_md5_context,
        key: *const pj_uint8_t,
        key_len: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn pj_hmac_md5_update(
        hctx: *mut pj_hmac_md5_context,
        input: *const pj_uint8_t,
        input_len: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn pj_hmac_md5_final(hctx: *mut pj_hmac_md5_context, digest: *mut pj_uint8_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_sha1_context {
    pub state: [pj_uint32_t; 5usize],
    pub count: [pj_uint32_t; 2usize],
    pub buffer: [pj_uint8_t; 64usize],
}
#[test]
fn bindgen_test_layout_pj_sha1_context() {
    assert_eq!(
        ::std::mem::size_of::<pj_sha1_context>(),
        92usize,
        concat!("Size of: ", stringify!(pj_sha1_context))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_sha1_context>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_sha1_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sha1_context>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sha1_context),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sha1_context>())).count as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sha1_context),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_sha1_context>())).buffer as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_sha1_context),
            "::",
            stringify!(buffer)
        )
    );
}
extern "C" {
    pub fn pj_sha1_init(ctx: *mut pj_sha1_context);
}
extern "C" {
    pub fn pj_sha1_update(ctx: *mut pj_sha1_context, data: *const pj_uint8_t, nbytes: pj_size_t);
}
extern "C" {
    pub fn pj_sha1_final(ctx: *mut pj_sha1_context, digest: *mut pj_uint8_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_hmac_sha1_context {
    pub context: pj_sha1_context,
    pub k_opad: [pj_uint8_t; 64usize],
}
#[test]
fn bindgen_test_layout_pj_hmac_sha1_context() {
    assert_eq!(
        ::std::mem::size_of::<pj_hmac_sha1_context>(),
        156usize,
        concat!("Size of: ", stringify!(pj_hmac_sha1_context))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_hmac_sha1_context>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_hmac_sha1_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_hmac_sha1_context>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_hmac_sha1_context),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_hmac_sha1_context>())).k_opad as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_hmac_sha1_context),
            "::",
            stringify!(k_opad)
        )
    );
}
extern "C" {
    pub fn pj_hmac_sha1(
        input: *const pj_uint8_t,
        input_len: ::std::os::raw::c_uint,
        key: *const pj_uint8_t,
        key_len: ::std::os::raw::c_uint,
        digest: *mut pj_uint8_t,
    );
}
extern "C" {
    pub fn pj_hmac_sha1_init(
        hctx: *mut pj_hmac_sha1_context,
        key: *const pj_uint8_t,
        key_len: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn pj_hmac_sha1_update(
        hctx: *mut pj_hmac_sha1_context,
        input: *const pj_uint8_t,
        input_len: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn pj_hmac_sha1_final(hctx: *mut pj_hmac_sha1_context, digest: *mut pj_uint8_t);
}
pub const pj_dns_srv_option_PJ_DNS_SRV_FALLBACK_A: pj_dns_srv_option = 1;
pub const pj_dns_srv_option_PJ_DNS_SRV_FALLBACK_AAAA: pj_dns_srv_option = 2;
pub const pj_dns_srv_option_PJ_DNS_SRV_RESOLVE_AAAA: pj_dns_srv_option = 4;
pub const pj_dns_srv_option_PJ_DNS_SRV_RESOLVE_AAAA_ONLY: pj_dns_srv_option = 8;
pub type pj_dns_srv_option = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_dns_srv_record {
    pub count: ::std::os::raw::c_uint,
    pub entry: [pj_dns_srv_record__bindgen_ty_1; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_dns_srv_record__bindgen_ty_1 {
    pub priority: ::std::os::raw::c_uint,
    pub weight: ::std::os::raw::c_uint,
    pub port: pj_uint16_t,
    pub server: pj_dns_addr_record,
}
#[test]
fn bindgen_test_layout_pj_dns_srv_record__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pj_dns_srv_record__bindgen_ty_1>(),
        344usize,
        concat!("Size of: ", stringify!(pj_dns_srv_record__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_dns_srv_record__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_dns_srv_record__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_dns_srv_record__bindgen_ty_1>())).priority as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_srv_record__bindgen_ty_1),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_dns_srv_record__bindgen_ty_1>())).weight as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_srv_record__bindgen_ty_1),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_dns_srv_record__bindgen_ty_1>())).port as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_srv_record__bindgen_ty_1),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_dns_srv_record__bindgen_ty_1>())).server as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_srv_record__bindgen_ty_1),
            "::",
            stringify!(server)
        )
    );
}
#[test]
fn bindgen_test_layout_pj_dns_srv_record() {
    assert_eq!(
        ::std::mem::size_of::<pj_dns_srv_record>(),
        2760usize,
        concat!("Size of: ", stringify!(pj_dns_srv_record))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_dns_srv_record>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_dns_srv_record))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_srv_record>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_srv_record),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_dns_srv_record>())).entry as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_dns_srv_record),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_srv_async_query {
    _unused: [u8; 0],
}
pub type pj_dns_srv_resolver_cb = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        status: pj_status_t,
        rec: *const pj_dns_srv_record,
    ),
>;
extern "C" {
    pub fn pj_dns_srv_resolve(
        domain_name: *const pj_str_t,
        res_name: *const pj_str_t,
        def_port: ::std::os::raw::c_uint,
        pool: *mut pj_pool_t,
        resolver: *mut pj_dns_resolver,
        option: ::std::os::raw::c_uint,
        token: *mut ::std::os::raw::c_void,
        cb: pj_dns_srv_resolver_cb,
        p_query: *mut *mut pj_dns_srv_async_query,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_dns_srv_cancel_query(
        query: *mut pj_dns_srv_async_query,
        notify: pj_bool_t,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_server {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pj_dns_server_create(
        pf: *mut pj_pool_factory,
        ioqueue: *mut pj_ioqueue_t,
        af: ::std::os::raw::c_int,
        port: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        p_srv: *mut *mut pj_dns_server,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_dns_server_destroy(srv: *mut pj_dns_server) -> pj_status_t;
}
extern "C" {
    pub fn pj_dns_server_add_rec(
        srv: *mut pj_dns_server,
        count: ::std::os::raw::c_uint,
        rr: *const pj_dns_parsed_rr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_dns_server_del_rec(
        srv: *mut pj_dns_server,
        dns_class: ::std::os::raw::c_int,
        type_: pj_dns_type,
        name: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_str_unescape(pool: *mut pj_pool_t, src: *const pj_str_t) -> pj_str_t;
}
extern "C" {
    pub fn pj_strcpy_unescape(dst: *mut pj_str_t, src: *const pj_str_t) -> *mut pj_str_t;
}
extern "C" {
    pub fn pj_strncpy_escape(
        dst: *mut pj_str_t,
        src: *const pj_str_t,
        max: pj_ssize_t,
        unres: *const pj_cis_t,
    ) -> *mut pj_str_t;
}
extern "C" {
    pub fn pj_strncpy2_escape(
        dst: *mut ::std::os::raw::c_char,
        src: *const pj_str_t,
        max: pj_ssize_t,
        unres: *const pj_cis_t,
    ) -> pj_ssize_t;
}
pub const pj_json_val_type_PJ_JSON_VAL_NULL: pj_json_val_type = 0;
pub const pj_json_val_type_PJ_JSON_VAL_BOOL: pj_json_val_type = 1;
pub const pj_json_val_type_PJ_JSON_VAL_NUMBER: pj_json_val_type = 2;
pub const pj_json_val_type_PJ_JSON_VAL_STRING: pj_json_val_type = 3;
pub const pj_json_val_type_PJ_JSON_VAL_ARRAY: pj_json_val_type = 4;
pub const pj_json_val_type_PJ_JSON_VAL_OBJ: pj_json_val_type = 5;
pub type pj_json_val_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_json_list {
    pub prev: *mut pj_json_elem,
    pub next: *mut pj_json_elem,
}
#[test]
fn bindgen_test_layout_pj_json_list() {
    assert_eq!(
        ::std::mem::size_of::<pj_json_list>(),
        16usize,
        concat!("Size of: ", stringify!(pj_json_list))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_json_list>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_json_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_json_list>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_json_list),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_json_list>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_json_list),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_json_elem {
    pub prev: *mut pj_json_elem,
    pub next: *mut pj_json_elem,
    pub name: pj_str_t,
    pub type_: pj_json_val_type,
    pub value: pj_json_elem__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pj_json_elem__bindgen_ty_1 {
    pub is_true: pj_bool_t,
    pub num: f32,
    pub str_: pj_str_t,
    pub children: pj_json_list,
    _bindgen_union_align: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_pj_json_elem__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pj_json_elem__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(pj_json_elem__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_json_elem__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_json_elem__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_json_elem__bindgen_ty_1>())).is_true as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_json_elem__bindgen_ty_1),
            "::",
            stringify!(is_true)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_json_elem__bindgen_ty_1>())).num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_json_elem__bindgen_ty_1),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_json_elem__bindgen_ty_1>())).str_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_json_elem__bindgen_ty_1),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_json_elem__bindgen_ty_1>())).children as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_json_elem__bindgen_ty_1),
            "::",
            stringify!(children)
        )
    );
}
#[test]
fn bindgen_test_layout_pj_json_elem() {
    assert_eq!(
        ::std::mem::size_of::<pj_json_elem>(),
        56usize,
        concat!("Size of: ", stringify!(pj_json_elem))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_json_elem>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_json_elem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_json_elem>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_json_elem),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_json_elem>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_json_elem),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_json_elem>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_json_elem),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_json_elem>())).type_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_json_elem),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_json_elem>())).value as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_json_elem),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_json_err_info {
    pub line: ::std::os::raw::c_uint,
    pub col: ::std::os::raw::c_uint,
    pub err_char: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pj_json_err_info() {
    assert_eq!(
        ::std::mem::size_of::<pj_json_err_info>(),
        12usize,
        concat!("Size of: ", stringify!(pj_json_err_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_json_err_info>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_json_err_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_json_err_info>())).line as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_json_err_info),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_json_err_info>())).col as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_json_err_info),
            "::",
            stringify!(col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_json_err_info>())).err_char as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_json_err_info),
            "::",
            stringify!(err_char)
        )
    );
}
pub type pj_json_writer = ::std::option::Option<
    unsafe extern "C" fn(
        s: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_uint,
        user_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t,
>;
extern "C" {
    pub fn pj_json_elem_null(el: *mut pj_json_elem, name: *mut pj_str_t);
}
extern "C" {
    pub fn pj_json_elem_bool(el: *mut pj_json_elem, name: *mut pj_str_t, val: pj_bool_t);
}
extern "C" {
    pub fn pj_json_elem_number(el: *mut pj_json_elem, name: *mut pj_str_t, val: f32);
}
extern "C" {
    pub fn pj_json_elem_string(el: *mut pj_json_elem, name: *mut pj_str_t, val: *mut pj_str_t);
}
extern "C" {
    pub fn pj_json_elem_array(el: *mut pj_json_elem, name: *mut pj_str_t);
}
extern "C" {
    pub fn pj_json_elem_obj(el: *mut pj_json_elem, name: *mut pj_str_t);
}
extern "C" {
    pub fn pj_json_elem_add(el: *mut pj_json_elem, child: *mut pj_json_elem);
}
extern "C" {
    pub fn pj_json_parse(
        pool: *mut pj_pool_t,
        buffer: *mut ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_uint,
        err_info: *mut pj_json_err_info,
    ) -> *mut pj_json_elem;
}
extern "C" {
    pub fn pj_json_write(
        elem: *const pj_json_elem,
        buffer: *mut ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_json_writef(
        elem: *const pj_json_elem,
        writer: pj_json_writer,
        user_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
pub const pjstun_msg_type_PJSTUN_BINDING_REQUEST: pjstun_msg_type = 1;
pub const pjstun_msg_type_PJSTUN_BINDING_RESPONSE: pjstun_msg_type = 257;
pub const pjstun_msg_type_PJSTUN_BINDING_ERROR_RESPONSE: pjstun_msg_type = 273;
pub const pjstun_msg_type_PJSTUN_SHARED_SECRET_REQUEST: pjstun_msg_type = 2;
pub const pjstun_msg_type_PJSTUN_SHARED_SECRET_RESPONSE: pjstun_msg_type = 258;
pub const pjstun_msg_type_PJSTUN_SHARED_SECRET_ERROR_RESPONSE: pjstun_msg_type = 274;
pub type pjstun_msg_type = ::std::os::raw::c_uint;
pub const pjstun_attr_type_PJSTUN_ATTR_MAPPED_ADDR: pjstun_attr_type = 1;
pub const pjstun_attr_type_PJSTUN_ATTR_RESPONSE_ADDR: pjstun_attr_type = 2;
pub const pjstun_attr_type_PJSTUN_ATTR_CHANGE_REQUEST: pjstun_attr_type = 3;
pub const pjstun_attr_type_PJSTUN_ATTR_SOURCE_ADDR: pjstun_attr_type = 4;
pub const pjstun_attr_type_PJSTUN_ATTR_CHANGED_ADDR: pjstun_attr_type = 5;
pub const pjstun_attr_type_PJSTUN_ATTR_USERNAME: pjstun_attr_type = 6;
pub const pjstun_attr_type_PJSTUN_ATTR_PASSWORD: pjstun_attr_type = 7;
pub const pjstun_attr_type_PJSTUN_ATTR_MESSAGE_INTEGRITY: pjstun_attr_type = 8;
pub const pjstun_attr_type_PJSTUN_ATTR_ERROR_CODE: pjstun_attr_type = 9;
pub const pjstun_attr_type_PJSTUN_ATTR_UNKNOWN_ATTRIBUTES: pjstun_attr_type = 10;
pub const pjstun_attr_type_PJSTUN_ATTR_REFLECTED_FROM: pjstun_attr_type = 11;
pub const pjstun_attr_type_PJSTUN_ATTR_XOR_MAPPED_ADDR: pjstun_attr_type = 32;
pub type pjstun_attr_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjstun_msg_hdr {
    pub type_: pj_uint16_t,
    pub length: pj_uint16_t,
    pub tsx: [pj_uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout_pjstun_msg_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjstun_msg_hdr>(),
        20usize,
        concat!("Size of: ", stringify!(pjstun_msg_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjstun_msg_hdr>(),
        4usize,
        concat!("Alignment of ", stringify!(pjstun_msg_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_msg_hdr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_msg_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_msg_hdr>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_msg_hdr),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_msg_hdr>())).tsx as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_msg_hdr),
            "::",
            stringify!(tsx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjstun_attr_hdr {
    pub type_: pj_uint16_t,
    pub length: pj_uint16_t,
}
#[test]
fn bindgen_test_layout_pjstun_attr_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pjstun_attr_hdr>(),
        4usize,
        concat!("Size of: ", stringify!(pjstun_attr_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjstun_attr_hdr>(),
        2usize,
        concat!("Alignment of ", stringify!(pjstun_attr_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_attr_hdr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_attr_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_attr_hdr>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_attr_hdr),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjstun_mapped_addr_attr {
    pub hdr: pjstun_attr_hdr,
    pub ignored: pj_uint8_t,
    pub family: pj_uint8_t,
    pub port: pj_uint16_t,
    pub addr: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjstun_mapped_addr_attr() {
    assert_eq!(
        ::std::mem::size_of::<pjstun_mapped_addr_attr>(),
        12usize,
        concat!("Size of: ", stringify!(pjstun_mapped_addr_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjstun_mapped_addr_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(pjstun_mapped_addr_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_mapped_addr_attr>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_mapped_addr_attr),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_mapped_addr_attr>())).ignored as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_mapped_addr_attr),
            "::",
            stringify!(ignored)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_mapped_addr_attr>())).family as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_mapped_addr_attr),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_mapped_addr_attr>())).port as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_mapped_addr_attr),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_mapped_addr_attr>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_mapped_addr_attr),
            "::",
            stringify!(addr)
        )
    );
}
pub type pjstun_response_addr_attr = pjstun_mapped_addr_attr;
pub type pjstun_changed_addr_attr = pjstun_mapped_addr_attr;
pub type pjstun_src_addr_attr = pjstun_mapped_addr_attr;
pub type pjstun_reflected_form_attr = pjstun_mapped_addr_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjstun_change_request_attr {
    pub hdr: pjstun_attr_hdr,
    pub value: pj_uint32_t,
}
#[test]
fn bindgen_test_layout_pjstun_change_request_attr() {
    assert_eq!(
        ::std::mem::size_of::<pjstun_change_request_attr>(),
        8usize,
        concat!("Size of: ", stringify!(pjstun_change_request_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjstun_change_request_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(pjstun_change_request_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_change_request_attr>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_change_request_attr),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjstun_change_request_attr>())).value as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_change_request_attr),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjstun_username_attr {
    pub hdr: pjstun_attr_hdr,
    pub value: [pj_uint32_t; 1usize],
}
#[test]
fn bindgen_test_layout_pjstun_username_attr() {
    assert_eq!(
        ::std::mem::size_of::<pjstun_username_attr>(),
        8usize,
        concat!("Size of: ", stringify!(pjstun_username_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjstun_username_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(pjstun_username_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_username_attr>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_username_attr),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_username_attr>())).value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_username_attr),
            "::",
            stringify!(value)
        )
    );
}
pub type pjstun_password_attr = pjstun_username_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjstun_error_code_attr {
    pub hdr: pjstun_attr_hdr,
    pub ignored: pj_uint16_t,
    pub err_class: pj_uint8_t,
    pub number: pj_uint8_t,
    pub reason: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_pjstun_error_code_attr() {
    assert_eq!(
        ::std::mem::size_of::<pjstun_error_code_attr>(),
        12usize,
        concat!("Size of: ", stringify!(pjstun_error_code_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<pjstun_error_code_attr>(),
        2usize,
        concat!("Alignment of ", stringify!(pjstun_error_code_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_error_code_attr>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_error_code_attr),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_error_code_attr>())).ignored as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_error_code_attr),
            "::",
            stringify!(ignored)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjstun_error_code_attr>())).err_class as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_error_code_attr),
            "::",
            stringify!(err_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_error_code_attr>())).number as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_error_code_attr),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_error_code_attr>())).reason as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_error_code_attr),
            "::",
            stringify!(reason)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjstun_msg {
    pub hdr: *mut pjstun_msg_hdr,
    pub attr_count: ::std::os::raw::c_int,
    pub attr: [*mut pjstun_attr_hdr; 16usize],
}
#[test]
fn bindgen_test_layout_pjstun_msg() {
    assert_eq!(
        ::std::mem::size_of::<pjstun_msg>(),
        144usize,
        concat!("Size of: ", stringify!(pjstun_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<pjstun_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(pjstun_msg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_msg>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_msg),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_msg>())).attr_count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_msg),
            "::",
            stringify!(attr_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_msg>())).attr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_msg),
            "::",
            stringify!(attr)
        )
    );
}
extern "C" {
    pub fn pjstun_create_bind_req(
        pool: *mut pj_pool_t,
        msg: *mut *mut ::std::os::raw::c_void,
        len: *mut pj_size_t,
        id_hi: pj_uint32_t,
        id_lo: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjstun_parse_msg(
        buf: *mut ::std::os::raw::c_void,
        len: pj_size_t,
        msg: *mut pjstun_msg,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjstun_msg_find_attr(
        msg: *mut pjstun_msg,
        t: pjstun_attr_type,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pjstun_get_mapped_addr(
        pf: *mut pj_pool_factory,
        sock_cnt: ::std::os::raw::c_int,
        sock: *mut pj_sock_t,
        srv1: *const pj_str_t,
        port1: ::std::os::raw::c_int,
        srv2: *const pj_str_t,
        port2: ::std::os::raw::c_int,
        mapped_addr: *mut pj_sockaddr_in,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjstun_setting {
    pub use_stun2: pj_bool_t,
    pub af: ::std::os::raw::c_int,
    pub srv1: pj_str_t,
    pub port1: ::std::os::raw::c_int,
    pub srv2: pj_str_t,
    pub port2: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pjstun_setting() {
    assert_eq!(
        ::std::mem::size_of::<pjstun_setting>(),
        56usize,
        concat!("Size of: ", stringify!(pjstun_setting))
    );
    assert_eq!(
        ::std::mem::align_of::<pjstun_setting>(),
        8usize,
        concat!("Alignment of ", stringify!(pjstun_setting))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_setting>())).use_stun2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_setting),
            "::",
            stringify!(use_stun2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_setting>())).af as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_setting),
            "::",
            stringify!(af)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_setting>())).srv1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_setting),
            "::",
            stringify!(srv1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_setting>())).port1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_setting),
            "::",
            stringify!(port1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_setting>())).srv2 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_setting),
            "::",
            stringify!(srv2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjstun_setting>())).port2 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjstun_setting),
            "::",
            stringify!(port2)
        )
    );
}
extern "C" {
    pub fn pjstun_get_mapped_addr2(
        pf: *mut pj_pool_factory,
        opt: *const pjstun_setting,
        sock_cnt: ::std::os::raw::c_int,
        sock: *mut pj_sock_t,
        mapped_addr: *mut pj_sockaddr_in,
    ) -> pj_status_t;
}
pub const pj_pcap_link_type_PJ_PCAP_LINK_TYPE_ETH: pj_pcap_link_type = 1;
pub type pj_pcap_link_type = ::std::os::raw::c_uint;
pub const pj_pcap_proto_type_PJ_PCAP_PROTO_TYPE_UDP: pj_pcap_proto_type = 17;
pub type pj_pcap_proto_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_pcap_udp_hdr {
    pub src_port: pj_uint16_t,
    pub dst_port: pj_uint16_t,
    pub len: pj_uint16_t,
    pub csum: pj_uint16_t,
}
#[test]
fn bindgen_test_layout_pj_pcap_udp_hdr() {
    assert_eq!(
        ::std::mem::size_of::<pj_pcap_udp_hdr>(),
        8usize,
        concat!("Size of: ", stringify!(pj_pcap_udp_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_pcap_udp_hdr>(),
        2usize,
        concat!("Alignment of ", stringify!(pj_pcap_udp_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pcap_udp_hdr>())).src_port as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pcap_udp_hdr),
            "::",
            stringify!(src_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pcap_udp_hdr>())).dst_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pcap_udp_hdr),
            "::",
            stringify!(dst_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pcap_udp_hdr>())).len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pcap_udp_hdr),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pcap_udp_hdr>())).csum as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pcap_udp_hdr),
            "::",
            stringify!(csum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_pcap_filter {
    pub link: pj_pcap_link_type,
    pub proto: pj_pcap_proto_type,
    pub ip_src: pj_uint32_t,
    pub ip_dst: pj_uint32_t,
    pub src_port: pj_uint16_t,
    pub dst_port: pj_uint16_t,
}
#[test]
fn bindgen_test_layout_pj_pcap_filter() {
    assert_eq!(
        ::std::mem::size_of::<pj_pcap_filter>(),
        20usize,
        concat!("Size of: ", stringify!(pj_pcap_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_pcap_filter>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_pcap_filter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pcap_filter>())).link as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pcap_filter),
            "::",
            stringify!(link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pcap_filter>())).proto as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pcap_filter),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pcap_filter>())).ip_src as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pcap_filter),
            "::",
            stringify!(ip_src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pcap_filter>())).ip_dst as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pcap_filter),
            "::",
            stringify!(ip_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pcap_filter>())).src_port as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pcap_filter),
            "::",
            stringify!(src_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_pcap_filter>())).dst_port as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_pcap_filter),
            "::",
            stringify!(dst_port)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_pcap_file {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pj_pcap_filter_default(filter: *mut pj_pcap_filter);
}
extern "C" {
    pub fn pj_pcap_open(
        pool: *mut pj_pool_t,
        path: *const ::std::os::raw::c_char,
        p_file: *mut *mut pj_pcap_file,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_pcap_close(file: *mut pj_pcap_file) -> pj_status_t;
}
extern "C" {
    pub fn pj_pcap_set_filter(
        file: *mut pj_pcap_file,
        filter: *const pj_pcap_filter,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_pcap_read_udp(
        file: *mut pj_pcap_file,
        udp_hdr: *mut pj_pcap_udp_hdr,
        udp_payload: *mut pj_uint8_t,
        udp_payload_size: *mut pj_size_t,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_activesock_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_activesock_cb {
    pub on_data_read: ::std::option::Option<
        unsafe extern "C" fn(
            asock: *mut pj_activesock_t,
            data: *mut ::std::os::raw::c_void,
            size: pj_size_t,
            status: pj_status_t,
            remainder: *mut pj_size_t,
        ) -> pj_bool_t,
    >,
    pub on_data_recvfrom: ::std::option::Option<
        unsafe extern "C" fn(
            asock: *mut pj_activesock_t,
            data: *mut ::std::os::raw::c_void,
            size: pj_size_t,
            src_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_int,
            status: pj_status_t,
        ) -> pj_bool_t,
    >,
    pub on_data_sent: ::std::option::Option<
        unsafe extern "C" fn(
            asock: *mut pj_activesock_t,
            send_key: *mut pj_ioqueue_op_key_t,
            sent: pj_ssize_t,
        ) -> pj_bool_t,
    >,
    pub on_accept_complete: ::std::option::Option<
        unsafe extern "C" fn(
            asock: *mut pj_activesock_t,
            newsock: pj_sock_t,
            src_addr: *const pj_sockaddr_t,
            src_addr_len: ::std::os::raw::c_int,
        ) -> pj_bool_t,
    >,
    pub on_accept_complete2: ::std::option::Option<
        unsafe extern "C" fn(
            asock: *mut pj_activesock_t,
            newsock: pj_sock_t,
            src_addr: *const pj_sockaddr_t,
            src_addr_len: ::std::os::raw::c_int,
            status: pj_status_t,
        ) -> pj_bool_t,
    >,
    pub on_connect_complete: ::std::option::Option<
        unsafe extern "C" fn(asock: *mut pj_activesock_t, status: pj_status_t) -> pj_bool_t,
    >,
}
#[test]
fn bindgen_test_layout_pj_activesock_cb() {
    assert_eq!(
        ::std::mem::size_of::<pj_activesock_cb>(),
        48usize,
        concat!("Size of: ", stringify!(pj_activesock_cb))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_activesock_cb>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_activesock_cb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_activesock_cb>())).on_data_read as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_activesock_cb),
            "::",
            stringify!(on_data_read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_activesock_cb>())).on_data_recvfrom as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_activesock_cb),
            "::",
            stringify!(on_data_recvfrom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_activesock_cb>())).on_data_sent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_activesock_cb),
            "::",
            stringify!(on_data_sent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_activesock_cb>())).on_accept_complete as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_activesock_cb),
            "::",
            stringify!(on_accept_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_activesock_cb>())).on_accept_complete2 as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_activesock_cb),
            "::",
            stringify!(on_accept_complete2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_activesock_cb>())).on_connect_complete as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_activesock_cb),
            "::",
            stringify!(on_connect_complete)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_activesock_cfg {
    pub grp_lock: *mut pj_grp_lock_t,
    pub async_cnt: ::std::os::raw::c_uint,
    pub concurrency: ::std::os::raw::c_int,
    pub whole_data: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pj_activesock_cfg() {
    assert_eq!(
        ::std::mem::size_of::<pj_activesock_cfg>(),
        24usize,
        concat!("Size of: ", stringify!(pj_activesock_cfg))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_activesock_cfg>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_activesock_cfg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_activesock_cfg>())).grp_lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_activesock_cfg),
            "::",
            stringify!(grp_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_activesock_cfg>())).async_cnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_activesock_cfg),
            "::",
            stringify!(async_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_activesock_cfg>())).concurrency as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_activesock_cfg),
            "::",
            stringify!(concurrency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_activesock_cfg>())).whole_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_activesock_cfg),
            "::",
            stringify!(whole_data)
        )
    );
}
extern "C" {
    pub fn pj_activesock_cfg_default(cfg: *mut pj_activesock_cfg);
}
extern "C" {
    pub fn pj_activesock_create(
        pool: *mut pj_pool_t,
        sock: pj_sock_t,
        sock_type: ::std::os::raw::c_int,
        opt: *const pj_activesock_cfg,
        ioqueue: *mut pj_ioqueue_t,
        cb: *const pj_activesock_cb,
        user_data: *mut ::std::os::raw::c_void,
        p_asock: *mut *mut pj_activesock_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_activesock_create_udp(
        pool: *mut pj_pool_t,
        addr: *const pj_sockaddr,
        opt: *const pj_activesock_cfg,
        ioqueue: *mut pj_ioqueue_t,
        cb: *const pj_activesock_cb,
        user_data: *mut ::std::os::raw::c_void,
        p_asock: *mut *mut pj_activesock_t,
        bound_addr: *mut pj_sockaddr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_activesock_close(asock: *mut pj_activesock_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_activesock_set_user_data(
        asock: *mut pj_activesock_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_activesock_get_user_data(asock: *mut pj_activesock_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pj_activesock_start_read(
        asock: *mut pj_activesock_t,
        pool: *mut pj_pool_t,
        buff_size: ::std::os::raw::c_uint,
        flags: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_activesock_start_read2(
        asock: *mut pj_activesock_t,
        pool: *mut pj_pool_t,
        buff_size: ::std::os::raw::c_uint,
        readbuf: *mut *mut ::std::os::raw::c_void,
        flags: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_activesock_start_recvfrom(
        asock: *mut pj_activesock_t,
        pool: *mut pj_pool_t,
        buff_size: ::std::os::raw::c_uint,
        flags: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_activesock_start_recvfrom2(
        asock: *mut pj_activesock_t,
        pool: *mut pj_pool_t,
        buff_size: ::std::os::raw::c_uint,
        readbuf: *mut *mut ::std::os::raw::c_void,
        flags: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_activesock_send(
        asock: *mut pj_activesock_t,
        send_key: *mut pj_ioqueue_op_key_t,
        data: *const ::std::os::raw::c_void,
        size: *mut pj_ssize_t,
        flags: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_activesock_sendto(
        asock: *mut pj_activesock_t,
        send_key: *mut pj_ioqueue_op_key_t,
        data: *const ::std::os::raw::c_void,
        size: *mut pj_ssize_t,
        flags: ::std::os::raw::c_uint,
        addr: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_activesock_start_accept(
        asock: *mut pj_activesock_t,
        pool: *mut pj_pool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_activesock_start_connect(
        asock: *mut pj_activesock_t,
        pool: *mut pj_pool_t,
        remaddr: *const pj_sockaddr_t,
        addr_len: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_http_req {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_http_header_elmt {
    pub name: pj_str_t,
    pub value: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_http_header_elmt() {
    assert_eq!(
        ::std::mem::size_of::<pj_http_header_elmt>(),
        32usize,
        concat!("Size of: ", stringify!(pj_http_header_elmt))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_http_header_elmt>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_http_header_elmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_header_elmt>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_header_elmt),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_header_elmt>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_header_elmt),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_http_headers {
    pub count: ::std::os::raw::c_uint,
    pub header: [pj_http_header_elmt; 32usize],
}
#[test]
fn bindgen_test_layout_pj_http_headers() {
    assert_eq!(
        ::std::mem::size_of::<pj_http_headers>(),
        1032usize,
        concat!("Size of: ", stringify!(pj_http_headers))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_http_headers>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_http_headers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_headers>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_headers),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_headers>())).header as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_headers),
            "::",
            stringify!(header)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_http_auth_cred {
    pub scheme: pj_str_t,
    pub realm: pj_str_t,
    pub username: pj_str_t,
    pub data_type: ::std::os::raw::c_uint,
    pub data: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_http_auth_cred() {
    assert_eq!(
        ::std::mem::size_of::<pj_http_auth_cred>(),
        72usize,
        concat!("Size of: ", stringify!(pj_http_auth_cred))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_http_auth_cred>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_http_auth_cred))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_auth_cred>())).scheme as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_auth_cred),
            "::",
            stringify!(scheme)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_auth_cred>())).realm as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_auth_cred),
            "::",
            stringify!(realm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_auth_cred>())).username as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_auth_cred),
            "::",
            stringify!(username)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_auth_cred>())).data_type as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_auth_cred),
            "::",
            stringify!(data_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_auth_cred>())).data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_auth_cred),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_http_req_param {
    pub addr_family: ::std::os::raw::c_int,
    pub method: pj_str_t,
    pub version: pj_str_t,
    pub timeout: pj_time_val,
    pub user_data: *mut ::std::os::raw::c_void,
    pub headers: pj_http_headers,
    pub reqdata: pj_http_req_param_pj_http_reqdata,
    pub auth_cred: pj_http_auth_cred,
    pub source_port_range_start: pj_uint16_t,
    pub source_port_range_size: pj_uint16_t,
    pub max_retries: pj_uint16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_http_req_param_pj_http_reqdata {
    pub data: *mut ::std::os::raw::c_void,
    pub size: pj_size_t,
    pub total_size: pj_size_t,
}
#[test]
fn bindgen_test_layout_pj_http_req_param_pj_http_reqdata() {
    assert_eq!(
        ::std::mem::size_of::<pj_http_req_param_pj_http_reqdata>(),
        24usize,
        concat!("Size of: ", stringify!(pj_http_req_param_pj_http_reqdata))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_http_req_param_pj_http_reqdata>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pj_http_req_param_pj_http_reqdata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_http_req_param_pj_http_reqdata>())).data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_req_param_pj_http_reqdata),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_http_req_param_pj_http_reqdata>())).size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_req_param_pj_http_reqdata),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_http_req_param_pj_http_reqdata>())).total_size as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_req_param_pj_http_reqdata),
            "::",
            stringify!(total_size)
        )
    );
}
#[test]
fn bindgen_test_layout_pj_http_req_param() {
    assert_eq!(
        ::std::mem::size_of::<pj_http_req_param>(),
        1200usize,
        concat!("Size of: ", stringify!(pj_http_req_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_http_req_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_http_req_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_req_param>())).addr_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_req_param),
            "::",
            stringify!(addr_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_req_param>())).method as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_req_param),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_req_param>())).version as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_req_param),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_req_param>())).timeout as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_req_param),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_req_param>())).user_data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_req_param),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_req_param>())).headers as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_req_param),
            "::",
            stringify!(headers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_req_param>())).reqdata as *const _ as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_req_param),
            "::",
            stringify!(reqdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_req_param>())).auth_cred as *const _ as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_req_param),
            "::",
            stringify!(auth_cred)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_http_req_param>())).source_port_range_start as *const _
                as usize
        },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_req_param),
            "::",
            stringify!(source_port_range_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_http_req_param>())).source_port_range_size as *const _
                as usize
        },
        1194usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_req_param),
            "::",
            stringify!(source_port_range_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_req_param>())).max_retries as *const _ as usize },
        1196usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_req_param),
            "::",
            stringify!(max_retries)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_http_auth_chal {
    pub scheme: pj_str_t,
    pub realm: pj_str_t,
    pub domain: pj_str_t,
    pub nonce: pj_str_t,
    pub opaque: pj_str_t,
    pub stale: ::std::os::raw::c_int,
    pub algorithm: pj_str_t,
    pub qop: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_http_auth_chal() {
    assert_eq!(
        ::std::mem::size_of::<pj_http_auth_chal>(),
        120usize,
        concat!("Size of: ", stringify!(pj_http_auth_chal))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_http_auth_chal>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_http_auth_chal))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_auth_chal>())).scheme as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_auth_chal),
            "::",
            stringify!(scheme)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_auth_chal>())).realm as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_auth_chal),
            "::",
            stringify!(realm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_auth_chal>())).domain as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_auth_chal),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_auth_chal>())).nonce as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_auth_chal),
            "::",
            stringify!(nonce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_auth_chal>())).opaque as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_auth_chal),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_auth_chal>())).stale as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_auth_chal),
            "::",
            stringify!(stale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_auth_chal>())).algorithm as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_auth_chal),
            "::",
            stringify!(algorithm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_auth_chal>())).qop as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_auth_chal),
            "::",
            stringify!(qop)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_http_resp {
    pub version: pj_str_t,
    pub status_code: pj_uint16_t,
    pub reason: pj_str_t,
    pub headers: pj_http_headers,
    pub auth_chal: pj_http_auth_chal,
    pub content_length: pj_int32_t,
    pub data: *mut ::std::os::raw::c_void,
    pub size: pj_size_t,
}
#[test]
fn bindgen_test_layout_pj_http_resp() {
    assert_eq!(
        ::std::mem::size_of::<pj_http_resp>(),
        1216usize,
        concat!("Size of: ", stringify!(pj_http_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_http_resp>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_http_resp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_resp>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_resp),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_resp>())).status_code as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_resp),
            "::",
            stringify!(status_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_resp>())).reason as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_resp),
            "::",
            stringify!(reason)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_resp>())).headers as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_resp),
            "::",
            stringify!(headers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_resp>())).auth_chal as *const _ as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_resp),
            "::",
            stringify!(auth_chal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_resp>())).content_length as *const _ as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_resp),
            "::",
            stringify!(content_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_resp>())).data as *const _ as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_resp),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_resp>())).size as *const _ as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_resp),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_http_url {
    pub username: pj_str_t,
    pub passwd: pj_str_t,
    pub protocol: pj_str_t,
    pub host: pj_str_t,
    pub port: pj_uint16_t,
    pub path: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_http_url() {
    assert_eq!(
        ::std::mem::size_of::<pj_http_url>(),
        88usize,
        concat!("Size of: ", stringify!(pj_http_url))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_http_url>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_http_url))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_url>())).username as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_url),
            "::",
            stringify!(username)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_url>())).passwd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_url),
            "::",
            stringify!(passwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_url>())).protocol as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_url),
            "::",
            stringify!(protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_url>())).host as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_url),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_url>())).port as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_url),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_http_url>())).path as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_url),
            "::",
            stringify!(path)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_http_req_callback {
    pub on_response: ::std::option::Option<
        unsafe extern "C" fn(http_req: *mut pj_http_req, resp: *const pj_http_resp),
    >,
    pub on_send_data: ::std::option::Option<
        unsafe extern "C" fn(
            http_req: *mut pj_http_req,
            data: *mut *mut ::std::os::raw::c_void,
            size: *mut pj_size_t,
        ),
    >,
    pub on_data_read: ::std::option::Option<
        unsafe extern "C" fn(
            http_req: *mut pj_http_req,
            data: *mut ::std::os::raw::c_void,
            size: pj_size_t,
        ),
    >,
    pub on_complete: ::std::option::Option<
        unsafe extern "C" fn(
            http_req: *mut pj_http_req,
            status: pj_status_t,
            resp: *const pj_http_resp,
        ),
    >,
}
#[test]
fn bindgen_test_layout_pj_http_req_callback() {
    assert_eq!(
        ::std::mem::size_of::<pj_http_req_callback>(),
        32usize,
        concat!("Size of: ", stringify!(pj_http_req_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_http_req_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_http_req_callback))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_http_req_callback>())).on_response as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_req_callback),
            "::",
            stringify!(on_response)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_http_req_callback>())).on_send_data as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_req_callback),
            "::",
            stringify!(on_send_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_http_req_callback>())).on_data_read as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_req_callback),
            "::",
            stringify!(on_data_read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_http_req_callback>())).on_complete as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_http_req_callback),
            "::",
            stringify!(on_complete)
        )
    );
}
extern "C" {
    pub fn pj_http_req_param_default(param: *mut pj_http_req_param);
}
extern "C" {
    pub fn pj_http_headers_add_elmt(
        headers: *mut pj_http_headers,
        name: *mut pj_str_t,
        val: *mut pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_http_headers_add_elmt2(
        headers: *mut pj_http_headers,
        name: *mut ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_char,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_http_req_parse_url(url: *const pj_str_t, hurl: *mut pj_http_url) -> pj_status_t;
}
extern "C" {
    pub fn pj_http_req_create(
        pool: *mut pj_pool_t,
        url: *const pj_str_t,
        timer: *mut pj_timer_heap_t,
        ioqueue: *mut pj_ioqueue_t,
        param: *const pj_http_req_param,
        hcb: *const pj_http_req_callback,
        http_req: *mut *mut pj_http_req,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_http_req_set_timeout(http_req: *mut pj_http_req, timeout: *const pj_time_val);
}
extern "C" {
    pub fn pj_http_req_start(http_req: *mut pj_http_req) -> pj_status_t;
}
extern "C" {
    pub fn pj_http_req_cancel(http_req: *mut pj_http_req, notify: pj_bool_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_http_req_destroy(http_req: *mut pj_http_req) -> pj_status_t;
}
extern "C" {
    pub fn pj_http_req_is_running(http_req: *const pj_http_req) -> pj_bool_t;
}
extern "C" {
    pub fn pj_http_req_get_user_data(http_req: *mut pj_http_req) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_cli_t {
    _unused: [u8; 0],
}
pub type pj_cli_cmd_id = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_cli_cfg {
    pub name: pj_str_t,
    pub title: pj_str_t,
    pub pf: *mut pj_pool_factory,
}
#[test]
fn bindgen_test_layout_pj_cli_cfg() {
    assert_eq!(
        ::std::mem::size_of::<pj_cli_cfg>(),
        40usize,
        concat!("Size of: ", stringify!(pj_cli_cfg))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_cli_cfg>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_cli_cfg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_cfg>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_cfg),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_cfg>())).title as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_cfg),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_cfg>())).pf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_cfg),
            "::",
            stringify!(pf)
        )
    );
}
pub type pj_cli_arg_id = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_cli_cmd_spec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_cli_arg_spec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_cli_cmd_val {
    pub sess: *mut pj_cli_sess,
    pub cmd: *const pj_cli_cmd_spec,
    pub argc: ::std::os::raw::c_int,
    pub argv: [pj_str_t; 8usize],
}
#[test]
fn bindgen_test_layout_pj_cli_cmd_val() {
    assert_eq!(
        ::std::mem::size_of::<pj_cli_cmd_val>(),
        152usize,
        concat!("Size of: ", stringify!(pj_cli_cmd_val))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_cli_cmd_val>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_cli_cmd_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_cmd_val>())).sess as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_cmd_val),
            "::",
            stringify!(sess)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_cmd_val>())).cmd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_cmd_val),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_cmd_val>())).argc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_cmd_val),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_cmd_val>())).argv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_cmd_val),
            "::",
            stringify!(argv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_cli_hint_info {
    pub name: pj_str_t,
    pub type_: pj_str_t,
    pub desc: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_cli_hint_info() {
    assert_eq!(
        ::std::mem::size_of::<pj_cli_hint_info>(),
        48usize,
        concat!("Size of: ", stringify!(pj_cli_hint_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_cli_hint_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_cli_hint_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_hint_info>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_hint_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_hint_info>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_hint_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_hint_info>())).desc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_hint_info),
            "::",
            stringify!(desc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_cli_exec_info {
    pub err_pos: ::std::os::raw::c_int,
    pub cmd_id: pj_cli_cmd_id,
    pub cmd_ret: pj_status_t,
    pub hint_cnt: ::std::os::raw::c_uint,
    pub hint: [pj_cli_hint_info; 32usize],
}
#[test]
fn bindgen_test_layout_pj_cli_exec_info() {
    assert_eq!(
        ::std::mem::size_of::<pj_cli_exec_info>(),
        1552usize,
        concat!("Size of: ", stringify!(pj_cli_exec_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_cli_exec_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_cli_exec_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_exec_info>())).err_pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_exec_info),
            "::",
            stringify!(err_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_exec_info>())).cmd_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_exec_info),
            "::",
            stringify!(cmd_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_exec_info>())).cmd_ret as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_exec_info),
            "::",
            stringify!(cmd_ret)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_exec_info>())).hint_cnt as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_exec_info),
            "::",
            stringify!(hint_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_exec_info>())).hint as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_exec_info),
            "::",
            stringify!(hint)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_cli_arg_choice_val {
    pub value: pj_str_t,
    pub desc: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_cli_arg_choice_val() {
    assert_eq!(
        ::std::mem::size_of::<pj_cli_arg_choice_val>(),
        32usize,
        concat!("Size of: ", stringify!(pj_cli_arg_choice_val))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_cli_arg_choice_val>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_cli_arg_choice_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_arg_choice_val>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_arg_choice_val),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_arg_choice_val>())).desc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_arg_choice_val),
            "::",
            stringify!(desc)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_cli_dyn_choice_param {
    pub sess: *mut pj_cli_sess,
    pub cmd: *mut pj_cli_cmd_spec,
    pub arg_id: pj_cli_arg_id,
    pub max_cnt: ::std::os::raw::c_uint,
    pub pool: *mut pj_pool_t,
    pub cnt: ::std::os::raw::c_uint,
    pub choice: [pj_cli_arg_choice_val; 64usize],
}
#[test]
fn bindgen_test_layout_pj_cli_dyn_choice_param() {
    assert_eq!(
        ::std::mem::size_of::<pj_cli_dyn_choice_param>(),
        2088usize,
        concat!("Size of: ", stringify!(pj_cli_dyn_choice_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_cli_dyn_choice_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_cli_dyn_choice_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_dyn_choice_param>())).sess as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_dyn_choice_param),
            "::",
            stringify!(sess)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_dyn_choice_param>())).cmd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_dyn_choice_param),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_dyn_choice_param>())).arg_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_dyn_choice_param),
            "::",
            stringify!(arg_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_dyn_choice_param>())).max_cnt as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_dyn_choice_param),
            "::",
            stringify!(max_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_dyn_choice_param>())).pool as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_dyn_choice_param),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_dyn_choice_param>())).cnt as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_dyn_choice_param),
            "::",
            stringify!(cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_dyn_choice_param>())).choice as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_dyn_choice_param),
            "::",
            stringify!(choice)
        )
    );
}
pub type pj_cli_get_dyn_choice =
    ::std::option::Option<unsafe extern "C" fn(param: *mut pj_cli_dyn_choice_param)>;
pub type pj_cli_cmd_handler =
    ::std::option::Option<unsafe extern "C" fn(cval: *mut pj_cli_cmd_val) -> pj_status_t>;
extern "C" {
    pub fn pj_cli_write_log(
        cli: *mut pj_cli_t,
        level: ::std::os::raw::c_int,
        buffer: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pj_cli_create(cfg: *mut pj_cli_cfg, p_cli: *mut *mut pj_cli_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_cli_get_cmd_id(cmd: *const pj_cli_cmd_spec) -> pj_cli_cmd_id;
}
extern "C" {
    pub fn pj_cli_get_param(cli: *mut pj_cli_t) -> *mut pj_cli_cfg;
}
extern "C" {
    pub fn pj_cli_quit(cli: *mut pj_cli_t, req: *mut pj_cli_sess, restart: pj_bool_t);
}
extern "C" {
    pub fn pj_cli_is_quitting(cli: *mut pj_cli_t) -> pj_bool_t;
}
extern "C" {
    pub fn pj_cli_is_restarting(cli: *mut pj_cli_t) -> pj_bool_t;
}
extern "C" {
    pub fn pj_cli_destroy(cli: *mut pj_cli_t);
}
extern "C" {
    pub fn pj_cli_cfg_default(param: *mut pj_cli_cfg);
}
extern "C" {
    pub fn pj_cli_register_front_end(cli: *mut pj_cli_t, fe: *mut pj_cli_front_end);
}
extern "C" {
    pub fn pj_cli_add_cmd_from_xml(
        cli: *mut pj_cli_t,
        group: *mut pj_cli_cmd_spec,
        xml: *const pj_str_t,
        handler: pj_cli_cmd_handler,
        p_cmd: *mut *mut pj_cli_cmd_spec,
        get_choice: pj_cli_get_dyn_choice,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_cli_exec_info_default(param: *mut pj_cli_exec_info);
}
extern "C" {
    pub fn pj_cli_sess_write_msg(
        sess: *mut pj_cli_sess,
        buffer: *const ::std::os::raw::c_char,
        len: pj_size_t,
    );
}
extern "C" {
    pub fn pj_cli_sess_parse(
        sess: *mut pj_cli_sess,
        cmdline: *mut ::std::os::raw::c_char,
        val: *mut pj_cli_cmd_val,
        pool: *mut pj_pool_t,
        info: *mut pj_cli_exec_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_cli_sess_end_session(sess: *mut pj_cli_sess);
}
extern "C" {
    pub fn pj_cli_sess_exec(
        sess: *mut pj_cli_sess,
        cmdline: *mut ::std::os::raw::c_char,
        pool: *mut pj_pool_t,
        info: *mut pj_cli_exec_info,
    ) -> pj_status_t;
}
pub const pj_cli_front_end_type_PJ_CLI_CONSOLE_FRONT_END: pj_cli_front_end_type = 0;
pub const pj_cli_front_end_type_PJ_CLI_TELNET_FRONT_END: pj_cli_front_end_type = 1;
pub const pj_cli_front_end_type_PJ_CLI_HTTP_FRONT_END: pj_cli_front_end_type = 2;
pub const pj_cli_front_end_type_PJ_CLI_GUI_FRONT_END: pj_cli_front_end_type = 3;
pub type pj_cli_front_end_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_cli_front_end_op {
    pub on_write_log: ::std::option::Option<
        unsafe extern "C" fn(
            fe: *mut pj_cli_front_end,
            level: ::std::os::raw::c_int,
            data: *const ::std::os::raw::c_char,
            len: pj_size_t,
        ),
    >,
    pub on_quit: ::std::option::Option<
        unsafe extern "C" fn(fe: *mut pj_cli_front_end, req: *mut pj_cli_sess),
    >,
    pub on_destroy: ::std::option::Option<unsafe extern "C" fn(fe: *mut pj_cli_front_end)>,
}
#[test]
fn bindgen_test_layout_pj_cli_front_end_op() {
    assert_eq!(
        ::std::mem::size_of::<pj_cli_front_end_op>(),
        24usize,
        concat!("Size of: ", stringify!(pj_cli_front_end_op))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_cli_front_end_op>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_cli_front_end_op))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_cli_front_end_op>())).on_write_log as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_front_end_op),
            "::",
            stringify!(on_write_log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_front_end_op>())).on_quit as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_front_end_op),
            "::",
            stringify!(on_quit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_front_end_op>())).on_destroy as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_front_end_op),
            "::",
            stringify!(on_destroy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_cli_front_end {
    pub prev: *mut pj_cli_front_end,
    pub next: *mut pj_cli_front_end,
    pub type_: pj_cli_front_end_type,
    pub cli: *mut pj_cli_t,
    pub op: *mut pj_cli_front_end_op,
}
#[test]
fn bindgen_test_layout_pj_cli_front_end() {
    assert_eq!(
        ::std::mem::size_of::<pj_cli_front_end>(),
        40usize,
        concat!("Size of: ", stringify!(pj_cli_front_end))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_cli_front_end>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_cli_front_end))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_front_end>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_front_end),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_front_end>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_front_end),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_front_end>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_front_end),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_front_end>())).cli as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_front_end),
            "::",
            stringify!(cli)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_front_end>())).op as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_front_end),
            "::",
            stringify!(op)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_cli_sess_op {
    pub destroy: ::std::option::Option<unsafe extern "C" fn(sess: *mut pj_cli_sess)>,
}
#[test]
fn bindgen_test_layout_pj_cli_sess_op() {
    assert_eq!(
        ::std::mem::size_of::<pj_cli_sess_op>(),
        8usize,
        concat!("Size of: ", stringify!(pj_cli_sess_op))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_cli_sess_op>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_cli_sess_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_sess_op>())).destroy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_sess_op),
            "::",
            stringify!(destroy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_cli_sess {
    pub prev: *mut pj_cli_sess,
    pub next: *mut pj_cli_sess,
    pub fe: *mut pj_cli_front_end,
    pub op: *mut pj_cli_sess_op,
    pub info: pj_str_t,
    pub log_level: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pj_cli_sess() {
    assert_eq!(
        ::std::mem::size_of::<pj_cli_sess>(),
        56usize,
        concat!("Size of: ", stringify!(pj_cli_sess))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_cli_sess>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_cli_sess))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_sess>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_sess),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_sess>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_sess),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_sess>())).fe as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_sess),
            "::",
            stringify!(fe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_sess>())).op as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_sess),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_sess>())).info as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_sess),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_sess>())).log_level as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_sess),
            "::",
            stringify!(log_level)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_cli_console_cfg {
    pub log_level: ::std::os::raw::c_int,
    pub prompt_str: pj_str_t,
    pub quit_command: pj_str_t,
}
#[test]
fn bindgen_test_layout_pj_cli_console_cfg() {
    assert_eq!(
        ::std::mem::size_of::<pj_cli_console_cfg>(),
        40usize,
        concat!("Size of: ", stringify!(pj_cli_console_cfg))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_cli_console_cfg>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_cli_console_cfg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_console_cfg>())).log_level as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_console_cfg),
            "::",
            stringify!(log_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_console_cfg>())).prompt_str as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_console_cfg),
            "::",
            stringify!(prompt_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_console_cfg>())).quit_command as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_console_cfg),
            "::",
            stringify!(quit_command)
        )
    );
}
extern "C" {
    pub fn pj_cli_console_cfg_default(param: *mut pj_cli_console_cfg);
}
extern "C" {
    pub fn pj_cli_console_create(
        cli: *mut pj_cli_t,
        param: *const pj_cli_console_cfg,
        p_sess: *mut *mut pj_cli_sess,
        p_fe: *mut *mut pj_cli_front_end,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_cli_console_process(
        sess: *mut pj_cli_sess,
        buf: *mut ::std::os::raw::c_char,
        maxlen: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_cli_telnet_info {
    pub ip_address: pj_str_t,
    pub port: pj_uint16_t,
    pub buf_: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_pj_cli_telnet_info() {
    assert_eq!(
        ::std::mem::size_of::<pj_cli_telnet_info>(),
        56usize,
        concat!("Size of: ", stringify!(pj_cli_telnet_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_cli_telnet_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_cli_telnet_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_telnet_info>())).ip_address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_telnet_info),
            "::",
            stringify!(ip_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_telnet_info>())).port as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_telnet_info),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_telnet_info>())).buf_ as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_telnet_info),
            "::",
            stringify!(buf_)
        )
    );
}
pub type pj_cli_telnet_on_started =
    ::std::option::Option<unsafe extern "C" fn(status: pj_status_t)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_cli_telnet_cfg {
    pub port: pj_uint16_t,
    pub ioqueue: *mut pj_ioqueue_t,
    pub log_level: ::std::os::raw::c_int,
    pub passwd: pj_str_t,
    pub welcome_msg: pj_str_t,
    pub prompt_str: pj_str_t,
    pub on_started: pj_cli_telnet_on_started,
}
#[test]
fn bindgen_test_layout_pj_cli_telnet_cfg() {
    assert_eq!(
        ::std::mem::size_of::<pj_cli_telnet_cfg>(),
        80usize,
        concat!("Size of: ", stringify!(pj_cli_telnet_cfg))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_cli_telnet_cfg>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_cli_telnet_cfg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_telnet_cfg>())).port as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_telnet_cfg),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_telnet_cfg>())).ioqueue as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_telnet_cfg),
            "::",
            stringify!(ioqueue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_telnet_cfg>())).log_level as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_telnet_cfg),
            "::",
            stringify!(log_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_telnet_cfg>())).passwd as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_telnet_cfg),
            "::",
            stringify!(passwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_telnet_cfg>())).welcome_msg as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_telnet_cfg),
            "::",
            stringify!(welcome_msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_telnet_cfg>())).prompt_str as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_telnet_cfg),
            "::",
            stringify!(prompt_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_cli_telnet_cfg>())).on_started as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_cli_telnet_cfg),
            "::",
            stringify!(on_started)
        )
    );
}
extern "C" {
    pub fn pj_cli_telnet_cfg_default(param: *mut pj_cli_telnet_cfg);
}
extern "C" {
    pub fn pj_cli_telnet_create(
        cli: *mut pj_cli_t,
        param: *mut pj_cli_telnet_cfg,
        p_fe: *mut *mut pj_cli_front_end,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_cli_telnet_get_info(
        fe: *mut pj_cli_front_end,
        info: *mut pj_cli_telnet_info,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_pj_hostent() {
    assert_eq!(
        ::std::mem::size_of::<pj_hostent>(),
        32usize,
        concat!("Size of: ", stringify!(pj_hostent))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_hostent>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_hostent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_hostent>())).h_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_hostent),
            "::",
            stringify!(h_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_hostent>())).h_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_hostent),
            "::",
            stringify!(h_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_hostent>())).h_addrtype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_hostent),
            "::",
            stringify!(h_addrtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_hostent>())).h_length as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_hostent),
            "::",
            stringify!(h_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_hostent>())).h_addr_list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_hostent),
            "::",
            stringify!(h_addr_list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_addrinfo {
    pub ai_canonname: [::std::os::raw::c_char; 128usize],
    pub ai_addr: pj_sockaddr,
}
#[test]
fn bindgen_test_layout_pj_addrinfo() {
    assert_eq!(
        ::std::mem::size_of::<pj_addrinfo>(),
        156usize,
        concat!("Size of: ", stringify!(pj_addrinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_addrinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_addrinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_addrinfo>())).ai_canonname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_addrinfo),
            "::",
            stringify!(ai_canonname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_addrinfo>())).ai_addr as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_addrinfo),
            "::",
            stringify!(ai_addr)
        )
    );
}
extern "C" {
    pub fn pj_gethostbyname(name: *const pj_str_t, he: *mut pj_hostent) -> pj_status_t;
}
extern "C" {
    pub fn pj_gethostip(af: ::std::os::raw::c_int, addr: *mut pj_sockaddr) -> pj_status_t;
}
extern "C" {
    pub fn pj_getipinterface(
        af: ::std::os::raw::c_int,
        dst: *const pj_str_t,
        itf_addr: *mut pj_sockaddr,
        allow_resolve: pj_bool_t,
        p_dst_addr: *mut pj_sockaddr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_getdefaultipinterface(
        af: ::std::os::raw::c_int,
        addr: *mut pj_sockaddr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_getaddrinfo(
        af: ::std::os::raw::c_int,
        name: *const pj_str_t,
        count: *mut ::std::os::raw::c_uint,
        ai: *mut pj_addrinfo,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_array_insert(
        array: *mut ::std::os::raw::c_void,
        elem_size: ::std::os::raw::c_uint,
        count: ::std::os::raw::c_uint,
        pos: ::std::os::raw::c_uint,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pj_array_erase(
        array: *mut ::std::os::raw::c_void,
        elem_size: ::std::os::raw::c_uint,
        count: ::std::os::raw::c_uint,
        pos: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn pj_array_find(
        array: *const ::std::os::raw::c_void,
        elem_size: ::std::os::raw::c_uint,
        count: ::std::os::raw::c_uint,
        matching: ::std::option::Option<
            unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> pj_status_t,
        >,
        result: *mut *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    assert_eq!(
        ::std::mem::size_of::<__jmp_buf_tag>(),
        200usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__jmpbuf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__jmpbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__mask_was_saved as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__saved_mask as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__saved_mask)
        )
    );
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
pub type pj_jmp_buf = jmp_buf;
pub const pj_log_decoration_PJ_LOG_HAS_DAY_NAME: pj_log_decoration = 1;
pub const pj_log_decoration_PJ_LOG_HAS_YEAR: pj_log_decoration = 2;
pub const pj_log_decoration_PJ_LOG_HAS_MONTH: pj_log_decoration = 4;
pub const pj_log_decoration_PJ_LOG_HAS_DAY_OF_MON: pj_log_decoration = 8;
pub const pj_log_decoration_PJ_LOG_HAS_TIME: pj_log_decoration = 16;
pub const pj_log_decoration_PJ_LOG_HAS_MICRO_SEC: pj_log_decoration = 32;
pub const pj_log_decoration_PJ_LOG_HAS_SENDER: pj_log_decoration = 64;
pub const pj_log_decoration_PJ_LOG_HAS_NEWLINE: pj_log_decoration = 128;
pub const pj_log_decoration_PJ_LOG_HAS_CR: pj_log_decoration = 256;
pub const pj_log_decoration_PJ_LOG_HAS_SPACE: pj_log_decoration = 512;
pub const pj_log_decoration_PJ_LOG_HAS_COLOR: pj_log_decoration = 1024;
pub const pj_log_decoration_PJ_LOG_HAS_LEVEL_TEXT: pj_log_decoration = 2048;
pub const pj_log_decoration_PJ_LOG_HAS_THREAD_ID: pj_log_decoration = 4096;
pub const pj_log_decoration_PJ_LOG_HAS_THREAD_SWC: pj_log_decoration = 8192;
pub const pj_log_decoration_PJ_LOG_HAS_INDENT: pj_log_decoration = 16384;
pub type pj_log_decoration = ::std::os::raw::c_uint;
pub type pj_log_func = ::std::option::Option<
    unsafe extern "C" fn(
        level: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ),
>;
extern "C" {
    pub fn pj_log_write(
        level: ::std::os::raw::c_int,
        buffer: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pj_log(
        sender: *const ::std::os::raw::c_char,
        level: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        marker: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn pj_log_set_log_func(func: pj_log_func);
}
extern "C" {
    pub fn pj_log_get_log_func() -> pj_log_func;
}
extern "C" {
    pub fn pj_log_set_level(level: ::std::os::raw::c_int);
}
extern "C" {
    pub fn pj_log_get_level() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_log_set_decor(decor: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn pj_log_get_decor() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pj_log_add_indent(indent: ::std::os::raw::c_int);
}
extern "C" {
    pub fn pj_log_push_indent();
}
extern "C" {
    pub fn pj_log_pop_indent();
}
extern "C" {
    pub fn pj_log_set_color(level: ::std::os::raw::c_int, color: pj_color_t);
}
extern "C" {
    pub fn pj_log_get_color(level: ::std::os::raw::c_int) -> pj_color_t;
}
extern "C" {
    pub fn pj_log_init() -> pj_status_t;
}
extern "C" {
    pub fn pj_log_1(src: *const ::std::os::raw::c_char, format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn pj_log_2(src: *const ::std::os::raw::c_char, format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn pj_log_3(src: *const ::std::os::raw::c_char, format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn pj_log_4(src: *const ::std::os::raw::c_char, format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn pj_log_5(src: *const ::std::os::raw::c_char, format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn pj_exception_id_alloc(
        name: *const ::std::os::raw::c_char,
        id: *mut pj_exception_id_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_exception_id_free(id: pj_exception_id_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_exception_id_name(id: pj_exception_id_t) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_exception_state_t {
    pub state: pj_jmp_buf,
    pub prev: *mut pj_exception_state_t,
}
#[test]
fn bindgen_test_layout_pj_exception_state_t() {
    assert_eq!(
        ::std::mem::size_of::<pj_exception_state_t>(),
        208usize,
        concat!("Size of: ", stringify!(pj_exception_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_exception_state_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_exception_state_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_exception_state_t>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_exception_state_t),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_exception_state_t>())).prev as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_exception_state_t),
            "::",
            stringify!(prev)
        )
    );
}
extern "C" {
    pub fn pj_throw_exception_(id: pj_exception_id_t);
}
extern "C" {
    pub fn pj_push_exception_handler_(rec: *mut pj_exception_state_t);
}
extern "C" {
    pub fn pj_pop_exception_handler_(rec: *mut pj_exception_state_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_fifobuf_t {
    pub first: *mut ::std::os::raw::c_char,
    pub last: *mut ::std::os::raw::c_char,
    pub ubegin: *mut ::std::os::raw::c_char,
    pub uend: *mut ::std::os::raw::c_char,
    pub full: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pj_fifobuf_t() {
    assert_eq!(
        ::std::mem::size_of::<pj_fifobuf_t>(),
        40usize,
        concat!("Size of: ", stringify!(pj_fifobuf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_fifobuf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_fifobuf_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_fifobuf_t>())).first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_fifobuf_t),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_fifobuf_t>())).last as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_fifobuf_t),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_fifobuf_t>())).ubegin as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_fifobuf_t),
            "::",
            stringify!(ubegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_fifobuf_t>())).uend as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_fifobuf_t),
            "::",
            stringify!(uend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_fifobuf_t>())).full as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_fifobuf_t),
            "::",
            stringify!(full)
        )
    );
}
extern "C" {
    pub fn pj_fifobuf_init(
        fb: *mut pj_fifobuf_t,
        buffer: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn pj_fifobuf_max_size(fb: *mut pj_fifobuf_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pj_fifobuf_alloc(
        fb: *mut pj_fifobuf_t,
        size: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pj_fifobuf_unalloc(
        fb: *mut pj_fifobuf_t,
        buf: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_fifobuf_free(fb: *mut pj_fifobuf_t, buf: *mut ::std::os::raw::c_void) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_file_stat {
    pub size: pj_off_t,
    pub atime: pj_time_val,
    pub mtime: pj_time_val,
    pub ctime: pj_time_val,
}
#[test]
fn bindgen_test_layout_pj_file_stat() {
    assert_eq!(
        ::std::mem::size_of::<pj_file_stat>(),
        56usize,
        concat!("Size of: ", stringify!(pj_file_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_file_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_file_stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_file_stat>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_file_stat),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_file_stat>())).atime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_file_stat),
            "::",
            stringify!(atime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_file_stat>())).mtime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_file_stat),
            "::",
            stringify!(mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_file_stat>())).ctime as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_file_stat),
            "::",
            stringify!(ctime)
        )
    );
}
extern "C" {
    pub fn pj_file_exists(filename: *const ::std::os::raw::c_char) -> pj_bool_t;
}
extern "C" {
    pub fn pj_file_size(filename: *const ::std::os::raw::c_char) -> pj_off_t;
}
extern "C" {
    pub fn pj_file_delete(filename: *const ::std::os::raw::c_char) -> pj_status_t;
}
extern "C" {
    pub fn pj_file_move(
        oldname: *const ::std::os::raw::c_char,
        newname: *const ::std::os::raw::c_char,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_file_getstat(
        filename: *const ::std::os::raw::c_char,
        stat: *mut pj_file_stat,
    ) -> pj_status_t;
}
pub const pj_file_access_PJ_O_RDONLY: pj_file_access = 4353;
pub const pj_file_access_PJ_O_WRONLY: pj_file_access = 4354;
pub const pj_file_access_PJ_O_RDWR: pj_file_access = 4355;
pub const pj_file_access_PJ_O_APPEND: pj_file_access = 4360;
pub type pj_file_access = ::std::os::raw::c_uint;
pub const pj_file_seek_type_PJ_SEEK_SET: pj_file_seek_type = 4609;
pub const pj_file_seek_type_PJ_SEEK_CUR: pj_file_seek_type = 4610;
pub const pj_file_seek_type_PJ_SEEK_END: pj_file_seek_type = 4611;
pub type pj_file_seek_type = ::std::os::raw::c_uint;
extern "C" {
    pub fn pj_file_open(
        pool: *mut pj_pool_t,
        pathname: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
        fd: *mut pj_oshandle_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_file_close(fd: pj_oshandle_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_file_write(
        fd: pj_oshandle_t,
        data: *const ::std::os::raw::c_void,
        size: *mut pj_ssize_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_file_read(
        fd: pj_oshandle_t,
        data: *mut ::std::os::raw::c_void,
        size: *mut pj_ssize_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_file_setpos(
        fd: pj_oshandle_t,
        offset: pj_off_t,
        whence: pj_file_seek_type,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_file_getpos(fd: pj_oshandle_t, pos: *mut pj_off_t) -> pj_status_t;
}
extern "C" {
    pub fn pj_file_flush(fd: pj_oshandle_t) -> pj_status_t;
}
extern "C" {
    pub static PJ_GUID_STRING_LENGTH: ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pj_GUID_STRING_LENGTH() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pj_generate_unique_string(str_: *mut pj_str_t) -> *mut pj_str_t;
}
extern "C" {
    pub fn pj_generate_unique_string_lower(str_: *mut pj_str_t) -> *mut pj_str_t;
}
extern "C" {
    pub fn pj_create_unique_string(pool: *mut pj_pool_t, str_: *mut pj_str_t);
}
extern "C" {
    pub fn pj_create_unique_string_lower(pool: *mut pj_pool_t, str_: *mut pj_str_t);
}
pub type pj_hash_entry_buf = [*mut ::std::os::raw::c_void; 4usize];
extern "C" {
    pub fn pj_hash_calc(
        hval: pj_uint32_t,
        key: *const ::std::os::raw::c_void,
        keylen: ::std::os::raw::c_uint,
    ) -> pj_uint32_t;
}
extern "C" {
    pub fn pj_hash_calc_tolower(
        hval: pj_uint32_t,
        result: *mut ::std::os::raw::c_char,
        key: *const pj_str_t,
    ) -> pj_uint32_t;
}
extern "C" {
    pub fn pj_hash_create(
        pool: *mut pj_pool_t,
        size: ::std::os::raw::c_uint,
    ) -> *mut pj_hash_table_t;
}
extern "C" {
    pub fn pj_hash_get(
        ht: *mut pj_hash_table_t,
        key: *const ::std::os::raw::c_void,
        keylen: ::std::os::raw::c_uint,
        hval: *mut pj_uint32_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pj_hash_get_lower(
        ht: *mut pj_hash_table_t,
        key: *const ::std::os::raw::c_void,
        keylen: ::std::os::raw::c_uint,
        hval: *mut pj_uint32_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pj_hash_set(
        pool: *mut pj_pool_t,
        ht: *mut pj_hash_table_t,
        key: *const ::std::os::raw::c_void,
        keylen: ::std::os::raw::c_uint,
        hval: pj_uint32_t,
        value: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pj_hash_set_lower(
        pool: *mut pj_pool_t,
        ht: *mut pj_hash_table_t,
        key: *const ::std::os::raw::c_void,
        keylen: ::std::os::raw::c_uint,
        hval: pj_uint32_t,
        value: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pj_hash_set_np(
        ht: *mut pj_hash_table_t,
        key: *const ::std::os::raw::c_void,
        keylen: ::std::os::raw::c_uint,
        hval: pj_uint32_t,
        entry_buf: *mut *mut ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pj_hash_set_np_lower(
        ht: *mut pj_hash_table_t,
        key: *const ::std::os::raw::c_void,
        keylen: ::std::os::raw::c_uint,
        hval: pj_uint32_t,
        entry_buf: *mut *mut ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pj_hash_count(ht: *mut pj_hash_table_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pj_hash_first(
        ht: *mut pj_hash_table_t,
        it: *mut pj_hash_iterator_t,
    ) -> *mut pj_hash_iterator_t;
}
extern "C" {
    pub fn pj_hash_next(
        ht: *mut pj_hash_table_t,
        it: *mut pj_hash_iterator_t,
    ) -> *mut pj_hash_iterator_t;
}
extern "C" {
    pub fn pj_hash_this(
        ht: *mut pj_hash_table_t,
        it: *mut pj_hash_iterator_t,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pj_ip_route_entry {
    pub ipv4: pj_ip_route_entry__bindgen_ty_1,
    _bindgen_union_align: [u32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ip_route_entry__bindgen_ty_1 {
    pub if_addr: pj_in_addr,
    pub dst_addr: pj_in_addr,
    pub mask: pj_in_addr,
}
#[test]
fn bindgen_test_layout_pj_ip_route_entry__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pj_ip_route_entry__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(pj_ip_route_entry__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ip_route_entry__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_ip_route_entry__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ip_route_entry__bindgen_ty_1>())).if_addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ip_route_entry__bindgen_ty_1),
            "::",
            stringify!(if_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ip_route_entry__bindgen_ty_1>())).dst_addr as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ip_route_entry__bindgen_ty_1),
            "::",
            stringify!(dst_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_ip_route_entry__bindgen_ty_1>())).mask as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ip_route_entry__bindgen_ty_1),
            "::",
            stringify!(mask)
        )
    );
}
#[test]
fn bindgen_test_layout_pj_ip_route_entry() {
    assert_eq!(
        ::std::mem::size_of::<pj_ip_route_entry>(),
        12usize,
        concat!("Size of: ", stringify!(pj_ip_route_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_ip_route_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_ip_route_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_ip_route_entry>())).ipv4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_ip_route_entry),
            "::",
            stringify!(ipv4)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_enum_ip_option {
    pub af: ::std::os::raw::c_int,
    pub omit_deprecated_ipv6: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pj_enum_ip_option() {
    assert_eq!(
        ::std::mem::size_of::<pj_enum_ip_option>(),
        8usize,
        concat!("Size of: ", stringify!(pj_enum_ip_option))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_enum_ip_option>(),
        4usize,
        concat!("Alignment of ", stringify!(pj_enum_ip_option))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_enum_ip_option>())).af as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_enum_ip_option),
            "::",
            stringify!(af)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pj_enum_ip_option>())).omit_deprecated_ipv6 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_enum_ip_option),
            "::",
            stringify!(omit_deprecated_ipv6)
        )
    );
}
extern "C" {
    pub fn pj_enum_ip_interface(
        af: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_uint,
        ifs: *mut pj_sockaddr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_enum_ip_interface2(
        opt: *const pj_enum_ip_option,
        count: *mut ::std::os::raw::c_uint,
        ifs: *mut pj_sockaddr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_enum_ip_route(
        count: *mut ::std::os::raw::c_uint,
        routes: *mut pj_ip_route_entry,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pj_pool_create_on_buf(
        name: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_void,
        size: pj_size_t,
    ) -> *mut pj_pool_t;
}
extern "C" {
    pub fn pj_srand(seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn pj_rand() -> ::std::os::raw::c_int;
}
pub const pj_rbcolor_t_PJ_RBCOLOR_BLACK: pj_rbcolor_t = 0;
pub const pj_rbcolor_t_PJ_RBCOLOR_RED: pj_rbcolor_t = 1;
pub type pj_rbcolor_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_rbtree_node {
    pub parent: *mut pj_rbtree_node,
    pub left: *mut pj_rbtree_node,
    pub right: *mut pj_rbtree_node,
    pub key: *const ::std::os::raw::c_void,
    pub user_data: *mut ::std::os::raw::c_void,
    pub color: pj_rbcolor_t,
}
#[test]
fn bindgen_test_layout_pj_rbtree_node() {
    assert_eq!(
        ::std::mem::size_of::<pj_rbtree_node>(),
        48usize,
        concat!("Size of: ", stringify!(pj_rbtree_node))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_rbtree_node>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_rbtree_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_rbtree_node>())).parent as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_rbtree_node),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_rbtree_node>())).left as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_rbtree_node),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_rbtree_node>())).right as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_rbtree_node),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_rbtree_node>())).key as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_rbtree_node),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_rbtree_node>())).user_data as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_rbtree_node),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_rbtree_node>())).color as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_rbtree_node),
            "::",
            stringify!(color)
        )
    );
}
pub type pj_rbtree_comp = ::std::option::Option<
    unsafe extern "C" fn(
        key1: *const ::std::os::raw::c_void,
        key2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_rbtree {
    pub null_node: pj_rbtree_node,
    pub null: *mut pj_rbtree_node,
    pub root: *mut pj_rbtree_node,
    pub size: ::std::os::raw::c_uint,
    pub comp: pj_rbtree_comp,
}
#[test]
fn bindgen_test_layout_pj_rbtree() {
    assert_eq!(
        ::std::mem::size_of::<pj_rbtree>(),
        80usize,
        concat!("Size of: ", stringify!(pj_rbtree))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_rbtree>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_rbtree))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_rbtree>())).null_node as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_rbtree),
            "::",
            stringify!(null_node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_rbtree>())).null as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_rbtree),
            "::",
            stringify!(null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_rbtree>())).root as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_rbtree),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_rbtree>())).size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_rbtree),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_rbtree>())).comp as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_rbtree),
            "::",
            stringify!(comp)
        )
    );
}
extern "C" {
    pub fn pj_rbtree_init(tree: *mut pj_rbtree, comp: pj_rbtree_comp);
}
extern "C" {
    pub fn pj_rbtree_first(tree: *mut pj_rbtree) -> *mut pj_rbtree_node;
}
extern "C" {
    pub fn pj_rbtree_last(tree: *mut pj_rbtree) -> *mut pj_rbtree_node;
}
extern "C" {
    pub fn pj_rbtree_next(tree: *mut pj_rbtree, node: *mut pj_rbtree_node) -> *mut pj_rbtree_node;
}
extern "C" {
    pub fn pj_rbtree_prev(tree: *mut pj_rbtree, node: *mut pj_rbtree_node) -> *mut pj_rbtree_node;
}
extern "C" {
    pub fn pj_rbtree_insert(
        tree: *mut pj_rbtree,
        node: *mut pj_rbtree_node,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_rbtree_find(
        tree: *mut pj_rbtree,
        key: *const ::std::os::raw::c_void,
    ) -> *mut pj_rbtree_node;
}
extern "C" {
    pub fn pj_rbtree_erase(tree: *mut pj_rbtree, node: *mut pj_rbtree_node) -> *mut pj_rbtree_node;
}
extern "C" {
    pub fn pj_rbtree_max_height(
        tree: *mut pj_rbtree,
        node: *mut pj_rbtree_node,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pj_rbtree_min_height(
        tree: *mut pj_rbtree,
        node: *mut pj_rbtree_node,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_fd_set_t {
    pub data: [pj_sock_t; 68usize],
}
#[test]
fn bindgen_test_layout_pj_fd_set_t() {
    assert_eq!(
        ::std::mem::size_of::<pj_fd_set_t>(),
        544usize,
        concat!("Size of: ", stringify!(pj_fd_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_fd_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_fd_set_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_fd_set_t>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_fd_set_t),
            "::",
            stringify!(data)
        )
    );
}
extern "C" {
    pub fn PJ_FD_ZERO(fdsetp: *mut pj_fd_set_t);
}
extern "C" {
    pub fn PJ_FD_COUNT(fdsetp: *const pj_fd_set_t) -> pj_size_t;
}
extern "C" {
    pub fn PJ_FD_SET(fd: pj_sock_t, fdsetp: *mut pj_fd_set_t);
}
extern "C" {
    pub fn PJ_FD_CLR(fd: pj_sock_t, fdsetp: *mut pj_fd_set_t);
}
extern "C" {
    pub fn PJ_FD_ISSET(fd: pj_sock_t, fdsetp: *const pj_fd_set_t) -> pj_bool_t;
}
extern "C" {
    pub fn pj_sock_select(
        n: ::std::os::raw::c_int,
        readfds: *mut pj_fd_set_t,
        writefds: *mut pj_fd_set_t,
        exceptfds: *mut pj_fd_set_t,
        timeout: *const pj_time_val,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pj_ansi_to_unicode(
        str_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        wbuf: *mut wchar_t,
        wbuf_count: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn pj_unicode_to_ansi(
        wstr: *const wchar_t,
        len: pj_ssize_t,
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
pub const pjsua_invalid_id_const__PJSUA_INVALID_ID: pjsua_invalid_id_const_ = -1;
pub type pjsua_invalid_id_const_ = ::std::os::raw::c_int;
pub type pjsua_call_id = ::std::os::raw::c_int;
pub type pjsua_acc_id = ::std::os::raw::c_int;
pub type pjsua_buddy_id = ::std::os::raw::c_int;
pub type pjsua_player_id = ::std::os::raw::c_int;
pub type pjsua_recorder_id = ::std::os::raw::c_int;
pub type pjsua_conf_port_id = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_srv_pres {
    _unused: [u8; 0],
}
pub const pjsua_state_PJSUA_STATE_NULL: pjsua_state = 0;
pub const pjsua_state_PJSUA_STATE_CREATED: pjsua_state = 1;
pub const pjsua_state_PJSUA_STATE_INIT: pjsua_state = 2;
pub const pjsua_state_PJSUA_STATE_STARTING: pjsua_state = 3;
pub const pjsua_state_PJSUA_STATE_RUNNING: pjsua_state = 4;
pub const pjsua_state_PJSUA_STATE_CLOSING: pjsua_state = 5;
pub type pjsua_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_logging_config {
    pub msg_logging: pj_bool_t,
    pub level: ::std::os::raw::c_uint,
    pub console_level: ::std::os::raw::c_uint,
    pub decor: ::std::os::raw::c_uint,
    pub log_filename: pj_str_t,
    pub log_file_flags: ::std::os::raw::c_uint,
    pub cb: ::std::option::Option<
        unsafe extern "C" fn(
            level: ::std::os::raw::c_int,
            data: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout_pjsua_logging_config() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_logging_config>(),
        48usize,
        concat!("Size of: ", stringify!(pjsua_logging_config))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_logging_config>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_logging_config))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_logging_config>())).msg_logging as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_logging_config),
            "::",
            stringify!(msg_logging)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_logging_config>())).level as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_logging_config),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_logging_config>())).console_level as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_logging_config),
            "::",
            stringify!(console_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_logging_config>())).decor as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_logging_config),
            "::",
            stringify!(decor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_logging_config>())).log_filename as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_logging_config),
            "::",
            stringify!(log_filename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_logging_config>())).log_file_flags as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_logging_config),
            "::",
            stringify!(log_file_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_logging_config>())).cb as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_logging_config),
            "::",
            stringify!(cb)
        )
    );
}
extern "C" {
    pub fn pjsua_logging_config_default(cfg: *mut pjsua_logging_config);
}
extern "C" {
    pub fn pjsua_logging_config_dup(
        pool: *mut pj_pool_t,
        dst: *mut pjsua_logging_config,
        src: *const pjsua_logging_config,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_mwi_info {
    pub evsub: *mut pjsip_evsub,
    pub rdata: *mut pjsip_rx_data,
}
#[test]
fn bindgen_test_layout_pjsua_mwi_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_mwi_info>(),
        16usize,
        concat!("Size of: ", stringify!(pjsua_mwi_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_mwi_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_mwi_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_mwi_info>())).evsub as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_mwi_info),
            "::",
            stringify!(evsub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_mwi_info>())).rdata as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_mwi_info),
            "::",
            stringify!(rdata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_reg_info {
    pub cbparam: *mut pjsip_regc_cbparam,
    pub regc: *mut pjsip_regc,
    pub renew: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjsua_reg_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_reg_info>(),
        24usize,
        concat!("Size of: ", stringify!(pjsua_reg_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_reg_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_reg_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_reg_info>())).cbparam as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_reg_info),
            "::",
            stringify!(cbparam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_reg_info>())).regc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_reg_info),
            "::",
            stringify!(regc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_reg_info>())).renew as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_reg_info),
            "::",
            stringify!(renew)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsua_stream_info {
    pub type_: pjmedia_type,
    pub info: pjsua_stream_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjsua_stream_info__bindgen_ty_1 {
    pub aud: pjmedia_stream_info,
    pub vid: pjmedia_vid_stream_info,
    _bindgen_union_align: [u64; 277usize],
}
#[test]
fn bindgen_test_layout_pjsua_stream_info__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_stream_info__bindgen_ty_1>(),
        2216usize,
        concat!("Size of: ", stringify!(pjsua_stream_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_stream_info__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_stream_info__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_stream_info__bindgen_ty_1>())).aud as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_stream_info__bindgen_ty_1),
            "::",
            stringify!(aud)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_stream_info__bindgen_ty_1>())).vid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_stream_info__bindgen_ty_1),
            "::",
            stringify!(vid)
        )
    );
}
#[test]
fn bindgen_test_layout_pjsua_stream_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_stream_info>(),
        2224usize,
        concat!("Size of: ", stringify!(pjsua_stream_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_stream_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_stream_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_stream_info>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_stream_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_stream_info>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_stream_info),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsua_stream_stat {
    pub rtcp: pjmedia_rtcp_stat,
    pub jbuf: pjmedia_jb_state,
}
#[test]
fn bindgen_test_layout_pjsua_stream_stat() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_stream_stat>(),
        536usize,
        concat!("Size of: ", stringify!(pjsua_stream_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_stream_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_stream_stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_stream_stat>())).rtcp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_stream_stat),
            "::",
            stringify!(rtcp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_stream_stat>())).jbuf as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_stream_stat),
            "::",
            stringify!(jbuf)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsua_on_stream_precreate_param {
    pub stream_idx: ::std::os::raw::c_uint,
    pub stream_info: pjsua_stream_info,
}
#[test]
fn bindgen_test_layout_pjsua_on_stream_precreate_param() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_on_stream_precreate_param>(),
        2232usize,
        concat!("Size of: ", stringify!(pjsua_on_stream_precreate_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_on_stream_precreate_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_on_stream_precreate_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_on_stream_precreate_param>())).stream_idx as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_on_stream_precreate_param),
            "::",
            stringify!(stream_idx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_on_stream_precreate_param>())).stream_info as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_on_stream_precreate_param),
            "::",
            stringify!(stream_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_on_stream_created_param {
    pub stream: *mut pjmedia_stream,
    pub stream_idx: ::std::os::raw::c_uint,
    pub destroy_port: pj_bool_t,
    pub port: *mut pjmedia_port,
}
#[test]
fn bindgen_test_layout_pjsua_on_stream_created_param() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_on_stream_created_param>(),
        24usize,
        concat!("Size of: ", stringify!(pjsua_on_stream_created_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_on_stream_created_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_on_stream_created_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_on_stream_created_param>())).stream as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_on_stream_created_param),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_on_stream_created_param>())).stream_idx as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_on_stream_created_param),
            "::",
            stringify!(stream_idx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_on_stream_created_param>())).destroy_port as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_on_stream_created_param),
            "::",
            stringify!(destroy_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_on_stream_created_param>())).port as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_on_stream_created_param),
            "::",
            stringify!(port)
        )
    );
}
pub const pjsua_med_tp_st_PJSUA_MED_TP_NULL: pjsua_med_tp_st = 0;
pub const pjsua_med_tp_st_PJSUA_MED_TP_CREATING: pjsua_med_tp_st = 1;
pub const pjsua_med_tp_st_PJSUA_MED_TP_IDLE: pjsua_med_tp_st = 2;
pub const pjsua_med_tp_st_PJSUA_MED_TP_INIT: pjsua_med_tp_st = 3;
pub const pjsua_med_tp_st_PJSUA_MED_TP_RUNNING: pjsua_med_tp_st = 4;
pub const pjsua_med_tp_st_PJSUA_MED_TP_DISABLED: pjsua_med_tp_st = 5;
pub type pjsua_med_tp_st = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_med_tp_state_info {
    pub med_idx: ::std::os::raw::c_uint,
    pub state: pjsua_med_tp_st,
    pub status: pj_status_t,
    pub sip_err_code: ::std::os::raw::c_int,
    pub ext_info: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pjsua_med_tp_state_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_med_tp_state_info>(),
        24usize,
        concat!("Size of: ", stringify!(pjsua_med_tp_state_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_med_tp_state_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_med_tp_state_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_med_tp_state_info>())).med_idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_med_tp_state_info),
            "::",
            stringify!(med_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_med_tp_state_info>())).state as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_med_tp_state_info),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_med_tp_state_info>())).status as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_med_tp_state_info),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_med_tp_state_info>())).sip_err_code as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_med_tp_state_info),
            "::",
            stringify!(sip_err_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_med_tp_state_info>())).ext_info as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_med_tp_state_info),
            "::",
            stringify!(ext_info)
        )
    );
}
pub type pjsua_med_tp_state_cb = ::std::option::Option<
    unsafe extern "C" fn(
        call_id: pjsua_call_id,
        info: *const pjsua_med_tp_state_info,
    ) -> pj_status_t,
>;
pub type pj_stun_resolve_cb =
    ::std::option::Option<unsafe extern "C" fn(result: *const pj_stun_resolve_result)>;
pub const pjsua_create_media_transport_flag_PJSUA_MED_TP_CLOSE_MEMBER:
    pjsua_create_media_transport_flag = 1;
pub type pjsua_create_media_transport_flag = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_srtp_opt {
    pub crypto_count: ::std::os::raw::c_uint,
    pub crypto: [pjmedia_srtp_crypto; 16usize],
    pub keying_count: ::std::os::raw::c_uint,
    pub keying: [pjmedia_srtp_keying_method; 2usize],
}
#[test]
fn bindgen_test_layout_pjsua_srtp_opt() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_srtp_opt>(),
        664usize,
        concat!("Size of: ", stringify!(pjsua_srtp_opt))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_srtp_opt>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_srtp_opt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_srtp_opt>())).crypto_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_srtp_opt),
            "::",
            stringify!(crypto_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_srtp_opt>())).crypto as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_srtp_opt),
            "::",
            stringify!(crypto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_srtp_opt>())).keying_count as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_srtp_opt),
            "::",
            stringify!(keying_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_srtp_opt>())).keying as *const _ as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_srtp_opt),
            "::",
            stringify!(keying)
        )
    );
}
pub const pjsua_contact_rewrite_method_PJSUA_CONTACT_REWRITE_UNREGISTER:
    pjsua_contact_rewrite_method = 1;
pub const pjsua_contact_rewrite_method_PJSUA_CONTACT_REWRITE_NO_UNREG:
    pjsua_contact_rewrite_method = 2;
pub const pjsua_contact_rewrite_method_PJSUA_CONTACT_REWRITE_ALWAYS_UPDATE:
    pjsua_contact_rewrite_method = 4;
pub type pjsua_contact_rewrite_method = ::std::os::raw::c_uint;
pub const pjsua_ip_change_op_PJSUA_IP_CHANGE_OP_NULL: pjsua_ip_change_op = 0;
pub const pjsua_ip_change_op_PJSUA_IP_CHANGE_OP_RESTART_LIS: pjsua_ip_change_op = 1;
pub const pjsua_ip_change_op_PJSUA_IP_CHANGE_OP_ACC_SHUTDOWN_TP: pjsua_ip_change_op = 2;
pub const pjsua_ip_change_op_PJSUA_IP_CHANGE_OP_ACC_UPDATE_CONTACT: pjsua_ip_change_op = 3;
pub const pjsua_ip_change_op_PJSUA_IP_CHANGE_OP_ACC_HANGUP_CALLS: pjsua_ip_change_op = 4;
pub const pjsua_ip_change_op_PJSUA_IP_CHANGE_OP_ACC_REINVITE_CALLS: pjsua_ip_change_op = 5;
pub const pjsua_ip_change_op_PJSUA_IP_CHANGE_OP_COMPLETED: pjsua_ip_change_op = 6;
pub type pjsua_ip_change_op = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjsua_ip_change_op_info {
    pub lis_restart: pjsua_ip_change_op_info__bindgen_ty_1,
    pub acc_shutdown_tp: pjsua_ip_change_op_info__bindgen_ty_2,
    pub acc_update_contact: pjsua_ip_change_op_info__bindgen_ty_3,
    pub acc_hangup_calls: pjsua_ip_change_op_info__bindgen_ty_4,
    pub acc_reinvite_calls: pjsua_ip_change_op_info__bindgen_ty_5,
    _bindgen_union_align: [u32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_ip_change_op_info__bindgen_ty_1 {
    pub transport_id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pjsua_ip_change_op_info__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_ip_change_op_info__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(pjsua_ip_change_op_info__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_ip_change_op_info__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjsua_ip_change_op_info__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ip_change_op_info__bindgen_ty_1>())).transport_id
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ip_change_op_info__bindgen_ty_1),
            "::",
            stringify!(transport_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_ip_change_op_info__bindgen_ty_2 {
    pub acc_id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pjsua_ip_change_op_info__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_ip_change_op_info__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(pjsua_ip_change_op_info__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_ip_change_op_info__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjsua_ip_change_op_info__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ip_change_op_info__bindgen_ty_2>())).acc_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ip_change_op_info__bindgen_ty_2),
            "::",
            stringify!(acc_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_ip_change_op_info__bindgen_ty_3 {
    pub acc_id: pjsua_acc_id,
    pub is_register: pj_bool_t,
    pub code: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pjsua_ip_change_op_info__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_ip_change_op_info__bindgen_ty_3>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(pjsua_ip_change_op_info__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_ip_change_op_info__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjsua_ip_change_op_info__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ip_change_op_info__bindgen_ty_3>())).acc_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ip_change_op_info__bindgen_ty_3),
            "::",
            stringify!(acc_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ip_change_op_info__bindgen_ty_3>())).is_register
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ip_change_op_info__bindgen_ty_3),
            "::",
            stringify!(is_register)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ip_change_op_info__bindgen_ty_3>())).code as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ip_change_op_info__bindgen_ty_3),
            "::",
            stringify!(code)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_ip_change_op_info__bindgen_ty_4 {
    pub acc_id: pjsua_acc_id,
    pub call_id: pjsua_call_id,
}
#[test]
fn bindgen_test_layout_pjsua_ip_change_op_info__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_ip_change_op_info__bindgen_ty_4>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(pjsua_ip_change_op_info__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_ip_change_op_info__bindgen_ty_4>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjsua_ip_change_op_info__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ip_change_op_info__bindgen_ty_4>())).acc_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ip_change_op_info__bindgen_ty_4),
            "::",
            stringify!(acc_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ip_change_op_info__bindgen_ty_4>())).call_id as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ip_change_op_info__bindgen_ty_4),
            "::",
            stringify!(call_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_ip_change_op_info__bindgen_ty_5 {
    pub acc_id: pjsua_acc_id,
    pub call_id: pjsua_call_id,
}
#[test]
fn bindgen_test_layout_pjsua_ip_change_op_info__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_ip_change_op_info__bindgen_ty_5>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(pjsua_ip_change_op_info__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_ip_change_op_info__bindgen_ty_5>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjsua_ip_change_op_info__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ip_change_op_info__bindgen_ty_5>())).acc_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ip_change_op_info__bindgen_ty_5),
            "::",
            stringify!(acc_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ip_change_op_info__bindgen_ty_5>())).call_id as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ip_change_op_info__bindgen_ty_5),
            "::",
            stringify!(call_id)
        )
    );
}
#[test]
fn bindgen_test_layout_pjsua_ip_change_op_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_ip_change_op_info>(),
        12usize,
        concat!("Size of: ", stringify!(pjsua_ip_change_op_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_ip_change_op_info>(),
        4usize,
        concat!("Alignment of ", stringify!(pjsua_ip_change_op_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ip_change_op_info>())).lis_restart as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ip_change_op_info),
            "::",
            stringify!(lis_restart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ip_change_op_info>())).acc_shutdown_tp as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ip_change_op_info),
            "::",
            stringify!(acc_shutdown_tp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ip_change_op_info>())).acc_update_contact as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ip_change_op_info),
            "::",
            stringify!(acc_update_contact)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ip_change_op_info>())).acc_hangup_calls as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ip_change_op_info),
            "::",
            stringify!(acc_hangup_calls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ip_change_op_info>())).acc_reinvite_calls as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ip_change_op_info),
            "::",
            stringify!(acc_reinvite_calls)
        )
    );
}
pub const pjsua_dtmf_method_PJSUA_DTMF_METHOD_RFC2833: pjsua_dtmf_method = 0;
pub const pjsua_dtmf_method_PJSUA_DTMF_METHOD_SIP_INFO: pjsua_dtmf_method = 1;
pub type pjsua_dtmf_method = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_dtmf_info {
    pub method: pjsua_dtmf_method,
    pub digit: ::std::os::raw::c_uint,
    pub duration: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjsua_dtmf_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_dtmf_info>(),
        12usize,
        concat!("Size of: ", stringify!(pjsua_dtmf_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_dtmf_info>(),
        4usize,
        concat!("Alignment of ", stringify!(pjsua_dtmf_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_dtmf_info>())).method as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_dtmf_info),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_dtmf_info>())).digit as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_dtmf_info),
            "::",
            stringify!(digit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_dtmf_info>())).duration as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_dtmf_info),
            "::",
            stringify!(duration)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_dtmf_event {
    pub method: pjsua_dtmf_method,
    pub timestamp: ::std::os::raw::c_uint,
    pub digit: ::std::os::raw::c_uint,
    pub duration: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjsua_dtmf_event() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_dtmf_event>(),
        20usize,
        concat!("Size of: ", stringify!(pjsua_dtmf_event))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_dtmf_event>(),
        4usize,
        concat!("Alignment of ", stringify!(pjsua_dtmf_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_dtmf_event>())).method as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_dtmf_event),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_dtmf_event>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_dtmf_event),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_dtmf_event>())).digit as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_dtmf_event),
            "::",
            stringify!(digit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_dtmf_event>())).duration as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_dtmf_event),
            "::",
            stringify!(duration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_dtmf_event>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_dtmf_event),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_call_setting {
    pub flag: ::std::os::raw::c_uint,
    pub req_keyframe_method: ::std::os::raw::c_uint,
    pub aud_cnt: ::std::os::raw::c_uint,
    pub vid_cnt: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjsua_call_setting() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_call_setting>(),
        16usize,
        concat!("Size of: ", stringify!(pjsua_call_setting))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_call_setting>(),
        4usize,
        concat!("Alignment of ", stringify!(pjsua_call_setting))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_setting>())).flag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_setting),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_setting>())).req_keyframe_method as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_setting),
            "::",
            stringify!(req_keyframe_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_setting>())).aud_cnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_setting),
            "::",
            stringify!(aud_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_setting>())).vid_cnt as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_setting),
            "::",
            stringify!(vid_cnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_callback {
    pub on_call_state:
        ::std::option::Option<unsafe extern "C" fn(call_id: pjsua_call_id, e: *mut pjsip_event)>,
    pub on_incoming_call: ::std::option::Option<
        unsafe extern "C" fn(
            acc_id: pjsua_acc_id,
            call_id: pjsua_call_id,
            rdata: *mut pjsip_rx_data,
        ),
    >,
    pub on_call_tsx_state: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            tsx: *mut pjsip_transaction,
            e: *mut pjsip_event,
        ),
    >,
    pub on_call_media_state: ::std::option::Option<unsafe extern "C" fn(call_id: pjsua_call_id)>,
    pub on_call_sdp_created: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            sdp: *mut pjmedia_sdp_session,
            pool: *mut pj_pool_t,
            rem_sdp: *const pjmedia_sdp_session,
        ),
    >,
    pub on_stream_precreate: ::std::option::Option<
        unsafe extern "C" fn(call_id: pjsua_call_id, param: *mut pjsua_on_stream_precreate_param),
    >,
    pub on_stream_created: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            strm: *mut pjmedia_stream,
            stream_idx: ::std::os::raw::c_uint,
            p_port: *mut *mut pjmedia_port,
        ),
    >,
    pub on_stream_created2: ::std::option::Option<
        unsafe extern "C" fn(call_id: pjsua_call_id, param: *mut pjsua_on_stream_created_param),
    >,
    pub on_stream_destroyed: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            strm: *mut pjmedia_stream,
            stream_idx: ::std::os::raw::c_uint,
        ),
    >,
    pub on_dtmf_digit: ::std::option::Option<
        unsafe extern "C" fn(call_id: pjsua_call_id, digit: ::std::os::raw::c_int),
    >,
    pub on_dtmf_digit2: ::std::option::Option<
        unsafe extern "C" fn(call_id: pjsua_call_id, info: *const pjsua_dtmf_info),
    >,
    pub on_dtmf_event: ::std::option::Option<
        unsafe extern "C" fn(call_id: pjsua_call_id, event: *const pjsua_dtmf_event),
    >,
    pub on_call_transfer_request: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            dst: *const pj_str_t,
            code: *mut pjsip_status_code,
        ),
    >,
    pub on_call_transfer_request2: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            dst: *const pj_str_t,
            code: *mut pjsip_status_code,
            opt: *mut pjsua_call_setting,
        ),
    >,
    pub on_call_transfer_status: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            st_code: ::std::os::raw::c_int,
            st_text: *const pj_str_t,
            final_: pj_bool_t,
            p_cont: *mut pj_bool_t,
        ),
    >,
    pub on_call_replace_request: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            rdata: *mut pjsip_rx_data,
            st_code: *mut ::std::os::raw::c_int,
            st_text: *mut pj_str_t,
        ),
    >,
    pub on_call_replace_request2: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            rdata: *mut pjsip_rx_data,
            st_code: *mut ::std::os::raw::c_int,
            st_text: *mut pj_str_t,
            opt: *mut pjsua_call_setting,
        ),
    >,
    pub on_call_replaced: ::std::option::Option<
        unsafe extern "C" fn(old_call_id: pjsua_call_id, new_call_id: pjsua_call_id),
    >,
    pub on_call_rx_offer: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            offer: *const pjmedia_sdp_session,
            reserved: *mut ::std::os::raw::c_void,
            code: *mut pjsip_status_code,
            opt: *mut pjsua_call_setting,
        ),
    >,
    pub on_call_rx_reinvite: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            offer: *const pjmedia_sdp_session,
            rdata: *mut pjsip_rx_data,
            reserved: *mut ::std::os::raw::c_void,
            async_: *mut pj_bool_t,
            code: *mut pjsip_status_code,
            opt: *mut pjsua_call_setting,
        ),
    >,
    pub on_call_tx_offer: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            reserved: *mut ::std::os::raw::c_void,
            opt: *mut pjsua_call_setting,
        ),
    >,
    pub on_reg_started:
        ::std::option::Option<unsafe extern "C" fn(acc_id: pjsua_acc_id, renew: pj_bool_t)>,
    pub on_reg_started2: ::std::option::Option<
        unsafe extern "C" fn(acc_id: pjsua_acc_id, info: *mut pjsua_reg_info),
    >,
    pub on_reg_state: ::std::option::Option<unsafe extern "C" fn(acc_id: pjsua_acc_id)>,
    pub on_reg_state2: ::std::option::Option<
        unsafe extern "C" fn(acc_id: pjsua_acc_id, info: *mut pjsua_reg_info),
    >,
    pub on_incoming_subscribe: ::std::option::Option<
        unsafe extern "C" fn(
            acc_id: pjsua_acc_id,
            srv_pres: *mut pjsua_srv_pres,
            buddy_id: pjsua_buddy_id,
            from: *const pj_str_t,
            rdata: *mut pjsip_rx_data,
            code: *mut pjsip_status_code,
            reason: *mut pj_str_t,
            msg_data: *mut pjsua_msg_data,
        ),
    >,
    pub on_srv_subscribe_state: ::std::option::Option<
        unsafe extern "C" fn(
            acc_id: pjsua_acc_id,
            srv_pres: *mut pjsua_srv_pres,
            remote_uri: *const pj_str_t,
            state: pjsip_evsub_state,
            event: *mut pjsip_event,
        ),
    >,
    pub on_buddy_state: ::std::option::Option<unsafe extern "C" fn(buddy_id: pjsua_buddy_id)>,
    pub on_buddy_evsub_state: ::std::option::Option<
        unsafe extern "C" fn(
            buddy_id: pjsua_buddy_id,
            sub: *mut pjsip_evsub,
            event: *mut pjsip_event,
        ),
    >,
    pub on_pager: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            from: *const pj_str_t,
            to: *const pj_str_t,
            contact: *const pj_str_t,
            mime_type: *const pj_str_t,
            body: *const pj_str_t,
        ),
    >,
    pub on_pager2: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            from: *const pj_str_t,
            to: *const pj_str_t,
            contact: *const pj_str_t,
            mime_type: *const pj_str_t,
            body: *const pj_str_t,
            rdata: *mut pjsip_rx_data,
            acc_id: pjsua_acc_id,
        ),
    >,
    pub on_pager_status: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            to: *const pj_str_t,
            body: *const pj_str_t,
            user_data: *mut ::std::os::raw::c_void,
            status: pjsip_status_code,
            reason: *const pj_str_t,
        ),
    >,
    pub on_pager_status2: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            to: *const pj_str_t,
            body: *const pj_str_t,
            user_data: *mut ::std::os::raw::c_void,
            status: pjsip_status_code,
            reason: *const pj_str_t,
            tdata: *mut pjsip_tx_data,
            rdata: *mut pjsip_rx_data,
            acc_id: pjsua_acc_id,
        ),
    >,
    pub on_typing: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            from: *const pj_str_t,
            to: *const pj_str_t,
            contact: *const pj_str_t,
            is_typing: pj_bool_t,
        ),
    >,
    pub on_typing2: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            from: *const pj_str_t,
            to: *const pj_str_t,
            contact: *const pj_str_t,
            is_typing: pj_bool_t,
            rdata: *mut pjsip_rx_data,
            acc_id: pjsua_acc_id,
        ),
    >,
    pub on_nat_detect:
        ::std::option::Option<unsafe extern "C" fn(res: *const pj_stun_nat_detect_result)>,
    pub on_call_redirected: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            target: *const pjsip_uri,
            e: *const pjsip_event,
        ) -> pjsip_redirect_op,
    >,
    pub on_mwi_state:
        ::std::option::Option<unsafe extern "C" fn(acc_id: pjsua_acc_id, evsub: *mut pjsip_evsub)>,
    pub on_mwi_info: ::std::option::Option<
        unsafe extern "C" fn(acc_id: pjsua_acc_id, mwi_info: *mut pjsua_mwi_info),
    >,
    pub on_transport_state: pjsip_tp_state_callback,
    pub on_call_media_transport_state: pjsua_med_tp_state_cb,
    pub on_ice_transport_error: ::std::option::Option<
        unsafe extern "C" fn(
            index: ::std::os::raw::c_int,
            op: pj_ice_strans_op,
            status: pj_status_t,
            param: *mut ::std::os::raw::c_void,
        ),
    >,
    pub on_snd_dev_operation: ::std::option::Option<
        unsafe extern "C" fn(operation: ::std::os::raw::c_int) -> pj_status_t,
    >,
    pub on_call_media_event: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            med_idx: ::std::os::raw::c_uint,
            event: *mut pjmedia_event,
        ),
    >,
    pub on_create_media_transport: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            media_idx: ::std::os::raw::c_uint,
            base_tp: *mut pjmedia_transport,
            flags: ::std::os::raw::c_uint,
        ) -> *mut pjmedia_transport,
    >,
    pub on_create_media_transport_srtp: ::std::option::Option<
        unsafe extern "C" fn(
            call_id: pjsua_call_id,
            media_idx: ::std::os::raw::c_uint,
            srtp_opt: *mut pjmedia_srtp_setting,
        ),
    >,
    pub on_acc_find_for_incoming: ::std::option::Option<
        unsafe extern "C" fn(rdata: *const pjsip_rx_data, acc_id: *mut pjsua_acc_id),
    >,
    pub on_stun_resolution_complete: pj_stun_resolve_cb,
    pub on_ip_change_progress: ::std::option::Option<
        unsafe extern "C" fn(
            op: pjsua_ip_change_op,
            status: pj_status_t,
            info: *const pjsua_ip_change_op_info,
        ),
    >,
    pub on_media_event: ::std::option::Option<unsafe extern "C" fn(event: *mut pjmedia_event)>,
}
#[test]
fn bindgen_test_layout_pjsua_callback() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_callback>(),
        400usize,
        concat!("Size of: ", stringify!(pjsua_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_callback))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_call_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_call_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_incoming_call as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_incoming_call)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_call_tsx_state as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_call_tsx_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_call_media_state as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_call_media_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_call_sdp_created as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_call_sdp_created)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_stream_precreate as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_stream_precreate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_stream_created as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_stream_created)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_stream_created2 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_stream_created2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_stream_destroyed as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_stream_destroyed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_dtmf_digit as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_dtmf_digit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_dtmf_digit2 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_dtmf_digit2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_dtmf_event as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_dtmf_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_call_transfer_request as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_call_transfer_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_call_transfer_request2 as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_call_transfer_request2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_call_transfer_status as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_call_transfer_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_call_replace_request as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_call_replace_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_call_replace_request2 as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_call_replace_request2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_call_replaced as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_call_replaced)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_call_rx_offer as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_call_rx_offer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_call_rx_reinvite as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_call_rx_reinvite)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_call_tx_offer as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_call_tx_offer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_reg_started as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_reg_started)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_reg_started2 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_reg_started2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_reg_state as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_reg_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_reg_state2 as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_reg_state2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_incoming_subscribe as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_incoming_subscribe)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_srv_subscribe_state as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_srv_subscribe_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_buddy_state as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_buddy_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_buddy_evsub_state as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_buddy_evsub_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_pager as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_pager)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_pager2 as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_pager2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_pager_status as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_pager_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_pager_status2 as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_pager_status2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_typing as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_typing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_typing2 as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_typing2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_nat_detect as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_nat_detect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_call_redirected as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_call_redirected)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_mwi_state as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_mwi_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_mwi_info as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_mwi_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_transport_state as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_transport_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_call_media_transport_state as *const _
                as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_call_media_transport_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_ice_transport_error as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_ice_transport_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_snd_dev_operation as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_snd_dev_operation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_call_media_event as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_call_media_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_create_media_transport as *const _
                as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_create_media_transport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_create_media_transport_srtp as *const _
                as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_create_media_transport_srtp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_acc_find_for_incoming as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_acc_find_for_incoming)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_stun_resolution_complete as *const _
                as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_stun_resolution_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_callback>())).on_ip_change_progress as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_ip_change_progress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_callback>())).on_media_event as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_callback),
            "::",
            stringify!(on_media_event)
        )
    );
}
pub const pjsua_sip_timer_use_PJSUA_SIP_TIMER_INACTIVE: pjsua_sip_timer_use = 0;
pub const pjsua_sip_timer_use_PJSUA_SIP_TIMER_OPTIONAL: pjsua_sip_timer_use = 1;
pub const pjsua_sip_timer_use_PJSUA_SIP_TIMER_REQUIRED: pjsua_sip_timer_use = 2;
pub const pjsua_sip_timer_use_PJSUA_SIP_TIMER_ALWAYS: pjsua_sip_timer_use = 3;
pub type pjsua_sip_timer_use = ::std::os::raw::c_uint;
pub const pjsua_100rel_use_PJSUA_100REL_NOT_USED: pjsua_100rel_use = 0;
pub const pjsua_100rel_use_PJSUA_100REL_MANDATORY: pjsua_100rel_use = 1;
pub const pjsua_100rel_use_PJSUA_100REL_OPTIONAL: pjsua_100rel_use = 2;
pub type pjsua_100rel_use = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsua_config {
    pub max_calls: ::std::os::raw::c_uint,
    pub thread_cnt: ::std::os::raw::c_uint,
    pub nameserver_count: ::std::os::raw::c_uint,
    pub nameserver: [pj_str_t; 4usize],
    pub force_lr: pj_bool_t,
    pub outbound_proxy_cnt: ::std::os::raw::c_uint,
    pub outbound_proxy: [pj_str_t; 4usize],
    pub stun_domain: pj_str_t,
    pub stun_host: pj_str_t,
    pub stun_srv_cnt: ::std::os::raw::c_uint,
    pub stun_srv: [pj_str_t; 8usize],
    pub stun_try_ipv6: pj_bool_t,
    pub stun_ignore_failure: pj_bool_t,
    pub stun_map_use_stun2: pj_bool_t,
    pub nat_type_in_sdp: ::std::os::raw::c_int,
    pub require_100rel: pjsua_100rel_use,
    pub use_timer: pjsua_sip_timer_use,
    pub enable_unsolicited_mwi: pj_bool_t,
    pub timer_setting: pjsip_timer_setting,
    pub cred_count: ::std::os::raw::c_uint,
    pub cred_info: [pjsip_cred_info; 8usize],
    pub cb: pjsua_callback,
    pub user_agent: pj_str_t,
    pub use_srtp: pjmedia_srtp_use,
    pub srtp_secure_signaling: ::std::os::raw::c_int,
    pub srtp_optional_dup_offer: pj_bool_t,
    pub srtp_opt: pjsua_srtp_opt,
    pub hangup_forked_call: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjsua_config() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_config>(),
        2488usize,
        concat!("Size of: ", stringify!(pjsua_config))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_config>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).max_calls as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(max_calls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).thread_cnt as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(thread_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).nameserver_count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(nameserver_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).nameserver as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(nameserver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).force_lr as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(force_lr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).outbound_proxy_cnt as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(outbound_proxy_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).outbound_proxy as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(outbound_proxy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).stun_domain as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(stun_domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).stun_host as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(stun_host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).stun_srv_cnt as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(stun_srv_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).stun_srv as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(stun_srv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).stun_try_ipv6 as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(stun_try_ipv6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_config>())).stun_ignore_failure as *const _ as usize
        },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(stun_ignore_failure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).stun_map_use_stun2 as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(stun_map_use_stun2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).nat_type_in_sdp as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(nat_type_in_sdp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).require_100rel as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(require_100rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).use_timer as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(use_timer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_config>())).enable_unsolicited_mwi as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(enable_unsolicited_mwi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).timer_setting as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(timer_setting)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).cred_count as *const _ as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(cred_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).cred_info as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(cred_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).cb as *const _ as usize },
        1384usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).user_agent as *const _ as usize },
        1784usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(user_agent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).use_srtp as *const _ as usize },
        1800usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(use_srtp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_config>())).srtp_secure_signaling as *const _ as usize
        },
        1804usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(srtp_secure_signaling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_config>())).srtp_optional_dup_offer as *const _ as usize
        },
        1808usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(srtp_optional_dup_offer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).srtp_opt as *const _ as usize },
        1816usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(srtp_opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_config>())).hangup_forked_call as *const _ as usize },
        2480usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_config),
            "::",
            stringify!(hangup_forked_call)
        )
    );
}
pub const pjsua_destroy_flag_PJSUA_DESTROY_NO_RX_MSG: pjsua_destroy_flag = 1;
pub const pjsua_destroy_flag_PJSUA_DESTROY_NO_TX_MSG: pjsua_destroy_flag = 2;
pub const pjsua_destroy_flag_PJSUA_DESTROY_NO_NETWORK: pjsua_destroy_flag = 3;
pub type pjsua_destroy_flag = ::std::os::raw::c_uint;
extern "C" {
    pub fn pjsua_config_default(cfg: *mut pjsua_config);
}
extern "C" {
    pub fn pjsua_config_dup(pool: *mut pj_pool_t, dst: *mut pjsua_config, src: *const pjsua_config);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_msg_data {
    pub target_uri: pj_str_t,
    pub hdr_list: pjsip_hdr,
    pub content_type: pj_str_t,
    pub msg_body: pj_str_t,
    pub multipart_ctype: pjsip_media_type,
    pub multipart_parts: pjsip_multipart_part,
}
#[test]
fn bindgen_test_layout_pjsua_msg_data() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_msg_data>(),
        280usize,
        concat!("Size of: ", stringify!(pjsua_msg_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_msg_data>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_msg_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_msg_data>())).target_uri as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_msg_data),
            "::",
            stringify!(target_uri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_msg_data>())).hdr_list as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_msg_data),
            "::",
            stringify!(hdr_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_msg_data>())).content_type as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_msg_data),
            "::",
            stringify!(content_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_msg_data>())).msg_body as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_msg_data),
            "::",
            stringify!(msg_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_msg_data>())).multipart_ctype as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_msg_data),
            "::",
            stringify!(multipart_ctype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_msg_data>())).multipart_parts as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_msg_data),
            "::",
            stringify!(multipart_parts)
        )
    );
}
extern "C" {
    pub fn pjsua_msg_data_init(msg_data: *mut pjsua_msg_data);
}
extern "C" {
    pub fn pjsua_msg_data_clone(
        pool: *mut pj_pool_t,
        rhs: *const pjsua_msg_data,
    ) -> *mut pjsua_msg_data;
}
extern "C" {
    pub fn pjsua_create() -> pj_status_t;
}
extern "C" {
    pub fn pjsua_init(
        ua_cfg: *const pjsua_config,
        log_cfg: *const pjsua_logging_config,
        media_cfg: *const pjsua_media_config,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_start() -> pj_status_t;
}
extern "C" {
    pub fn pjsua_destroy() -> pj_status_t;
}
extern "C" {
    pub fn pjsua_get_state() -> pjsua_state;
}
extern "C" {
    pub fn pjsua_destroy2(flags: ::std::os::raw::c_uint) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_handle_events(msec_timeout: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pjsua_stop_worker_threads();
}
extern "C" {
    pub fn pjsua_pool_create(
        name: *const ::std::os::raw::c_char,
        init_size: pj_size_t,
        increment: pj_size_t,
    ) -> *mut pj_pool_t;
}
extern "C" {
    pub fn pjsua_reconfigure_logging(c: *const pjsua_logging_config) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_get_pjsip_endpt() -> *mut pjsip_endpoint;
}
extern "C" {
    pub fn pjsua_get_pjmedia_endpt() -> *mut pjmedia_endpt;
}
extern "C" {
    pub fn pjsua_get_pool_factory() -> *mut pj_pool_factory;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_stun_resolve_result {
    pub token: *mut ::std::os::raw::c_void,
    pub status: pj_status_t,
    pub name: pj_str_t,
    pub addr: pj_sockaddr,
    pub index: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pj_stun_resolve_result() {
    assert_eq!(
        ::std::mem::size_of::<pj_stun_resolve_result>(),
        64usize,
        concat!("Size of: ", stringify!(pj_stun_resolve_result))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_stun_resolve_result>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_stun_resolve_result))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_resolve_result>())).token as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_resolve_result),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_resolve_result>())).status as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_resolve_result),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_resolve_result>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_resolve_result),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_resolve_result>())).addr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_resolve_result),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_stun_resolve_result>())).index as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_stun_resolve_result),
            "::",
            stringify!(index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_ip_change_param {
    pub restart_listener: pj_bool_t,
    pub restart_lis_delay: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjsua_ip_change_param() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_ip_change_param>(),
        8usize,
        concat!("Size of: ", stringify!(pjsua_ip_change_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_ip_change_param>(),
        4usize,
        concat!("Alignment of ", stringify!(pjsua_ip_change_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ip_change_param>())).restart_listener as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ip_change_param),
            "::",
            stringify!(restart_listener)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ip_change_param>())).restart_lis_delay as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ip_change_param),
            "::",
            stringify!(restart_lis_delay)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_ip_change_acc_cfg {
    pub shutdown_tp: pj_bool_t,
    pub hangup_calls: pj_bool_t,
    pub reinvite_flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjsua_ip_change_acc_cfg() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_ip_change_acc_cfg>(),
        12usize,
        concat!("Size of: ", stringify!(pjsua_ip_change_acc_cfg))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_ip_change_acc_cfg>(),
        4usize,
        concat!("Alignment of ", stringify!(pjsua_ip_change_acc_cfg))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ip_change_acc_cfg>())).shutdown_tp as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ip_change_acc_cfg),
            "::",
            stringify!(shutdown_tp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ip_change_acc_cfg>())).hangup_calls as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ip_change_acc_cfg),
            "::",
            stringify!(hangup_calls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ip_change_acc_cfg>())).reinvite_flags as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ip_change_acc_cfg),
            "::",
            stringify!(reinvite_flags)
        )
    );
}
extern "C" {
    pub fn pjsua_ip_change_param_default(param: *mut pjsua_ip_change_param);
}
extern "C" {
    pub fn pjsua_detect_nat_type() -> pj_status_t;
}
extern "C" {
    pub fn pjsua_get_nat_type(type_: *mut pj_stun_nat_type) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_update_stun_servers(
        count: ::std::os::raw::c_uint,
        srv: *mut pj_str_t,
        wait: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_resolve_stun_servers(
        count: ::std::os::raw::c_uint,
        srv: *mut pj_str_t,
        wait: pj_bool_t,
        token: *mut ::std::os::raw::c_void,
        cb: pj_stun_resolve_cb,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_cancel_stun_resolution(
        token: *mut ::std::os::raw::c_void,
        notify_cb: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_verify_sip_url(url: *const ::std::os::raw::c_char) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_verify_url(url: *const ::std::os::raw::c_char) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_schedule_timer_dbg(
        entry: *mut pj_timer_entry,
        delay: *const pj_time_val,
        src_file: *const ::std::os::raw::c_char,
        src_line: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_schedule_timer2_dbg(
        cb: ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
        user_data: *mut ::std::os::raw::c_void,
        msec_delay: ::std::os::raw::c_uint,
        src_file: *const ::std::os::raw::c_char,
        src_line: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_cancel_timer(entry: *mut pj_timer_entry);
}
extern "C" {
    pub fn pjsua_perror(
        sender: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
        status: pj_status_t,
    );
}
extern "C" {
    pub fn pjsua_dump(detail: pj_bool_t);
}
extern "C" {
    pub fn pjsua_handle_ip_change(param: *const pjsua_ip_change_param) -> pj_status_t;
}
pub type pjsua_transport_id = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_transport_config {
    pub port: ::std::os::raw::c_uint,
    pub port_range: ::std::os::raw::c_uint,
    pub public_addr: pj_str_t,
    pub bound_addr: pj_str_t,
    pub tls_setting: pjsip_tls_setting,
    pub qos_type: pj_qos_type,
    pub qos_params: pj_qos_params,
    pub sockopt_params: pj_sockopt_params,
}
#[test]
fn bindgen_test_layout_pjsua_transport_config() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_transport_config>(),
        544usize,
        concat!("Size of: ", stringify!(pjsua_transport_config))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_transport_config>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_transport_config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_transport_config>())).port as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_transport_config),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_transport_config>())).port_range as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_transport_config),
            "::",
            stringify!(port_range)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_transport_config>())).public_addr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_transport_config),
            "::",
            stringify!(public_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_transport_config>())).bound_addr as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_transport_config),
            "::",
            stringify!(bound_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_transport_config>())).tls_setting as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_transport_config),
            "::",
            stringify!(tls_setting)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_transport_config>())).qos_type as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_transport_config),
            "::",
            stringify!(qos_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_transport_config>())).qos_params as *const _ as usize
        },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_transport_config),
            "::",
            stringify!(qos_params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_transport_config>())).sockopt_params as *const _ as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_transport_config),
            "::",
            stringify!(sockopt_params)
        )
    );
}
extern "C" {
    pub fn pjsua_transport_config_default(cfg: *mut pjsua_transport_config);
}
extern "C" {
    pub fn pjsua_transport_config_dup(
        pool: *mut pj_pool_t,
        dst: *mut pjsua_transport_config,
        src: *const pjsua_transport_config,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsua_transport_info {
    pub id: pjsua_transport_id,
    pub type_: pjsip_transport_type_e,
    pub type_name: pj_str_t,
    pub info: pj_str_t,
    pub flag: ::std::os::raw::c_uint,
    pub addr_len: ::std::os::raw::c_uint,
    pub local_addr: pj_sockaddr,
    pub local_name: pjsip_host_port,
    pub usage_count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjsua_transport_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_transport_info>(),
        112usize,
        concat!("Size of: ", stringify!(pjsua_transport_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_transport_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_transport_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_transport_info>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_transport_info),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_transport_info>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_transport_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_transport_info>())).type_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_transport_info),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_transport_info>())).info as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_transport_info),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_transport_info>())).flag as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_transport_info),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_transport_info>())).addr_len as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_transport_info),
            "::",
            stringify!(addr_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_transport_info>())).local_addr as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_transport_info),
            "::",
            stringify!(local_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_transport_info>())).local_name as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_transport_info),
            "::",
            stringify!(local_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_transport_info>())).usage_count as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_transport_info),
            "::",
            stringify!(usage_count)
        )
    );
}
extern "C" {
    pub fn pjsua_transport_create(
        type_: pjsip_transport_type_e,
        cfg: *const pjsua_transport_config,
        p_id: *mut pjsua_transport_id,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_transport_register(
        tp: *mut pjsip_transport,
        p_id: *mut pjsua_transport_id,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_tpfactory_register(
        tf: *mut pjsip_tpfactory,
        p_id: *mut pjsua_transport_id,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_enum_transports(
        id: *mut pjsua_transport_id,
        count: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_transport_get_info(
        id: pjsua_transport_id,
        info: *mut pjsua_transport_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_transport_set_enable(id: pjsua_transport_id, enabled: pj_bool_t) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_transport_close(id: pjsua_transport_id, force: pj_bool_t) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_transport_lis_start(
        id: pjsua_transport_id,
        cfg: *const pjsua_transport_config,
    ) -> pj_status_t;
}
pub const pjsua_call_hold_type_PJSUA_CALL_HOLD_TYPE_RFC3264: pjsua_call_hold_type = 0;
pub const pjsua_call_hold_type_PJSUA_CALL_HOLD_TYPE_RFC2543: pjsua_call_hold_type = 1;
pub type pjsua_call_hold_type = ::std::os::raw::c_uint;
pub const pjsua_stun_use_PJSUA_STUN_USE_DEFAULT: pjsua_stun_use = 0;
pub const pjsua_stun_use_PJSUA_STUN_USE_DISABLED: pjsua_stun_use = 1;
pub const pjsua_stun_use_PJSUA_STUN_RETRY_ON_FAILURE: pjsua_stun_use = 2;
pub type pjsua_stun_use = ::std::os::raw::c_uint;
pub const pjsua_ice_config_use_PJSUA_ICE_CONFIG_USE_DEFAULT: pjsua_ice_config_use = 0;
pub const pjsua_ice_config_use_PJSUA_ICE_CONFIG_USE_CUSTOM: pjsua_ice_config_use = 1;
pub type pjsua_ice_config_use = ::std::os::raw::c_uint;
pub const pjsua_turn_config_use_PJSUA_TURN_CONFIG_USE_DEFAULT: pjsua_turn_config_use = 0;
pub const pjsua_turn_config_use_PJSUA_TURN_CONFIG_USE_CUSTOM: pjsua_turn_config_use = 1;
pub type pjsua_turn_config_use = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_ice_config {
    pub enable_ice: pj_bool_t,
    pub ice_max_host_cands: ::std::os::raw::c_int,
    pub ice_opt: pj_ice_sess_options,
    pub ice_no_rtcp: pj_bool_t,
    pub ice_always_update: pj_bool_t,
}
#[test]
fn bindgen_test_layout_pjsua_ice_config() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_ice_config>(),
        32usize,
        concat!("Size of: ", stringify!(pjsua_ice_config))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_ice_config>(),
        4usize,
        concat!("Alignment of ", stringify!(pjsua_ice_config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_ice_config>())).enable_ice as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ice_config),
            "::",
            stringify!(enable_ice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ice_config>())).ice_max_host_cands as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ice_config),
            "::",
            stringify!(ice_max_host_cands)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_ice_config>())).ice_opt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ice_config),
            "::",
            stringify!(ice_opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_ice_config>())).ice_no_rtcp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ice_config),
            "::",
            stringify!(ice_no_rtcp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_ice_config>())).ice_always_update as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_ice_config),
            "::",
            stringify!(ice_always_update)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsua_turn_config {
    pub enable_turn: pj_bool_t,
    pub turn_server: pj_str_t,
    pub turn_conn_type: pj_turn_tp_type,
    pub turn_auth_cred: pj_stun_auth_cred,
    pub turn_tls_setting: pj_turn_sock_tls_cfg,
}
#[test]
fn bindgen_test_layout_pjsua_turn_config() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_turn_config>(),
        608usize,
        concat!("Size of: ", stringify!(pjsua_turn_config))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_turn_config>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_turn_config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_turn_config>())).enable_turn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_turn_config),
            "::",
            stringify!(enable_turn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_turn_config>())).turn_server as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_turn_config),
            "::",
            stringify!(turn_server)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_turn_config>())).turn_conn_type as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_turn_config),
            "::",
            stringify!(turn_conn_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_turn_config>())).turn_auth_cred as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_turn_config),
            "::",
            stringify!(turn_auth_cred)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_turn_config>())).turn_tls_setting as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_turn_config),
            "::",
            stringify!(turn_tls_setting)
        )
    );
}
pub const pjsua_ipv6_use_PJSUA_IPV6_DISABLED: pjsua_ipv6_use = 0;
pub const pjsua_ipv6_use_PJSUA_IPV6_ENABLED: pjsua_ipv6_use = 1;
pub type pjsua_ipv6_use = ::std::os::raw::c_uint;
pub const pjsua_nat64_opt_PJSUA_NAT64_DISABLED: pjsua_nat64_opt = 0;
pub const pjsua_nat64_opt_PJSUA_NAT64_ENABLED: pjsua_nat64_opt = 1;
pub type pjsua_nat64_opt = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsua_acc_config {
    pub user_data: *mut ::std::os::raw::c_void,
    pub priority: ::std::os::raw::c_int,
    pub id: pj_str_t,
    pub reg_uri: pj_str_t,
    pub reg_hdr_list: pjsip_hdr,
    pub reg_contact_params: pj_str_t,
    pub sub_hdr_list: pjsip_hdr,
    pub mwi_enabled: pj_bool_t,
    pub mwi_expires: ::std::os::raw::c_uint,
    pub publish_enabled: pj_bool_t,
    pub publish_opt: pjsip_publishc_opt,
    pub unpublish_max_wait_time_msec: ::std::os::raw::c_uint,
    pub auth_pref: pjsip_auth_clt_pref,
    pub pidf_tuple_id: pj_str_t,
    pub force_contact: pj_str_t,
    pub contact_params: pj_str_t,
    pub contact_uri_params: pj_str_t,
    pub require_100rel: pjsua_100rel_use,
    pub use_timer: pjsua_sip_timer_use,
    pub timer_setting: pjsip_timer_setting,
    pub proxy_cnt: ::std::os::raw::c_uint,
    pub proxy: [pj_str_t; 8usize],
    pub lock_codec: ::std::os::raw::c_uint,
    pub reg_timeout: ::std::os::raw::c_uint,
    pub reg_delay_before_refresh: ::std::os::raw::c_uint,
    pub unreg_timeout: ::std::os::raw::c_uint,
    pub cred_count: ::std::os::raw::c_uint,
    pub cred_info: [pjsip_cred_info; 8usize],
    pub transport_id: pjsua_transport_id,
    pub allow_contact_rewrite: pj_bool_t,
    pub contact_rewrite_method: ::std::os::raw::c_int,
    pub contact_use_src_port: pj_bool_t,
    pub allow_via_rewrite: pj_bool_t,
    pub allow_sdp_nat_rewrite: pj_bool_t,
    pub use_rfc5626: ::std::os::raw::c_uint,
    pub rfc5626_instance_id: pj_str_t,
    pub rfc5626_reg_id: pj_str_t,
    pub ka_interval: ::std::os::raw::c_uint,
    pub ka_data: pj_str_t,
    pub vid_in_auto_show: pj_bool_t,
    pub vid_out_auto_transmit: pj_bool_t,
    pub vid_wnd_flags: ::std::os::raw::c_uint,
    pub vid_cap_dev: pjmedia_vid_dev_index,
    pub vid_rend_dev: pjmedia_vid_dev_index,
    pub vid_stream_rc_cfg: pjmedia_vid_stream_rc_config,
    pub vid_stream_sk_cfg: pjmedia_vid_stream_sk_config,
    pub rtp_cfg: pjsua_transport_config,
    pub nat64_opt: pjsua_nat64_opt,
    pub ipv6_media_use: pjsua_ipv6_use,
    pub sip_stun_use: pjsua_stun_use,
    pub media_stun_use: pjsua_stun_use,
    pub use_loop_med_tp: pj_bool_t,
    pub enable_loopback: pj_bool_t,
    pub ice_cfg_use: pjsua_ice_config_use,
    pub ice_cfg: pjsua_ice_config,
    pub turn_cfg_use: pjsua_turn_config_use,
    pub turn_cfg: pjsua_turn_config,
    pub use_srtp: pjmedia_srtp_use,
    pub srtp_secure_signaling: ::std::os::raw::c_int,
    pub srtp_optional_dup_offer: pj_bool_t,
    pub srtp_opt: pjsua_srtp_opt,
    pub reg_retry_interval: ::std::os::raw::c_uint,
    pub reg_first_retry_interval: ::std::os::raw::c_uint,
    pub reg_retry_random_interval: ::std::os::raw::c_uint,
    pub drop_calls_on_reg_fail: pj_bool_t,
    pub reg_use_proxy: ::std::os::raw::c_uint,
    pub call_hold_type: pjsua_call_hold_type,
    pub register_on_acc_add: pj_bool_t,
    pub ip_change_cfg: pjsua_ip_change_acc_cfg,
    pub enable_rtcp_mux: pj_bool_t,
    pub rtcp_fb_cfg: pjmedia_rtcp_fb_setting,
}
#[test]
fn bindgen_test_layout_pjsua_acc_config() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_acc_config>(),
        4480usize,
        concat!("Size of: ", stringify!(pjsua_acc_config))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_acc_config>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_acc_config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).user_data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).priority as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).reg_uri as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(reg_uri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).reg_hdr_list as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(reg_hdr_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).reg_contact_params as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(reg_contact_params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).sub_hdr_list as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(sub_hdr_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).mwi_enabled as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(mwi_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).mwi_expires as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(mwi_expires)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).publish_enabled as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(publish_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).publish_opt as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(publish_opt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).unpublish_max_wait_time_msec as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(unpublish_max_wait_time_msec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).auth_pref as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(auth_pref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).pidf_tuple_id as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(pidf_tuple_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).force_contact as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(force_contact)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).contact_params as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(contact_params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).contact_uri_params as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(contact_uri_params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).require_100rel as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(require_100rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).use_timer as *const _ as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(use_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).timer_setting as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(timer_setting)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).proxy_cnt as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(proxy_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).proxy as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(proxy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).lock_codec as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(lock_codec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).reg_timeout as *const _ as usize },
        460usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(reg_timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).reg_delay_before_refresh as *const _
                as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(reg_delay_before_refresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).unreg_timeout as *const _ as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(unreg_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).cred_count as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(cred_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).cred_info as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(cred_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).transport_id as *const _ as usize },
        1504usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(transport_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).allow_contact_rewrite as *const _ as usize
        },
        1508usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(allow_contact_rewrite)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).contact_rewrite_method as *const _ as usize
        },
        1512usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(contact_rewrite_method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).contact_use_src_port as *const _ as usize
        },
        1516usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(contact_use_src_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).allow_via_rewrite as *const _ as usize
        },
        1520usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(allow_via_rewrite)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).allow_sdp_nat_rewrite as *const _ as usize
        },
        1524usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(allow_sdp_nat_rewrite)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).use_rfc5626 as *const _ as usize },
        1528usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(use_rfc5626)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).rfc5626_instance_id as *const _ as usize
        },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(rfc5626_instance_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).rfc5626_reg_id as *const _ as usize },
        1552usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(rfc5626_reg_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).ka_interval as *const _ as usize },
        1568usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(ka_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).ka_data as *const _ as usize },
        1576usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(ka_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).vid_in_auto_show as *const _ as usize
        },
        1592usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(vid_in_auto_show)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).vid_out_auto_transmit as *const _ as usize
        },
        1596usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(vid_out_auto_transmit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).vid_wnd_flags as *const _ as usize },
        1600usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(vid_wnd_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).vid_cap_dev as *const _ as usize },
        1604usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(vid_cap_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).vid_rend_dev as *const _ as usize },
        1608usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(vid_rend_dev)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).vid_stream_rc_cfg as *const _ as usize
        },
        1612usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(vid_stream_rc_cfg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).vid_stream_sk_cfg as *const _ as usize
        },
        1620usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(vid_stream_sk_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).rtp_cfg as *const _ as usize },
        1632usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(rtp_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).nat64_opt as *const _ as usize },
        2176usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(nat64_opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).ipv6_media_use as *const _ as usize },
        2180usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(ipv6_media_use)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).sip_stun_use as *const _ as usize },
        2184usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(sip_stun_use)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).media_stun_use as *const _ as usize },
        2188usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(media_stun_use)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).use_loop_med_tp as *const _ as usize
        },
        2192usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(use_loop_med_tp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).enable_loopback as *const _ as usize
        },
        2196usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(enable_loopback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).ice_cfg_use as *const _ as usize },
        2200usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(ice_cfg_use)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).ice_cfg as *const _ as usize },
        2204usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(ice_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).turn_cfg_use as *const _ as usize },
        2236usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(turn_cfg_use)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).turn_cfg as *const _ as usize },
        2240usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(turn_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).use_srtp as *const _ as usize },
        2848usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(use_srtp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).srtp_secure_signaling as *const _ as usize
        },
        2852usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(srtp_secure_signaling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).srtp_optional_dup_offer as *const _
                as usize
        },
        2856usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(srtp_optional_dup_offer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).srtp_opt as *const _ as usize },
        2864usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(srtp_opt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).reg_retry_interval as *const _ as usize
        },
        3528usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(reg_retry_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).reg_first_retry_interval as *const _
                as usize
        },
        3532usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(reg_first_retry_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).reg_retry_random_interval as *const _
                as usize
        },
        3536usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(reg_retry_random_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).drop_calls_on_reg_fail as *const _ as usize
        },
        3540usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(drop_calls_on_reg_fail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).reg_use_proxy as *const _ as usize },
        3544usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(reg_use_proxy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).call_hold_type as *const _ as usize },
        3548usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(call_hold_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).register_on_acc_add as *const _ as usize
        },
        3552usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(register_on_acc_add)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).ip_change_cfg as *const _ as usize },
        3556usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(ip_change_cfg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_config>())).enable_rtcp_mux as *const _ as usize
        },
        3568usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(enable_rtcp_mux)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_config>())).rtcp_fb_cfg as *const _ as usize },
        3576usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_config),
            "::",
            stringify!(rtcp_fb_cfg)
        )
    );
}
extern "C" {
    pub fn pjsua_ice_config_from_media_config(
        pool: *mut pj_pool_t,
        dst: *mut pjsua_ice_config,
        src: *const pjsua_media_config,
    );
}
extern "C" {
    pub fn pjsua_ice_config_dup(
        pool: *mut pj_pool_t,
        dst: *mut pjsua_ice_config,
        src: *const pjsua_ice_config,
    );
}
extern "C" {
    pub fn pjsua_turn_config_from_media_config(
        pool: *mut pj_pool_t,
        dst: *mut pjsua_turn_config,
        src: *const pjsua_media_config,
    );
}
extern "C" {
    pub fn pjsua_turn_config_dup(
        pool: *mut pj_pool_t,
        dst: *mut pjsua_turn_config,
        src: *const pjsua_turn_config,
    );
}
extern "C" {
    pub fn pjsua_srtp_opt_default(cfg: *mut pjsua_srtp_opt);
}
extern "C" {
    pub fn pjsua_srtp_opt_dup(
        pool: *mut pj_pool_t,
        dst: *mut pjsua_srtp_opt,
        src: *const pjsua_srtp_opt,
        check_str: pj_bool_t,
    );
}
extern "C" {
    pub fn pjsua_acc_config_default(cfg: *mut pjsua_acc_config);
}
extern "C" {
    pub fn pjsua_acc_config_dup(
        pool: *mut pj_pool_t,
        dst: *mut pjsua_acc_config,
        src: *const pjsua_acc_config,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsua_acc_info {
    pub id: pjsua_acc_id,
    pub is_default: pj_bool_t,
    pub acc_uri: pj_str_t,
    pub has_registration: pj_bool_t,
    pub expires: ::std::os::raw::c_uint,
    pub status: pjsip_status_code,
    pub reg_last_err: pj_status_t,
    pub status_text: pj_str_t,
    pub online_status: pj_bool_t,
    pub online_status_text: pj_str_t,
    pub rpid: pjrpid_element,
    pub buf_: [::std::os::raw::c_char; 80usize],
}
#[test]
fn bindgen_test_layout_pjsua_acc_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_acc_info>(),
        208usize,
        concat!("Size of: ", stringify!(pjsua_acc_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_acc_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_acc_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_info>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_info),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_info>())).is_default as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_info),
            "::",
            stringify!(is_default)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_info>())).acc_uri as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_info),
            "::",
            stringify!(acc_uri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_info>())).has_registration as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_info),
            "::",
            stringify!(has_registration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_info>())).expires as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_info),
            "::",
            stringify!(expires)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_info>())).status as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_info),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_info>())).reg_last_err as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_info),
            "::",
            stringify!(reg_last_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_info>())).status_text as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_info),
            "::",
            stringify!(status_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_info>())).online_status as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_info),
            "::",
            stringify!(online_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_acc_info>())).online_status_text as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_info),
            "::",
            stringify!(online_status_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_info>())).rpid as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_info),
            "::",
            stringify!(rpid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_acc_info>())).buf_ as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_acc_info),
            "::",
            stringify!(buf_)
        )
    );
}
extern "C" {
    pub fn pjsua_acc_get_count() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjsua_acc_is_valid(acc_id: pjsua_acc_id) -> pj_bool_t;
}
extern "C" {
    pub fn pjsua_acc_set_default(acc_id: pjsua_acc_id) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_acc_get_default() -> pjsua_acc_id;
}
extern "C" {
    pub fn pjsua_acc_add(
        acc_cfg: *const pjsua_acc_config,
        is_default: pj_bool_t,
        p_acc_id: *mut pjsua_acc_id,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_acc_add_local(
        tid: pjsua_transport_id,
        is_default: pj_bool_t,
        p_acc_id: *mut pjsua_acc_id,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_acc_set_user_data(
        acc_id: pjsua_acc_id,
        user_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_acc_get_user_data(acc_id: pjsua_acc_id) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pjsua_acc_del(acc_id: pjsua_acc_id) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_acc_get_config(
        acc_id: pjsua_acc_id,
        pool: *mut pj_pool_t,
        acc_cfg: *mut pjsua_acc_config,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_acc_modify(acc_id: pjsua_acc_id, acc_cfg: *const pjsua_acc_config) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_acc_set_online_status(acc_id: pjsua_acc_id, is_online: pj_bool_t) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_acc_set_online_status2(
        acc_id: pjsua_acc_id,
        is_online: pj_bool_t,
        pr: *const pjrpid_element,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_acc_set_registration(acc_id: pjsua_acc_id, renew: pj_bool_t) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_acc_get_info(acc_id: pjsua_acc_id, info: *mut pjsua_acc_info) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_enum_accs(
        ids: *mut pjsua_acc_id,
        count: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_acc_enum_info(
        info: *mut pjsua_acc_info,
        count: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_acc_find_for_outgoing(url: *const pj_str_t) -> pjsua_acc_id;
}
extern "C" {
    pub fn pjsua_acc_find_for_incoming(rdata: *mut pjsip_rx_data) -> pjsua_acc_id;
}
extern "C" {
    pub fn pjsua_acc_create_request(
        acc_id: pjsua_acc_id,
        method: *const pjsip_method,
        target: *const pj_str_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_acc_create_uac_contact(
        pool: *mut pj_pool_t,
        contact: *mut pj_str_t,
        acc_id: pjsua_acc_id,
        uri: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_acc_create_uas_contact(
        pool: *mut pj_pool_t,
        contact: *mut pj_str_t,
        acc_id: pjsua_acc_id,
        rdata: *mut pjsip_rx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_acc_set_transport(acc_id: pjsua_acc_id, tp_id: pjsua_transport_id) -> pj_status_t;
}
pub type pjsua_vid_win_id = ::std::os::raw::c_int;
pub const pjsua_call_media_status_PJSUA_CALL_MEDIA_NONE: pjsua_call_media_status = 0;
pub const pjsua_call_media_status_PJSUA_CALL_MEDIA_ACTIVE: pjsua_call_media_status = 1;
pub const pjsua_call_media_status_PJSUA_CALL_MEDIA_LOCAL_HOLD: pjsua_call_media_status = 2;
pub const pjsua_call_media_status_PJSUA_CALL_MEDIA_REMOTE_HOLD: pjsua_call_media_status = 3;
pub const pjsua_call_media_status_PJSUA_CALL_MEDIA_ERROR: pjsua_call_media_status = 4;
pub type pjsua_call_media_status = ::std::os::raw::c_uint;
pub const pjsua_vid_req_keyframe_method_PJSUA_VID_REQ_KEYFRAME_SIP_INFO:
    pjsua_vid_req_keyframe_method = 1;
pub const pjsua_vid_req_keyframe_method_PJSUA_VID_REQ_KEYFRAME_RTCP_PLI:
    pjsua_vid_req_keyframe_method = 2;
pub type pjsua_vid_req_keyframe_method = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsua_call_media_info {
    pub index: ::std::os::raw::c_uint,
    pub type_: pjmedia_type,
    pub dir: pjmedia_dir,
    pub status: pjsua_call_media_status,
    pub stream: pjsua_call_media_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjsua_call_media_info__bindgen_ty_1 {
    pub aud: pjsua_call_media_info__bindgen_ty_1__bindgen_ty_1,
    pub vid: pjsua_call_media_info__bindgen_ty_1__bindgen_ty_2,
    _bindgen_union_align: [u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_call_media_info__bindgen_ty_1__bindgen_ty_1 {
    pub conf_slot: pjsua_conf_port_id,
}
#[test]
fn bindgen_test_layout_pjsua_call_media_info__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_call_media_info__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(pjsua_call_media_info__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_call_media_info__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjsua_call_media_info__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_media_info__bindgen_ty_1__bindgen_ty_1>())).conf_slot
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_media_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(conf_slot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_call_media_info__bindgen_ty_1__bindgen_ty_2 {
    pub win_in: pjsua_vid_win_id,
    pub dec_slot: pjsua_conf_port_id,
    pub enc_slot: pjsua_conf_port_id,
    pub cap_dev: pjmedia_vid_dev_index,
}
#[test]
fn bindgen_test_layout_pjsua_call_media_info__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_call_media_info__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(pjsua_call_media_info__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_call_media_info__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjsua_call_media_info__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_media_info__bindgen_ty_1__bindgen_ty_2>())).win_in
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_media_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(win_in)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_media_info__bindgen_ty_1__bindgen_ty_2>())).dec_slot
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_media_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(dec_slot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_media_info__bindgen_ty_1__bindgen_ty_2>())).enc_slot
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_media_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(enc_slot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_media_info__bindgen_ty_1__bindgen_ty_2>())).cap_dev
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_media_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(cap_dev)
        )
    );
}
#[test]
fn bindgen_test_layout_pjsua_call_media_info__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_call_media_info__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(pjsua_call_media_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_call_media_info__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pjsua_call_media_info__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_media_info__bindgen_ty_1>())).aud as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_media_info__bindgen_ty_1),
            "::",
            stringify!(aud)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_media_info__bindgen_ty_1>())).vid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_media_info__bindgen_ty_1),
            "::",
            stringify!(vid)
        )
    );
}
#[test]
fn bindgen_test_layout_pjsua_call_media_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_call_media_info>(),
        32usize,
        concat!("Size of: ", stringify!(pjsua_call_media_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_call_media_info>(),
        4usize,
        concat!("Alignment of ", stringify!(pjsua_call_media_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_media_info>())).index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_media_info),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_media_info>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_media_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_media_info>())).dir as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_media_info),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_media_info>())).status as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_media_info),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_media_info>())).stream as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_media_info),
            "::",
            stringify!(stream)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsua_call_info {
    pub id: pjsua_call_id,
    pub role: pjsip_role_e,
    pub acc_id: pjsua_acc_id,
    pub local_info: pj_str_t,
    pub local_contact: pj_str_t,
    pub remote_info: pj_str_t,
    pub remote_contact: pj_str_t,
    pub call_id: pj_str_t,
    pub setting: pjsua_call_setting,
    pub state: pjsip_inv_state,
    pub state_text: pj_str_t,
    pub last_status: pjsip_status_code,
    pub last_status_text: pj_str_t,
    pub media_status: pjsua_call_media_status,
    pub media_dir: pjmedia_dir,
    pub conf_slot: pjsua_conf_port_id,
    pub media_cnt: ::std::os::raw::c_uint,
    pub media: [pjsua_call_media_info; 16usize],
    pub prov_media_cnt: ::std::os::raw::c_uint,
    pub prov_media: [pjsua_call_media_info; 16usize],
    pub connect_duration: pj_time_val,
    pub total_duration: pj_time_val,
    pub rem_offerer: pj_bool_t,
    pub rem_aud_cnt: ::std::os::raw::c_uint,
    pub rem_vid_cnt: ::std::os::raw::c_uint,
    pub buf_: pjsua_call_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsua_call_info__bindgen_ty_1 {
    pub local_info: [::std::os::raw::c_char; 256usize],
    pub local_contact: [::std::os::raw::c_char; 256usize],
    pub remote_info: [::std::os::raw::c_char; 256usize],
    pub remote_contact: [::std::os::raw::c_char; 256usize],
    pub call_id: [::std::os::raw::c_char; 128usize],
    pub last_status_text: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_pjsua_call_info__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_call_info__bindgen_ty_1>(),
        1280usize,
        concat!("Size of: ", stringify!(pjsua_call_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_call_info__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(pjsua_call_info__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_info__bindgen_ty_1>())).local_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info__bindgen_ty_1),
            "::",
            stringify!(local_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_info__bindgen_ty_1>())).local_contact as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info__bindgen_ty_1),
            "::",
            stringify!(local_contact)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_info__bindgen_ty_1>())).remote_info as *const _
                as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info__bindgen_ty_1),
            "::",
            stringify!(remote_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_info__bindgen_ty_1>())).remote_contact as *const _
                as usize
        },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info__bindgen_ty_1),
            "::",
            stringify!(remote_contact)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_info__bindgen_ty_1>())).call_id as *const _ as usize
        },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info__bindgen_ty_1),
            "::",
            stringify!(call_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_info__bindgen_ty_1>())).last_status_text as *const _
                as usize
        },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info__bindgen_ty_1),
            "::",
            stringify!(last_status_text)
        )
    );
}
#[test]
fn bindgen_test_layout_pjsua_call_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_call_info>(),
        2536usize,
        concat!("Size of: ", stringify!(pjsua_call_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_call_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_call_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).role as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(role)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).acc_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(acc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).local_info as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(local_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).local_contact as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(local_contact)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).remote_info as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(remote_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).remote_contact as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(remote_contact)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).call_id as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(call_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).setting as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(setting)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).state as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).state_text as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(state_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).last_status as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(last_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_info>())).last_status_text as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(last_status_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).media_status as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(media_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).media_dir as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(media_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).conf_slot as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(conf_slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).media_cnt as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(media_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).media as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(media)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).prov_media_cnt as *const _ as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(prov_media_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).prov_media as *const _ as usize },
        692usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(prov_media)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_info>())).connect_duration as *const _ as usize
        },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(connect_duration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).total_duration as *const _ as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(total_duration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).rem_offerer as *const _ as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(rem_offerer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).rem_aud_cnt as *const _ as usize },
        1244usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(rem_aud_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).rem_vid_cnt as *const _ as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(rem_vid_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_call_info>())).buf_ as *const _ as usize },
        1252usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_info),
            "::",
            stringify!(buf_)
        )
    );
}
pub const pjsua_call_flag_PJSUA_CALL_UNHOLD: pjsua_call_flag = 1;
pub const pjsua_call_flag_PJSUA_CALL_UPDATE_CONTACT: pjsua_call_flag = 2;
pub const pjsua_call_flag_PJSUA_CALL_INCLUDE_DISABLED_MEDIA: pjsua_call_flag = 4;
pub const pjsua_call_flag_PJSUA_CALL_NO_SDP_OFFER: pjsua_call_flag = 8;
pub const pjsua_call_flag_PJSUA_CALL_REINIT_MEDIA: pjsua_call_flag = 16;
pub const pjsua_call_flag_PJSUA_CALL_UPDATE_VIA: pjsua_call_flag = 32;
pub const pjsua_call_flag_PJSUA_CALL_UPDATE_TARGET: pjsua_call_flag = 64;
pub type pjsua_call_flag = ::std::os::raw::c_uint;
pub const pjsua_call_vid_strm_op_PJSUA_CALL_VID_STRM_NO_OP: pjsua_call_vid_strm_op = 0;
pub const pjsua_call_vid_strm_op_PJSUA_CALL_VID_STRM_ADD: pjsua_call_vid_strm_op = 1;
pub const pjsua_call_vid_strm_op_PJSUA_CALL_VID_STRM_REMOVE: pjsua_call_vid_strm_op = 2;
pub const pjsua_call_vid_strm_op_PJSUA_CALL_VID_STRM_CHANGE_DIR: pjsua_call_vid_strm_op = 3;
pub const pjsua_call_vid_strm_op_PJSUA_CALL_VID_STRM_CHANGE_CAP_DEV: pjsua_call_vid_strm_op = 4;
pub const pjsua_call_vid_strm_op_PJSUA_CALL_VID_STRM_START_TRANSMIT: pjsua_call_vid_strm_op = 5;
pub const pjsua_call_vid_strm_op_PJSUA_CALL_VID_STRM_STOP_TRANSMIT: pjsua_call_vid_strm_op = 6;
pub const pjsua_call_vid_strm_op_PJSUA_CALL_VID_STRM_SEND_KEYFRAME: pjsua_call_vid_strm_op = 7;
pub type pjsua_call_vid_strm_op = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_call_vid_strm_op_param {
    pub med_idx: ::std::os::raw::c_int,
    pub dir: pjmedia_dir,
    pub cap_dev: pjmedia_vid_dev_index,
}
#[test]
fn bindgen_test_layout_pjsua_call_vid_strm_op_param() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_call_vid_strm_op_param>(),
        12usize,
        concat!("Size of: ", stringify!(pjsua_call_vid_strm_op_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_call_vid_strm_op_param>(),
        4usize,
        concat!("Alignment of ", stringify!(pjsua_call_vid_strm_op_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_vid_strm_op_param>())).med_idx as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_vid_strm_op_param),
            "::",
            stringify!(med_idx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_vid_strm_op_param>())).dir as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_vid_strm_op_param),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_vid_strm_op_param>())).cap_dev as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_vid_strm_op_param),
            "::",
            stringify!(cap_dev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_call_send_dtmf_param {
    pub method: pjsua_dtmf_method,
    pub duration: ::std::os::raw::c_uint,
    pub digits: pj_str_t,
}
#[test]
fn bindgen_test_layout_pjsua_call_send_dtmf_param() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_call_send_dtmf_param>(),
        24usize,
        concat!("Size of: ", stringify!(pjsua_call_send_dtmf_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_call_send_dtmf_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_call_send_dtmf_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_send_dtmf_param>())).method as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_send_dtmf_param),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_send_dtmf_param>())).duration as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_send_dtmf_param),
            "::",
            stringify!(duration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_call_send_dtmf_param>())).digits as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_call_send_dtmf_param),
            "::",
            stringify!(digits)
        )
    );
}
extern "C" {
    pub fn pjsua_call_setting_default(opt: *mut pjsua_call_setting);
}
extern "C" {
    pub fn pjsua_call_vid_strm_op_param_default(param: *mut pjsua_call_vid_strm_op_param);
}
extern "C" {
    pub fn pjsua_call_send_dtmf_param_default(param: *mut pjsua_call_send_dtmf_param);
}
extern "C" {
    pub fn pjsua_call_get_max_count() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjsua_call_get_count() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjsua_enum_calls(
        ids: *mut pjsua_call_id,
        count: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_make_call(
        acc_id: pjsua_acc_id,
        dst_uri: *const pj_str_t,
        opt: *const pjsua_call_setting,
        user_data: *mut ::std::os::raw::c_void,
        msg_data: *const pjsua_msg_data,
        p_call_id: *mut pjsua_call_id,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_is_active(call_id: pjsua_call_id) -> pj_bool_t;
}
extern "C" {
    pub fn pjsua_call_has_media(call_id: pjsua_call_id) -> pj_bool_t;
}
extern "C" {
    pub fn pjsua_call_get_conf_port(call_id: pjsua_call_id) -> pjsua_conf_port_id;
}
extern "C" {
    pub fn pjsua_call_get_vid_win(call_id: pjsua_call_id) -> pjsua_vid_win_id;
}
extern "C" {
    pub fn pjsua_call_get_vid_conf_port(
        call_id: pjsua_call_id,
        dir: pjmedia_dir,
    ) -> pjsua_conf_port_id;
}
extern "C" {
    pub fn pjsua_call_get_info(call_id: pjsua_call_id, info: *mut pjsua_call_info) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_remote_has_cap(
        call_id: pjsua_call_id,
        htype: ::std::os::raw::c_int,
        hname: *const pj_str_t,
        token: *const pj_str_t,
    ) -> pjsip_dialog_cap_status;
}
extern "C" {
    pub fn pjsua_call_set_user_data(
        call_id: pjsua_call_id,
        user_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_get_user_data(call_id: pjsua_call_id) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pjsua_call_get_rem_nat_type(
        call_id: pjsua_call_id,
        p_type: *mut pj_stun_nat_type,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_answer(
        call_id: pjsua_call_id,
        code: ::std::os::raw::c_uint,
        reason: *const pj_str_t,
        msg_data: *const pjsua_msg_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_answer2(
        call_id: pjsua_call_id,
        opt: *const pjsua_call_setting,
        code: ::std::os::raw::c_uint,
        reason: *const pj_str_t,
        msg_data: *const pjsua_msg_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_answer_with_sdp(
        call_id: pjsua_call_id,
        sdp: *const pjmedia_sdp_session,
        opt: *const pjsua_call_setting,
        code: ::std::os::raw::c_uint,
        reason: *const pj_str_t,
        msg_data: *const pjsua_msg_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_hangup(
        call_id: pjsua_call_id,
        code: ::std::os::raw::c_uint,
        reason: *const pj_str_t,
        msg_data: *const pjsua_msg_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_process_redirect(
        call_id: pjsua_call_id,
        cmd: pjsip_redirect_op,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_set_hold(
        call_id: pjsua_call_id,
        msg_data: *const pjsua_msg_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_set_hold2(
        call_id: pjsua_call_id,
        options: ::std::os::raw::c_uint,
        msg_data: *const pjsua_msg_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_reinvite(
        call_id: pjsua_call_id,
        options: ::std::os::raw::c_uint,
        msg_data: *const pjsua_msg_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_reinvite2(
        call_id: pjsua_call_id,
        opt: *const pjsua_call_setting,
        msg_data: *const pjsua_msg_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_update(
        call_id: pjsua_call_id,
        options: ::std::os::raw::c_uint,
        msg_data: *const pjsua_msg_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_update2(
        call_id: pjsua_call_id,
        opt: *const pjsua_call_setting,
        msg_data: *const pjsua_msg_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_xfer(
        call_id: pjsua_call_id,
        dest: *const pj_str_t,
        msg_data: *const pjsua_msg_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_xfer_replaces(
        call_id: pjsua_call_id,
        dest_call_id: pjsua_call_id,
        options: ::std::os::raw::c_uint,
        msg_data: *const pjsua_msg_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_dial_dtmf(call_id: pjsua_call_id, digits: *const pj_str_t) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_send_dtmf(
        call_id: pjsua_call_id,
        param: *const pjsua_call_send_dtmf_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_send_im(
        call_id: pjsua_call_id,
        mime_type: *const pj_str_t,
        content: *const pj_str_t,
        msg_data: *const pjsua_msg_data,
        user_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_send_typing_ind(
        call_id: pjsua_call_id,
        is_typing: pj_bool_t,
        msg_data: *const pjsua_msg_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_send_request(
        call_id: pjsua_call_id,
        method: *const pj_str_t,
        msg_data: *const pjsua_msg_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_hangup_all();
}
extern "C" {
    pub fn pjsua_call_dump(
        call_id: pjsua_call_id,
        with_media: pj_bool_t,
        buffer: *mut ::std::os::raw::c_char,
        maxlen: ::std::os::raw::c_uint,
        indent: *const ::std::os::raw::c_char,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_get_vid_stream_idx(call_id: pjsua_call_id) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pjsua_call_vid_stream_is_running(
        call_id: pjsua_call_id,
        med_idx: ::std::os::raw::c_int,
        dir: pjmedia_dir,
    ) -> pj_bool_t;
}
extern "C" {
    pub fn pjsua_call_set_vid_strm(
        call_id: pjsua_call_id,
        op: pjsua_call_vid_strm_op,
        param: *const pjsua_call_vid_strm_op_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_get_stream_info(
        call_id: pjsua_call_id,
        med_idx: ::std::os::raw::c_uint,
        psi: *mut pjsua_stream_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_get_stream_stat(
        call_id: pjsua_call_id,
        med_idx: ::std::os::raw::c_uint,
        stat: *mut pjsua_stream_stat,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_call_get_med_transport_info(
        call_id: pjsua_call_id,
        med_idx: ::std::os::raw::c_uint,
        t: *mut pjmedia_transport_info,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_buddy_config {
    pub uri: pj_str_t,
    pub subscribe: pj_bool_t,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pjsua_buddy_config() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_buddy_config>(),
        32usize,
        concat!("Size of: ", stringify!(pjsua_buddy_config))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_buddy_config>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_buddy_config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_buddy_config>())).uri as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_buddy_config),
            "::",
            stringify!(uri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_buddy_config>())).subscribe as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_buddy_config),
            "::",
            stringify!(subscribe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_buddy_config>())).user_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_buddy_config),
            "::",
            stringify!(user_data)
        )
    );
}
pub const pjsua_buddy_status_PJSUA_BUDDY_STATUS_UNKNOWN: pjsua_buddy_status = 0;
pub const pjsua_buddy_status_PJSUA_BUDDY_STATUS_ONLINE: pjsua_buddy_status = 1;
pub const pjsua_buddy_status_PJSUA_BUDDY_STATUS_OFFLINE: pjsua_buddy_status = 2;
pub type pjsua_buddy_status = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsua_buddy_info {
    pub id: pjsua_buddy_id,
    pub uri: pj_str_t,
    pub contact: pj_str_t,
    pub status: pjsua_buddy_status,
    pub status_text: pj_str_t,
    pub monitor_pres: pj_bool_t,
    pub sub_state: pjsip_evsub_state,
    pub sub_state_name: *const ::std::os::raw::c_char,
    pub sub_term_code: ::std::os::raw::c_uint,
    pub sub_term_reason: pj_str_t,
    pub rpid: pjrpid_element,
    pub pres_status: pjsip_pres_status,
    pub buf_: [::std::os::raw::c_char; 512usize],
}
#[test]
fn bindgen_test_layout_pjsua_buddy_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_buddy_info>(),
        1448usize,
        concat!("Size of: ", stringify!(pjsua_buddy_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_buddy_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_buddy_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_buddy_info>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_buddy_info),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_buddy_info>())).uri as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_buddy_info),
            "::",
            stringify!(uri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_buddy_info>())).contact as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_buddy_info),
            "::",
            stringify!(contact)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_buddy_info>())).status as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_buddy_info),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_buddy_info>())).status_text as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_buddy_info),
            "::",
            stringify!(status_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_buddy_info>())).monitor_pres as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_buddy_info),
            "::",
            stringify!(monitor_pres)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_buddy_info>())).sub_state as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_buddy_info),
            "::",
            stringify!(sub_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_buddy_info>())).sub_state_name as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_buddy_info),
            "::",
            stringify!(sub_state_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_buddy_info>())).sub_term_code as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_buddy_info),
            "::",
            stringify!(sub_term_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_buddy_info>())).sub_term_reason as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_buddy_info),
            "::",
            stringify!(sub_term_reason)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_buddy_info>())).rpid as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_buddy_info),
            "::",
            stringify!(rpid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_buddy_info>())).pres_status as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_buddy_info),
            "::",
            stringify!(pres_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_buddy_info>())).buf_ as *const _ as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_buddy_info),
            "::",
            stringify!(buf_)
        )
    );
}
extern "C" {
    pub fn pjsua_buddy_config_default(cfg: *mut pjsua_buddy_config);
}
extern "C" {
    pub fn pjsua_get_buddy_count() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjsua_buddy_is_valid(buddy_id: pjsua_buddy_id) -> pj_bool_t;
}
extern "C" {
    pub fn pjsua_enum_buddies(
        ids: *mut pjsua_buddy_id,
        count: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_buddy_find(uri: *const pj_str_t) -> pjsua_buddy_id;
}
extern "C" {
    pub fn pjsua_buddy_get_info(
        buddy_id: pjsua_buddy_id,
        info: *mut pjsua_buddy_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_buddy_set_user_data(
        buddy_id: pjsua_buddy_id,
        user_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_buddy_get_user_data(buddy_id: pjsua_buddy_id) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pjsua_buddy_add(
        buddy_cfg: *const pjsua_buddy_config,
        p_buddy_id: *mut pjsua_buddy_id,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_buddy_del(buddy_id: pjsua_buddy_id) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_buddy_subscribe_pres(
        buddy_id: pjsua_buddy_id,
        subscribe: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_buddy_update_pres(buddy_id: pjsua_buddy_id) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_pres_notify(
        acc_id: pjsua_acc_id,
        srv_pres: *mut pjsua_srv_pres,
        state: pjsip_evsub_state,
        state_str: *const pj_str_t,
        reason: *const pj_str_t,
        with_body: pj_bool_t,
        msg_data: *const pjsua_msg_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_pres_dump(verbose: pj_bool_t);
}
extern "C" {
    pub static pjsip_message_method: pjsip_method;
}
extern "C" {
    pub static pjsip_info_method: pjsip_method;
}
extern "C" {
    pub fn pjsua_im_send(
        acc_id: pjsua_acc_id,
        to: *const pj_str_t,
        mime_type: *const pj_str_t,
        content: *const pj_str_t,
        msg_data: *const pjsua_msg_data,
        user_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_im_typing(
        acc_id: pjsua_acc_id,
        to: *const pj_str_t,
        is_typing: pj_bool_t,
        msg_data: *const pjsua_msg_data,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsua_media_config {
    pub clock_rate: ::std::os::raw::c_uint,
    pub snd_clock_rate: ::std::os::raw::c_uint,
    pub channel_count: ::std::os::raw::c_uint,
    pub audio_frame_ptime: ::std::os::raw::c_uint,
    pub max_media_ports: ::std::os::raw::c_uint,
    pub has_ioqueue: pj_bool_t,
    pub thread_cnt: ::std::os::raw::c_uint,
    pub quality: ::std::os::raw::c_uint,
    pub ptime: ::std::os::raw::c_uint,
    pub no_vad: pj_bool_t,
    pub ilbc_mode: ::std::os::raw::c_uint,
    pub tx_drop_pct: ::std::os::raw::c_uint,
    pub rx_drop_pct: ::std::os::raw::c_uint,
    pub ec_options: ::std::os::raw::c_uint,
    pub ec_tail_len: ::std::os::raw::c_uint,
    pub snd_rec_latency: ::std::os::raw::c_uint,
    pub snd_play_latency: ::std::os::raw::c_uint,
    pub jb_init: ::std::os::raw::c_int,
    pub jb_min_pre: ::std::os::raw::c_int,
    pub jb_max_pre: ::std::os::raw::c_int,
    pub jb_max: ::std::os::raw::c_int,
    pub jb_discard_algo: pjmedia_jb_discard_algo,
    pub enable_ice: pj_bool_t,
    pub ice_max_host_cands: ::std::os::raw::c_int,
    pub ice_opt: pj_ice_sess_options,
    pub ice_no_rtcp: pj_bool_t,
    pub ice_always_update: pj_bool_t,
    pub enable_turn: pj_bool_t,
    pub turn_server: pj_str_t,
    pub turn_conn_type: pj_turn_tp_type,
    pub turn_auth_cred: pj_stun_auth_cred,
    pub turn_tls_setting: pj_turn_sock_tls_cfg,
    pub snd_auto_close_time: ::std::os::raw::c_int,
    pub vid_preview_enable_native: pj_bool_t,
    pub no_smart_media_update: pj_bool_t,
    pub no_rtcp_sdes_bye: pj_bool_t,
    pub on_aud_prev_play_frame:
        ::std::option::Option<unsafe extern "C" fn(frame: *mut pjmedia_frame)>,
    pub on_aud_prev_rec_frame:
        ::std::option::Option<unsafe extern "C" fn(frame: *mut pjmedia_frame)>,
}
#[test]
fn bindgen_test_layout_pjsua_media_config() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_media_config>(),
        760usize,
        concat!("Size of: ", stringify!(pjsua_media_config))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_media_config>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_media_config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).clock_rate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_media_config>())).snd_clock_rate as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(snd_clock_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_media_config>())).channel_count as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(channel_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_media_config>())).audio_frame_ptime as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(audio_frame_ptime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_media_config>())).max_media_ports as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(max_media_ports)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).has_ioqueue as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(has_ioqueue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).thread_cnt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(thread_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).quality as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(quality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).ptime as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(ptime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).no_vad as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(no_vad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).ilbc_mode as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(ilbc_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).tx_drop_pct as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(tx_drop_pct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).rx_drop_pct as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(rx_drop_pct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).ec_options as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(ec_options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).ec_tail_len as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(ec_tail_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_media_config>())).snd_rec_latency as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(snd_rec_latency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_media_config>())).snd_play_latency as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(snd_play_latency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).jb_init as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(jb_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).jb_min_pre as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(jb_min_pre)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).jb_max_pre as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(jb_max_pre)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).jb_max as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(jb_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_media_config>())).jb_discard_algo as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(jb_discard_algo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).enable_ice as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(enable_ice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_media_config>())).ice_max_host_cands as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(ice_max_host_cands)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).ice_opt as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(ice_opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).ice_no_rtcp as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(ice_no_rtcp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_media_config>())).ice_always_update as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(ice_always_update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).enable_turn as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(enable_turn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_config>())).turn_server as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(turn_server)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_media_config>())).turn_conn_type as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(turn_conn_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_media_config>())).turn_auth_cred as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(turn_auth_cred)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_media_config>())).turn_tls_setting as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(turn_tls_setting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_media_config>())).snd_auto_close_time as *const _ as usize
        },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(snd_auto_close_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_media_config>())).vid_preview_enable_native as *const _
                as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(vid_preview_enable_native)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_media_config>())).no_smart_media_update as *const _
                as usize
        },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(no_smart_media_update)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_media_config>())).no_rtcp_sdes_bye as *const _ as usize
        },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(no_rtcp_sdes_bye)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_media_config>())).on_aud_prev_play_frame as *const _
                as usize
        },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(on_aud_prev_play_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_media_config>())).on_aud_prev_rec_frame as *const _
                as usize
        },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_config),
            "::",
            stringify!(on_aud_prev_rec_frame)
        )
    );
}
extern "C" {
    pub fn pjsua_media_config_default(cfg: *mut pjsua_media_config);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsua_codec_info {
    pub codec_id: pj_str_t,
    pub priority: pj_uint8_t,
    pub desc: pj_str_t,
    pub buf_: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_pjsua_codec_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_codec_info>(),
        104usize,
        concat!("Size of: ", stringify!(pjsua_codec_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_codec_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_codec_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_codec_info>())).codec_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_codec_info),
            "::",
            stringify!(codec_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_codec_info>())).priority as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_codec_info),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_codec_info>())).desc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_codec_info),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_codec_info>())).buf_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_codec_info),
            "::",
            stringify!(buf_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsua_conf_port_info {
    pub slot_id: pjsua_conf_port_id,
    pub name: pj_str_t,
    pub format: pjmedia_format,
    pub clock_rate: ::std::os::raw::c_uint,
    pub channel_count: ::std::os::raw::c_uint,
    pub samples_per_frame: ::std::os::raw::c_uint,
    pub bits_per_sample: ::std::os::raw::c_uint,
    pub tx_level_adj: f32,
    pub rx_level_adj: f32,
    pub listener_cnt: ::std::os::raw::c_uint,
    pub listeners: [pjsua_conf_port_id; 254usize],
}
#[test]
fn bindgen_test_layout_pjsua_conf_port_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_conf_port_info>(),
        1104usize,
        concat!("Size of: ", stringify!(pjsua_conf_port_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_conf_port_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_conf_port_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_conf_port_info>())).slot_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_conf_port_info),
            "::",
            stringify!(slot_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_conf_port_info>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_conf_port_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_conf_port_info>())).format as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_conf_port_info),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_conf_port_info>())).clock_rate as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_conf_port_info),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_conf_port_info>())).channel_count as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_conf_port_info),
            "::",
            stringify!(channel_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_conf_port_info>())).samples_per_frame as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_conf_port_info),
            "::",
            stringify!(samples_per_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_conf_port_info>())).bits_per_sample as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_conf_port_info),
            "::",
            stringify!(bits_per_sample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_conf_port_info>())).tx_level_adj as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_conf_port_info),
            "::",
            stringify!(tx_level_adj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_conf_port_info>())).rx_level_adj as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_conf_port_info),
            "::",
            stringify!(rx_level_adj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_conf_port_info>())).listener_cnt as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_conf_port_info),
            "::",
            stringify!(listener_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_conf_port_info>())).listeners as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_conf_port_info),
            "::",
            stringify!(listeners)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsua_media_transport {
    pub skinfo: pjmedia_sock_info,
    pub transport: *mut pjmedia_transport,
}
#[test]
fn bindgen_test_layout_pjsua_media_transport() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_media_transport>(),
        88usize,
        concat!("Size of: ", stringify!(pjsua_media_transport))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_media_transport>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_media_transport))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_transport>())).skinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_transport),
            "::",
            stringify!(skinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_media_transport>())).transport as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_media_transport),
            "::",
            stringify!(transport)
        )
    );
}
pub const pjsua_snd_dev_id_PJSUA_SND_DEFAULT_CAPTURE_DEV: pjsua_snd_dev_id = -1;
pub const pjsua_snd_dev_id_PJSUA_SND_DEFAULT_PLAYBACK_DEV: pjsua_snd_dev_id = -2;
pub const pjsua_snd_dev_id_PJSUA_SND_NO_DEV: pjsua_snd_dev_id = -3;
pub const pjsua_snd_dev_id_PJSUA_SND_NULL_DEV: pjsua_snd_dev_id = -99;
pub type pjsua_snd_dev_id = ::std::os::raw::c_int;
pub const pjsua_snd_dev_mode_PJSUA_SND_DEV_SPEAKER_ONLY: pjsua_snd_dev_mode = 1;
pub const pjsua_snd_dev_mode_PJSUA_SND_DEV_NO_IMMEDIATE_OPEN: pjsua_snd_dev_mode = 2;
pub type pjsua_snd_dev_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_snd_dev_param {
    pub capture_dev: ::std::os::raw::c_int,
    pub playback_dev: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pjsua_snd_dev_param() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_snd_dev_param>(),
        12usize,
        concat!("Size of: ", stringify!(pjsua_snd_dev_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_snd_dev_param>(),
        4usize,
        concat!("Alignment of ", stringify!(pjsua_snd_dev_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_snd_dev_param>())).capture_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_snd_dev_param),
            "::",
            stringify!(capture_dev)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_snd_dev_param>())).playback_dev as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_snd_dev_param),
            "::",
            stringify!(playback_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_snd_dev_param>())).mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_snd_dev_param),
            "::",
            stringify!(mode)
        )
    );
}
extern "C" {
    pub fn pjsua_snd_dev_param_default(prm: *mut pjsua_snd_dev_param);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_conf_connect_param {
    pub level: f32,
}
#[test]
fn bindgen_test_layout_pjsua_conf_connect_param() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_conf_connect_param>(),
        4usize,
        concat!("Size of: ", stringify!(pjsua_conf_connect_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_conf_connect_param>(),
        4usize,
        concat!("Alignment of ", stringify!(pjsua_conf_connect_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_conf_connect_param>())).level as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_conf_connect_param),
            "::",
            stringify!(level)
        )
    );
}
extern "C" {
    pub fn pjsua_conf_connect_param_default(prm: *mut pjsua_conf_connect_param);
}
extern "C" {
    pub fn pjsua_conf_get_max_ports() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjsua_conf_get_active_ports() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjsua_enum_conf_ports(
        id: *mut pjsua_conf_port_id,
        count: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_conf_get_port_info(
        port_id: pjsua_conf_port_id,
        info: *mut pjsua_conf_port_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_conf_add_port(
        pool: *mut pj_pool_t,
        port: *mut pjmedia_port,
        p_id: *mut pjsua_conf_port_id,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_conf_remove_port(port_id: pjsua_conf_port_id) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_conf_connect(source: pjsua_conf_port_id, sink: pjsua_conf_port_id) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_conf_connect2(
        source: pjsua_conf_port_id,
        sink: pjsua_conf_port_id,
        prm: *const pjsua_conf_connect_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_conf_disconnect(
        source: pjsua_conf_port_id,
        sink: pjsua_conf_port_id,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_conf_adjust_tx_level(slot: pjsua_conf_port_id, level: f32) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_conf_adjust_rx_level(slot: pjsua_conf_port_id, level: f32) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_conf_get_signal_level(
        slot: pjsua_conf_port_id,
        tx_level: *mut ::std::os::raw::c_uint,
        rx_level: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_player_create(
        filename: *const pj_str_t,
        options: ::std::os::raw::c_uint,
        p_id: *mut pjsua_player_id,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_playlist_create(
        file_names: *const pj_str_t,
        file_count: ::std::os::raw::c_uint,
        label: *const pj_str_t,
        options: ::std::os::raw::c_uint,
        p_id: *mut pjsua_player_id,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_player_get_conf_port(id: pjsua_player_id) -> pjsua_conf_port_id;
}
extern "C" {
    pub fn pjsua_player_get_port(
        id: pjsua_player_id,
        p_port: *mut *mut pjmedia_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_player_get_info(
        id: pjsua_player_id,
        info: *mut pjmedia_wav_player_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_player_get_pos(id: pjsua_player_id) -> pj_ssize_t;
}
extern "C" {
    pub fn pjsua_player_set_pos(id: pjsua_player_id, samples: pj_uint32_t) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_player_destroy(id: pjsua_player_id) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_recorder_create(
        filename: *const pj_str_t,
        enc_type: ::std::os::raw::c_uint,
        enc_param: *mut ::std::os::raw::c_void,
        max_size: pj_ssize_t,
        options: ::std::os::raw::c_uint,
        p_id: *mut pjsua_recorder_id,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_recorder_get_conf_port(id: pjsua_recorder_id) -> pjsua_conf_port_id;
}
extern "C" {
    pub fn pjsua_recorder_get_port(
        id: pjsua_recorder_id,
        p_port: *mut *mut pjmedia_port,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_recorder_destroy(id: pjsua_recorder_id) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_enum_aud_devs(
        info: *mut pjmedia_aud_dev_info,
        count: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_enum_snd_devs(
        info: *mut pjmedia_snd_dev_info,
        count: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_get_snd_dev(
        capture_dev: *mut ::std::os::raw::c_int,
        playback_dev: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_set_snd_dev(
        capture_dev: ::std::os::raw::c_int,
        playback_dev: ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_set_snd_dev2(snd_param: *mut pjsua_snd_dev_param) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_set_null_snd_dev() -> pj_status_t;
}
extern "C" {
    pub fn pjsua_set_no_snd_dev() -> *mut pjmedia_port;
}
extern "C" {
    pub fn pjsua_set_ec(
        tail_ms: ::std::os::raw::c_uint,
        options: ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_get_ec_tail(p_tail_ms: *mut ::std::os::raw::c_uint) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_get_ec_stat(p_stat: *mut pjmedia_echo_stat) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_snd_is_active() -> pj_bool_t;
}
extern "C" {
    pub fn pjsua_snd_set_setting(
        cap: pjmedia_aud_dev_cap,
        pval: *const ::std::os::raw::c_void,
        keep: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_snd_get_setting(
        cap: pjmedia_aud_dev_cap,
        pval: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsua_ext_snd_dev {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pjsua_ext_snd_dev_create(
        param: *mut pjmedia_snd_port_param,
        p_snd: *mut *mut pjsua_ext_snd_dev,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_ext_snd_dev_destroy(snd: *mut pjsua_ext_snd_dev) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_ext_snd_dev_get_snd_port(snd: *mut pjsua_ext_snd_dev) -> *mut pjmedia_snd_port;
}
extern "C" {
    pub fn pjsua_ext_snd_dev_get_conf_port(snd: *mut pjsua_ext_snd_dev) -> pjsua_conf_port_id;
}
extern "C" {
    pub fn pjsua_enum_codecs(
        id: *mut pjsua_codec_info,
        count: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_codec_set_priority(codec_id: *const pj_str_t, priority: pj_uint8_t)
        -> pj_status_t;
}
extern "C" {
    pub fn pjsua_codec_get_param(
        codec_id: *const pj_str_t,
        param: *mut pjmedia_codec_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_codec_set_param(
        codec_id: *const pj_str_t,
        param: *const pjmedia_codec_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_dev_count() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjsua_vid_dev_get_info(
        id: pjmedia_vid_dev_index,
        vdi: *mut pjmedia_vid_dev_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_dev_is_active(id: pjmedia_vid_dev_index) -> pj_bool_t;
}
extern "C" {
    pub fn pjsua_vid_dev_set_setting(
        id: pjmedia_vid_dev_index,
        cap: pjmedia_vid_dev_cap,
        pval: *const ::std::os::raw::c_void,
        keep: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_dev_get_setting(
        id: pjmedia_vid_dev_index,
        cap: pjmedia_vid_dev_cap,
        pval: *mut ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_enum_devs(
        info: *mut pjmedia_vid_dev_info,
        count: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsua_vid_preview_param {
    pub rend_id: pjmedia_vid_dev_index,
    pub show: pj_bool_t,
    pub wnd_flags: ::std::os::raw::c_uint,
    pub format: pjmedia_format,
    pub wnd: pjmedia_vid_dev_hwnd,
}
#[test]
fn bindgen_test_layout_pjsua_vid_preview_param() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_vid_preview_param>(),
        72usize,
        concat!("Size of: ", stringify!(pjsua_vid_preview_param))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_vid_preview_param>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_vid_preview_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_vid_preview_param>())).rend_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_vid_preview_param),
            "::",
            stringify!(rend_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_vid_preview_param>())).show as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_vid_preview_param),
            "::",
            stringify!(show)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_vid_preview_param>())).wnd_flags as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_vid_preview_param),
            "::",
            stringify!(wnd_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_vid_preview_param>())).format as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_vid_preview_param),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_vid_preview_param>())).wnd as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_vid_preview_param),
            "::",
            stringify!(wnd)
        )
    );
}
extern "C" {
    pub fn pjsua_vid_preview_param_default(p: *mut pjsua_vid_preview_param);
}
extern "C" {
    pub fn pjsua_vid_preview_has_native(id: pjmedia_vid_dev_index) -> pj_bool_t;
}
extern "C" {
    pub fn pjsua_vid_preview_start(
        id: pjmedia_vid_dev_index,
        p: *const pjsua_vid_preview_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_preview_get_win(id: pjmedia_vid_dev_index) -> pjsua_vid_win_id;
}
extern "C" {
    pub fn pjsua_vid_preview_get_vid_conf_port(id: pjmedia_vid_dev_index) -> pjsua_conf_port_id;
}
extern "C" {
    pub fn pjsua_vid_preview_stop(id: pjmedia_vid_dev_index) -> pj_status_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsua_vid_win_info {
    pub is_native: pj_bool_t,
    pub hwnd: pjmedia_vid_dev_hwnd,
    pub rdr_dev: pjmedia_vid_dev_index,
    pub slot_id: pjsua_conf_port_id,
    pub show: pj_bool_t,
    pub pos: pjmedia_coord,
    pub size: pjmedia_rect_size,
}
#[test]
fn bindgen_test_layout_pjsua_vid_win_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_vid_win_info>(),
        64usize,
        concat!("Size of: ", stringify!(pjsua_vid_win_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_vid_win_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_vid_win_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_vid_win_info>())).is_native as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_vid_win_info),
            "::",
            stringify!(is_native)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_vid_win_info>())).hwnd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_vid_win_info),
            "::",
            stringify!(hwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_vid_win_info>())).rdr_dev as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_vid_win_info),
            "::",
            stringify!(rdr_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_vid_win_info>())).slot_id as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_vid_win_info),
            "::",
            stringify!(slot_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_vid_win_info>())).show as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_vid_win_info),
            "::",
            stringify!(show)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_vid_win_info>())).pos as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_vid_win_info),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_vid_win_info>())).size as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_vid_win_info),
            "::",
            stringify!(size)
        )
    );
}
extern "C" {
    pub fn pjsua_vid_enum_wins(
        wids: *mut pjsua_vid_win_id,
        count: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_win_get_info(
        wid: pjsua_vid_win_id,
        wi: *mut pjsua_vid_win_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_win_set_show(wid: pjsua_vid_win_id, show: pj_bool_t) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_win_set_pos(wid: pjsua_vid_win_id, pos: *const pjmedia_coord) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_win_set_size(
        wid: pjsua_vid_win_id,
        size: *const pjmedia_rect_size,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_win_set_win(
        wid: pjsua_vid_win_id,
        win: *const pjmedia_vid_dev_hwnd,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_win_rotate(wid: pjsua_vid_win_id, angle: ::std::os::raw::c_int)
        -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_win_set_fullscreen(wid: pjsua_vid_win_id, enabled: pj_bool_t) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_enum_codecs(
        id: *mut pjsua_codec_info,
        count: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_codec_set_priority(
        codec_id: *const pj_str_t,
        priority: pj_uint8_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_codec_get_param(
        codec_id: *const pj_str_t,
        param: *mut pjmedia_vid_codec_param,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_codec_set_param(
        codec_id: *const pj_str_t,
        param: *const pjmedia_vid_codec_param,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjsua_vid_conf_port_info {
    pub slot_id: pjsua_conf_port_id,
    pub name: pj_str_t,
    pub format: pjmedia_format,
    pub listener_cnt: ::std::os::raw::c_uint,
    pub listeners: [pjsua_conf_port_id; 254usize],
    pub transmitter_cnt: ::std::os::raw::c_uint,
    pub transmitters: [pjsua_conf_port_id; 254usize],
}
#[test]
fn bindgen_test_layout_pjsua_vid_conf_port_info() {
    assert_eq!(
        ::std::mem::size_of::<pjsua_vid_conf_port_info>(),
        2104usize,
        concat!("Size of: ", stringify!(pjsua_vid_conf_port_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pjsua_vid_conf_port_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pjsua_vid_conf_port_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_vid_conf_port_info>())).slot_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_vid_conf_port_info),
            "::",
            stringify!(slot_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_vid_conf_port_info>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_vid_conf_port_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pjsua_vid_conf_port_info>())).format as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_vid_conf_port_info),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_vid_conf_port_info>())).listener_cnt as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_vid_conf_port_info),
            "::",
            stringify!(listener_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_vid_conf_port_info>())).listeners as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_vid_conf_port_info),
            "::",
            stringify!(listeners)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_vid_conf_port_info>())).transmitter_cnt as *const _
                as usize
        },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_vid_conf_port_info),
            "::",
            stringify!(transmitter_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pjsua_vid_conf_port_info>())).transmitters as *const _ as usize
        },
        1084usize,
        concat!(
            "Offset of field: ",
            stringify!(pjsua_vid_conf_port_info),
            "::",
            stringify!(transmitters)
        )
    );
}
extern "C" {
    pub fn pjsua_vid_conf_get_active_ports() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pjsua_vid_conf_enum_ports(
        id: *mut pjsua_conf_port_id,
        count: *mut ::std::os::raw::c_uint,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_conf_get_port_info(
        port_id: pjsua_conf_port_id,
        info: *mut pjsua_vid_conf_port_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_conf_add_port(
        pool: *mut pj_pool_t,
        port: *mut pjmedia_port,
        param: *const ::std::os::raw::c_void,
        p_id: *mut pjsua_conf_port_id,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_conf_remove_port(port_id: pjsua_conf_port_id) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_conf_connect(
        source: pjsua_conf_port_id,
        sink: pjsua_conf_port_id,
        param: *const ::std::os::raw::c_void,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsua_vid_conf_disconnect(
        source: pjsua_conf_port_id,
        sink: pjsua_conf_port_id,
    ) -> pj_status_t;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
