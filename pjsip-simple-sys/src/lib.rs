/* automatically generated by rust-bindgen 0.58.1 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
extern crate pj_sys;
extern crate pjlib_util_sys;
use pj_sys::*;
use pjlib_util_sys::*;

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_tpmgr {
    _unused: [u8; 0],
}
pub const PJSIP_TRANSPORT_UNSPECIFIED: pjsip_transport_type_e = 0;
pub const PJSIP_TRANSPORT_UDP: pjsip_transport_type_e = 1;
pub const PJSIP_TRANSPORT_TCP: pjsip_transport_type_e = 2;
pub const PJSIP_TRANSPORT_TLS: pjsip_transport_type_e = 3;
pub const PJSIP_TRANSPORT_DTLS: pjsip_transport_type_e = 4;
pub const PJSIP_TRANSPORT_SCTP: pjsip_transport_type_e = 5;
pub const PJSIP_TRANSPORT_LOOP: pjsip_transport_type_e = 6;
pub const PJSIP_TRANSPORT_LOOP_DGRAM: pjsip_transport_type_e = 7;
pub const PJSIP_TRANSPORT_START_OTHER: pjsip_transport_type_e = 8;
pub const PJSIP_TRANSPORT_IPV6: pjsip_transport_type_e = 128;
pub const PJSIP_TRANSPORT_UDP6: pjsip_transport_type_e = 129;
pub const PJSIP_TRANSPORT_TCP6: pjsip_transport_type_e = 130;
pub const PJSIP_TRANSPORT_TLS6: pjsip_transport_type_e = 131;
pub const PJSIP_TRANSPORT_DTLS6: pjsip_transport_type_e = 132;
pub type pjsip_transport_type_e = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_endpoint {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_transaction {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_event {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_module {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_dialog {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_buffer {
    pub start: *mut ::std::os::raw::c_char,
    pub cur: *mut ::std::os::raw::c_char,
    pub end: *mut ::std::os::raw::c_char,
}
#[repr(C)]
pub struct pjsip_host_port {
    pub host: pj_str_t,
    pub port: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_evsub {
    _unused: [u8; 0],
}
pub const PJSIP_EVSUB_STATE_NULL: pjsip_evsub_state = 0;
pub const PJSIP_EVSUB_STATE_SENT: pjsip_evsub_state = 1;
pub const PJSIP_EVSUB_STATE_ACCEPTED: pjsip_evsub_state = 2;
pub const PJSIP_EVSUB_STATE_PENDING: pjsip_evsub_state = 3;
pub const PJSIP_EVSUB_STATE_ACTIVE: pjsip_evsub_state = 4;
pub const PJSIP_EVSUB_STATE_TERMINATED: pjsip_evsub_state = 5;
pub const PJSIP_EVSUB_STATE_UNKNOWN: pjsip_evsub_state = 6;
pub type pjsip_evsub_state = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_evsub_user {
    pub on_evsub_state:
        ::std::option::Option<unsafe extern "C" fn(sub: *mut pjsip_evsub, event: *mut pjsip_event)>,
    pub on_tsx_state: ::std::option::Option<
        unsafe extern "C" fn(
            sub: *mut pjsip_evsub,
            tsx: *mut pjsip_transaction,
            event: *mut pjsip_event,
        ),
    >,
    pub on_rx_refresh: ::std::option::Option<
        unsafe extern "C" fn(
            sub: *mut pjsip_evsub,
            rdata: *mut pjsip_rx_data,
            p_st_code: *mut ::std::os::raw::c_int,
            p_st_text: *mut *mut pj_str_t,
            res_hdr: *mut pjsip_hdr,
            p_body: *mut *mut pjsip_msg_body,
        ),
    >,
    pub on_rx_notify: ::std::option::Option<
        unsafe extern "C" fn(
            sub: *mut pjsip_evsub,
            rdata: *mut pjsip_rx_data,
            p_st_code: *mut ::std::os::raw::c_int,
            p_st_text: *mut *mut pj_str_t,
            res_hdr: *mut pjsip_hdr,
            p_body: *mut *mut pjsip_msg_body,
        ),
    >,
    pub on_client_refresh: ::std::option::Option<unsafe extern "C" fn(sub: *mut pjsip_evsub)>,
    pub on_server_timeout: ::std::option::Option<unsafe extern "C" fn(sub: *mut pjsip_evsub)>,
}
extern "C" {
    pub static pjsip_subscribe_method: pjsip_method;
}
extern "C" {
    pub static pjsip_notify_method: pjsip_method;
}
extern "C" {
    pub fn pjsip_get_subscribe_method() -> *const pjsip_method;
}
extern "C" {
    pub fn pjsip_get_notify_method() -> *const pjsip_method;
}
extern "C" {
    pub fn pjsip_evsub_init_module(endpt: *mut pjsip_endpoint) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_instance() -> *mut pjsip_module;
}
extern "C" {
    pub fn pjsip_evsub_register_pkg(
        pkg_mod: *mut pjsip_module,
        event_name: *const pj_str_t,
        expires: ::std::os::raw::c_uint,
        accept_cnt: ::std::os::raw::c_uint,
        accept: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_get_allow_events_hdr(m: *mut pjsip_module) -> *const pjsip_hdr;
}
extern "C" {
    pub fn pjsip_evsub_create_uac(
        dlg: *mut pjsip_dialog,
        user_cb: *const pjsip_evsub_user,
        event: *const pj_str_t,
        option: ::std::os::raw::c_uint,
        p_evsub: *mut *mut pjsip_evsub,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_create_uas(
        dlg: *mut pjsip_dialog,
        user_cb: *const pjsip_evsub_user,
        rdata: *mut pjsip_rx_data,
        option: ::std::os::raw::c_uint,
        p_evsub: *mut *mut pjsip_evsub,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_terminate(sub: *mut pjsip_evsub, notify: pj_bool_t) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_get_state(sub: *mut pjsip_evsub) -> pjsip_evsub_state;
}
extern "C" {
    pub fn pjsip_evsub_get_state_name(sub: *mut pjsip_evsub) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pjsip_evsub_get_termination_reason(sub: *mut pjsip_evsub) -> *const pj_str_t;
}
extern "C" {
    pub fn pjsip_evsub_initiate(
        sub: *mut pjsip_evsub,
        method: *const pjsip_method,
        expires: pj_uint32_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_add_header(sub: *mut pjsip_evsub, hdr_list: *const pjsip_hdr)
        -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_accept(
        sub: *mut pjsip_evsub,
        rdata: *mut pjsip_rx_data,
        st_code: ::std::os::raw::c_int,
        hdr_list: *const pjsip_hdr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_notify(
        sub: *mut pjsip_evsub,
        state: pjsip_evsub_state,
        state_str: *const pj_str_t,
        reason: *const pj_str_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_current_notify(
        sub: *mut pjsip_evsub,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_send_request(
        sub: *mut pjsip_evsub,
        tdata: *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_tsx_get_evsub(tsx: *mut pjsip_transaction) -> *mut pjsip_evsub;
}
extern "C" {
    pub fn pjsip_evsub_set_mod_data(
        sub: *mut pjsip_evsub,
        mod_id: ::std::os::raw::c_uint,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pjsip_evsub_get_mod_data(
        sub: *mut pjsip_evsub,
        mod_id: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pjsip_evsub_add_ref(sub: *mut pjsip_evsub) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_dec_ref(sub: *mut pjsip_evsub) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_evsub_uas_set_timeout(sub: *mut pjsip_evsub, seconds: pj_uint32_t);
}
#[repr(C)]
pub struct pjsip_param {
    pub prev: *mut pjsip_param,
    pub next: *mut pjsip_param,
    pub name: pj_str_t,
    pub value: pj_str_t,
}
pub const PJSIP_URI_IN_REQ_URI: pjsip_uri_context_e = 0;
pub const PJSIP_URI_IN_FROMTO_HDR: pjsip_uri_context_e = 1;
pub const PJSIP_URI_IN_CONTACT_HDR: pjsip_uri_context_e = 2;
pub const PJSIP_URI_IN_ROUTING_HDR: pjsip_uri_context_e = 3;
pub const PJSIP_URI_IN_OTHER: pjsip_uri_context_e = 4;
pub type pjsip_uri_context_e = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_uri_vptr {
    pub p_get_scheme: ::std::option::Option<
        unsafe extern "C" fn(uri: *const ::std::os::raw::c_void) -> *const pj_str_t,
    >,
    pub p_get_uri: ::std::option::Option<
        unsafe extern "C" fn(uri: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub p_print: ::std::option::Option<
        unsafe extern "C" fn(
            context: pjsip_uri_context_e,
            uri: *const ::std::os::raw::c_void,
            buf: *mut ::std::os::raw::c_char,
            size: pj_size_t,
        ) -> pj_ssize_t,
    >,
    pub p_compare: ::std::option::Option<
        unsafe extern "C" fn(
            context: pjsip_uri_context_e,
            uri1: *const ::std::os::raw::c_void,
            uri2: *const ::std::os::raw::c_void,
        ) -> pj_status_t,
    >,
    pub p_clone: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut pj_pool_t,
            uri: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_uri {
    pub vptr: *mut pjsip_uri_vptr,
}
#[repr(C)]
pub struct pjsip_name_addr {
    pub vptr: *mut pjsip_uri_vptr,
    pub display: pj_str_t,
    pub uri: *mut pjsip_uri,
}
pub const PJSIP_INVITE_METHOD: pjsip_method_e = 0;
pub const PJSIP_CANCEL_METHOD: pjsip_method_e = 1;
pub const PJSIP_ACK_METHOD: pjsip_method_e = 2;
pub const PJSIP_BYE_METHOD: pjsip_method_e = 3;
pub const PJSIP_REGISTER_METHOD: pjsip_method_e = 4;
pub const PJSIP_OPTIONS_METHOD: pjsip_method_e = 5;
pub const PJSIP_OTHER_METHOD: pjsip_method_e = 6;
pub type pjsip_method_e = u32;
#[repr(C)]
pub struct pjsip_method {
    pub id: pjsip_method_e,
    pub name: pj_str_t,
}
pub const PJSIP_H_ACCEPT: pjsip_hdr_e = 0;
pub const PJSIP_H_ACCEPT_ENCODING_UNIMP: pjsip_hdr_e = 1;
pub const PJSIP_H_ACCEPT_LANGUAGE_UNIMP: pjsip_hdr_e = 2;
pub const PJSIP_H_ALERT_INFO_UNIMP: pjsip_hdr_e = 3;
pub const PJSIP_H_ALLOW: pjsip_hdr_e = 4;
pub const PJSIP_H_AUTHENTICATION_INFO_UNIMP: pjsip_hdr_e = 5;
pub const PJSIP_H_AUTHORIZATION: pjsip_hdr_e = 6;
pub const PJSIP_H_CALL_ID: pjsip_hdr_e = 7;
pub const PJSIP_H_CALL_INFO_UNIMP: pjsip_hdr_e = 8;
pub const PJSIP_H_CONTACT: pjsip_hdr_e = 9;
pub const PJSIP_H_CONTENT_DISPOSITION_UNIMP: pjsip_hdr_e = 10;
pub const PJSIP_H_CONTENT_ENCODING_UNIMP: pjsip_hdr_e = 11;
pub const PJSIP_H_CONTENT_LANGUAGE_UNIMP: pjsip_hdr_e = 12;
pub const PJSIP_H_CONTENT_LENGTH: pjsip_hdr_e = 13;
pub const PJSIP_H_CONTENT_TYPE: pjsip_hdr_e = 14;
pub const PJSIP_H_CSEQ: pjsip_hdr_e = 15;
pub const PJSIP_H_DATE_UNIMP: pjsip_hdr_e = 16;
pub const PJSIP_H_ERROR_INFO_UNIMP: pjsip_hdr_e = 17;
pub const PJSIP_H_EXPIRES: pjsip_hdr_e = 18;
pub const PJSIP_H_FROM: pjsip_hdr_e = 19;
pub const PJSIP_H_IN_REPLY_TO_UNIMP: pjsip_hdr_e = 20;
pub const PJSIP_H_MAX_FORWARDS: pjsip_hdr_e = 21;
pub const PJSIP_H_MIME_VERSION_UNIMP: pjsip_hdr_e = 22;
pub const PJSIP_H_MIN_EXPIRES: pjsip_hdr_e = 23;
pub const PJSIP_H_ORGANIZATION_UNIMP: pjsip_hdr_e = 24;
pub const PJSIP_H_PRIORITY_UNIMP: pjsip_hdr_e = 25;
pub const PJSIP_H_PROXY_AUTHENTICATE: pjsip_hdr_e = 26;
pub const PJSIP_H_PROXY_AUTHORIZATION: pjsip_hdr_e = 27;
pub const PJSIP_H_PROXY_REQUIRE_UNIMP: pjsip_hdr_e = 28;
pub const PJSIP_H_RECORD_ROUTE: pjsip_hdr_e = 29;
pub const PJSIP_H_REPLY_TO_UNIMP: pjsip_hdr_e = 30;
pub const PJSIP_H_REQUIRE: pjsip_hdr_e = 31;
pub const PJSIP_H_RETRY_AFTER: pjsip_hdr_e = 32;
pub const PJSIP_H_ROUTE: pjsip_hdr_e = 33;
pub const PJSIP_H_SERVER_UNIMP: pjsip_hdr_e = 34;
pub const PJSIP_H_SUBJECT_UNIMP: pjsip_hdr_e = 35;
pub const PJSIP_H_SUPPORTED: pjsip_hdr_e = 36;
pub const PJSIP_H_TIMESTAMP_UNIMP: pjsip_hdr_e = 37;
pub const PJSIP_H_TO: pjsip_hdr_e = 38;
pub const PJSIP_H_UNSUPPORTED: pjsip_hdr_e = 39;
pub const PJSIP_H_USER_AGENT_UNIMP: pjsip_hdr_e = 40;
pub const PJSIP_H_VIA: pjsip_hdr_e = 41;
pub const PJSIP_H_WARNING_UNIMP: pjsip_hdr_e = 42;
pub const PJSIP_H_WWW_AUTHENTICATE: pjsip_hdr_e = 43;
pub const PJSIP_H_OTHER: pjsip_hdr_e = 44;
pub type pjsip_hdr_e = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_hdr_vptr {
    pub clone: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut pj_pool_t,
            hdr: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub shallow_clone: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut pj_pool_t,
            hdr: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub print_on: ::std::option::Option<
        unsafe extern "C" fn(
            hdr: *mut ::std::os::raw::c_void,
            buf: *mut ::std::os::raw::c_char,
            len: pj_size_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
pub struct pjsip_hdr {
    pub prev: *mut pjsip_hdr,
    pub next: *mut pjsip_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
}
#[repr(C)]
pub struct pjsip_request_line {
    pub method: pjsip_method,
    pub uri: *mut pjsip_uri,
}
#[repr(C)]
pub struct pjsip_status_line {
    pub code: ::std::os::raw::c_int,
    pub reason: pj_str_t,
}
#[repr(C)]
pub struct pjsip_media_type {
    pub type_: pj_str_t,
    pub subtype: pj_str_t,
    pub param: pjsip_param,
}
#[repr(C)]
pub struct pjsip_msg_body {
    pub content_type: pjsip_media_type,
    pub data: *mut ::std::os::raw::c_void,
    pub len: ::std::os::raw::c_uint,
    pub print_body: ::std::option::Option<
        unsafe extern "C" fn(
            msg_body: *mut pjsip_msg_body,
            buf: *mut ::std::os::raw::c_char,
            size: pj_size_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub clone_data: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut pj_pool_t,
            data: *const ::std::os::raw::c_void,
            len: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
pub const PJSIP_REQUEST_MSG: pjsip_msg_type_e = 0;
pub const PJSIP_RESPONSE_MSG: pjsip_msg_type_e = 1;
pub type pjsip_msg_type_e = u32;
#[repr(C)]
pub struct pjsip_msg {
    pub type_: pjsip_msg_type_e,
    pub line: pjsip_msg__bindgen_ty_1,
    pub hdr: pjsip_hdr,
    pub body: *mut pjsip_msg_body,
}
#[repr(C)]
pub struct pjsip_msg__bindgen_ty_1 {
    pub req: __BindgenUnionField<pjsip_request_line>,
    pub status: __BindgenUnionField<pjsip_status_line>,
    pub bindgen_union_field: [u64; 4usize],
}
#[repr(C)]
pub struct pjsip_generic_int_hdr {
    pub prev: *mut pjsip_generic_int_hdr,
    pub next: *mut pjsip_generic_int_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub ivalue: pj_uint32_t,
}
#[repr(C)]
pub struct pjsip_generic_array_hdr {
    pub prev: *mut pjsip_generic_array_hdr,
    pub next: *mut pjsip_generic_array_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub count: ::std::os::raw::c_uint,
    pub values: [pj_str_t; 32usize],
}
#[repr(C)]
pub struct pjsip_cid_hdr {
    pub prev: *mut pjsip_cid_hdr,
    pub next: *mut pjsip_cid_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub id: pj_str_t,
}
#[repr(C)]
pub struct pjsip_clen_hdr {
    pub prev: *mut pjsip_clen_hdr,
    pub next: *mut pjsip_clen_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub len: ::std::os::raw::c_int,
}
#[repr(C)]
pub struct pjsip_cseq_hdr {
    pub prev: *mut pjsip_cseq_hdr,
    pub next: *mut pjsip_cseq_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub cseq: pj_int32_t,
    pub method: pjsip_method,
}
#[repr(C)]
pub struct pjsip_ctype_hdr {
    pub prev: *mut pjsip_ctype_hdr,
    pub next: *mut pjsip_ctype_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub media: pjsip_media_type,
}
#[repr(C)]
pub struct pjsip_fromto_hdr {
    pub prev: *mut pjsip_fromto_hdr,
    pub next: *mut pjsip_fromto_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub uri: *mut pjsip_uri,
    pub tag: pj_str_t,
    pub other_param: pjsip_param,
}
pub type pjsip_from_hdr = pjsip_fromto_hdr;
pub type pjsip_to_hdr = pjsip_fromto_hdr;
pub type pjsip_max_fwd_hdr = pjsip_generic_int_hdr;
#[repr(C)]
pub struct pjsip_routing_hdr {
    pub prev: *mut pjsip_routing_hdr,
    pub next: *mut pjsip_routing_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub name_addr: pjsip_name_addr,
    pub other_param: pjsip_param,
}
pub type pjsip_rr_hdr = pjsip_routing_hdr;
pub type pjsip_route_hdr = pjsip_routing_hdr;
pub type pjsip_require_hdr = pjsip_generic_array_hdr;
pub type pjsip_supported_hdr = pjsip_generic_array_hdr;
#[repr(C)]
pub struct pjsip_via_hdr {
    pub prev: *mut pjsip_via_hdr,
    pub next: *mut pjsip_via_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub transport: pj_str_t,
    pub sent_by: pjsip_host_port,
    pub ttl_param: ::std::os::raw::c_int,
    pub rport_param: ::std::os::raw::c_int,
    pub maddr_param: pj_str_t,
    pub recvd_param: pj_str_t,
    pub branch_param: pj_str_t,
    pub other_param: pjsip_param,
    pub comment: pj_str_t,
}
#[repr(C)]
pub struct pjsip_event_hdr {
    pub prev: *mut pjsip_event_hdr,
    pub next: *mut pjsip_event_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub event_type: pj_str_t,
    pub id_param: pj_str_t,
    pub other_param: pjsip_param,
}
extern "C" {
    pub fn pjsip_event_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_event_hdr;
}
pub type pjsip_allow_events_hdr = pjsip_generic_array_hdr;
extern "C" {
    pub fn pjsip_allow_events_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_allow_events_hdr;
}
#[repr(C)]
pub struct pjsip_sub_state_hdr {
    pub prev: *mut pjsip_sub_state_hdr,
    pub next: *mut pjsip_sub_state_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub sub_state: pj_str_t,
    pub reason_param: pj_str_t,
    pub expires_param: ::std::os::raw::c_uint,
    pub retry_after: ::std::os::raw::c_int,
    pub other_param: pjsip_param,
}
extern "C" {
    pub fn pjsip_sub_state_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_sub_state_hdr;
}
extern "C" {
    pub fn pjsip_evsub_init_parser();
}
extern "C" {
    pub fn pjsip_iscomposing_create_xml(
        pool: *mut pj_pool_t,
        is_composing: pj_bool_t,
        lst_actv: *const pj_time_val,
        content_tp: *const pj_str_t,
        refresh: ::std::os::raw::c_int,
    ) -> *mut pj_xml_node;
}
extern "C" {
    pub fn pjsip_iscomposing_create_body(
        pool: *mut pj_pool_t,
        is_composing: pj_bool_t,
        lst_actv: *const pj_time_val,
        content_tp: *const pj_str_t,
        refresh: ::std::os::raw::c_int,
    ) -> *mut pjsip_msg_body;
}
extern "C" {
    pub fn pjsip_iscomposing_parse(
        pool: *mut pj_pool_t,
        msg: *mut ::std::os::raw::c_char,
        len: pj_size_t,
        p_is_composing: *mut pj_bool_t,
        p_last_active: *mut *mut pj_str_t,
        p_content_type: *mut *mut pj_str_t,
        p_refresh: *mut ::std::os::raw::c_int,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_mwi_init_module(
        endpt: *mut pjsip_endpoint,
        mod_evsub: *mut pjsip_module,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_mwi_instance() -> *mut pjsip_module;
}
extern "C" {
    pub fn pjsip_mwi_create_uac(
        dlg: *mut pjsip_dialog,
        user_cb: *const pjsip_evsub_user,
        options: ::std::os::raw::c_uint,
        p_evsub: *mut *mut pjsip_evsub,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_mwi_create_uas(
        dlg: *mut pjsip_dialog,
        user_cb: *const pjsip_evsub_user,
        rdata: *mut pjsip_rx_data,
        p_evsub: *mut *mut pjsip_evsub,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_mwi_terminate(sub: *mut pjsip_evsub, notify: pj_bool_t) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_mwi_initiate(
        sub: *mut pjsip_evsub,
        expires: pj_uint32_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_mwi_accept(
        sub: *mut pjsip_evsub,
        rdata: *mut pjsip_rx_data,
        st_code: ::std::os::raw::c_int,
        hdr_list: *const pjsip_hdr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_mwi_notify(
        sub: *mut pjsip_evsub,
        state: pjsip_evsub_state,
        state_str: *const pj_str_t,
        reason: *const pj_str_t,
        mime_type: *const pjsip_media_type,
        body: *const pj_str_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_mwi_current_notify(
        sub: *mut pjsip_evsub,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_mwi_send_request(sub: *mut pjsip_evsub, tdata: *mut pjsip_tx_data) -> pj_status_t;
}
pub type pjpidf_pres = pj_xml_node;
pub type pjpidf_tuple = pj_xml_node;
pub type pjpidf_status = pj_xml_node;
pub type pjpidf_note = pj_xml_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjpidf_status_op {
    pub construct:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut pj_pool_t, arg2: *mut pjpidf_status)>,
    pub is_basic_open:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const pjpidf_status) -> pj_bool_t>,
    pub set_basic_open:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut pjpidf_status, arg2: pj_bool_t)>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjpidf_tuple_op {
    pub construct: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pj_pool_t, arg2: *mut pjpidf_tuple, arg3: *const pj_str_t),
    >,
    pub get_id:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const pjpidf_tuple) -> *const pj_str_t>,
    pub set_id: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pj_pool_t, arg2: *mut pjpidf_tuple, arg3: *const pj_str_t),
    >,
    pub get_status:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut pjpidf_tuple) -> *mut pjpidf_status>,
    pub get_contact:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const pjpidf_tuple) -> *const pj_str_t>,
    pub set_contact: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pj_pool_t, arg2: *mut pjpidf_tuple, arg3: *const pj_str_t),
    >,
    pub set_contact_prio: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pj_pool_t, arg2: *mut pjpidf_tuple, arg3: *const pj_str_t),
    >,
    pub get_contact_prio:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const pjpidf_tuple) -> *const pj_str_t>,
    pub add_note: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut pj_pool_t,
            arg2: *mut pjpidf_tuple,
            arg3: *const pj_str_t,
        ) -> *mut pjpidf_note,
    >,
    pub get_first_note:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut pjpidf_tuple) -> *mut pjpidf_note>,
    pub get_next_note: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pjpidf_tuple, arg2: *mut pjpidf_note) -> *mut pjpidf_note,
    >,
    pub get_timestamp:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const pjpidf_tuple) -> *const pj_str_t>,
    pub set_timestamp: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pj_pool_t, arg2: *mut pjpidf_tuple, arg3: *const pj_str_t),
    >,
    pub set_timestamp_np: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pj_pool_t, arg2: *mut pjpidf_tuple, arg3: *mut pj_str_t),
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjpidf_pres_op {
    pub construct: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pj_pool_t, arg2: *mut pjpidf_pres, arg3: *const pj_str_t),
    >,
    pub add_tuple: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut pj_pool_t,
            arg2: *mut pjpidf_pres,
            arg3: *const pj_str_t,
        ) -> *mut pjpidf_tuple,
    >,
    pub get_first_tuple:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut pjpidf_pres) -> *mut pjpidf_tuple>,
    pub get_next_tuple: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pjpidf_pres, arg2: *mut pjpidf_tuple) -> *mut pjpidf_tuple,
    >,
    pub find_tuple: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pjpidf_pres, arg2: *const pj_str_t) -> *mut pjpidf_tuple,
    >,
    pub remove_tuple: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pjpidf_pres, arg2: *mut pjpidf_tuple),
    >,
    pub add_note: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut pj_pool_t,
            arg2: *mut pjpidf_pres,
            arg3: *const pj_str_t,
        ) -> *mut pjpidf_note,
    >,
    pub get_first_note:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut pjpidf_pres) -> *mut pjpidf_note>,
    pub get_next_note: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut pjpidf_pres, arg2: *mut pjpidf_note) -> *mut pjpidf_note,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjpidf_op_desc {
    pub pres: pjpidf_pres_op,
    pub tuple: pjpidf_tuple_op,
    pub status: pjpidf_status_op,
}
extern "C" {
    pub static mut pjpidf_op: pjpidf_op_desc;
}
extern "C" {
    pub fn pjpidf_create(pool: *mut pj_pool_t, entity: *const pj_str_t) -> *mut pjpidf_pres;
}
extern "C" {
    pub fn pjpidf_parse(
        pool: *mut pj_pool_t,
        text: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut pjpidf_pres;
}
extern "C" {
    pub fn pjpidf_print(
        pres: *const pjpidf_pres,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pjpidf_pres_construct(
        pool: *mut pj_pool_t,
        pres: *mut pjpidf_pres,
        entity: *const pj_str_t,
    );
}
extern "C" {
    pub fn pjpidf_pres_add_tuple(
        pool: *mut pj_pool_t,
        pres: *mut pjpidf_pres,
        id: *const pj_str_t,
    ) -> *mut pjpidf_tuple;
}
extern "C" {
    pub fn pjpidf_pres_get_first_tuple(pres: *mut pjpidf_pres) -> *mut pjpidf_tuple;
}
extern "C" {
    pub fn pjpidf_pres_get_next_tuple(
        pres: *mut pjpidf_pres,
        t: *mut pjpidf_tuple,
    ) -> *mut pjpidf_tuple;
}
extern "C" {
    pub fn pjpidf_pres_find_tuple(pres: *mut pjpidf_pres, id: *const pj_str_t)
        -> *mut pjpidf_tuple;
}
extern "C" {
    pub fn pjpidf_pres_remove_tuple(pres: *mut pjpidf_pres, arg1: *mut pjpidf_tuple);
}
extern "C" {
    pub fn pjpidf_pres_add_note(
        pool: *mut pj_pool_t,
        pres: *mut pjpidf_pres,
        text: *const pj_str_t,
    ) -> *mut pjpidf_note;
}
extern "C" {
    pub fn pjpidf_pres_get_first_note(pres: *mut pjpidf_pres) -> *mut pjpidf_note;
}
extern "C" {
    pub fn pjpidf_pres_get_next_note(
        arg1: *mut pjpidf_pres,
        arg2: *mut pjpidf_note,
    ) -> *mut pjpidf_note;
}
extern "C" {
    pub fn pjpidf_tuple_construct(pool: *mut pj_pool_t, t: *mut pjpidf_tuple, id: *const pj_str_t);
}
extern "C" {
    pub fn pjpidf_tuple_get_id(t: *const pjpidf_tuple) -> *const pj_str_t;
}
extern "C" {
    pub fn pjpidf_tuple_set_id(pool: *mut pj_pool_t, t: *mut pjpidf_tuple, id: *const pj_str_t);
}
extern "C" {
    pub fn pjpidf_tuple_get_status(t: *mut pjpidf_tuple) -> *mut pjpidf_status;
}
extern "C" {
    pub fn pjpidf_tuple_get_contact(t: *const pjpidf_tuple) -> *const pj_str_t;
}
extern "C" {
    pub fn pjpidf_tuple_set_contact(
        pool: *mut pj_pool_t,
        t: *mut pjpidf_tuple,
        contact: *const pj_str_t,
    );
}
extern "C" {
    pub fn pjpidf_tuple_set_contact_prio(
        pool: *mut pj_pool_t,
        t: *mut pjpidf_tuple,
        prio: *const pj_str_t,
    );
}
extern "C" {
    pub fn pjpidf_tuple_get_contact_prio(t: *const pjpidf_tuple) -> *const pj_str_t;
}
extern "C" {
    pub fn pjpidf_tuple_add_note(
        pool: *mut pj_pool_t,
        t: *mut pjpidf_tuple,
        text: *const pj_str_t,
    ) -> *mut pjpidf_note;
}
extern "C" {
    pub fn pjpidf_tuple_get_first_note(t: *mut pjpidf_tuple) -> *mut pjpidf_note;
}
extern "C" {
    pub fn pjpidf_tuple_get_next_note(
        t: *mut pjpidf_tuple,
        n: *mut pjpidf_note,
    ) -> *mut pjpidf_note;
}
extern "C" {
    pub fn pjpidf_tuple_get_timestamp(t: *const pjpidf_tuple) -> *const pj_str_t;
}
extern "C" {
    pub fn pjpidf_tuple_set_timestamp(
        pool: *mut pj_pool_t,
        t: *mut pjpidf_tuple,
        ts: *const pj_str_t,
    );
}
extern "C" {
    pub fn pjpidf_tuple_set_timestamp_np(
        arg1: *mut pj_pool_t,
        t: *mut pjpidf_tuple,
        ts: *mut pj_str_t,
    );
}
extern "C" {
    pub fn pjpidf_status_construct(arg1: *mut pj_pool_t, arg2: *mut pjpidf_status);
}
extern "C" {
    pub fn pjpidf_status_is_basic_open(arg1: *const pjpidf_status) -> pj_bool_t;
}
extern "C" {
    pub fn pjpidf_status_set_basic_open(arg1: *mut pjpidf_status, arg2: pj_bool_t);
}
pub type pjxpidf_pres = pj_xml_node;
extern "C" {
    pub fn pjxpidf_create(pool: *mut pj_pool_t, uri: *const pj_str_t) -> *mut pjxpidf_pres;
}
extern "C" {
    pub fn pjxpidf_parse(
        pool: *mut pj_pool_t,
        text: *mut ::std::os::raw::c_char,
        len: pj_size_t,
    ) -> *mut pjxpidf_pres;
}
extern "C" {
    pub fn pjxpidf_print(
        pres: *mut pjxpidf_pres,
        text: *mut ::std::os::raw::c_char,
        len: pj_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pjxpidf_get_uri(pres: *mut pjxpidf_pres) -> *mut pj_str_t;
}
extern "C" {
    pub fn pjxpidf_set_uri(
        pool: *mut pj_pool_t,
        pres: *mut pjxpidf_pres,
        uri: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjxpidf_get_status(pres: *mut pjxpidf_pres) -> pj_bool_t;
}
extern "C" {
    pub fn pjxpidf_set_status(pres: *mut pjxpidf_pres, status: pj_bool_t) -> pj_status_t;
}
pub const PJRPID_ACTIVITY_UNKNOWN: pjrpid_activity = 0;
pub const PJRPID_ACTIVITY_AWAY: pjrpid_activity = 1;
pub const PJRPID_ACTIVITY_BUSY: pjrpid_activity = 2;
pub type pjrpid_activity = u32;
pub const PJRPID_ELEMENT_TYPE_PERSON: pjrpid_element_type = 0;
pub type pjrpid_element_type = u32;
#[repr(C)]
pub struct pjrpid_element {
    pub type_: pjrpid_element_type,
    pub id: pj_str_t,
    pub activity: pjrpid_activity,
    pub note: pj_str_t,
}
extern "C" {
    pub fn pjrpid_element_dup(
        pool: *mut pj_pool_t,
        dst: *mut pjrpid_element,
        src: *const pjrpid_element,
    );
}
extern "C" {
    pub fn pjrpid_add_element(
        pres: *mut pjpidf_pres,
        pool: *mut pj_pool_t,
        options: ::std::os::raw::c_uint,
        elem: *const pjrpid_element,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjrpid_get_element(
        pres: *const pjpidf_pres,
        pool: *mut pj_pool_t,
        elem: *mut pjrpid_element,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_init_module(
        endpt: *mut pjsip_endpoint,
        mod_evsub: *mut pjsip_module,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_instance() -> *mut pjsip_module;
}
#[repr(C)]
pub struct pjsip_pres_status {
    pub info_cnt: ::std::os::raw::c_uint,
    pub info: [pjsip_pres_status__bindgen_ty_1; 8usize],
    pub _is_valid: pj_bool_t,
}
#[repr(C)]
pub struct pjsip_pres_status__bindgen_ty_1 {
    pub basic_open: pj_bool_t,
    pub rpid: pjrpid_element,
    pub id: pj_str_t,
    pub contact: pj_str_t,
    pub tuple_node: *mut pj_xml_node,
}
extern "C" {
    pub fn pjsip_pres_create_uac(
        dlg: *mut pjsip_dialog,
        user_cb: *const pjsip_evsub_user,
        options: ::std::os::raw::c_uint,
        p_evsub: *mut *mut pjsip_evsub,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_create_uas(
        dlg: *mut pjsip_dialog,
        user_cb: *const pjsip_evsub_user,
        rdata: *mut pjsip_rx_data,
        p_evsub: *mut *mut pjsip_evsub,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_terminate(sub: *mut pjsip_evsub, notify: pj_bool_t) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_initiate(
        sub: *mut pjsip_evsub,
        expires: pj_uint32_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_add_header(sub: *mut pjsip_evsub, hdr_list: *const pjsip_hdr) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_accept(
        sub: *mut pjsip_evsub,
        rdata: *mut pjsip_rx_data,
        st_code: ::std::os::raw::c_int,
        hdr_list: *const pjsip_hdr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_notify(
        sub: *mut pjsip_evsub,
        state: pjsip_evsub_state,
        state_str: *const pj_str_t,
        reason: *const pj_str_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_current_notify(
        sub: *mut pjsip_evsub,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_send_request(sub: *mut pjsip_evsub, tdata: *mut pjsip_tx_data)
        -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_get_status(
        sub: *mut pjsip_evsub,
        status: *mut pjsip_pres_status,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_set_status(
        sub: *mut pjsip_evsub,
        status: *const pjsip_pres_status,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_create_pidf(
        pool: *mut pj_pool_t,
        status: *const pjsip_pres_status,
        entity: *const pj_str_t,
        p_body: *mut *mut pjsip_msg_body,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_create_xpidf(
        pool: *mut pj_pool_t,
        status: *const pjsip_pres_status,
        entity: *const pj_str_t,
        p_body: *mut *mut pjsip_msg_body,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_parse_pidf(
        rdata: *mut pjsip_rx_data,
        pool: *mut pj_pool_t,
        status: *mut pjsip_pres_status,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_parse_pidf2(
        body: *mut ::std::os::raw::c_char,
        body_len: ::std::os::raw::c_uint,
        pool: *mut pj_pool_t,
        status: *mut pjsip_pres_status,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_parse_xpidf(
        rdata: *mut pjsip_rx_data,
        pool: *mut pj_pool_t,
        status: *mut pjsip_pres_status,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_pres_parse_xpidf2(
        body: *mut ::std::os::raw::c_char,
        body_len: ::std::os::raw::c_uint,
        pool: *mut pj_pool_t,
        status: *mut pjsip_pres_status,
    ) -> pj_status_t;
}
#[repr(C)]
pub struct pjsip_parser_err_report {
    pub prev: *mut pjsip_parser_err_report,
    pub next: *mut pjsip_parser_err_report,
    pub except_code: ::std::os::raw::c_int,
    pub line: ::std::os::raw::c_int,
    pub col: ::std::os::raw::c_int,
    pub hname: pj_str_t,
}
#[repr(C)]
pub struct pjsip_server_addresses {
    pub count: ::std::os::raw::c_uint,
    pub entry: [pjsip_server_addresses__bindgen_ty_1; 16usize],
}
#[repr(C)]
pub struct pjsip_server_addresses__bindgen_ty_1 {
    pub type_: pjsip_transport_type_e,
    pub priority: ::std::os::raw::c_uint,
    pub weight: ::std::os::raw::c_uint,
    pub addr: pj_sockaddr,
    pub addr_len: ::std::os::raw::c_int,
}
pub const PJSIP_TPSELECTOR_NONE: pjsip_tpselector_type = 0;
pub const PJSIP_TPSELECTOR_TRANSPORT: pjsip_tpselector_type = 1;
pub const PJSIP_TPSELECTOR_LISTENER: pjsip_tpselector_type = 2;
pub type pjsip_tpselector_type = u32;
#[repr(C)]
pub struct pjsip_tpselector {
    pub type_: pjsip_tpselector_type,
    pub disable_connection_reuse: pj_bool_t,
    pub u: pjsip_tpselector__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjsip_tpselector__bindgen_ty_1 {
    pub transport: *mut pjsip_transport,
    pub listener: *mut pjsip_tpfactory,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[repr(C)]
pub struct pjsip_rx_data_op_key {
    pub op_key: pj_ioqueue_op_key_t,
    pub rdata: *mut pjsip_rx_data,
}
#[repr(C)]
pub struct pjsip_rx_data {
    pub tp_info: pjsip_rx_data__bindgen_ty_1,
    pub pkt_info: pjsip_rx_data__bindgen_ty_2,
    pub msg_info: pjsip_rx_data__bindgen_ty_3,
    pub endpt_info: pjsip_rx_data__bindgen_ty_4,
}
#[repr(C)]
pub struct pjsip_rx_data__bindgen_ty_1 {
    pub pool: *mut pj_pool_t,
    pub transport: *mut pjsip_transport,
    pub tp_data: *mut ::std::os::raw::c_void,
    pub op_key: pjsip_rx_data_op_key,
}
#[repr(C)]
pub struct pjsip_rx_data__bindgen_ty_2 {
    pub timestamp: pj_time_val,
    pub packet: [::std::os::raw::c_char; 4000usize],
    pub zero: pj_uint32_t,
    pub len: pj_ssize_t,
    pub src_addr: pj_sockaddr,
    pub src_addr_len: ::std::os::raw::c_int,
    pub src_name: [::std::os::raw::c_char; 46usize],
    pub src_port: ::std::os::raw::c_int,
}
#[repr(C)]
pub struct pjsip_rx_data__bindgen_ty_3 {
    pub msg_buf: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_int,
    pub msg: *mut pjsip_msg,
    pub info: *mut ::std::os::raw::c_char,
    pub cid: *mut pjsip_cid_hdr,
    pub from: *mut pjsip_from_hdr,
    pub to: *mut pjsip_to_hdr,
    pub via: *mut pjsip_via_hdr,
    pub cseq: *mut pjsip_cseq_hdr,
    pub max_fwd: *mut pjsip_max_fwd_hdr,
    pub route: *mut pjsip_route_hdr,
    pub record_route: *mut pjsip_rr_hdr,
    pub ctype: *mut pjsip_ctype_hdr,
    pub clen: *mut pjsip_clen_hdr,
    pub require: *mut pjsip_require_hdr,
    pub supported: *mut pjsip_supported_hdr,
    pub parse_err: pjsip_parser_err_report,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_rx_data__bindgen_ty_4 {
    pub mod_data: [*mut ::std::os::raw::c_void; 32usize],
}
#[repr(C)]
pub struct pjsip_tx_data_op_key {
    pub key: pj_ioqueue_op_key_t,
    pub tdata: *mut pjsip_tx_data,
    pub token: *mut ::std::os::raw::c_void,
    pub callback: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut pjsip_transport,
            arg2: *mut ::std::os::raw::c_void,
            arg3: pj_ssize_t,
        ),
    >,
}
#[repr(C)]
pub struct pjsip_tx_data {
    pub prev: *mut pjsip_tx_data,
    pub next: *mut pjsip_tx_data,
    pub pool: *mut pj_pool_t,
    pub obj_name: [::std::os::raw::c_char; 32usize],
    pub info: *mut ::std::os::raw::c_char,
    pub rx_timestamp: pj_time_val,
    pub mgr: *mut pjsip_tpmgr,
    pub op_key: pjsip_tx_data_op_key,
    pub lock: *mut pj_lock_t,
    pub msg: *mut pjsip_msg,
    pub saved_strict_route: *mut pjsip_route_hdr,
    pub buf: pjsip_buffer,
    pub ref_cnt: *mut pj_atomic_t,
    pub is_pending: ::std::os::raw::c_int,
    pub token: *mut ::std::os::raw::c_void,
    pub cb: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut pjsip_tx_data,
            arg3: pj_ssize_t,
        ),
    >,
    pub dest_info: pjsip_tx_data__bindgen_ty_1,
    pub tp_info: pjsip_tx_data__bindgen_ty_2,
    pub tp_sel: pjsip_tpselector,
    pub auth_retry: pj_bool_t,
    pub mod_data: [*mut ::std::os::raw::c_void; 32usize],
    pub via_addr: pjsip_host_port,
    pub via_tp: *const ::std::os::raw::c_void,
}
#[repr(C)]
pub struct pjsip_tx_data__bindgen_ty_1 {
    pub name: pj_str_t,
    pub addr: pjsip_server_addresses,
    pub cur_addr: ::std::os::raw::c_uint,
}
#[repr(C)]
pub struct pjsip_tx_data__bindgen_ty_2 {
    pub transport: *mut pjsip_transport,
    pub dst_addr: pj_sockaddr,
    pub dst_addr_len: ::std::os::raw::c_int,
    pub dst_name: [::std::os::raw::c_char; 46usize],
    pub dst_port: ::std::os::raw::c_int,
}
pub type pjsip_transport_callback = ::std::option::Option<
    unsafe extern "C" fn(
        tp: *mut pjsip_transport,
        token: *mut ::std::os::raw::c_void,
        sent_bytes: pj_ssize_t,
    ),
>;
#[repr(C)]
pub struct pjsip_transport_key {
    pub type_: ::std::os::raw::c_long,
    pub rem_addr: pj_sockaddr,
}
pub const PJSIP_TP_DIR_NONE: pjsip_transport_dir = 0;
pub const PJSIP_TP_DIR_OUTGOING: pjsip_transport_dir = 1;
pub const PJSIP_TP_DIR_INCOMING: pjsip_transport_dir = 2;
pub type pjsip_transport_dir = u32;
#[repr(C)]
pub struct pjsip_transport {
    pub obj_name: [::std::os::raw::c_char; 32usize],
    pub pool: *mut pj_pool_t,
    pub ref_cnt: *mut pj_atomic_t,
    pub lock: *mut pj_lock_t,
    pub grp_lock: *mut pj_grp_lock_t,
    pub tracing: pj_bool_t,
    pub is_shutdown: pj_bool_t,
    pub is_destroying: pj_bool_t,
    pub key: pjsip_transport_key,
    pub type_name: *mut ::std::os::raw::c_char,
    pub flag: ::std::os::raw::c_uint,
    pub info: *mut ::std::os::raw::c_char,
    pub addr_len: ::std::os::raw::c_int,
    pub local_addr: pj_sockaddr,
    pub local_name: pjsip_host_port,
    pub remote_name: pjsip_host_port,
    pub dir: pjsip_transport_dir,
    pub endpt: *mut pjsip_endpoint,
    pub tpmgr: *mut pjsip_tpmgr,
    pub factory: *mut pjsip_tpfactory,
    pub idle_timer: pj_timer_entry,
    pub last_recv_ts: pj_timestamp,
    pub last_recv_len: pj_size_t,
    pub data: *mut ::std::os::raw::c_void,
    pub send_msg: ::std::option::Option<
        unsafe extern "C" fn(
            transport: *mut pjsip_transport,
            tdata: *mut pjsip_tx_data,
            rem_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_int,
            token: *mut ::std::os::raw::c_void,
            callback: pjsip_transport_callback,
        ) -> pj_status_t,
    >,
    pub do_shutdown:
        ::std::option::Option<unsafe extern "C" fn(transport: *mut pjsip_transport) -> pj_status_t>,
    pub destroy:
        ::std::option::Option<unsafe extern "C" fn(transport: *mut pjsip_transport) -> pj_status_t>,
}
#[repr(C)]
pub struct pjsip_tpfactory {
    pub prev: *mut pjsip_tpfactory,
    pub next: *mut pjsip_tpfactory,
    pub obj_name: [::std::os::raw::c_char; 32usize],
    pub pool: *mut pj_pool_t,
    pub lock: *mut pj_lock_t,
    pub type_: pjsip_transport_type_e,
    pub type_name: *mut ::std::os::raw::c_char,
    pub flag: ::std::os::raw::c_uint,
    pub info: *mut ::std::os::raw::c_char,
    pub local_addr: pj_sockaddr,
    pub addr_name: pjsip_host_port,
    pub create_transport: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjsip_tpfactory,
            mgr: *mut pjsip_tpmgr,
            endpt: *mut pjsip_endpoint,
            rem_addr: *const pj_sockaddr,
            addr_len: ::std::os::raw::c_int,
            transport: *mut *mut pjsip_transport,
        ) -> pj_status_t,
    >,
    pub create_transport2: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjsip_tpfactory,
            mgr: *mut pjsip_tpmgr,
            endpt: *mut pjsip_endpoint,
            rem_addr: *const pj_sockaddr,
            addr_len: ::std::os::raw::c_int,
            tdata: *mut pjsip_tx_data,
            transport: *mut *mut pjsip_transport,
        ) -> pj_status_t,
    >,
    pub destroy:
        ::std::option::Option<unsafe extern "C" fn(factory: *mut pjsip_tpfactory) -> pj_status_t>,
}
#[repr(C)]
pub struct pjsip_digest_credential {
    pub realm: pj_str_t,
    pub other_param: pjsip_param,
    pub username: pj_str_t,
    pub nonce: pj_str_t,
    pub uri: pj_str_t,
    pub response: pj_str_t,
    pub algorithm: pj_str_t,
    pub cnonce: pj_str_t,
    pub opaque: pj_str_t,
    pub qop: pj_str_t,
    pub nc: pj_str_t,
}
#[repr(C)]
pub struct pjsip_digest_challenge {
    pub realm: pj_str_t,
    pub other_param: pjsip_param,
    pub domain: pj_str_t,
    pub nonce: pj_str_t,
    pub opaque: pj_str_t,
    pub stale: ::std::os::raw::c_int,
    pub algorithm: pj_str_t,
    pub qop: pj_str_t,
}
pub type pjsip_cred_cb = ::std::option::Option<
    unsafe extern "C" fn(
        pool: *mut pj_pool_t,
        chal: *const pjsip_digest_challenge,
        cred: *const pjsip_cred_info,
        method: *const pj_str_t,
        auth: *mut pjsip_digest_credential,
    ) -> pj_status_t,
>;
#[repr(C)]
pub struct pjsip_cred_info {
    pub realm: pj_str_t,
    pub scheme: pj_str_t,
    pub username: pj_str_t,
    pub data_type: ::std::os::raw::c_int,
    pub data: pj_str_t,
    pub ext: pjsip_cred_info__bindgen_ty_1,
}
#[repr(C)]
pub struct pjsip_cred_info__bindgen_ty_1 {
    pub aka: __BindgenUnionField<pjsip_cred_info__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: [u64; 7usize],
}
#[repr(C)]
pub struct pjsip_cred_info__bindgen_ty_1__bindgen_ty_1 {
    pub k: pj_str_t,
    pub op: pj_str_t,
    pub amf: pj_str_t,
    pub cb: pjsip_cred_cb,
}
extern "C" {
    pub static pjsip_publish_method: pjsip_method;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_publishc {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct pjsip_publishc_opt {
    pub queue_request: pj_bool_t,
}
#[repr(C)]
pub struct pjsip_publishc_cbparam {
    pub pubc: *mut pjsip_publishc,
    pub token: *mut ::std::os::raw::c_void,
    pub status: pj_status_t,
    pub code: ::std::os::raw::c_int,
    pub reason: pj_str_t,
    pub rdata: *mut pjsip_rx_data,
    pub expiration: ::std::os::raw::c_uint,
}
pub type pjsip_publishc_cb =
    ::std::option::Option<unsafe extern "C" fn(param: *mut pjsip_publishc_cbparam)>;
extern "C" {
    pub fn pjsip_publishc_opt_default(opt: *mut pjsip_publishc_opt);
}
extern "C" {
    pub fn pjsip_publishc_init_module(endpt: *mut pjsip_endpoint) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_create(
        endpt: *mut pjsip_endpoint,
        opt: *const pjsip_publishc_opt,
        token: *mut ::std::os::raw::c_void,
        cb: pjsip_publishc_cb,
        p_pubc: *mut *mut pjsip_publishc,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_destroy(pubc: *mut pjsip_publishc) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_get_pool(pubc: *mut pjsip_publishc) -> *mut pj_pool_t;
}
extern "C" {
    pub fn pjsip_publishc_init(
        pubc: *mut pjsip_publishc,
        event: *const pj_str_t,
        target_uri: *const pj_str_t,
        from_uri: *const pj_str_t,
        to_uri: *const pj_str_t,
        expires: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_set_credentials(
        pubc: *mut pjsip_publishc,
        count: ::std::os::raw::c_int,
        c: *const pjsip_cred_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_set_route_set(
        pubc: *mut pjsip_publishc,
        rs: *const pjsip_route_hdr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_set_headers(
        pubc: *mut pjsip_publishc,
        hdr_list: *const pjsip_hdr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_set_via_sent_by(
        pubc: *mut pjsip_publishc,
        via_addr: *mut pjsip_host_port,
        via_tp: *mut pjsip_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_publish(
        pubc: *mut pjsip_publishc,
        auto_refresh: pj_bool_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_unpublish(
        pubc: *mut pjsip_publishc,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_update_expires(
        pubc: *mut pjsip_publishc,
        expires: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_publishc_send(pubc: *mut pjsip_publishc, tdata: *mut pjsip_tx_data)
        -> pj_status_t;
}
