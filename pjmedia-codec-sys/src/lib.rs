/* automatically generated by rust-bindgen 0.58.1 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub type pj_int64_t = ::std::os::raw::c_longlong;
pub type pj_uint64_t = ::std::os::raw::c_ulonglong;
pub type size_t = ::std::os::raw::c_ulong;
pub type pj_int32_t = ::std::os::raw::c_int;
pub type pj_uint32_t = ::std::os::raw::c_uint;
pub type pj_int16_t = ::std::os::raw::c_short;
pub type pj_uint16_t = ::std::os::raw::c_ushort;
pub type pj_int8_t = ::std::os::raw::c_schar;
pub type pj_uint8_t = ::std::os::raw::c_uchar;
pub type pj_size_t = size_t;
pub type pj_ssize_t = ::std::os::raw::c_long;
pub type pj_status_t = ::std::os::raw::c_int;
pub type pj_bool_t = ::std::os::raw::c_int;
pub type pj_char_t = ::std::os::raw::c_char;
pub const PJ_SUCCESS: pj_constants_ = 0;
pub const PJ_TRUE: pj_constants_ = 1;
pub const PJ_FALSE: pj_constants_ = 0;
pub type pj_constants_ = u32;
pub type pj_off_t = pj_int64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_str_t {
    pub ptr: *mut ::std::os::raw::c_char,
    pub slen: pj_ssize_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pj_timestamp {
    pub u32_: pj_timestamp__bindgen_ty_1,
    pub u64_: pj_uint64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_timestamp__bindgen_ty_1 {
    pub lo: pj_uint32_t,
    pub hi: pj_uint32_t,
}
pub type pj_list_type = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_hash_table_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_hash_entry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_hash_iterator_t {
    pub index: pj_uint32_t,
    pub entry: *mut pj_hash_entry,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ioqueue_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ioqueue_key_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_timer_heap_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_atomic_t {
    _unused: [u8; 0],
}
pub type pj_atomic_value_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_thread_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_lock_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_grp_lock_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_mutex_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_sem_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_event_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_pipe_t {
    _unused: [u8; 0],
}
pub type pj_oshandle_t = *mut ::std::os::raw::c_void;
pub type pj_sock_t = ::std::os::raw::c_long;
pub type pj_sockaddr_t = ::std::os::raw::c_void;
pub type pj_color_t = ::std::os::raw::c_uint;
pub type pj_exception_id_t = ::std::os::raw::c_int;
pub type pj_exit_callback = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_time_val {
    pub sec: ::std::os::raw::c_long,
    pub msec: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_parsed_time {
    pub wday: ::std::os::raw::c_int,
    pub day: ::std::os::raw::c_int,
    pub mon: ::std::os::raw::c_int,
    pub year: ::std::os::raw::c_int,
    pub sec: ::std::os::raw::c_int,
    pub min: ::std::os::raw::c_int,
    pub hour: ::std::os::raw::c_int,
    pub msec: ::std::os::raw::c_int,
}
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
}
pub const PJ_SD_RECEIVE: pj_socket_sd_type = 0;
pub const PJ_SHUT_RD: pj_socket_sd_type = 0;
pub const PJ_SD_SEND: pj_socket_sd_type = 1;
pub const PJ_SHUT_WR: pj_socket_sd_type = 1;
pub const PJ_SD_BOTH: pj_socket_sd_type = 2;
pub const PJ_SHUT_RDWR: pj_socket_sd_type = 2;
pub type pj_socket_sd_type = u32;
pub type pj_in_addr = in_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_sockaddr_in {
    pub sin_family: pj_uint16_t,
    pub sin_port: pj_uint16_t,
    pub sin_addr: pj_in_addr,
    pub sin_zero_pad: [::std::os::raw::c_char; 8usize],
}
pub type pj_in6_addr = in6_addr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_sockaddr_in6 {
    pub sin6_family: pj_uint16_t,
    pub sin6_port: pj_uint16_t,
    pub sin6_flowinfo: pj_uint32_t,
    pub sin6_addr: pj_in6_addr,
    pub sin6_scope_id: pj_uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_addr_hdr {
    pub sa_family: pj_uint16_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pj_sockaddr {
    pub addr: pj_addr_hdr,
    pub ipv4: pj_sockaddr_in,
    pub ipv6: pj_sockaddr_in6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ip_mreq {
    pub imr_multiaddr: pj_in_addr,
    pub imr_interface: pj_in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_sockopt_params {
    pub cnt: ::std::os::raw::c_uint,
    pub options: [pj_sockopt_params__bindgen_ty_1; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_sockopt_params__bindgen_ty_1 {
    pub level: ::std::os::raw::c_int,
    pub optname: ::std::os::raw::c_int,
    pub optval: *mut ::std::os::raw::c_void,
    pub optlen: ::std::os::raw::c_int,
}
pub const PJMEDIA_TYPE_NONE: pjmedia_type = 0;
pub const PJMEDIA_TYPE_AUDIO: pjmedia_type = 1;
pub const PJMEDIA_TYPE_VIDEO: pjmedia_type = 2;
pub const PJMEDIA_TYPE_APPLICATION: pjmedia_type = 3;
pub const PJMEDIA_TYPE_UNKNOWN: pjmedia_type = 4;
pub type pjmedia_type = u32;
pub const PJMEDIA_TP_PROTO_NONE: pjmedia_tp_proto = 0;
pub const PJMEDIA_TP_PROTO_UNKNOWN: pjmedia_tp_proto = 1;
pub const PJMEDIA_TP_PROTO_UDP: pjmedia_tp_proto = 2;
pub const PJMEDIA_TP_PROTO_RTP: pjmedia_tp_proto = 4;
pub const PJMEDIA_TP_PROTO_DTLS: pjmedia_tp_proto = 8;
pub const PJMEDIA_TP_PROFILE_RTCP_FB: pjmedia_tp_proto = 8192;
pub const PJMEDIA_TP_PROFILE_SRTP: pjmedia_tp_proto = 16384;
pub const PJMEDIA_TP_PROFILE_AVP: pjmedia_tp_proto = 32768;
pub const PJMEDIA_TP_PROTO_RTP_AVP: pjmedia_tp_proto = 32772;
pub const PJMEDIA_TP_PROTO_RTP_SAVP: pjmedia_tp_proto = 49156;
pub const PJMEDIA_TP_PROTO_DTLS_SRTP: pjmedia_tp_proto = 49164;
pub const PJMEDIA_TP_PROTO_RTP_AVPF: pjmedia_tp_proto = 40964;
pub const PJMEDIA_TP_PROTO_RTP_SAVPF: pjmedia_tp_proto = 57348;
pub const PJMEDIA_TP_PROTO_DTLS_SRTPF: pjmedia_tp_proto = 57356;
pub type pjmedia_tp_proto = u32;
pub const PJMEDIA_DIR_NONE: pjmedia_dir = 0;
pub const PJMEDIA_DIR_ENCODING: pjmedia_dir = 1;
pub const PJMEDIA_DIR_CAPTURE: pjmedia_dir = 1;
pub const PJMEDIA_DIR_DECODING: pjmedia_dir = 2;
pub const PJMEDIA_DIR_PLAYBACK: pjmedia_dir = 2;
pub const PJMEDIA_DIR_RENDER: pjmedia_dir = 2;
pub const PJMEDIA_DIR_ENCODING_DECODING: pjmedia_dir = 3;
pub const PJMEDIA_DIR_CAPTURE_PLAYBACK: pjmedia_dir = 3;
pub const PJMEDIA_DIR_CAPTURE_RENDER: pjmedia_dir = 3;
pub type pjmedia_dir = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_endpt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_stream {
    _unused: [u8; 0],
}
pub const PJMEDIA_COORD_BASE_LEFT_TOP: pjmedia_coord_base = 0;
pub const PJMEDIA_COORD_BASE_LEFT_BOTTOM: pjmedia_coord_base = 1;
pub type pjmedia_coord_base = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_ratio {
    pub num: ::std::os::raw::c_int,
    pub denum: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_coord {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rect_size {
    pub w: ::std::os::raw::c_uint,
    pub h: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rect {
    pub coord: pjmedia_coord,
    pub size: pjmedia_rect_size,
}
pub const PJMEDIA_ORIENT_UNKNOWN: pjmedia_orient = 0;
pub const PJMEDIA_ORIENT_NATURAL: pjmedia_orient = 1;
pub const PJMEDIA_ORIENT_ROTATE_90DEG: pjmedia_orient = 2;
pub const PJMEDIA_ORIENT_ROTATE_180DEG: pjmedia_orient = 3;
pub const PJMEDIA_ORIENT_ROTATE_270DEG: pjmedia_orient = 4;
pub type pjmedia_orient = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_clock_src {
    pub media_type: pjmedia_type,
    pub clock_rate: ::std::os::raw::c_uint,
    pub ptime_usec: ::std::os::raw::c_uint,
    pub timestamp: pj_timestamp,
    pub last_update: pj_timestamp,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_clock {
    _unused: [u8; 0],
}
pub const PJMEDIA_CLOCK_NO_ASYNC: pjmedia_clock_options = 1;
pub const PJMEDIA_CLOCK_NO_HIGHEST_PRIO: pjmedia_clock_options = 2;
pub type pjmedia_clock_options = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_clock_param {
    pub usec_interval: ::std::os::raw::c_uint,
    pub clock_rate: ::std::os::raw::c_uint,
}
pub type pjmedia_clock_callback = ::std::option::Option<
    unsafe extern "C" fn(ts: *const pj_timestamp, user_data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_list {
    pub prev: *mut ::std::os::raw::c_void,
    pub next: *mut ::std::os::raw::c_void,
}
pub type pj_pool_callback =
    ::std::option::Option<unsafe extern "C" fn(pool: *mut pj_pool_t, size: pj_size_t)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_pool_block {
    pub prev: *mut pj_pool_block,
    pub next: *mut pj_pool_block,
    pub buf: *mut ::std::os::raw::c_uchar,
    pub cur: *mut ::std::os::raw::c_uchar,
    pub end: *mut ::std::os::raw::c_uchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_pool_t {
    pub prev: *mut pj_pool_t,
    pub next: *mut pj_pool_t,
    pub obj_name: [::std::os::raw::c_char; 32usize],
    pub factory: *mut pj_pool_factory,
    pub factory_data: *mut ::std::os::raw::c_void,
    pub capacity: pj_size_t,
    pub increment_size: pj_size_t,
    pub block_list: pj_pool_block,
    pub callback: pj_pool_callback,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_pool_factory_policy {
    pub block_alloc: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pj_pool_factory,
            size: pj_size_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub block_free: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pj_pool_factory,
            mem: *mut ::std::os::raw::c_void,
            size: pj_size_t,
        ),
    >,
    pub callback: pj_pool_callback,
    pub flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_pool_factory {
    pub policy: pj_pool_factory_policy,
    pub create_pool: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pj_pool_factory,
            name: *const ::std::os::raw::c_char,
            initial_size: pj_size_t,
            increment_size: pj_size_t,
            callback: pj_pool_callback,
        ) -> *mut pj_pool_t,
    >,
    pub release_pool: ::std::option::Option<
        unsafe extern "C" fn(factory: *mut pj_pool_factory, pool: *mut pj_pool_t),
    >,
    pub dump_status: ::std::option::Option<
        unsafe extern "C" fn(factory: *mut pj_pool_factory, detail: pj_bool_t),
    >,
    pub on_block_alloc: ::std::option::Option<
        unsafe extern "C" fn(factory: *mut pj_pool_factory, size: pj_size_t) -> pj_bool_t,
    >,
    pub on_block_free:
        ::std::option::Option<unsafe extern "C" fn(factory: *mut pj_pool_factory, size: pj_size_t)>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_caching_pool {
    pub factory: pj_pool_factory,
    pub capacity: pj_size_t,
    pub max_capacity: pj_size_t,
    pub used_count: pj_size_t,
    pub used_size: pj_size_t,
    pub peak_used_size: pj_size_t,
    pub free_list: [pj_list; 16usize],
    pub used_list: pj_list,
    pub pool_buf: [::std::os::raw::c_char; 512usize],
    pub lock: *mut pj_lock_t,
}
pub type pj_os_err_type = ::std::os::raw::c_int;
pub type pj_error_callback = ::std::option::Option<
    unsafe extern "C" fn(
        e: pj_status_t,
        msg: *mut ::std::os::raw::c_char,
        max: pj_size_t,
    ) -> pj_str_t,
>;
pub const PJMEDIA_FORMAT_L16: pjmedia_format_id = 0;
pub const PJMEDIA_FORMAT_PCM: pjmedia_format_id = 0;
pub const PJMEDIA_FORMAT_PCMA: pjmedia_format_id = 1463897153;
pub const PJMEDIA_FORMAT_ALAW: pjmedia_format_id = 1463897153;
pub const PJMEDIA_FORMAT_PCMU: pjmedia_format_id = 1463897205;
pub const PJMEDIA_FORMAT_ULAW: pjmedia_format_id = 1463897205;
pub const PJMEDIA_FORMAT_AMR: pjmedia_format_id = 1380794656;
pub const PJMEDIA_FORMAT_G729: pjmedia_format_id = 959592263;
pub const PJMEDIA_FORMAT_ILBC: pjmedia_format_id = 1128418377;
pub const PJMEDIA_FORMAT_RGB24: pjmedia_format_id = 859981650;
pub const PJMEDIA_FORMAT_RGBA: pjmedia_format_id = 1094862674;
pub const PJMEDIA_FORMAT_BGRA: pjmedia_format_id = 1095911234;
pub const PJMEDIA_FORMAT_RGB32: pjmedia_format_id = 1094862674;
pub const PJMEDIA_FORMAT_DIB: pjmedia_format_id = 541215044;
pub const PJMEDIA_FORMAT_GBRP: pjmedia_format_id = 1347568199;
pub const PJMEDIA_FORMAT_AYUV: pjmedia_format_id = 1448433985;
pub const PJMEDIA_FORMAT_YUY2: pjmedia_format_id = 844715353;
pub const PJMEDIA_FORMAT_UYVY: pjmedia_format_id = 1498831189;
pub const PJMEDIA_FORMAT_YVYU: pjmedia_format_id = 1431918169;
pub const PJMEDIA_FORMAT_I420: pjmedia_format_id = 808596553;
pub const PJMEDIA_FORMAT_IYUV: pjmedia_format_id = 808596553;
pub const PJMEDIA_FORMAT_YV12: pjmedia_format_id = 842094169;
pub const PJMEDIA_FORMAT_NV12: pjmedia_format_id = 842094158;
pub const PJMEDIA_FORMAT_NV21: pjmedia_format_id = 825382478;
pub const PJMEDIA_FORMAT_I422: pjmedia_format_id = 842150985;
pub const PJMEDIA_FORMAT_I420JPEG: pjmedia_format_id = 808596554;
pub const PJMEDIA_FORMAT_I422JPEG: pjmedia_format_id = 842150986;
pub const PJMEDIA_FORMAT_H261: pjmedia_format_id = 825635400;
pub const PJMEDIA_FORMAT_H263: pjmedia_format_id = 859189832;
pub const PJMEDIA_FORMAT_H263P: pjmedia_format_id = 859189840;
pub const PJMEDIA_FORMAT_H264: pjmedia_format_id = 875967048;
pub const PJMEDIA_FORMAT_VP8: pjmedia_format_id = 808996950;
pub const PJMEDIA_FORMAT_VP9: pjmedia_format_id = 809062486;
pub const PJMEDIA_FORMAT_MJPEG: pjmedia_format_id = 1196444237;
pub const PJMEDIA_FORMAT_MPEG1VIDEO: pjmedia_format_id = 1446072397;
pub const PJMEDIA_FORMAT_MPEG2VIDEO: pjmedia_format_id = 1446137933;
pub const PJMEDIA_FORMAT_MPEG4: pjmedia_format_id = 877088845;
pub const PJMEDIA_FORMAT_INVALID: pjmedia_format_id = 4294967295;
pub type pjmedia_format_id = u32;
pub const PJMEDIA_FORMAT_DETAIL_NONE: pjmedia_format_detail_type = 0;
pub const PJMEDIA_FORMAT_DETAIL_AUDIO: pjmedia_format_detail_type = 1;
pub const PJMEDIA_FORMAT_DETAIL_VIDEO: pjmedia_format_detail_type = 2;
pub const PJMEDIA_FORMAT_DETAIL_MAX: pjmedia_format_detail_type = 3;
pub type pjmedia_format_detail_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_audio_format_detail {
    pub clock_rate: ::std::os::raw::c_uint,
    pub channel_count: ::std::os::raw::c_uint,
    pub frame_time_usec: ::std::os::raw::c_uint,
    pub bits_per_sample: ::std::os::raw::c_uint,
    pub avg_bps: pj_uint32_t,
    pub max_bps: pj_uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_video_format_detail {
    pub size: pjmedia_rect_size,
    pub fps: pjmedia_ratio,
    pub avg_bps: pj_uint32_t,
    pub max_bps: pj_uint32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_format {
    pub id: pj_uint32_t,
    pub type_: pjmedia_type,
    pub detail_type: pjmedia_format_detail_type,
    pub det: pjmedia_format__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjmedia_format__bindgen_ty_1 {
    pub aud: pjmedia_audio_format_detail,
    pub vid: pjmedia_video_format_detail,
    pub user: [::std::os::raw::c_char; 1usize],
}
pub const PJMEDIA_COLOR_MODEL_NONE: pjmedia_color_model = 0;
pub const PJMEDIA_COLOR_MODEL_RGB: pjmedia_color_model = 1;
pub const PJMEDIA_COLOR_MODEL_YUV: pjmedia_color_model = 2;
pub type pjmedia_color_model = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_video_apply_fmt_param {
    pub size: pjmedia_rect_size,
    pub buffer: *mut pj_uint8_t,
    pub framebytes: pj_size_t,
    pub strides: [::std::os::raw::c_int; 4usize],
    pub planes: [*mut pj_uint8_t; 4usize],
    pub plane_bytes: [pj_size_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_video_format_info {
    pub id: pj_uint32_t,
    pub name: [::std::os::raw::c_char; 8usize],
    pub color_model: pjmedia_color_model,
    pub bpp: pj_uint8_t,
    pub plane_cnt: pj_uint8_t,
    pub apply_fmt: ::std::option::Option<
        unsafe extern "C" fn(
            vfi: *const pjmedia_video_format_info,
            vafp: *mut pjmedia_video_apply_fmt_param,
        ) -> pj_status_t,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_video_format_mgr {
    _unused: [u8; 0],
}
pub const PJMEDIA_FRAME_TYPE_NONE: pjmedia_frame_type = 0;
pub const PJMEDIA_FRAME_TYPE_AUDIO: pjmedia_frame_type = 1;
pub const PJMEDIA_FRAME_TYPE_EXTENDED: pjmedia_frame_type = 2;
pub const PJMEDIA_FRAME_TYPE_VIDEO: pjmedia_frame_type = 3;
pub type pjmedia_frame_type = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_frame {
    pub type_: pjmedia_frame_type,
    pub buf: *mut ::std::os::raw::c_void,
    pub size: pj_size_t,
    pub timestamp: pj_timestamp,
    pub bit_info: pj_uint32_t,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct pjmedia_frame_ext {
    pub base: pjmedia_frame,
    pub samples_cnt: pj_uint16_t,
    pub subframe_cnt: pj_uint16_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_frame_ext_subframe {
    pub bitlen: pj_uint16_t,
    pub data: [pj_uint8_t; 1usize],
}
pub type pjmedia_aud_dev_index = pj_int32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_aud_stream {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_aud_dev_factory {
    _unused: [u8; 0],
}
pub type pjmedia_aud_dev_factory_create_func_ptr = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut pj_pool_factory) -> *mut pjmedia_aud_dev_factory,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_aud_driver {
    pub create: pjmedia_aud_dev_factory_create_func_ptr,
    pub f: *mut pjmedia_aud_dev_factory,
    pub name: [::std::os::raw::c_char; 32usize],
    pub dev_cnt: ::std::os::raw::c_uint,
    pub start_idx: ::std::os::raw::c_uint,
    pub rec_dev_idx: ::std::os::raw::c_int,
    pub play_dev_idx: ::std::os::raw::c_int,
    pub dev_idx: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_aud_subsys {
    pub init_count: ::std::os::raw::c_uint,
    pub pf: *mut pj_pool_factory,
    pub drv_cnt: ::std::os::raw::c_uint,
    pub drv: [pjmedia_aud_driver; 16usize],
    pub dev_cnt: ::std::os::raw::c_uint,
    pub dev_list: [pj_uint32_t; 64usize],
}
pub const PJMEDIA_AUD_DEV_CAP_EXT_FORMAT: pjmedia_aud_dev_cap = 1;
pub const PJMEDIA_AUD_DEV_CAP_INPUT_LATENCY: pjmedia_aud_dev_cap = 2;
pub const PJMEDIA_AUD_DEV_CAP_OUTPUT_LATENCY: pjmedia_aud_dev_cap = 4;
pub const PJMEDIA_AUD_DEV_CAP_INPUT_VOLUME_SETTING: pjmedia_aud_dev_cap = 8;
pub const PJMEDIA_AUD_DEV_CAP_OUTPUT_VOLUME_SETTING: pjmedia_aud_dev_cap = 16;
pub const PJMEDIA_AUD_DEV_CAP_INPUT_SIGNAL_METER: pjmedia_aud_dev_cap = 32;
pub const PJMEDIA_AUD_DEV_CAP_OUTPUT_SIGNAL_METER: pjmedia_aud_dev_cap = 64;
pub const PJMEDIA_AUD_DEV_CAP_INPUT_ROUTE: pjmedia_aud_dev_cap = 128;
pub const PJMEDIA_AUD_DEV_CAP_INPUT_SOURCE: pjmedia_aud_dev_cap = 128;
pub const PJMEDIA_AUD_DEV_CAP_OUTPUT_ROUTE: pjmedia_aud_dev_cap = 256;
pub const PJMEDIA_AUD_DEV_CAP_EC: pjmedia_aud_dev_cap = 512;
pub const PJMEDIA_AUD_DEV_CAP_EC_TAIL: pjmedia_aud_dev_cap = 1024;
pub const PJMEDIA_AUD_DEV_CAP_VAD: pjmedia_aud_dev_cap = 2048;
pub const PJMEDIA_AUD_DEV_CAP_CNG: pjmedia_aud_dev_cap = 4096;
pub const PJMEDIA_AUD_DEV_CAP_PLC: pjmedia_aud_dev_cap = 8192;
pub const PJMEDIA_AUD_DEV_CAP_MAX: pjmedia_aud_dev_cap = 16384;
pub type pjmedia_aud_dev_cap = u32;
pub const PJMEDIA_AUD_DEV_ROUTE_DEFAULT: pjmedia_aud_dev_route = 0;
pub const PJMEDIA_AUD_DEV_ROUTE_LOUDSPEAKER: pjmedia_aud_dev_route = 1;
pub const PJMEDIA_AUD_DEV_ROUTE_EARPIECE: pjmedia_aud_dev_route = 2;
pub const PJMEDIA_AUD_DEV_ROUTE_BLUETOOTH: pjmedia_aud_dev_route = 4;
pub const PJMEDIA_AUD_DEV_ROUTE_CUSTOM: pjmedia_aud_dev_route = 128;
pub type pjmedia_aud_dev_route = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_aud_dev_info {
    pub name: [::std::os::raw::c_char; 64usize],
    pub input_count: ::std::os::raw::c_uint,
    pub output_count: ::std::os::raw::c_uint,
    pub default_samples_per_sec: ::std::os::raw::c_uint,
    pub driver: [::std::os::raw::c_char; 32usize],
    pub caps: ::std::os::raw::c_uint,
    pub routes: ::std::os::raw::c_uint,
    pub ext_fmt_cnt: ::std::os::raw::c_uint,
    pub ext_fmt: [pjmedia_format; 8usize],
}
pub type pjmedia_aud_play_cb = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        frame: *mut pjmedia_frame,
    ) -> pj_status_t,
>;
pub type pjmedia_aud_rec_cb = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        frame: *mut pjmedia_frame,
    ) -> pj_status_t,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_aud_param {
    pub dir: pjmedia_dir,
    pub rec_id: pjmedia_aud_dev_index,
    pub play_id: pjmedia_aud_dev_index,
    pub clock_rate: ::std::os::raw::c_uint,
    pub channel_count: ::std::os::raw::c_uint,
    pub samples_per_frame: ::std::os::raw::c_uint,
    pub bits_per_sample: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
    pub ext_fmt: pjmedia_format,
    pub input_latency_ms: ::std::os::raw::c_uint,
    pub output_latency_ms: ::std::os::raw::c_uint,
    pub input_vol: ::std::os::raw::c_uint,
    pub output_vol: ::std::os::raw::c_uint,
    pub input_route: pjmedia_aud_dev_route,
    pub output_route: pjmedia_aud_dev_route,
    pub ec_enabled: pj_bool_t,
    pub ec_tail_ms: ::std::os::raw::c_uint,
    pub plc_enabled: pj_bool_t,
    pub cng_enabled: pj_bool_t,
    pub vad_enabled: pj_bool_t,
}
pub type pj_highprec_t = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_math_stat {
    pub n: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub min: ::std::os::raw::c_int,
    pub last: ::std::os::raw::c_int,
    pub mean: ::std::os::raw::c_int,
    pub fmean_: f32,
    pub m2_: pj_highprec_t,
}
pub const PJMEDIA_RTCP_XR_LOSS_RLE: pjmedia_rtcp_xr_type = 1;
pub const PJMEDIA_RTCP_XR_DUP_RLE: pjmedia_rtcp_xr_type = 2;
pub const PJMEDIA_RTCP_XR_RCPT_TIMES: pjmedia_rtcp_xr_type = 4;
pub const PJMEDIA_RTCP_XR_RR_TIME: pjmedia_rtcp_xr_type = 8;
pub const PJMEDIA_RTCP_XR_DLRR: pjmedia_rtcp_xr_type = 16;
pub const PJMEDIA_RTCP_XR_STATS: pjmedia_rtcp_xr_type = 32;
pub const PJMEDIA_RTCP_XR_VOIP_METRICS: pjmedia_rtcp_xr_type = 64;
pub type pjmedia_rtcp_xr_type = u32;
pub const PJMEDIA_RTCP_XR_INFO_SIGNAL_LVL: pjmedia_rtcp_xr_info = 1;
pub const PJMEDIA_RTCP_XR_INFO_NOISE_LVL: pjmedia_rtcp_xr_info = 2;
pub const PJMEDIA_RTCP_XR_INFO_RERL: pjmedia_rtcp_xr_info = 3;
pub const PJMEDIA_RTCP_XR_INFO_R_FACTOR: pjmedia_rtcp_xr_info = 4;
pub const PJMEDIA_RTCP_XR_INFO_MOS_LQ: pjmedia_rtcp_xr_info = 5;
pub const PJMEDIA_RTCP_XR_INFO_MOS_CQ: pjmedia_rtcp_xr_info = 6;
pub const PJMEDIA_RTCP_XR_INFO_CONF_PLC: pjmedia_rtcp_xr_info = 7;
pub const PJMEDIA_RTCP_XR_INFO_CONF_JBA: pjmedia_rtcp_xr_info = 8;
pub const PJMEDIA_RTCP_XR_INFO_CONF_JBR: pjmedia_rtcp_xr_info = 9;
pub const PJMEDIA_RTCP_XR_INFO_JB_NOM: pjmedia_rtcp_xr_info = 10;
pub const PJMEDIA_RTCP_XR_INFO_JB_MAX: pjmedia_rtcp_xr_info = 11;
pub const PJMEDIA_RTCP_XR_INFO_JB_ABS_MAX: pjmedia_rtcp_xr_info = 12;
pub type pjmedia_rtcp_xr_info = u32;
pub const PJMEDIA_RTCP_XR_PLC_UNK: pjmedia_rtcp_xr_plc_type = 0;
pub const PJMEDIA_RTCP_XR_PLC_DIS: pjmedia_rtcp_xr_plc_type = 1;
pub const PJMEDIA_RTCP_XR_PLC_ENH: pjmedia_rtcp_xr_plc_type = 2;
pub const PJMEDIA_RTCP_XR_PLC_STD: pjmedia_rtcp_xr_plc_type = 3;
pub type pjmedia_rtcp_xr_plc_type = u32;
pub const PJMEDIA_RTCP_XR_JB_UNKNOWN: pjmedia_rtcp_xr_jb_type = 0;
pub const PJMEDIA_RTCP_XR_JB_FIXED: pjmedia_rtcp_xr_jb_type = 2;
pub const PJMEDIA_RTCP_XR_JB_ADAPTIVE: pjmedia_rtcp_xr_jb_type = 3;
pub type pjmedia_rtcp_xr_jb_type = u32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_rb_header {
    pub bt: pj_uint8_t,
    pub specific: pj_uint8_t,
    pub length: pj_uint16_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_rb_rr_time {
    pub header: pjmedia_rtcp_xr_rb_header,
    pub ntp_sec: pj_uint32_t,
    pub ntp_frac: pj_uint32_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_rb_dlrr_item {
    pub ssrc: pj_uint32_t,
    pub lrr: pj_uint32_t,
    pub dlrr: pj_uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_rb_dlrr {
    pub header: pjmedia_rtcp_xr_rb_header,
    pub item: pjmedia_rtcp_xr_rb_dlrr_item,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_rb_stats {
    pub header: pjmedia_rtcp_xr_rb_header,
    pub ssrc: pj_uint32_t,
    pub begin_seq: pj_uint16_t,
    pub end_seq: pj_uint16_t,
    pub lost: pj_uint32_t,
    pub dup: pj_uint32_t,
    pub jitter_min: pj_uint32_t,
    pub jitter_max: pj_uint32_t,
    pub jitter_mean: pj_uint32_t,
    pub jitter_dev: pj_uint32_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl pjmedia_rtcp_xr_rb_stats {
    #[inline]
    pub fn toh_min(&self) -> pj_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_toh_min(&mut self, val: pj_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn toh_max(&self) -> pj_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_toh_max(&mut self, val: pj_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn toh_mean(&self) -> pj_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_toh_mean(&mut self, val: pj_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn toh_dev(&self) -> pj_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_toh_dev(&mut self, val: pj_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        toh_min: pj_uint32_t,
        toh_max: pj_uint32_t,
        toh_mean: pj_uint32_t,
        toh_dev: pj_uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let toh_min: u32 = unsafe { ::std::mem::transmute(toh_min) };
            toh_min as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let toh_max: u32 = unsafe { ::std::mem::transmute(toh_max) };
            toh_max as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let toh_mean: u32 = unsafe { ::std::mem::transmute(toh_mean) };
            toh_mean as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let toh_dev: u32 = unsafe { ::std::mem::transmute(toh_dev) };
            toh_dev as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_rb_voip_mtc {
    pub header: pjmedia_rtcp_xr_rb_header,
    pub ssrc: pj_uint32_t,
    pub loss_rate: pj_uint8_t,
    pub discard_rate: pj_uint8_t,
    pub burst_den: pj_uint8_t,
    pub gap_den: pj_uint8_t,
    pub burst_dur: pj_uint16_t,
    pub gap_dur: pj_uint16_t,
    pub rnd_trip_delay: pj_uint16_t,
    pub end_sys_delay: pj_uint16_t,
    pub signal_lvl: pj_uint8_t,
    pub noise_lvl: pj_uint8_t,
    pub rerl: pj_uint8_t,
    pub gmin: pj_uint8_t,
    pub r_factor: pj_uint8_t,
    pub ext_r_factor: pj_uint8_t,
    pub mos_lq: pj_uint8_t,
    pub mos_cq: pj_uint8_t,
    pub rx_config: pj_uint8_t,
    pub reserved2: pj_uint8_t,
    pub jb_nom: pj_uint16_t,
    pub jb_max: pj_uint16_t,
    pub jb_abs_max: pj_uint16_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_rtcp_xr_pkt {
    pub common: pjmedia_rtcp_xr_pkt__bindgen_ty_1,
    pub buf: [pj_int8_t; 104usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_pkt__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub ssrc: pj_uint32_t,
}
impl pjmedia_rtcp_xr_pkt__bindgen_ty_1 {
    #[inline]
    pub fn count(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_count(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn p(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_p(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn version(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_version(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pt(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pt(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn length(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_length(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        count: ::std::os::raw::c_uint,
        p: ::std::os::raw::c_uint,
        version: ::std::os::raw::c_uint,
        pt: ::std::os::raw::c_uint,
        length: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let count: u32 = unsafe { ::std::mem::transmute(count) };
            count as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let p: u32 = unsafe { ::std::mem::transmute(p) };
            p as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let version: u32 = unsafe { ::std::mem::transmute(version) };
            version as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let pt: u32 = unsafe { ::std::mem::transmute(pt) };
            pt as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let length: u32 = unsafe { ::std::mem::transmute(length) };
            length as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_stream_stat {
    pub stat_sum: pjmedia_rtcp_xr_stream_stat__bindgen_ty_1,
    pub voip_mtc: pjmedia_rtcp_xr_stream_stat__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_stream_stat__bindgen_ty_1 {
    pub update: pj_time_val,
    pub begin_seq: pj_uint32_t,
    pub end_seq: pj_uint32_t,
    pub count: ::std::os::raw::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub lost: ::std::os::raw::c_uint,
    pub dup: ::std::os::raw::c_uint,
    pub jitter: pj_math_stat,
    pub toh: pj_math_stat,
}
impl pjmedia_rtcp_xr_stream_stat__bindgen_ty_1 {
    #[inline]
    pub fn l(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_l(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn d(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_d(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn j(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_j(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn t(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_t(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        l: ::std::os::raw::c_uint,
        d: ::std::os::raw::c_uint,
        j: ::std::os::raw::c_uint,
        t: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let l: u32 = unsafe { ::std::mem::transmute(l) };
            l as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let d: u32 = unsafe { ::std::mem::transmute(d) };
            d as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let j: u32 = unsafe { ::std::mem::transmute(j) };
            j as u64
        });
        __bindgen_bitfield_unit.set(3usize, 2u8, {
            let t: u32 = unsafe { ::std::mem::transmute(t) };
            t as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_stream_stat__bindgen_ty_2 {
    pub update: pj_time_val,
    pub loss_rate: pj_uint8_t,
    pub discard_rate: pj_uint8_t,
    pub burst_den: pj_uint8_t,
    pub gap_den: pj_uint8_t,
    pub burst_dur: pj_uint16_t,
    pub gap_dur: pj_uint16_t,
    pub rnd_trip_delay: pj_uint16_t,
    pub end_sys_delay: pj_uint16_t,
    pub signal_lvl: pj_int8_t,
    pub noise_lvl: pj_int8_t,
    pub rerl: pj_uint8_t,
    pub gmin: pj_uint8_t,
    pub r_factor: pj_uint8_t,
    pub ext_r_factor: pj_uint8_t,
    pub mos_lq: pj_uint8_t,
    pub mos_cq: pj_uint8_t,
    pub rx_config: pj_uint8_t,
    pub jb_nom: pj_uint16_t,
    pub jb_max: pj_uint16_t,
    pub jb_abs_max: pj_uint16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_stat {
    pub rx: pjmedia_rtcp_xr_stream_stat,
    pub tx: pjmedia_rtcp_xr_stream_stat,
    pub rtt: pj_math_stat,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_rtcp_xr_session {
    pub name: *mut ::std::os::raw::c_char,
    pub pkt: pjmedia_rtcp_xr_pkt,
    pub rx_lrr: pj_uint32_t,
    pub rx_lrr_time: pj_timestamp,
    pub rx_last_rr: pj_uint32_t,
    pub stat: pjmedia_rtcp_xr_stat,
    pub src_ref_seq: pj_uint32_t,
    pub uninitialized_src_ref_seq: pj_bool_t,
    pub voip_mtc_stat: pjmedia_rtcp_xr_session__bindgen_ty_1,
    pub ptime: ::std::os::raw::c_uint,
    pub frames_per_packet: ::std::os::raw::c_uint,
    pub rtcp_session: *mut pjmedia_rtcp_session,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_xr_session__bindgen_ty_1 {
    pub pkt: pj_uint32_t,
    pub lost: pj_uint32_t,
    pub loss_count: pj_uint32_t,
    pub discard_count: pj_uint32_t,
    pub c11: pj_uint32_t,
    pub c13: pj_uint32_t,
    pub c14: pj_uint32_t,
    pub c22: pj_uint32_t,
    pub c23: pj_uint32_t,
    pub c33: pj_uint32_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtp_hdr {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub seq: pj_uint16_t,
    pub ts: pj_uint32_t,
    pub ssrc: pj_uint32_t,
}
impl pjmedia_rtp_hdr {
    #[inline]
    pub fn cc(&self) -> pj_uint16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_cc(&mut self, val: pj_uint16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn x(&self) -> pj_uint16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_x(&mut self, val: pj_uint16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn p(&self) -> pj_uint16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_p(&mut self, val: pj_uint16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn v(&self) -> pj_uint16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_v(&mut self, val: pj_uint16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pt(&self) -> pj_uint16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 7u8) as u16) }
    }
    #[inline]
    pub fn set_pt(&mut self, val: pj_uint16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn m(&self) -> pj_uint16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_m(&mut self, val: pj_uint16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cc: pj_uint16_t,
        x: pj_uint16_t,
        p: pj_uint16_t,
        v: pj_uint16_t,
        pt: pj_uint16_t,
        m: pj_uint16_t,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let cc: u16 = unsafe { ::std::mem::transmute(cc) };
            cc as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let x: u16 = unsafe { ::std::mem::transmute(x) };
            x as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let p: u16 = unsafe { ::std::mem::transmute(p) };
            p as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let v: u16 = unsafe { ::std::mem::transmute(v) };
            v as u64
        });
        __bindgen_bitfield_unit.set(8usize, 7u8, {
            let pt: u16 = unsafe { ::std::mem::transmute(pt) };
            pt as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let m: u16 = unsafe { ::std::mem::transmute(m) };
            m as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtp_ext_hdr {
    pub profile_data: pj_uint16_t,
    pub length: pj_uint16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtp_dec_hdr {
    pub ext_hdr: *mut pjmedia_rtp_ext_hdr,
    pub ext: *mut pj_uint32_t,
    pub ext_len: ::std::os::raw::c_uint,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtp_dtmf_event {
    pub event: pj_uint8_t,
    pub e_vol: pj_uint8_t,
    pub duration: pj_uint16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtp_seq_session {
    pub max_seq: pj_uint16_t,
    pub cycles: pj_uint32_t,
    pub base_seq: pj_uint32_t,
    pub bad_seq: pj_uint32_t,
    pub probation: pj_uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtp_session {
    pub out_hdr: pjmedia_rtp_hdr,
    pub seq_ctrl: pjmedia_rtp_seq_session,
    pub out_pt: pj_uint16_t,
    pub out_extseq: pj_uint32_t,
    pub has_peer_ssrc: pj_bool_t,
    pub peer_ssrc: pj_uint32_t,
    pub received: pj_uint32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_rtp_status {
    pub status: pjmedia_rtp_status__bindgen_ty_1,
    pub diff: pj_uint16_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjmedia_rtp_status__bindgen_ty_1 {
    pub flag: pjmedia_rtp_status__bindgen_ty_1_flag,
    pub value: pj_uint16_t,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtp_status__bindgen_ty_1_flag {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl pjmedia_rtp_status__bindgen_ty_1_flag {
    #[inline]
    pub fn bad(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bad(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn badpt(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_badpt(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn badssrc(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_badssrc(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dup(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dup(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn outorder(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_outorder(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn probation(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_probation(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn restart(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_restart(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bad: ::std::os::raw::c_int,
        badpt: ::std::os::raw::c_int,
        badssrc: ::std::os::raw::c_int,
        dup: ::std::os::raw::c_int,
        outorder: ::std::os::raw::c_int,
        probation: ::std::os::raw::c_int,
        restart: ::std::os::raw::c_int,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bad: u32 = unsafe { ::std::mem::transmute(bad) };
            bad as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let badpt: u32 = unsafe { ::std::mem::transmute(badpt) };
            badpt as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let badssrc: u32 = unsafe { ::std::mem::transmute(badssrc) };
            badssrc as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let dup: u32 = unsafe { ::std::mem::transmute(dup) };
            dup as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let outorder: u32 = unsafe { ::std::mem::transmute(outorder) };
            outorder as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let probation: u32 = unsafe { ::std::mem::transmute(probation) };
            probation as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let restart: u32 = unsafe { ::std::mem::transmute(restart) };
            restart as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtp_session_setting {
    pub flags: pj_uint8_t,
    pub default_pt: ::std::os::raw::c_int,
    pub sender_ssrc: pj_uint32_t,
    pub peer_ssrc: pj_uint32_t,
    pub seq: pj_uint16_t,
    pub ts: pj_uint32_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_sr {
    pub ntp_sec: pj_uint32_t,
    pub ntp_frac: pj_uint32_t,
    pub rtp_ts: pj_uint32_t,
    pub sender_pcount: pj_uint32_t,
    pub sender_bcount: pj_uint32_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_rr {
    pub ssrc: pj_uint32_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub last_seq: pj_uint32_t,
    pub jitter: pj_uint32_t,
    pub lsr: pj_uint32_t,
    pub dlsr: pj_uint32_t,
}
impl pjmedia_rtcp_rr {
    #[inline]
    pub fn fract_lost(&self) -> pj_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_fract_lost(&mut self, val: pj_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn total_lost_2(&self) -> pj_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_total_lost_2(&mut self, val: pj_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn total_lost_1(&self) -> pj_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_total_lost_1(&mut self, val: pj_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn total_lost_0(&self) -> pj_uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_total_lost_0(&mut self, val: pj_uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fract_lost: pj_uint32_t,
        total_lost_2: pj_uint32_t,
        total_lost_1: pj_uint32_t,
        total_lost_0: pj_uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let fract_lost: u32 = unsafe { ::std::mem::transmute(fract_lost) };
            fract_lost as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let total_lost_2: u32 = unsafe { ::std::mem::transmute(total_lost_2) };
            total_lost_2 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let total_lost_1: u32 = unsafe { ::std::mem::transmute(total_lost_1) };
            total_lost_1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let total_lost_0: u32 = unsafe { ::std::mem::transmute(total_lost_0) };
            total_lost_0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_common {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub ssrc: pj_uint32_t,
}
impl pjmedia_rtcp_common {
    #[inline]
    pub fn count(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_count(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn p(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_p(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn version(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_version(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pt(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pt(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn length(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_length(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        count: ::std::os::raw::c_uint,
        p: ::std::os::raw::c_uint,
        version: ::std::os::raw::c_uint,
        pt: ::std::os::raw::c_uint,
        length: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let count: u32 = unsafe { ::std::mem::transmute(count) };
            count as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let p: u32 = unsafe { ::std::mem::transmute(p) };
            p as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let version: u32 = unsafe { ::std::mem::transmute(version) };
            version as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let pt: u32 = unsafe { ::std::mem::transmute(pt) };
            pt as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let length: u32 = unsafe { ::std::mem::transmute(length) };
            length as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_sr_pkt {
    pub common: pjmedia_rtcp_common,
    pub sr: pjmedia_rtcp_sr,
    pub rr: pjmedia_rtcp_rr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_rr_pkt {
    pub common: pjmedia_rtcp_common,
    pub rr: pjmedia_rtcp_rr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_sdes {
    pub cname: pj_str_t,
    pub name: pj_str_t,
    pub email: pj_str_t,
    pub phone: pj_str_t,
    pub loc: pj_str_t,
    pub tool: pj_str_t,
    pub note: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_ntp_rec {
    pub hi: pj_uint32_t,
    pub lo: pj_uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_stream_stat {
    pub update: pj_time_val,
    pub update_cnt: ::std::os::raw::c_uint,
    pub pkt: pj_uint32_t,
    pub bytes: pj_uint32_t,
    pub discard: ::std::os::raw::c_uint,
    pub loss: ::std::os::raw::c_uint,
    pub reorder: ::std::os::raw::c_uint,
    pub dup: ::std::os::raw::c_uint,
    pub loss_period: pj_math_stat,
    pub loss_type: pjmedia_rtcp_stream_stat__bindgen_ty_1,
    pub jitter: pj_math_stat,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_stream_stat__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl pjmedia_rtcp_stream_stat__bindgen_ty_1 {
    #[inline]
    pub fn burst(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_burst(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn random(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_random(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        burst: ::std::os::raw::c_uint,
        random: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let burst: u32 = unsafe { ::std::mem::transmute(burst) };
            burst as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let random: u32 = unsafe { ::std::mem::transmute(random) };
            random as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_rtcp_stat {
    pub start: pj_time_val,
    pub tx: pjmedia_rtcp_stream_stat,
    pub rx: pjmedia_rtcp_stream_stat,
    pub rtt: pj_math_stat,
    pub rtp_tx_last_ts: pj_uint32_t,
    pub rtp_tx_last_seq: pj_uint16_t,
    pub peer_sdes: pjmedia_rtcp_sdes,
    pub peer_sdes_buf_: [::std::os::raw::c_char; 64usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_rtcp_session {
    pub name: *mut ::std::os::raw::c_char,
    pub rtcp_sr_pkt: pjmedia_rtcp_sr_pkt,
    pub rtcp_rr_pkt: pjmedia_rtcp_rr_pkt,
    pub seq_ctrl: pjmedia_rtp_seq_session,
    pub rtp_last_ts: ::std::os::raw::c_uint,
    pub clock_rate: ::std::os::raw::c_uint,
    pub pkt_size: ::std::os::raw::c_uint,
    pub received: pj_uint32_t,
    pub exp_prior: pj_uint32_t,
    pub rx_prior: pj_uint32_t,
    pub transit: pj_int32_t,
    pub jitter: pj_uint32_t,
    pub tv_base: pj_time_val,
    pub ts_base: pj_timestamp,
    pub ts_freq: pj_timestamp,
    pub rtp_ts_base: pj_uint32_t,
    pub rx_lsr: pj_uint32_t,
    pub rx_lsr_time: pj_timestamp,
    pub peer_ssrc: pj_uint32_t,
    pub stat: pjmedia_rtcp_stat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_session_setting {
    pub name: *mut ::std::os::raw::c_char,
    pub clock_rate: ::std::os::raw::c_uint,
    pub samples_per_frame: ::std::os::raw::c_uint,
    pub ssrc: pj_uint32_t,
    pub rtp_ts_base: pj_uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_attr {
    pub name: pj_str_t,
    pub value: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_rtpmap {
    pub pt: pj_str_t,
    pub enc_name: pj_str_t,
    pub clock_rate: ::std::os::raw::c_uint,
    pub param: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_fmtp {
    pub fmt: pj_str_t,
    pub fmt_param: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_rtcp_attr {
    pub port: ::std::os::raw::c_uint,
    pub net_type: pj_str_t,
    pub addr_type: pj_str_t,
    pub addr: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_ssrc_attr {
    pub ssrc: pj_uint32_t,
    pub cname: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_conn {
    pub net_type: pj_str_t,
    pub addr_type: pj_str_t,
    pub addr: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_bandw {
    pub modifier: pj_str_t,
    pub value: pj_uint32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_sdp_media {
    pub desc: pjmedia_sdp_media__bindgen_ty_1,
    pub conn: *mut pjmedia_sdp_conn,
    pub bandw_count: ::std::os::raw::c_uint,
    pub bandw: [*mut pjmedia_sdp_bandw; 4usize],
    pub attr_count: ::std::os::raw::c_uint,
    pub attr: [*mut pjmedia_sdp_attr; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_media__bindgen_ty_1 {
    pub media: pj_str_t,
    pub port: pj_uint16_t,
    pub port_count: ::std::os::raw::c_uint,
    pub transport: pj_str_t,
    pub fmt_count: ::std::os::raw::c_uint,
    pub fmt: [pj_str_t; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_sdp_session {
    pub origin: pjmedia_sdp_session__bindgen_ty_1,
    pub name: pj_str_t,
    pub conn: *mut pjmedia_sdp_conn,
    pub bandw_count: ::std::os::raw::c_uint,
    pub bandw: [*mut pjmedia_sdp_bandw; 4usize],
    pub time: pjmedia_sdp_session__bindgen_ty_2,
    pub attr_count: ::std::os::raw::c_uint,
    pub attr: [*mut pjmedia_sdp_attr; 68usize],
    pub media_count: ::std::os::raw::c_uint,
    pub media: [*mut pjmedia_sdp_media; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_session__bindgen_ty_1 {
    pub user: pj_str_t,
    pub id: pj_uint32_t,
    pub version: pj_uint32_t,
    pub net_type: pj_str_t,
    pub addr_type: pj_str_t,
    pub addr: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_session__bindgen_ty_2 {
    pub start: pj_uint32_t,
    pub stop: pj_uint32_t,
}
pub const PJMEDIA_RTCP_FB_ACK: pjmedia_rtcp_fb_type = 0;
pub const PJMEDIA_RTCP_FB_NACK: pjmedia_rtcp_fb_type = 1;
pub const PJMEDIA_RTCP_FB_TRR_INT: pjmedia_rtcp_fb_type = 2;
pub const PJMEDIA_RTCP_FB_OTHER: pjmedia_rtcp_fb_type = 3;
pub type pjmedia_rtcp_fb_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_fb_cap {
    pub codec_id: pj_str_t,
    pub type_: pjmedia_rtcp_fb_type,
    pub type_name: pj_str_t,
    pub param: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_fb_info {
    pub cap_count: ::std::os::raw::c_uint,
    pub caps: [pjmedia_rtcp_fb_cap; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_fb_setting {
    pub dont_use_avpf: pj_bool_t,
    pub cap_count: ::std::os::raw::c_uint,
    pub caps: [pjmedia_rtcp_fb_cap; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_fb_nack {
    pub pid: pj_int32_t,
    pub blp: pj_uint16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_fb_sli {
    pub first: pj_uint16_t,
    pub number: pj_uint16_t,
    pub pict_id: pj_uint8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_rtcp_fb_rpsi {
    pub pt: pj_uint8_t,
    pub rpsi: pj_str_t,
    pub rpsi_bit_len: pj_size_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_event_rx_rtcp_fb_data {
    pub cap: pjmedia_rtcp_fb_cap,
    pub msg: pjmedia_event_rx_rtcp_fb_data__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjmedia_event_rx_rtcp_fb_data__bindgen_ty_1 {
    pub nack: pjmedia_rtcp_fb_nack,
    pub sli: pjmedia_rtcp_fb_sli,
    pub rpsi: pjmedia_rtcp_fb_rpsi,
}
pub type pjmedia_obj_sig = pj_uint32_t;
pub type pjmedia_vid_dev_index = pj_int32_t;
pub const PJMEDIA_VID_DEV_HWND_TYPE_NONE: pjmedia_vid_dev_hwnd_type = 0;
pub const PJMEDIA_VID_DEV_HWND_TYPE_WINDOWS: pjmedia_vid_dev_hwnd_type = 1;
pub const PJMEDIA_VID_DEV_HWND_TYPE_IOS: pjmedia_vid_dev_hwnd_type = 2;
pub const PJMEDIA_VID_DEV_HWND_TYPE_ANDROID: pjmedia_vid_dev_hwnd_type = 3;
pub type pjmedia_vid_dev_hwnd_type = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_vid_dev_hwnd {
    pub type_: pjmedia_vid_dev_hwnd_type,
    pub info: pjmedia_vid_dev_hwnd__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjmedia_vid_dev_hwnd__bindgen_ty_1 {
    pub win: pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_1,
    pub x11: pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_2,
    pub cocoa: pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_3,
    pub ios: pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_4,
    pub android: pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_5,
    pub window: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_1 {
    pub hwnd: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_2 {
    pub window: *mut ::std::os::raw::c_void,
    pub display: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_3 {
    pub window: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_4 {
    pub window: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_hwnd__bindgen_ty_1__bindgen_ty_5 {
    pub window: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_switch_param {
    pub target_id: pjmedia_vid_dev_index,
}
pub const PJMEDIA_VID_DEV_WND_BORDER: pjmedia_vid_dev_wnd_flag = 1;
pub const PJMEDIA_VID_DEV_WND_RESIZABLE: pjmedia_vid_dev_wnd_flag = 2;
pub type pjmedia_vid_dev_wnd_flag = u32;
pub const PJMEDIA_VID_DEFAULT_CAPTURE_DEV: pjmedia_vid_dev_std_index = -1;
pub const PJMEDIA_VID_DEFAULT_RENDER_DEV: pjmedia_vid_dev_std_index = -2;
pub const PJMEDIA_VID_INVALID_DEV: pjmedia_vid_dev_std_index = -3;
pub type pjmedia_vid_dev_std_index = i32;
pub const PJMEDIA_VID_DEV_CAP_FORMAT: pjmedia_vid_dev_cap = 1;
pub const PJMEDIA_VID_DEV_CAP_INPUT_SCALE: pjmedia_vid_dev_cap = 2;
pub const PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW: pjmedia_vid_dev_cap = 4;
pub const PJMEDIA_VID_DEV_CAP_OUTPUT_RESIZE: pjmedia_vid_dev_cap = 8;
pub const PJMEDIA_VID_DEV_CAP_OUTPUT_POSITION: pjmedia_vid_dev_cap = 16;
pub const PJMEDIA_VID_DEV_CAP_OUTPUT_HIDE: pjmedia_vid_dev_cap = 32;
pub const PJMEDIA_VID_DEV_CAP_INPUT_PREVIEW: pjmedia_vid_dev_cap = 64;
pub const PJMEDIA_VID_DEV_CAP_ORIENTATION: pjmedia_vid_dev_cap = 128;
pub const PJMEDIA_VID_DEV_CAP_SWITCH: pjmedia_vid_dev_cap = 256;
pub const PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW_FLAGS: pjmedia_vid_dev_cap = 512;
pub const PJMEDIA_VID_DEV_CAP_OUTPUT_FULLSCREEN: pjmedia_vid_dev_cap = 1024;
pub const PJMEDIA_VID_DEV_CAP_MAX: pjmedia_vid_dev_cap = 16384;
pub type pjmedia_vid_dev_cap = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_vid_dev_info {
    pub id: pjmedia_vid_dev_index,
    pub name: [::std::os::raw::c_char; 64usize],
    pub driver: [::std::os::raw::c_char; 32usize],
    pub dir: pjmedia_dir,
    pub has_callback: pj_bool_t,
    pub caps: ::std::os::raw::c_uint,
    pub fmt_cnt: ::std::os::raw::c_uint,
    pub fmt: [pjmedia_format; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_stream {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_cb {
    pub capture_cb: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut pjmedia_vid_dev_stream,
            user_data: *mut ::std::os::raw::c_void,
            frame: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
    pub render_cb: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut pjmedia_vid_dev_stream,
            user_data: *mut ::std::os::raw::c_void,
            frame: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_vid_dev_param {
    pub dir: pjmedia_dir,
    pub cap_id: pjmedia_vid_dev_index,
    pub rend_id: pjmedia_vid_dev_index,
    pub clock_rate: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
    pub fmt: pjmedia_format,
    pub window: pjmedia_vid_dev_hwnd,
    pub disp_size: pjmedia_rect_size,
    pub window_pos: pjmedia_coord,
    pub window_hide: pj_bool_t,
    pub native_preview: pj_bool_t,
    pub orient: pjmedia_orient,
    pub window_flags: ::std::os::raw::c_uint,
    pub window_fullscreen: pj_bool_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_dev_factory {
    _unused: [u8; 0],
}
pub type pjmedia_vid_dev_factory_create_func_ptr = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut pj_pool_factory) -> *mut pjmedia_vid_dev_factory,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_driver {
    pub create: pjmedia_vid_dev_factory_create_func_ptr,
    pub f: *mut pjmedia_vid_dev_factory,
    pub name: [::std::os::raw::c_char; 32usize],
    pub dev_cnt: ::std::os::raw::c_uint,
    pub start_idx: ::std::os::raw::c_uint,
    pub cap_dev_idx: ::std::os::raw::c_int,
    pub rend_dev_idx: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_subsys {
    pub init_count: ::std::os::raw::c_uint,
    pub pf: *mut pj_pool_factory,
    pub drv_cnt: ::std::os::raw::c_uint,
    pub drv: [pjmedia_vid_driver; 8usize],
    pub dev_cnt: ::std::os::raw::c_uint,
    pub dev_list: [pj_uint32_t; 16usize],
}
pub const PJMEDIA_EVENT_NONE: pjmedia_event_type = 0;
pub const PJMEDIA_EVENT_FMT_CHANGED: pjmedia_event_type = 1212370246;
pub const PJMEDIA_EVENT_WND_CLOSING: pjmedia_event_type = 1279479383;
pub const PJMEDIA_EVENT_WND_CLOSED: pjmedia_event_type = 1329811031;
pub const PJMEDIA_EVENT_WND_RESIZED: pjmedia_event_type = 1515343447;
pub const PJMEDIA_EVENT_MOUSE_BTN_DOWN: pjmedia_event_type = 1313100621;
pub const PJMEDIA_EVENT_KEYFRAME_FOUND: pjmedia_event_type = 1179797065;
pub const PJMEDIA_EVENT_KEYFRAME_MISSING: pjmedia_event_type = 1297237577;
pub const PJMEDIA_EVENT_ORIENT_CHANGED: pjmedia_event_type = 1414419023;
pub const PJMEDIA_EVENT_RX_RTCP_FB: pjmedia_event_type = 1111905362;
pub const PJMEDIA_EVENT_AUD_DEV_ERROR: pjmedia_event_type = 1381123393;
pub const PJMEDIA_EVENT_VID_DEV_ERROR: pjmedia_event_type = 1381123414;
pub const PJMEDIA_EVENT_MEDIA_TP_ERR: pjmedia_event_type = 1381123412;
pub const PJMEDIA_EVENT_CALLBACK: pjmedia_event_type = 538985027;
pub type pjmedia_event_type = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_event_fmt_changed_data {
    pub dir: pjmedia_dir,
    pub new_fmt: pjmedia_format,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_event_dummy_data {
    pub dummy: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_event_wnd_resized_data {
    pub new_size: pjmedia_rect_size,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_event_wnd_closing_data {
    pub cancel: pj_bool_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_event_aud_dev_err_data {
    pub dir: pjmedia_dir,
    pub id: pjmedia_aud_dev_index,
    pub status: pj_status_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_event_vid_dev_err_data {
    pub dir: pjmedia_dir,
    pub id: pjmedia_vid_dev_index,
    pub status: pj_status_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_event_media_tp_err_data {
    pub type_: pjmedia_type,
    pub is_rtp: pj_bool_t,
    pub dir: pjmedia_dir,
    pub status: pj_status_t,
}
pub type pjmedia_event_wnd_closed_data = pjmedia_event_dummy_data;
pub type pjmedia_event_mouse_btn_down_data = pjmedia_event_dummy_data;
pub type pjmedia_event_keyframe_found_data = pjmedia_event_dummy_data;
pub type pjmedia_event_keyframe_missing_data = pjmedia_event_dummy_data;
pub type pjmedia_event_user_data = [::std::os::raw::c_char; 40usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_event {
    pub type_: pjmedia_event_type,
    pub timestamp: pj_timestamp,
    pub src: *const ::std::os::raw::c_void,
    pub epub: *const ::std::os::raw::c_void,
    pub data: pjmedia_event__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjmedia_event__bindgen_ty_1 {
    pub fmt_changed: pjmedia_event_fmt_changed_data,
    pub wnd_resized: pjmedia_event_wnd_resized_data,
    pub wnd_closing: pjmedia_event_wnd_closing_data,
    pub wnd_closed: pjmedia_event_wnd_closed_data,
    pub mouse_btn_down: pjmedia_event_mouse_btn_down_data,
    pub keyframe_found: pjmedia_event_keyframe_found_data,
    pub keyframe_missing: pjmedia_event_keyframe_missing_data,
    pub aud_dev_err: pjmedia_event_aud_dev_err_data,
    pub vid_dev_err: pjmedia_event_vid_dev_err_data,
    pub user: pjmedia_event_user_data,
    pub med_tp_err: pjmedia_event_media_tp_err_data,
    pub rx_rtcp_fb: pjmedia_event_rx_rtcp_fb_data,
    pub ptr: *mut ::std::os::raw::c_void,
}
pub type pjmedia_event_cb = ::std::option::Option<
    unsafe extern "C" fn(
        event: *mut pjmedia_event,
        user_data: *mut ::std::os::raw::c_void,
    ) -> pj_status_t,
>;
pub const PJMEDIA_EVENT_PUBLISH_DEFAULT: pjmedia_event_publish_flag = 0;
pub const PJMEDIA_EVENT_PUBLISH_POST_EVENT: pjmedia_event_publish_flag = 1;
pub type pjmedia_event_publish_flag = u32;
pub const PJMEDIA_EVENT_MGR_NO_THREAD: pjmedia_event_mgr_flag = 1;
pub type pjmedia_event_mgr_flag = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_event_mgr {
    _unused: [u8; 0],
}
pub const PJ_SYS_HAS_IOS_BG: pj_sys_info_flag = 1;
pub type pj_sys_info_flag = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_sys_info {
    pub machine: pj_str_t,
    pub os_name: pj_str_t,
    pub os_ver: pj_uint32_t,
    pub sdk_name: pj_str_t,
    pub sdk_ver: pj_uint32_t,
    pub info: pj_str_t,
    pub flags: pj_uint32_t,
}
pub const PJ_THREAD_SUSPENDED: pj_thread_create_flags = 1;
pub type pj_thread_create_flags = u32;
pub type pj_thread_proc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type pj_thread_desc = [::std::os::raw::c_long; 64usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_symbianos_params {
    pub rsocketserv: *mut ::std::os::raw::c_void,
    pub rconnection: *mut ::std::os::raw::c_void,
    pub rhostresolver: *mut ::std::os::raw::c_void,
    pub rhostresolver6: *mut ::std::os::raw::c_void,
}
pub const PJ_MUTEX_DEFAULT: pj_mutex_type_e = 0;
pub const PJ_MUTEX_SIMPLE: pj_mutex_type_e = 1;
pub const PJ_MUTEX_RECURSE: pj_mutex_type_e = 2;
pub type pj_mutex_type_e = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_rwmutex_t {
    _unused: [u8; 0],
}
pub type pj_main_func_ptr = ::std::option::Option<
    unsafe extern "C" fn(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub const PJMEDIA_PORT_NO_CHANGE: pjmedia_port_op = 0;
pub const PJMEDIA_PORT_DISABLE: pjmedia_port_op = 1;
pub const PJMEDIA_PORT_MUTE: pjmedia_port_op = 2;
pub const PJMEDIA_PORT_ENABLE: pjmedia_port_op = 3;
pub type pjmedia_port_op = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_port_info {
    pub name: pj_str_t,
    pub signature: pj_uint32_t,
    pub dir: pjmedia_dir,
    pub fmt: pjmedia_format,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_port {
    pub info: pjmedia_port_info,
    pub port_data: pjmedia_port_port_data,
    pub get_clock_src: ::std::option::Option<
        unsafe extern "C" fn(
            this_port: *mut pjmedia_port,
            dir: pjmedia_dir,
        ) -> *mut pjmedia_clock_src,
    >,
    pub put_frame: ::std::option::Option<
        unsafe extern "C" fn(
            this_port: *mut pjmedia_port,
            frame: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
    pub get_frame: ::std::option::Option<
        unsafe extern "C" fn(
            this_port: *mut pjmedia_port,
            frame: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
    pub on_destroy:
        ::std::option::Option<unsafe extern "C" fn(this_port: *mut pjmedia_port) -> pj_status_t>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_port_port_data {
    pub pdata: *mut ::std::os::raw::c_void,
    pub ldata: ::std::os::raw::c_long,
}
pub const PJMEDIA_AVI_FILE_NO_LOOP: pjmedia_avi_file_player_option = 1;
pub type pjmedia_avi_file_player_option = u32;
pub type pjmedia_avi_stream = pjmedia_port;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_avi_streams {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_circ_buf {
    pub buf: *mut pj_int16_t,
    pub capacity: ::std::os::raw::c_uint,
    pub start: *mut pj_int16_t,
    pub len: ::std::os::raw::c_uint,
}
pub const PJMEDIA_RTP_PT_PCMU: pjmedia_rtp_pt = 0;
pub const PJMEDIA_RTP_PT_G721: pjmedia_rtp_pt = 2;
pub const PJMEDIA_RTP_PT_GSM: pjmedia_rtp_pt = 3;
pub const PJMEDIA_RTP_PT_G723: pjmedia_rtp_pt = 4;
pub const PJMEDIA_RTP_PT_DVI4_8K: pjmedia_rtp_pt = 5;
pub const PJMEDIA_RTP_PT_DVI4_16K: pjmedia_rtp_pt = 6;
pub const PJMEDIA_RTP_PT_LPC: pjmedia_rtp_pt = 7;
pub const PJMEDIA_RTP_PT_PCMA: pjmedia_rtp_pt = 8;
pub const PJMEDIA_RTP_PT_G722: pjmedia_rtp_pt = 9;
pub const PJMEDIA_RTP_PT_L16_2: pjmedia_rtp_pt = 10;
pub const PJMEDIA_RTP_PT_L16_1: pjmedia_rtp_pt = 11;
pub const PJMEDIA_RTP_PT_QCELP: pjmedia_rtp_pt = 12;
pub const PJMEDIA_RTP_PT_CN: pjmedia_rtp_pt = 13;
pub const PJMEDIA_RTP_PT_MPA: pjmedia_rtp_pt = 14;
pub const PJMEDIA_RTP_PT_G728: pjmedia_rtp_pt = 15;
pub const PJMEDIA_RTP_PT_DVI4_11K: pjmedia_rtp_pt = 16;
pub const PJMEDIA_RTP_PT_DVI4_22K: pjmedia_rtp_pt = 17;
pub const PJMEDIA_RTP_PT_G729: pjmedia_rtp_pt = 18;
pub const PJMEDIA_RTP_PT_CELB: pjmedia_rtp_pt = 25;
pub const PJMEDIA_RTP_PT_JPEG: pjmedia_rtp_pt = 26;
pub const PJMEDIA_RTP_PT_NV: pjmedia_rtp_pt = 28;
pub const PJMEDIA_RTP_PT_H261: pjmedia_rtp_pt = 31;
pub const PJMEDIA_RTP_PT_MPV: pjmedia_rtp_pt = 32;
pub const PJMEDIA_RTP_PT_MP2T: pjmedia_rtp_pt = 33;
pub const PJMEDIA_RTP_PT_H263: pjmedia_rtp_pt = 34;
pub const PJMEDIA_RTP_PT_DYNAMIC: pjmedia_rtp_pt = 96;
pub type pjmedia_rtp_pt = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_info {
    pub type_: pjmedia_type,
    pub pt: ::std::os::raw::c_uint,
    pub encoding_name: pj_str_t,
    pub clock_rate: ::std::os::raw::c_uint,
    pub channel_cnt: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_fmtp {
    pub cnt: pj_uint8_t,
    pub param: [pjmedia_codec_fmtp_param; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_fmtp_param {
    pub name: pj_str_t,
    pub val: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_param {
    pub info: pjmedia_codec_param__bindgen_ty_1,
    pub setting: pjmedia_codec_param__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_param__bindgen_ty_1 {
    pub clock_rate: ::std::os::raw::c_uint,
    pub channel_cnt: ::std::os::raw::c_uint,
    pub avg_bps: pj_uint32_t,
    pub max_bps: pj_uint32_t,
    pub max_rx_frame_size: ::std::os::raw::c_uint,
    pub frm_ptime: pj_uint16_t,
    pub enc_ptime: pj_uint16_t,
    pub pcm_bits_per_sample: pj_uint8_t,
    pub pt: pj_uint8_t,
    pub fmt_id: pjmedia_format_id,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_param__bindgen_ty_2 {
    pub frm_per_pkt: pj_uint8_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub enc_fmtp: pjmedia_codec_fmtp,
    pub dec_fmtp: pjmedia_codec_fmtp,
}
impl pjmedia_codec_param__bindgen_ty_2 {
    #[inline]
    pub fn vad(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vad(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cng(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cng(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn penh(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_penh(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn plc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_plc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        vad: ::std::os::raw::c_uint,
        cng: ::std::os::raw::c_uint,
        penh: ::std::os::raw::c_uint,
        plc: ::std::os::raw::c_uint,
        reserved: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let vad: u32 = unsafe { ::std::mem::transmute(vad) };
            vad as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let cng: u32 = unsafe { ::std::mem::transmute(cng) };
            cng as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let penh: u32 = unsafe { ::std::mem::transmute(penh) };
            penh as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let plc: u32 = unsafe { ::std::mem::transmute(plc) };
            plc as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_op {
    pub init: ::std::option::Option<
        unsafe extern "C" fn(codec: *mut pjmedia_codec, pool: *mut pj_pool_t) -> pj_status_t,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_codec,
            param: *mut pjmedia_codec_param,
        ) -> pj_status_t,
    >,
    pub close:
        ::std::option::Option<unsafe extern "C" fn(codec: *mut pjmedia_codec) -> pj_status_t>,
    pub modify: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_codec,
            param: *const pjmedia_codec_param,
        ) -> pj_status_t,
    >,
    pub parse: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_codec,
            pkt: *mut ::std::os::raw::c_void,
            pkt_size: pj_size_t,
            timestamp: *const pj_timestamp,
            frame_cnt: *mut ::std::os::raw::c_uint,
            frames: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
    pub encode: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_codec,
            input: *const pjmedia_frame,
            out_size: ::std::os::raw::c_uint,
            output: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
    pub decode: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_codec,
            input: *const pjmedia_frame,
            out_size: ::std::os::raw::c_uint,
            output: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
    pub recover: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_codec,
            out_size: ::std::os::raw::c_uint,
            output: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec {
    pub prev: *mut pjmedia_codec,
    pub next: *mut pjmedia_codec,
    pub codec_data: *mut ::std::os::raw::c_void,
    pub factory: *mut pjmedia_codec_factory,
    pub op: *mut pjmedia_codec_op,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_factory_op {
    pub test_alloc: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_codec_factory,
            info: *const pjmedia_codec_info,
        ) -> pj_status_t,
    >,
    pub default_attr: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_codec_factory,
            info: *const pjmedia_codec_info,
            attr: *mut pjmedia_codec_param,
        ) -> pj_status_t,
    >,
    pub enum_info: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_codec_factory,
            count: *mut ::std::os::raw::c_uint,
            codecs: *mut pjmedia_codec_info,
        ) -> pj_status_t,
    >,
    pub alloc_codec: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_codec_factory,
            info: *const pjmedia_codec_info,
            p_codec: *mut *mut pjmedia_codec,
        ) -> pj_status_t,
    >,
    pub dealloc_codec: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_codec_factory,
            codec: *mut pjmedia_codec,
        ) -> pj_status_t,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn() -> pj_status_t>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_factory {
    pub prev: *mut pjmedia_codec_factory,
    pub next: *mut pjmedia_codec_factory,
    pub factory_data: *mut ::std::os::raw::c_void,
    pub op: *mut pjmedia_codec_factory_op,
}
pub const PJMEDIA_CODEC_PRIO_HIGHEST: pjmedia_codec_priority = 255;
pub const PJMEDIA_CODEC_PRIO_NEXT_HIGHER: pjmedia_codec_priority = 254;
pub const PJMEDIA_CODEC_PRIO_NORMAL: pjmedia_codec_priority = 128;
pub const PJMEDIA_CODEC_PRIO_LOWEST: pjmedia_codec_priority = 1;
pub const PJMEDIA_CODEC_PRIO_DISABLED: pjmedia_codec_priority = 0;
pub type pjmedia_codec_priority = u32;
pub type pjmedia_codec_id = [::std::os::raw::c_char; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_default_param {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_desc {
    pub info: pjmedia_codec_info,
    pub id: pjmedia_codec_id,
    pub prio: pjmedia_codec_priority,
    pub factory: *mut pjmedia_codec_factory,
    pub param: *mut pjmedia_codec_default_param,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_mgr {
    pub pf: *mut pj_pool_factory,
    pub pool: *mut pj_pool_t,
    pub mutex: *mut pj_mutex_t,
    pub factory_list: pjmedia_codec_factory,
    pub codec_cnt: ::std::os::raw::c_uint,
    pub codec_desc: [pjmedia_codec_desc; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_conf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_conf_port_info {
    pub slot: ::std::os::raw::c_uint,
    pub name: pj_str_t,
    pub format: pjmedia_format,
    pub tx_setting: pjmedia_port_op,
    pub rx_setting: pjmedia_port_op,
    pub listener_cnt: ::std::os::raw::c_uint,
    pub listener_slots: *mut ::std::os::raw::c_uint,
    pub listener_adj_level: *mut ::std::os::raw::c_uint,
    pub transmitter_cnt: ::std::os::raw::c_uint,
    pub clock_rate: ::std::os::raw::c_uint,
    pub channel_count: ::std::os::raw::c_uint,
    pub samples_per_frame: ::std::os::raw::c_uint,
    pub bits_per_sample: ::std::os::raw::c_uint,
    pub tx_adj_level: ::std::os::raw::c_int,
    pub rx_adj_level: ::std::os::raw::c_int,
}
pub const PJMEDIA_CONF_NO_MIC: pjmedia_conf_option = 1;
pub const PJMEDIA_CONF_NO_DEVICE: pjmedia_conf_option = 2;
pub const PJMEDIA_CONF_SMALL_FILTER: pjmedia_conf_option = 4;
pub const PJMEDIA_CONF_USE_LINEAR: pjmedia_conf_option = 8;
pub type pjmedia_conf_option = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_conversion_param {
    pub src: pjmedia_format,
    pub dst: pjmedia_format,
}
pub const PJMEDIA_CONVERTER_PRIORITY_LOWEST: pjmedia_converter_priority_guide = 0;
pub const PJMEDIA_CONVERTER_PRIORITY_NORMAL: pjmedia_converter_priority_guide = 15000;
pub const PJMEDIA_CONVERTER_PRIORITY_HIGHEST: pjmedia_converter_priority_guide = 32000;
pub type pjmedia_converter_priority_guide = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_converter_factory {
    pub prev: *mut pjmedia_converter_factory,
    pub next: *mut pjmedia_converter_factory,
    pub name: *const ::std::os::raw::c_char,
    pub priority: ::std::os::raw::c_int,
    pub op: *mut pjmedia_converter_factory_op,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_converter {
    pub op: *mut pjmedia_converter_op,
}
pub type pjmedia_converter_convert_setting = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_converter_factory_op {
    pub create_converter: ::std::option::Option<
        unsafe extern "C" fn(
            cf: *mut pjmedia_converter_factory,
            pool: *mut pj_pool_t,
            prm: *const pjmedia_conversion_param,
            p_cv: *mut *mut pjmedia_converter,
        ) -> pj_status_t,
    >,
    pub destroy_factory:
        ::std::option::Option<unsafe extern "C" fn(cf: *mut pjmedia_converter_factory)>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_converter_op {
    pub convert: ::std::option::Option<
        unsafe extern "C" fn(
            cv: *mut pjmedia_converter,
            src_frame: *mut pjmedia_frame,
            dst_frame: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(cv: *mut pjmedia_converter)>,
    pub convert2: ::std::option::Option<
        unsafe extern "C" fn(
            cv: *mut pjmedia_converter,
            src_frame: *mut pjmedia_frame,
            src_frame_size: *const pjmedia_rect_size,
            src_pos: *const pjmedia_coord,
            dst_frame: *mut pjmedia_frame,
            dst_frame_size: *const pjmedia_rect_size,
            dst_pos: *const pjmedia_coord,
            param: *mut pjmedia_converter_convert_setting,
        ) -> pj_status_t,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_converter_mgr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_delay_buf {
    _unused: [u8; 0],
}
pub const PJMEDIA_DELAY_BUF_SIMPLE_FIFO: pjmedia_delay_buf_flag = 1;
pub type pjmedia_delay_buf_flag = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_echo_state {
    _unused: [u8; 0],
}
pub const PJMEDIA_ECHO_DEFAULT: pjmedia_echo_flag = 0;
pub const PJMEDIA_ECHO_SPEEX: pjmedia_echo_flag = 1;
pub const PJMEDIA_ECHO_SIMPLE: pjmedia_echo_flag = 2;
pub const PJMEDIA_ECHO_WEBRTC: pjmedia_echo_flag = 3;
pub const PJMEDIA_ECHO_ALGO_MASK: pjmedia_echo_flag = 15;
pub const PJMEDIA_ECHO_NO_LOCK: pjmedia_echo_flag = 16;
pub const PJMEDIA_ECHO_USE_SIMPLE_FIFO: pjmedia_echo_flag = 32;
pub const PJMEDIA_ECHO_USE_SW_ECHO: pjmedia_echo_flag = 64;
pub const PJMEDIA_ECHO_USE_NOISE_SUPPRESSOR: pjmedia_echo_flag = 128;
pub const PJMEDIA_ECHO_AGGRESSIVENESS_DEFAULT: pjmedia_echo_flag = 0;
pub const PJMEDIA_ECHO_AGGRESSIVENESS_CONSERVATIVE: pjmedia_echo_flag = 256;
pub const PJMEDIA_ECHO_AGGRESSIVENESS_MODERATE: pjmedia_echo_flag = 512;
pub const PJMEDIA_ECHO_AGGRESSIVENESS_AGGRESSIVE: pjmedia_echo_flag = 768;
pub const PJMEDIA_ECHO_AGGRESSIVENESS_MASK: pjmedia_echo_flag = 3840;
pub type pjmedia_echo_flag = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_echo_stat {
    pub name: *const ::std::os::raw::c_char,
    pub median: ::std::os::raw::c_int,
    pub std: ::std::os::raw::c_int,
    pub frac_delay: f32,
    pub learning: ::std::os::raw::c_uint,
    pub duration: ::std::os::raw::c_uint,
    pub tail: ::std::os::raw::c_uint,
    pub min_factor: ::std::os::raw::c_int,
    pub avg_factor: ::std::os::raw::c_int,
    pub stat_info: pj_str_t,
    pub buf_: [::std::os::raw::c_char; 128usize],
}
pub const PJMEDIA_TPMED_NO_TRANSPORT_CHECKING: pjmedia_tranport_media_option = 1;
pub const PJMEDIA_TPMED_RTCP_MUX: pjmedia_tranport_media_option = 2;
pub type pjmedia_tranport_media_option = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_sock_info {
    pub rtp_sock: pj_sock_t,
    pub rtp_addr_name: pj_sockaddr,
    pub rtcp_sock: pj_sock_t,
    pub rtcp_addr_name: pj_sockaddr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_transport_op {
    pub get_info: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            info: *mut pjmedia_transport_info,
        ) -> pj_status_t,
    >,
    pub attach: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            user_data: *mut ::std::os::raw::c_void,
            rem_addr: *const pj_sockaddr_t,
            rem_rtcp: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
            rtp_cb: ::std::option::Option<
                unsafe extern "C" fn(
                    user_data: *mut ::std::os::raw::c_void,
                    pkt: *mut ::std::os::raw::c_void,
                    size: pj_ssize_t,
                ),
            >,
            rtcp_cb: ::std::option::Option<
                unsafe extern "C" fn(
                    user_data: *mut ::std::os::raw::c_void,
                    pkt: *mut ::std::os::raw::c_void,
                    size: pj_ssize_t,
                ),
            >,
        ) -> pj_status_t,
    >,
    pub detach: ::std::option::Option<
        unsafe extern "C" fn(tp: *mut pjmedia_transport, user_data: *mut ::std::os::raw::c_void),
    >,
    pub send_rtp: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            pkt: *const ::std::os::raw::c_void,
            size: pj_size_t,
        ) -> pj_status_t,
    >,
    pub send_rtcp: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            pkt: *const ::std::os::raw::c_void,
            size: pj_size_t,
        ) -> pj_status_t,
    >,
    pub send_rtcp2: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
            pkt: *const ::std::os::raw::c_void,
            size: pj_size_t,
        ) -> pj_status_t,
    >,
    pub media_create: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            sdp_pool: *mut pj_pool_t,
            options: ::std::os::raw::c_uint,
            remote_sdp: *const pjmedia_sdp_session,
            media_index: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub encode_sdp: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            sdp_pool: *mut pj_pool_t,
            sdp_local: *mut pjmedia_sdp_session,
            rem_sdp: *const pjmedia_sdp_session,
            media_index: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub media_start: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            tmp_pool: *mut pj_pool_t,
            sdp_local: *const pjmedia_sdp_session,
            sdp_remote: *const pjmedia_sdp_session,
            media_index: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub media_stop:
        ::std::option::Option<unsafe extern "C" fn(tp: *mut pjmedia_transport) -> pj_status_t>,
    pub simulate_lost: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            dir: pjmedia_dir,
            pct_lost: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub destroy:
        ::std::option::Option<unsafe extern "C" fn(tp: *mut pjmedia_transport) -> pj_status_t>,
    pub attach2: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            att_param: *mut pjmedia_transport_attach_param,
        ) -> pj_status_t,
    >,
}
pub const PJMEDIA_TRANSPORT_TYPE_UDP: pjmedia_transport_type = 0;
pub const PJMEDIA_TRANSPORT_TYPE_ICE: pjmedia_transport_type = 1;
pub const PJMEDIA_TRANSPORT_TYPE_SRTP: pjmedia_transport_type = 2;
pub const PJMEDIA_TRANSPORT_TYPE_LOOP: pjmedia_transport_type = 3;
pub const PJMEDIA_TRANSPORT_TYPE_USER: pjmedia_transport_type = 4;
pub type pjmedia_transport_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_transport {
    pub name: [::std::os::raw::c_char; 32usize],
    pub type_: pjmedia_transport_type,
    pub op: *mut pjmedia_transport_op,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_transport_specific_info {
    pub type_: pjmedia_transport_type,
    pub cbsize: ::std::os::raw::c_int,
    pub buffer: [::std::os::raw::c_char; 288usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_transport_info {
    pub sock_info: pjmedia_sock_info,
    pub src_rtp_name: pj_sockaddr,
    pub src_rtcp_name: pj_sockaddr,
    pub specific_info_cnt: ::std::os::raw::c_uint,
    pub spc_info: [pjmedia_transport_specific_info; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_tp_cb_param {
    pub user_data: *mut ::std::os::raw::c_void,
    pub pkt: *mut ::std::os::raw::c_void,
    pub size: pj_ssize_t,
    pub src_addr: *mut pj_sockaddr,
    pub rem_switch: pj_bool_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_transport_attach_param {
    pub stream: *mut ::std::os::raw::c_void,
    pub media_type: pjmedia_type,
    pub rem_addr: pj_sockaddr,
    pub rem_rtcp: pj_sockaddr,
    pub addr_len: ::std::os::raw::c_uint,
    pub user_data: *mut ::std::os::raw::c_void,
    pub rtp_cb: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            pkt: *mut ::std::os::raw::c_void,
            arg1: pj_ssize_t,
        ),
    >,
    pub rtcp_cb: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            pkt: *mut ::std::os::raw::c_void,
            arg1: pj_ssize_t,
        ),
    >,
    pub rtp_cb2: ::std::option::Option<unsafe extern "C" fn(param: *mut pjmedia_tp_cb_param)>,
}
pub const PJMEDIA_ENDPT_HAS_TELEPHONE_EVENT_FLAG: pjmedia_endpt_flag = 0;
pub type pjmedia_endpt_flag = u32;
pub type pjmedia_endpt_exit_callback =
    ::std::option::Option<unsafe extern "C" fn(endpt: *mut pjmedia_endpt)>;
pub const PJMEDIA_RTP_PT_START: pjmedia_audio_pt = 95;
pub const PJMEDIA_RTP_PT_SPEEX_NB: pjmedia_audio_pt = 96;
pub const PJMEDIA_RTP_PT_SPEEX_WB: pjmedia_audio_pt = 97;
pub const PJMEDIA_RTP_PT_SPEEX_UWB: pjmedia_audio_pt = 98;
pub const PJMEDIA_RTP_PT_SILK_NB: pjmedia_audio_pt = 99;
pub const PJMEDIA_RTP_PT_SILK_MB: pjmedia_audio_pt = 100;
pub const PJMEDIA_RTP_PT_SILK_WB: pjmedia_audio_pt = 101;
pub const PJMEDIA_RTP_PT_SILK_SWB: pjmedia_audio_pt = 102;
pub const PJMEDIA_RTP_PT_ILBC: pjmedia_audio_pt = 103;
pub const PJMEDIA_RTP_PT_AMR: pjmedia_audio_pt = 104;
pub const PJMEDIA_RTP_PT_AMRWB: pjmedia_audio_pt = 105;
pub const PJMEDIA_RTP_PT_AMRWBE: pjmedia_audio_pt = 106;
pub const PJMEDIA_RTP_PT_G726_16: pjmedia_audio_pt = 107;
pub const PJMEDIA_RTP_PT_G726_24: pjmedia_audio_pt = 108;
pub const PJMEDIA_RTP_PT_G726_32: pjmedia_audio_pt = 109;
pub const PJMEDIA_RTP_PT_G726_40: pjmedia_audio_pt = 110;
pub const PJMEDIA_RTP_PT_G722_1_16: pjmedia_audio_pt = 111;
pub const PJMEDIA_RTP_PT_G722_1_24: pjmedia_audio_pt = 112;
pub const PJMEDIA_RTP_PT_G722_1_32: pjmedia_audio_pt = 113;
pub const PJMEDIA_RTP_PT_G7221C_24: pjmedia_audio_pt = 114;
pub const PJMEDIA_RTP_PT_G7221C_32: pjmedia_audio_pt = 115;
pub const PJMEDIA_RTP_PT_G7221C_48: pjmedia_audio_pt = 116;
pub const PJMEDIA_RTP_PT_G7221_RSV1: pjmedia_audio_pt = 117;
pub const PJMEDIA_RTP_PT_G7221_RSV2: pjmedia_audio_pt = 118;
pub const PJMEDIA_RTP_PT_OPUS: pjmedia_audio_pt = 119;
pub type pjmedia_audio_pt = u32;
pub const PJMEDIA_RTP_PT_VID_START: pjmedia_video_pt = 95;
pub const PJMEDIA_RTP_PT_H263P: pjmedia_video_pt = 96;
pub const PJMEDIA_RTP_PT_H264: pjmedia_video_pt = 97;
pub const PJMEDIA_RTP_PT_H264_RSV1: pjmedia_video_pt = 98;
pub const PJMEDIA_RTP_PT_H264_RSV2: pjmedia_video_pt = 99;
pub const PJMEDIA_RTP_PT_H264_RSV3: pjmedia_video_pt = 100;
pub const PJMEDIA_RTP_PT_H264_RSV4: pjmedia_video_pt = 101;
pub const PJMEDIA_RTP_PT_VP8: pjmedia_video_pt = 102;
pub const PJMEDIA_RTP_PT_VP9: pjmedia_video_pt = 103;
pub type pjmedia_video_pt = u32;
pub const PJMEDIA_JB_MISSING_FRAME: pjmedia_jb_frame_type = 0;
pub const PJMEDIA_JB_NORMAL_FRAME: pjmedia_jb_frame_type = 1;
pub const PJMEDIA_JB_ZERO_PREFETCH_FRAME: pjmedia_jb_frame_type = 2;
pub const PJMEDIA_JB_ZERO_EMPTY_FRAME: pjmedia_jb_frame_type = 3;
pub type pjmedia_jb_frame_type = u32;
pub const PJMEDIA_JB_DISCARD_NONE: pjmedia_jb_discard_algo = 0;
pub const PJMEDIA_JB_DISCARD_STATIC: pjmedia_jb_discard_algo = 1;
pub const PJMEDIA_JB_DISCARD_PROGRESSIVE: pjmedia_jb_discard_algo = 2;
pub type pjmedia_jb_discard_algo = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_jb_state {
    pub frame_size: ::std::os::raw::c_uint,
    pub min_prefetch: ::std::os::raw::c_uint,
    pub max_prefetch: ::std::os::raw::c_uint,
    pub max_count: ::std::os::raw::c_uint,
    pub burst: ::std::os::raw::c_uint,
    pub prefetch: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
    pub avg_delay: ::std::os::raw::c_uint,
    pub min_delay: ::std::os::raw::c_uint,
    pub max_delay: ::std::os::raw::c_uint,
    pub dev_delay: ::std::os::raw::c_uint,
    pub avg_burst: ::std::os::raw::c_uint,
    pub lost: ::std::os::raw::c_uint,
    pub discard: ::std::os::raw::c_uint,
    pub empty: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_jbuf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_master_port {
    _unused: [u8; 0],
}
pub const PJMEDIA_MEM_NO_LOOP: pjmedia_mem_player_option = 1;
pub type pjmedia_mem_player_option = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_plc {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_resample {
    _unused: [u8; 0],
}
pub const PJMEDIA_RESAMPLE_USE_LINEAR: pjmedia_resample_port_options = 1;
pub const PJMEDIA_RESAMPLE_USE_SMALL_FILTER: pjmedia_resample_port_options = 2;
pub const PJMEDIA_RESAMPLE_DONT_DESTROY_DN: pjmedia_resample_port_options = 4;
pub type pjmedia_resample_port_options = u32;
pub const PJMEDIA_SDP_NEG_STATE_NULL: pjmedia_sdp_neg_state = 0;
pub const PJMEDIA_SDP_NEG_STATE_LOCAL_OFFER: pjmedia_sdp_neg_state = 1;
pub const PJMEDIA_SDP_NEG_STATE_REMOTE_OFFER: pjmedia_sdp_neg_state = 2;
pub const PJMEDIA_SDP_NEG_STATE_WAIT_NEGO: pjmedia_sdp_neg_state = 3;
pub const PJMEDIA_SDP_NEG_STATE_DONE: pjmedia_sdp_neg_state = 4;
pub type pjmedia_sdp_neg_state = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_sdp_neg {
    _unused: [u8; 0],
}
pub const PJMEDIA_SDP_NEG_ALLOW_MEDIA_CHANGE: pjmedia_mod_offer_flag = 1;
pub type pjmedia_mod_offer_flag = u32;
pub const PJMEDIA_SDP_NEG_FMT_MATCH_ALLOW_MODIFY_ANSWER: pjmedia_sdp_neg_fmt_match_flag = 1;
pub type pjmedia_sdp_neg_fmt_match_flag = u32;
pub type pjmedia_sdp_neg_fmt_match_cb = ::std::option::Option<
    unsafe extern "C" fn(
        pool: *mut pj_pool_t,
        offer: *mut pjmedia_sdp_media,
        o_fmt_idx: ::std::os::raw::c_uint,
        answer: *mut pjmedia_sdp_media,
        a_fmt_idx: ::std::os::raw::c_uint,
        option: ::std::os::raw::c_uint,
    ) -> pj_status_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_silence_det {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_snd_stream {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_snd_dev_info {
    pub name: [::std::os::raw::c_char; 64usize],
    pub input_count: ::std::os::raw::c_uint,
    pub output_count: ::std::os::raw::c_uint,
    pub default_samples_per_sec: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_snd_stream_info {
    pub dir: pjmedia_dir,
    pub play_id: ::std::os::raw::c_int,
    pub rec_id: ::std::os::raw::c_int,
    pub clock_rate: ::std::os::raw::c_uint,
    pub channel_count: ::std::os::raw::c_uint,
    pub samples_per_frame: ::std::os::raw::c_uint,
    pub bits_per_sample: ::std::os::raw::c_uint,
    pub rec_latency: ::std::os::raw::c_uint,
    pub play_latency: ::std::os::raw::c_uint,
}
pub type pjmedia_snd_play_cb = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        timestamp: pj_uint32_t,
        output: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
    ) -> pj_status_t,
>;
pub type pjmedia_snd_rec_cb = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        timestamp: pj_uint32_t,
        input: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
    ) -> pj_status_t,
>;
pub const PJMEDIA_SND_PORT_NO_AUTO_START: pjmedia_snd_port_option = 1;
pub type pjmedia_snd_port_option = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_snd_port_param {
    pub base: pjmedia_aud_param,
    pub options: ::std::os::raw::c_uint,
    pub ec_options: ::std::os::raw::c_uint,
    pub user_data: *mut ::std::os::raw::c_void,
    pub on_play_frame: pjmedia_aud_play_cb,
    pub on_rec_frame: pjmedia_aud_rec_cb,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_snd_port {
    _unused: [u8; 0],
}
pub const PJMEDIA_STEREO_DONT_DESTROY_DN: pjmedia_stereo_port_options = 4;
pub type pjmedia_stereo_port_options = u32;
pub const PJMEDIA_VID_PACKING_UNKNOWN: pjmedia_vid_packing = 0;
pub const PJMEDIA_VID_PACKING_PACKETS: pjmedia_vid_packing = 1;
pub const PJMEDIA_VID_PACKING_WHOLE: pjmedia_vid_packing = 2;
pub type pjmedia_vid_packing = u32;
pub const PJMEDIA_VID_FRM_KEYFRAME: pjmedia_vid_frm_bit_info = 1;
pub type pjmedia_vid_frm_bit_info = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_encode_opt {
    pub force_keyframe: pj_bool_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_codec_info {
    pub fmt_id: pjmedia_format_id,
    pub pt: ::std::os::raw::c_uint,
    pub encoding_name: pj_str_t,
    pub encoding_desc: pj_str_t,
    pub clock_rate: ::std::os::raw::c_uint,
    pub dir: pjmedia_dir,
    pub dec_fmt_id_cnt: ::std::os::raw::c_uint,
    pub dec_fmt_id: [pjmedia_format_id; 8usize],
    pub packings: ::std::os::raw::c_uint,
    pub fps_cnt: ::std::os::raw::c_uint,
    pub fps: [pjmedia_ratio; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_vid_codec_param {
    pub dir: pjmedia_dir,
    pub packing: pjmedia_vid_packing,
    pub enc_fmt: pjmedia_format,
    pub enc_fmtp: pjmedia_codec_fmtp,
    pub enc_mtu: ::std::os::raw::c_uint,
    pub dec_fmt: pjmedia_format,
    pub dec_fmtp: pjmedia_codec_fmtp,
    pub ignore_fmtp: pj_bool_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_codec_op {
    pub init: ::std::option::Option<
        unsafe extern "C" fn(codec: *mut pjmedia_vid_codec, pool: *mut pj_pool_t) -> pj_status_t,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_vid_codec,
            param: *mut pjmedia_vid_codec_param,
        ) -> pj_status_t,
    >,
    pub close:
        ::std::option::Option<unsafe extern "C" fn(codec: *mut pjmedia_vid_codec) -> pj_status_t>,
    pub modify: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_vid_codec,
            param: *const pjmedia_vid_codec_param,
        ) -> pj_status_t,
    >,
    pub get_param: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_vid_codec,
            param: *mut pjmedia_vid_codec_param,
        ) -> pj_status_t,
    >,
    pub encode_begin: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_vid_codec,
            opt: *const pjmedia_vid_encode_opt,
            input: *const pjmedia_frame,
            out_size: ::std::os::raw::c_uint,
            output: *mut pjmedia_frame,
            has_more: *mut pj_bool_t,
        ) -> pj_status_t,
    >,
    pub encode_more: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_vid_codec,
            out_size: ::std::os::raw::c_uint,
            output: *mut pjmedia_frame,
            has_more: *mut pj_bool_t,
        ) -> pj_status_t,
    >,
    pub decode: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_vid_codec,
            count: pj_size_t,
            packets: *mut pjmedia_frame,
            out_size: ::std::os::raw::c_uint,
            output: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
    pub recover: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut pjmedia_vid_codec,
            out_size: ::std::os::raw::c_uint,
            output: *mut pjmedia_frame,
        ) -> pj_status_t,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_codec {
    pub prev: *mut pjmedia_vid_codec,
    pub next: *mut pjmedia_vid_codec,
    pub codec_data: *mut ::std::os::raw::c_void,
    pub factory: *mut pjmedia_vid_codec_factory,
    pub op: *mut pjmedia_vid_codec_op,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_codec_factory_op {
    pub test_alloc: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_vid_codec_factory,
            info: *const pjmedia_vid_codec_info,
        ) -> pj_status_t,
    >,
    pub default_attr: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_vid_codec_factory,
            info: *const pjmedia_vid_codec_info,
            attr: *mut pjmedia_vid_codec_param,
        ) -> pj_status_t,
    >,
    pub enum_info: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_vid_codec_factory,
            count: *mut ::std::os::raw::c_uint,
            codecs: *mut pjmedia_vid_codec_info,
        ) -> pj_status_t,
    >,
    pub alloc_codec: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_vid_codec_factory,
            info: *const pjmedia_vid_codec_info,
            p_codec: *mut *mut pjmedia_vid_codec,
        ) -> pj_status_t,
    >,
    pub dealloc_codec: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjmedia_vid_codec_factory,
            codec: *mut pjmedia_vid_codec,
        ) -> pj_status_t,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_codec_factory {
    pub prev: *mut pjmedia_vid_codec_factory,
    pub next: *mut pjmedia_vid_codec_factory,
    pub factory_data: *mut ::std::os::raw::c_void,
    pub op: *mut pjmedia_vid_codec_factory_op,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_codec_mgr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_stream_rtp_sess_info {
    pub rx_rtp: *const pjmedia_rtp_session,
    pub tx_rtp: *const pjmedia_rtp_session,
    pub rtcp: *const pjmedia_rtcp_session,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_channel {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_stream_info {
    pub type_: pjmedia_type,
    pub proto: pjmedia_tp_proto,
    pub dir: pjmedia_dir,
    pub rem_addr: pj_sockaddr,
    pub rem_rtcp: pj_sockaddr,
    pub rtcp_mux: pj_bool_t,
    pub loc_rtcp_fb: pjmedia_rtcp_fb_info,
    pub rem_rtcp_fb: pjmedia_rtcp_fb_info,
    pub fmt: pjmedia_codec_info,
    pub param: *mut pjmedia_codec_param,
    pub tx_pt: ::std::os::raw::c_uint,
    pub rx_pt: ::std::os::raw::c_uint,
    pub tx_maxptime: ::std::os::raw::c_uint,
    pub tx_event_pt: ::std::os::raw::c_int,
    pub rx_event_pt: ::std::os::raw::c_int,
    pub ssrc: pj_uint32_t,
    pub cname: pj_str_t,
    pub has_rem_ssrc: pj_bool_t,
    pub rem_ssrc: pj_uint32_t,
    pub rem_cname: pj_str_t,
    pub rtp_ts: pj_uint32_t,
    pub rtp_seq: pj_uint16_t,
    pub rtp_seq_ts_set: pj_uint8_t,
    pub jb_init: ::std::os::raw::c_int,
    pub jb_min_pre: ::std::os::raw::c_int,
    pub jb_max_pre: ::std::os::raw::c_int,
    pub jb_max: ::std::os::raw::c_int,
    pub jb_discard_algo: pjmedia_jb_discard_algo,
    pub rtcp_sdes_bye_disabled: pj_bool_t,
}
pub const PJMEDIA_STREAM_DTMF_IS_UPDATE: pjmedia_stream_dtmf_event_flags = 1;
pub const PJMEDIA_STREAM_DTMF_IS_END: pjmedia_stream_dtmf_event_flags = 2;
pub type pjmedia_stream_dtmf_event_flags = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_stream_dtmf_event {
    pub digit: ::std::os::raw::c_int,
    pub timestamp: pj_uint32_t,
    pub duration: pj_uint16_t,
    pub flags: pj_uint16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_tone_desc {
    pub freq1: ::std::os::raw::c_short,
    pub freq2: ::std::os::raw::c_short,
    pub on_msec: ::std::os::raw::c_short,
    pub off_msec: ::std::os::raw::c_short,
    pub volume: ::std::os::raw::c_short,
    pub flags: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_tone_digit {
    pub digit: ::std::os::raw::c_char,
    pub on_msec: ::std::os::raw::c_short,
    pub off_msec: ::std::os::raw::c_short,
    pub volume: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_tone_digit_map {
    pub count: ::std::os::raw::c_uint,
    pub digits: [pjmedia_tone_digit_map__bindgen_ty_1; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_tone_digit_map__bindgen_ty_1 {
    pub digit: ::std::os::raw::c_char,
    pub freq1: ::std::os::raw::c_short,
    pub freq2: ::std::os::raw::c_short,
}
pub const PJ_STUN_BINDING_METHOD: pj_stun_method_e = 1;
pub const PJ_STUN_SHARED_SECRET_METHOD: pj_stun_method_e = 2;
pub const PJ_STUN_ALLOCATE_METHOD: pj_stun_method_e = 3;
pub const PJ_STUN_REFRESH_METHOD: pj_stun_method_e = 4;
pub const PJ_STUN_SEND_METHOD: pj_stun_method_e = 6;
pub const PJ_STUN_DATA_METHOD: pj_stun_method_e = 7;
pub const PJ_STUN_CREATE_PERM_METHOD: pj_stun_method_e = 8;
pub const PJ_STUN_CHANNEL_BIND_METHOD: pj_stun_method_e = 9;
pub const PJ_STUN_CONNECT_METHOD: pj_stun_method_e = 10;
pub const PJ_STUN_CONNECTION_BIND_METHOD: pj_stun_method_e = 11;
pub const PJ_STUN_CONNECTION_ATTEMPT_METHOD: pj_stun_method_e = 12;
pub const PJ_STUN_METHOD_MAX: pj_stun_method_e = 13;
pub type pj_stun_method_e = u32;
pub const PJ_STUN_REQUEST_CLASS: pj_stun_msg_class_e = 0;
pub const PJ_STUN_INDICATION_CLASS: pj_stun_msg_class_e = 1;
pub const PJ_STUN_SUCCESS_CLASS: pj_stun_msg_class_e = 2;
pub const PJ_STUN_ERROR_CLASS: pj_stun_msg_class_e = 3;
pub type pj_stun_msg_class_e = u32;
pub const PJ_STUN_BINDING_REQUEST: pj_stun_msg_type = 1;
pub const PJ_STUN_BINDING_RESPONSE: pj_stun_msg_type = 257;
pub const PJ_STUN_BINDING_ERROR_RESPONSE: pj_stun_msg_type = 273;
pub const PJ_STUN_BINDING_INDICATION: pj_stun_msg_type = 17;
pub const PJ_STUN_SHARED_SECRET_REQUEST: pj_stun_msg_type = 2;
pub const PJ_STUN_SHARED_SECRET_RESPONSE: pj_stun_msg_type = 258;
pub const PJ_STUN_SHARED_SECRET_ERROR_RESPONSE: pj_stun_msg_type = 274;
pub const PJ_STUN_ALLOCATE_REQUEST: pj_stun_msg_type = 3;
pub const PJ_STUN_ALLOCATE_RESPONSE: pj_stun_msg_type = 259;
pub const PJ_STUN_ALLOCATE_ERROR_RESPONSE: pj_stun_msg_type = 275;
pub const PJ_STUN_REFRESH_REQUEST: pj_stun_msg_type = 4;
pub const PJ_STUN_REFRESH_RESPONSE: pj_stun_msg_type = 260;
pub const PJ_STUN_REFRESH_ERROR_RESPONSE: pj_stun_msg_type = 276;
pub const PJ_STUN_SEND_INDICATION: pj_stun_msg_type = 22;
pub const PJ_STUN_DATA_INDICATION: pj_stun_msg_type = 23;
pub const PJ_STUN_CREATE_PERM_REQUEST: pj_stun_msg_type = 8;
pub const PJ_STUN_CREATE_PERM_RESPONSE: pj_stun_msg_type = 264;
pub const PJ_STUN_CREATE_PERM_ERROR_RESPONSE: pj_stun_msg_type = 280;
pub const PJ_STUN_CHANNEL_BIND_REQUEST: pj_stun_msg_type = 9;
pub const PJ_STUN_CHANNEL_BIND_RESPONSE: pj_stun_msg_type = 265;
pub const PJ_STUN_CHANNEL_BIND_ERROR_RESPONSE: pj_stun_msg_type = 281;
pub const PJ_STUN_CONNECTION_BIND_REQUEST: pj_stun_msg_type = 11;
pub const PJ_STUN_CONNECTION_ATTEMPT_INDICATION: pj_stun_msg_type = 28;
pub type pj_stun_msg_type = u32;
pub const PJ_STUN_ATTR_MAPPED_ADDR: pj_stun_attr_type = 1;
pub const PJ_STUN_ATTR_RESPONSE_ADDR: pj_stun_attr_type = 2;
pub const PJ_STUN_ATTR_CHANGE_REQUEST: pj_stun_attr_type = 3;
pub const PJ_STUN_ATTR_SOURCE_ADDR: pj_stun_attr_type = 4;
pub const PJ_STUN_ATTR_CHANGED_ADDR: pj_stun_attr_type = 5;
pub const PJ_STUN_ATTR_USERNAME: pj_stun_attr_type = 6;
pub const PJ_STUN_ATTR_PASSWORD: pj_stun_attr_type = 7;
pub const PJ_STUN_ATTR_MESSAGE_INTEGRITY: pj_stun_attr_type = 8;
pub const PJ_STUN_ATTR_ERROR_CODE: pj_stun_attr_type = 9;
pub const PJ_STUN_ATTR_UNKNOWN_ATTRIBUTES: pj_stun_attr_type = 10;
pub const PJ_STUN_ATTR_REFLECTED_FROM: pj_stun_attr_type = 11;
pub const PJ_STUN_ATTR_CHANNEL_NUMBER: pj_stun_attr_type = 12;
pub const PJ_STUN_ATTR_LIFETIME: pj_stun_attr_type = 13;
pub const PJ_STUN_ATTR_MAGIC_COOKIE: pj_stun_attr_type = 15;
pub const PJ_STUN_ATTR_BANDWIDTH: pj_stun_attr_type = 16;
pub const PJ_STUN_ATTR_XOR_PEER_ADDR: pj_stun_attr_type = 18;
pub const PJ_STUN_ATTR_DATA: pj_stun_attr_type = 19;
pub const PJ_STUN_ATTR_REALM: pj_stun_attr_type = 20;
pub const PJ_STUN_ATTR_NONCE: pj_stun_attr_type = 21;
pub const PJ_STUN_ATTR_XOR_RELAYED_ADDR: pj_stun_attr_type = 22;
pub const PJ_STUN_ATTR_REQ_ADDR_TYPE: pj_stun_attr_type = 23;
pub const PJ_STUN_ATTR_REQ_ADDR_FAMILY: pj_stun_attr_type = 23;
pub const PJ_STUN_ATTR_EVEN_PORT: pj_stun_attr_type = 24;
pub const PJ_STUN_ATTR_REQ_TRANSPORT: pj_stun_attr_type = 25;
pub const PJ_STUN_ATTR_DONT_FRAGMENT: pj_stun_attr_type = 26;
pub const PJ_STUN_ATTR_XOR_MAPPED_ADDR: pj_stun_attr_type = 32;
pub const PJ_STUN_ATTR_TIMER_VAL: pj_stun_attr_type = 33;
pub const PJ_STUN_ATTR_RESERVATION_TOKEN: pj_stun_attr_type = 34;
pub const PJ_STUN_ATTR_XOR_REFLECTED_FROM: pj_stun_attr_type = 35;
pub const PJ_STUN_ATTR_PRIORITY: pj_stun_attr_type = 36;
pub const PJ_STUN_ATTR_USE_CANDIDATE: pj_stun_attr_type = 37;
pub const PJ_STUN_ATTR_CONNECTION_ID: pj_stun_attr_type = 42;
pub const PJ_STUN_ATTR_ICMP: pj_stun_attr_type = 48;
pub const PJ_STUN_ATTR_END_MANDATORY_ATTR: pj_stun_attr_type = 49;
pub const PJ_STUN_ATTR_START_EXTENDED_ATTR: pj_stun_attr_type = 32801;
pub const PJ_STUN_ATTR_SOFTWARE: pj_stun_attr_type = 32802;
pub const PJ_STUN_ATTR_ALTERNATE_SERVER: pj_stun_attr_type = 32803;
pub const PJ_STUN_ATTR_REFRESH_INTERVAL: pj_stun_attr_type = 32804;
pub const PJ_STUN_ATTR_FINGERPRINT: pj_stun_attr_type = 32808;
pub const PJ_STUN_ATTR_ICE_CONTROLLED: pj_stun_attr_type = 32809;
pub const PJ_STUN_ATTR_ICE_CONTROLLING: pj_stun_attr_type = 32810;
pub const PJ_STUN_ATTR_END_EXTENDED_ATTR: pj_stun_attr_type = 32811;
pub type pj_stun_attr_type = u32;
pub const PJ_STUN_SC_TRY_ALTERNATE: pj_stun_status = 300;
pub const PJ_STUN_SC_BAD_REQUEST: pj_stun_status = 400;
pub const PJ_STUN_SC_UNAUTHORIZED: pj_stun_status = 401;
pub const PJ_STUN_SC_FORBIDDEN: pj_stun_status = 403;
pub const PJ_STUN_SC_UNKNOWN_ATTRIBUTE: pj_stun_status = 420;
pub const PJ_STUN_SC_ALLOCATION_MISMATCH: pj_stun_status = 437;
pub const PJ_STUN_SC_STALE_NONCE: pj_stun_status = 438;
pub const PJ_STUN_SC_TRANSITIONING: pj_stun_status = 439;
pub const PJ_STUN_SC_WRONG_CREDENTIALS: pj_stun_status = 441;
pub const PJ_STUN_SC_UNSUPP_TRANSPORT_PROTO: pj_stun_status = 442;
pub const PJ_STUN_SC_OPER_TCP_ONLY: pj_stun_status = 445;
pub const PJ_STUN_SC_CONNECTION_FAILURE: pj_stun_status = 446;
pub const PJ_STUN_SC_CONNECTION_TIMEOUT: pj_stun_status = 447;
pub const PJ_STUN_SC_ALLOCATION_QUOTA_REACHED: pj_stun_status = 486;
pub const PJ_STUN_SC_ROLE_CONFLICT: pj_stun_status = 487;
pub const PJ_STUN_SC_SERVER_ERROR: pj_stun_status = 500;
pub const PJ_STUN_SC_INSUFFICIENT_CAPACITY: pj_stun_status = 508;
pub const PJ_STUN_SC_GLOBAL_FAILURE: pj_stun_status = 600;
pub type pj_stun_status = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_msg_hdr {
    pub type_: pj_uint16_t,
    pub length: pj_uint16_t,
    pub magic: pj_uint32_t,
    pub tsx_id: [pj_uint8_t; 12usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_attr_hdr {
    pub type_: pj_uint16_t,
    pub length: pj_uint16_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_stun_sockaddr_attr {
    pub hdr: pj_stun_attr_hdr,
    pub xor_ed: pj_bool_t,
    pub sockaddr: pj_sockaddr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_empty_attr {
    pub hdr: pj_stun_attr_hdr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_string_attr {
    pub hdr: pj_stun_attr_hdr,
    pub value: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_uint_attr {
    pub hdr: pj_stun_attr_hdr,
    pub value: pj_uint32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_stun_uint64_attr {
    pub hdr: pj_stun_attr_hdr,
    pub value: pj_timestamp,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_binary_attr {
    pub hdr: pj_stun_attr_hdr,
    pub magic: pj_uint32_t,
    pub length: ::std::os::raw::c_uint,
    pub data: *mut pj_uint8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_msgint_attr {
    pub hdr: pj_stun_attr_hdr,
    pub hmac: [pj_uint8_t; 20usize],
}
pub type pj_stun_fingerprint_attr = pj_stun_uint_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_errcode_attr {
    pub hdr: pj_stun_attr_hdr,
    pub err_code: ::std::os::raw::c_int,
    pub reason: pj_str_t,
}
pub type pj_stun_realm_attr = pj_stun_string_attr;
pub type pj_stun_nonce_attr = pj_stun_string_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_unknown_attr {
    pub hdr: pj_stun_attr_hdr,
    pub attr_count: ::std::os::raw::c_uint,
    pub attrs: [pj_uint16_t; 16usize],
}
pub type pj_stun_mapped_addr_attr = pj_stun_sockaddr_attr;
pub type pj_stun_xor_mapped_addr_attr = pj_stun_sockaddr_attr;
pub type pj_stun_software_attr = pj_stun_string_attr;
pub type pj_stun_alt_server_attr = pj_stun_sockaddr_attr;
pub type pj_stun_refresh_interval_attr = pj_stun_uint_attr;
pub type pj_stun_response_addr_attr = pj_stun_sockaddr_attr;
pub type pj_stun_changed_addr_attr = pj_stun_sockaddr_attr;
pub type pj_stun_change_request_attr = pj_stun_uint_attr;
pub type pj_stun_src_addr_attr = pj_stun_sockaddr_attr;
pub type pj_stun_reflected_from_attr = pj_stun_sockaddr_attr;
pub type pj_stun_username_attr = pj_stun_string_attr;
pub type pj_stun_password_attr = pj_stun_string_attr;
pub type pj_stun_channel_number_attr = pj_stun_uint_attr;
pub type pj_stun_lifetime_attr = pj_stun_uint_attr;
pub type pj_stun_bandwidth_attr = pj_stun_uint_attr;
pub type pj_stun_xor_peer_addr_attr = pj_stun_sockaddr_attr;
pub type pj_stun_data_attr = pj_stun_binary_attr;
pub type pj_stun_xor_relayed_addr_attr = pj_stun_sockaddr_attr;
pub type pj_stun_req_addr_type_attr = pj_stun_uint_attr;
pub type pj_stun_even_port_attr = pj_stun_uint_attr;
pub type pj_stun_req_transport_attr = pj_stun_uint_attr;
pub type pj_stun_dont_fragment_attr = pj_stun_empty_attr;
pub type pj_stun_res_token_attr = pj_stun_uint64_attr;
pub type pj_stun_xor_reflected_from_attr = pj_stun_sockaddr_attr;
pub type pj_stun_priority_attr = pj_stun_uint_attr;
pub type pj_stun_use_candidate_attr = pj_stun_empty_attr;
pub type pj_stun_timer_val_attr = pj_stun_uint_attr;
pub type pj_stun_ice_controlling_attr = pj_stun_uint64_attr;
pub type pj_stun_ice_controlled_attr = pj_stun_uint64_attr;
pub type pj_stun_icmp_attr = pj_stun_uint_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_msg {
    pub hdr: pj_stun_msg_hdr,
    pub attr_count: ::std::os::raw::c_uint,
    pub attr: [*mut pj_stun_attr_hdr; 16usize],
}
pub const PJ_STUN_IS_DATAGRAM: pj_stun_decode_options = 1;
pub const PJ_STUN_CHECK_PACKET: pj_stun_decode_options = 2;
pub const PJ_STUN_NO_AUTHENTICATE: pj_stun_decode_options = 4;
pub const PJ_STUN_NO_FINGERPRINT_CHECK: pj_stun_decode_options = 8;
pub type pj_stun_decode_options = u32;
pub const PJ_STUN_AUTH_NONE: pj_stun_auth_type = 0;
pub const PJ_STUN_AUTH_SHORT_TERM: pj_stun_auth_type = 1;
pub const PJ_STUN_AUTH_LONG_TERM: pj_stun_auth_type = 2;
pub type pj_stun_auth_type = u32;
pub const PJ_STUN_AUTH_CRED_STATIC: pj_stun_auth_cred_type = 0;
pub const PJ_STUN_AUTH_CRED_DYNAMIC: pj_stun_auth_cred_type = 1;
pub type pj_stun_auth_cred_type = u32;
pub const PJ_STUN_PASSWD_PLAIN: pj_stun_passwd_type = 0;
pub const PJ_STUN_PASSWD_HASHED: pj_stun_passwd_type = 1;
pub type pj_stun_passwd_type = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_stun_auth_cred {
    pub type_: pj_stun_auth_cred_type,
    pub data: pj_stun_auth_cred__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pj_stun_auth_cred__bindgen_ty_1 {
    pub static_cred: pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_1,
    pub dyn_cred: pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_1 {
    pub realm: pj_str_t,
    pub username: pj_str_t,
    pub data_type: pj_stun_passwd_type,
    pub data: pj_str_t,
    pub nonce: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_auth_cred__bindgen_ty_1__bindgen_ty_2 {
    pub user_data: *mut ::std::os::raw::c_void,
    pub get_auth: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            pool: *mut pj_pool_t,
            realm: *mut pj_str_t,
            nonce: *mut pj_str_t,
        ) -> pj_status_t,
    >,
    pub get_cred: ::std::option::Option<
        unsafe extern "C" fn(
            msg: *const pj_stun_msg,
            user_data: *mut ::std::os::raw::c_void,
            pool: *mut pj_pool_t,
            realm: *mut pj_str_t,
            username: *mut pj_str_t,
            nonce: *mut pj_str_t,
            data_type: *mut pj_stun_passwd_type,
            data: *mut pj_str_t,
        ) -> pj_status_t,
    >,
    pub get_password: ::std::option::Option<
        unsafe extern "C" fn(
            msg: *const pj_stun_msg,
            user_data: *mut ::std::os::raw::c_void,
            realm: *const pj_str_t,
            username: *const pj_str_t,
            pool: *mut pj_pool_t,
            data_type: *mut pj_stun_passwd_type,
            data: *mut pj_str_t,
        ) -> pj_status_t,
    >,
    pub verify_nonce: ::std::option::Option<
        unsafe extern "C" fn(
            msg: *const pj_stun_msg,
            user_data: *mut ::std::os::raw::c_void,
            realm: *const pj_str_t,
            username: *const pj_str_t,
            nonce: *const pj_str_t,
        ) -> pj_bool_t,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_req_cred_info {
    pub realm: pj_str_t,
    pub username: pj_str_t,
    pub nonce: pj_str_t,
    pub auth_key: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_config {
    pub pf: *mut pj_pool_factory,
    pub ioqueue: *mut pj_ioqueue_t,
    pub timer_heap: *mut pj_timer_heap_t,
    pub options: ::std::os::raw::c_uint,
    pub rto_msec: ::std::os::raw::c_uint,
    pub res_cache_msec: ::std::os::raw::c_uint,
    pub software_name: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_grp_lock_config {
    pub flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_client_tsx {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_tsx_cb {
    pub on_complete: ::std::option::Option<
        unsafe extern "C" fn(
            tsx: *mut pj_stun_client_tsx,
            status: pj_status_t,
            response: *const pj_stun_msg,
            src_addr: *const pj_sockaddr_t,
            src_addr_len: ::std::os::raw::c_uint,
        ),
    >,
    pub on_send_msg: ::std::option::Option<
        unsafe extern "C" fn(
            tsx: *mut pj_stun_client_tsx,
            stun_pkt: *const ::std::os::raw::c_void,
            pkt_size: pj_size_t,
        ) -> pj_status_t,
    >,
    pub on_destroy: ::std::option::Option<unsafe extern "C" fn(tsx: *mut pj_stun_client_tsx)>,
}
pub type pj_timer_id_t = ::std::os::raw::c_int;
pub type pj_timer_heap_callback = ::std::option::Option<
    unsafe extern "C" fn(timer_heap: *mut pj_timer_heap_t, entry: *mut pj_timer_entry),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_timer_entry {
    pub user_data: *mut ::std::os::raw::c_void,
    pub id: ::std::os::raw::c_int,
    pub cb: pj_timer_heap_callback,
    pub _timer_id: pj_timer_id_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_session {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_session_cb {
    pub on_send_msg: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_stun_session,
            token: *mut ::std::os::raw::c_void,
            pkt: *const ::std::os::raw::c_void,
            pkt_size: pj_size_t,
            dst_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub on_rx_request: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_stun_session,
            pkt: *const pj_uint8_t,
            pkt_len: ::std::os::raw::c_uint,
            rdata: *const pj_stun_rx_data,
            token: *mut ::std::os::raw::c_void,
            src_addr: *const pj_sockaddr_t,
            src_addr_len: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub on_request_complete: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_stun_session,
            status: pj_status_t,
            token: *mut ::std::os::raw::c_void,
            tdata: *mut pj_stun_tx_data,
            response: *const pj_stun_msg,
            src_addr: *const pj_sockaddr_t,
            src_addr_len: ::std::os::raw::c_uint,
        ),
    >,
    pub on_rx_indication: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_stun_session,
            pkt: *const pj_uint8_t,
            pkt_len: ::std::os::raw::c_uint,
            msg: *const pj_stun_msg,
            token: *mut ::std::os::raw::c_void,
            src_addr: *const pj_sockaddr_t,
            src_addr_len: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_rx_data {
    pub msg: *mut pj_stun_msg,
    pub info: pj_stun_req_cred_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_tx_data {
    pub prev: *mut pj_stun_tx_data,
    pub next: *mut pj_stun_tx_data,
    pub pool: *mut pj_pool_t,
    pub sess: *mut pj_stun_session,
    pub msg: *mut pj_stun_msg,
    pub token: *mut ::std::os::raw::c_void,
    pub client_tsx: *mut pj_stun_client_tsx,
    pub retransmit: pj_bool_t,
    pub msg_magic: pj_uint32_t,
    pub msg_key: [pj_uint8_t; 12usize],
    pub grp_lock: *mut pj_grp_lock_t,
    pub auth_info: pj_stun_req_cred_info,
    pub pkt: *mut ::std::os::raw::c_void,
    pub max_len: ::std::os::raw::c_uint,
    pub pkt_size: pj_size_t,
    pub addr_len: ::std::os::raw::c_uint,
    pub dst_addr: *const pj_sockaddr_t,
    pub res_timer: pj_timer_entry,
}
pub const PJ_STUN_SESS_LOG_TX_REQ: pj_stun_sess_msg_log_flag = 1;
pub const PJ_STUN_SESS_LOG_TX_RES: pj_stun_sess_msg_log_flag = 2;
pub const PJ_STUN_SESS_LOG_TX_IND: pj_stun_sess_msg_log_flag = 4;
pub const PJ_STUN_SESS_LOG_RX_REQ: pj_stun_sess_msg_log_flag = 8;
pub const PJ_STUN_SESS_LOG_RX_RES: pj_stun_sess_msg_log_flag = 16;
pub const PJ_STUN_SESS_LOG_RX_IND: pj_stun_sess_msg_log_flag = 32;
pub type pj_stun_sess_msg_log_flag = u32;
pub const PJ_ICE_CAND_TYPE_HOST: pj_ice_cand_type = 0;
pub const PJ_ICE_CAND_TYPE_SRFLX: pj_ice_cand_type = 1;
pub const PJ_ICE_CAND_TYPE_PRFLX: pj_ice_cand_type = 2;
pub const PJ_ICE_CAND_TYPE_RELAYED: pj_ice_cand_type = 3;
pub const PJ_ICE_CAND_TYPE_MAX: pj_ice_cand_type = 4;
pub type pj_ice_cand_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ice_sess_comp {
    pub valid_check: *mut pj_ice_sess_check,
    pub nominated_check: *mut pj_ice_sess_check,
    pub stun_sess: *mut pj_stun_session,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ice_msg_data {
    pub transport_id: ::std::os::raw::c_uint,
    pub has_req_data: pj_bool_t,
    pub data: pj_ice_msg_data_data,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pj_ice_msg_data_data {
    pub req: pj_ice_msg_data_data_request_data,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ice_msg_data_data_request_data {
    pub ice: *mut pj_ice_sess,
    pub clist: *mut pj_ice_sess_checklist,
    pub ckid: ::std::os::raw::c_uint,
    pub lcand: *mut pj_ice_sess_cand,
    pub rcand: *mut pj_ice_sess_cand,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ice_sess_cand {
    pub id: ::std::os::raw::c_uint,
    pub type_: pj_ice_cand_type,
    pub status: pj_status_t,
    pub comp_id: pj_uint8_t,
    pub transport_id: pj_uint8_t,
    pub local_pref: pj_uint16_t,
    pub foundation: pj_str_t,
    pub prio: pj_uint32_t,
    pub addr: pj_sockaddr,
    pub base_addr: pj_sockaddr,
    pub rel_addr: pj_sockaddr,
}
pub const PJ_ICE_SESS_CHECK_STATE_FROZEN: pj_ice_sess_check_state = 0;
pub const PJ_ICE_SESS_CHECK_STATE_WAITING: pj_ice_sess_check_state = 1;
pub const PJ_ICE_SESS_CHECK_STATE_IN_PROGRESS: pj_ice_sess_check_state = 2;
pub const PJ_ICE_SESS_CHECK_STATE_SUCCEEDED: pj_ice_sess_check_state = 3;
pub const PJ_ICE_SESS_CHECK_STATE_FAILED: pj_ice_sess_check_state = 4;
pub type pj_ice_sess_check_state = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ice_sess_check {
    pub lcand: *mut pj_ice_sess_cand,
    pub rcand: *mut pj_ice_sess_cand,
    pub foundation_idx: ::std::os::raw::c_int,
    pub prio: pj_timestamp,
    pub state: pj_ice_sess_check_state,
    pub tdata: *mut pj_stun_tx_data,
    pub nominated: pj_bool_t,
    pub err_code: pj_status_t,
}
pub const PJ_ICE_SESS_CHECKLIST_ST_IDLE: pj_ice_sess_checklist_state = 0;
pub const PJ_ICE_SESS_CHECKLIST_ST_RUNNING: pj_ice_sess_checklist_state = 1;
pub const PJ_ICE_SESS_CHECKLIST_ST_COMPLETED: pj_ice_sess_checklist_state = 2;
pub type pj_ice_sess_checklist_state = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ice_sess_checklist {
    pub state: pj_ice_sess_checklist_state,
    pub count: ::std::os::raw::c_uint,
    pub checks: [pj_ice_sess_check; 32usize],
    pub foundation_cnt: ::std::os::raw::c_uint,
    pub foundation: [pj_str_t; 32usize],
    pub timer: pj_timer_entry,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ice_sess_cb {
    pub on_valid_pair: ::std::option::Option<unsafe extern "C" fn(ice: *mut pj_ice_sess)>,
    pub on_ice_complete:
        ::std::option::Option<unsafe extern "C" fn(ice: *mut pj_ice_sess, status: pj_status_t)>,
    pub on_tx_pkt: ::std::option::Option<
        unsafe extern "C" fn(
            ice: *mut pj_ice_sess,
            comp_id: ::std::os::raw::c_uint,
            transport_id: ::std::os::raw::c_uint,
            pkt: *const ::std::os::raw::c_void,
            size: pj_size_t,
            dst_addr: *const pj_sockaddr_t,
            dst_addr_len: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub on_rx_data: ::std::option::Option<
        unsafe extern "C" fn(
            ice: *mut pj_ice_sess,
            comp_id: ::std::os::raw::c_uint,
            transport_id: ::std::os::raw::c_uint,
            pkt: *mut ::std::os::raw::c_void,
            size: pj_size_t,
            src_addr: *const pj_sockaddr_t,
            src_addr_len: ::std::os::raw::c_uint,
        ),
    >,
}
pub const PJ_ICE_SESS_ROLE_UNKNOWN: pj_ice_sess_role = 0;
pub const PJ_ICE_SESS_ROLE_CONTROLLED: pj_ice_sess_role = 1;
pub const PJ_ICE_SESS_ROLE_CONTROLLING: pj_ice_sess_role = 2;
pub type pj_ice_sess_role = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ice_rx_check {
    pub prev: *mut pj_ice_rx_check,
    pub next: *mut pj_ice_rx_check,
    pub comp_id: ::std::os::raw::c_uint,
    pub transport_id: ::std::os::raw::c_uint,
    pub src_addr: pj_sockaddr,
    pub src_addr_len: ::std::os::raw::c_uint,
    pub use_candidate: pj_bool_t,
    pub priority: pj_uint32_t,
    pub role_attr: *mut pj_stun_uint64_attr,
}
pub const PJ_ICE_SESS_TRICKLE_DISABLED: pj_ice_sess_trickle = 0;
pub const PJ_ICE_SESS_TRICKLE_HALF: pj_ice_sess_trickle = 1;
pub const PJ_ICE_SESS_TRICKLE_FULL: pj_ice_sess_trickle = 2;
pub type pj_ice_sess_trickle = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ice_sess_options {
    pub aggressive: pj_bool_t,
    pub nominated_check_delay: ::std::os::raw::c_uint,
    pub controlled_agent_want_nom_timeout: ::std::os::raw::c_int,
    pub trickle: pj_ice_sess_trickle,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ice_sess {
    pub obj_name: [::std::os::raw::c_char; 32usize],
    pub pool: *mut pj_pool_t,
    pub user_data: *mut ::std::os::raw::c_void,
    pub grp_lock: *mut pj_grp_lock_t,
    pub role: pj_ice_sess_role,
    pub opt: pj_ice_sess_options,
    pub tie_breaker: pj_timestamp,
    pub prefs: *mut pj_uint8_t,
    pub is_nominating: pj_bool_t,
    pub is_complete: pj_bool_t,
    pub is_destroying: pj_bool_t,
    pub valid_pair_found: pj_bool_t,
    pub is_trickling: pj_bool_t,
    pub ice_status: pj_status_t,
    pub timer: pj_timer_entry,
    pub cb: pj_ice_sess_cb,
    pub stun_cfg: pj_stun_config,
    pub tx_ufrag: pj_str_t,
    pub tx_uname: pj_str_t,
    pub tx_pass: pj_str_t,
    pub rx_ufrag: pj_str_t,
    pub rx_uname: pj_str_t,
    pub rx_pass: pj_str_t,
    pub comp_cnt: ::std::os::raw::c_uint,
    pub comp: [pj_ice_sess_comp; 2usize],
    pub comp_ka: ::std::os::raw::c_uint,
    pub lcand_cnt: ::std::os::raw::c_uint,
    pub lcand: [pj_ice_sess_cand; 16usize],
    pub lcand_paired: ::std::os::raw::c_uint,
    pub rcand_cnt: ::std::os::raw::c_uint,
    pub rcand: [pj_ice_sess_cand; 16usize],
    pub rcand_paired: ::std::os::raw::c_uint,
    pub tp_data: [pj_ice_msg_data; 5usize],
    pub early_check: pj_ice_rx_check,
    pub clist: pj_ice_sess_checklist,
    pub valid_list: pj_ice_sess_checklist,
    pub tmp: pj_ice_sess__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pj_ice_sess__bindgen_ty_1 {
    pub txt: [::std::os::raw::c_char; 128usize],
    pub errmsg: [::std::os::raw::c_char; 80usize],
}
pub const PJ_DNS_TYPE_A: pj_dns_type = 1;
pub const PJ_DNS_TYPE_NS: pj_dns_type = 2;
pub const PJ_DNS_TYPE_MD: pj_dns_type = 3;
pub const PJ_DNS_TYPE_MF: pj_dns_type = 4;
pub const PJ_DNS_TYPE_CNAME: pj_dns_type = 5;
pub const PJ_DNS_TYPE_SOA: pj_dns_type = 6;
pub const PJ_DNS_TYPE_MB: pj_dns_type = 7;
pub const PJ_DNS_TYPE_MG: pj_dns_type = 8;
pub const PJ_DNS_TYPE_MR: pj_dns_type = 9;
pub const PJ_DNS_TYPE_NULL: pj_dns_type = 10;
pub const PJ_DNS_TYPE_WKS: pj_dns_type = 11;
pub const PJ_DNS_TYPE_PTR: pj_dns_type = 12;
pub const PJ_DNS_TYPE_HINFO: pj_dns_type = 13;
pub const PJ_DNS_TYPE_MINFO: pj_dns_type = 14;
pub const PJ_DNS_TYPE_MX: pj_dns_type = 15;
pub const PJ_DNS_TYPE_TXT: pj_dns_type = 16;
pub const PJ_DNS_TYPE_RP: pj_dns_type = 17;
pub const PJ_DNS_TYPE_AFSB: pj_dns_type = 18;
pub const PJ_DNS_TYPE_X25: pj_dns_type = 19;
pub const PJ_DNS_TYPE_ISDN: pj_dns_type = 20;
pub const PJ_DNS_TYPE_RT: pj_dns_type = 21;
pub const PJ_DNS_TYPE_NSAP: pj_dns_type = 22;
pub const PJ_DNS_TYPE_NSAP_PTR: pj_dns_type = 23;
pub const PJ_DNS_TYPE_SIG: pj_dns_type = 24;
pub const PJ_DNS_TYPE_KEY: pj_dns_type = 25;
pub const PJ_DNS_TYPE_PX: pj_dns_type = 26;
pub const PJ_DNS_TYPE_GPOS: pj_dns_type = 27;
pub const PJ_DNS_TYPE_AAAA: pj_dns_type = 28;
pub const PJ_DNS_TYPE_LOC: pj_dns_type = 29;
pub const PJ_DNS_TYPE_NXT: pj_dns_type = 30;
pub const PJ_DNS_TYPE_EID: pj_dns_type = 31;
pub const PJ_DNS_TYPE_NIMLOC: pj_dns_type = 32;
pub const PJ_DNS_TYPE_SRV: pj_dns_type = 33;
pub const PJ_DNS_TYPE_ATMA: pj_dns_type = 34;
pub const PJ_DNS_TYPE_NAPTR: pj_dns_type = 35;
pub const PJ_DNS_TYPE_KX: pj_dns_type = 36;
pub const PJ_DNS_TYPE_CERT: pj_dns_type = 37;
pub const PJ_DNS_TYPE_A6: pj_dns_type = 38;
pub const PJ_DNS_TYPE_DNAME: pj_dns_type = 39;
pub const PJ_DNS_TYPE_OPT: pj_dns_type = 41;
pub const PJ_DNS_TYPE_APL: pj_dns_type = 42;
pub const PJ_DNS_TYPE_DS: pj_dns_type = 43;
pub const PJ_DNS_TYPE_SSHFP: pj_dns_type = 44;
pub const PJ_DNS_TYPE_IPSECKEY: pj_dns_type = 45;
pub const PJ_DNS_TYPE_RRSIG: pj_dns_type = 46;
pub const PJ_DNS_TYPE_NSEC: pj_dns_type = 47;
pub const PJ_DNS_TYPE_DNSKEY: pj_dns_type = 48;
pub type pj_dns_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_hdr {
    pub id: pj_uint16_t,
    pub flags: pj_uint16_t,
    pub qdcount: pj_uint16_t,
    pub anscount: pj_uint16_t,
    pub nscount: pj_uint16_t,
    pub arcount: pj_uint16_t,
}
pub const PJ_DNS_RCODE_FORMERR: pj_dns_rcode = 1;
pub const PJ_DNS_RCODE_SERVFAIL: pj_dns_rcode = 2;
pub const PJ_DNS_RCODE_NXDOMAIN: pj_dns_rcode = 3;
pub const PJ_DNS_RCODE_NOTIMPL: pj_dns_rcode = 4;
pub const PJ_DNS_RCODE_REFUSED: pj_dns_rcode = 5;
pub const PJ_DNS_RCODE_YXDOMAIN: pj_dns_rcode = 6;
pub const PJ_DNS_RCODE_YXRRSET: pj_dns_rcode = 7;
pub const PJ_DNS_RCODE_NXRRSET: pj_dns_rcode = 8;
pub const PJ_DNS_RCODE_NOTAUTH: pj_dns_rcode = 9;
pub const PJ_DNS_RCODE_NOTZONE: pj_dns_rcode = 10;
pub type pj_dns_rcode = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_parsed_query {
    pub name: pj_str_t,
    pub type_: pj_uint16_t,
    pub dnsclass: pj_uint16_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_dns_parsed_rr {
    pub name: pj_str_t,
    pub type_: pj_uint16_t,
    pub dnsclass: pj_uint16_t,
    pub ttl: pj_uint32_t,
    pub rdlength: pj_uint16_t,
    pub data: *mut ::std::os::raw::c_void,
    pub rdata: pj_dns_parsed_rr_rdata,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pj_dns_parsed_rr_rdata {
    pub srv: pj_dns_parsed_rr_rdata_srv,
    pub cname: pj_dns_parsed_rr_rdata_cname,
    pub ns: pj_dns_parsed_rr_rdata_ns,
    pub ptr: pj_dns_parsed_rr_rdata_ptr,
    pub a: pj_dns_parsed_rr_rdata_a,
    pub aaaa: pj_dns_parsed_rr_rdata_aaaa,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_parsed_rr_rdata_srv {
    pub prio: pj_uint16_t,
    pub weight: pj_uint16_t,
    pub port: pj_uint16_t,
    pub target: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_parsed_rr_rdata_cname {
    pub name: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_parsed_rr_rdata_ns {
    pub name: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_parsed_rr_rdata_ptr {
    pub name: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_parsed_rr_rdata_a {
    pub ip_addr: pj_in_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_dns_parsed_rr_rdata_aaaa {
    pub ip_addr: pj_in6_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_parsed_packet {
    pub hdr: pj_dns_hdr,
    pub q: *mut pj_dns_parsed_query,
    pub ans: *mut pj_dns_parsed_rr,
    pub ns: *mut pj_dns_parsed_rr,
    pub arr: *mut pj_dns_parsed_rr,
}
pub const PJ_DNS_NO_QD: pj_dns_dup_options = 1;
pub const PJ_DNS_NO_ANS: pj_dns_dup_options = 2;
pub const PJ_DNS_NO_NS: pj_dns_dup_options = 4;
pub const PJ_DNS_NO_AR: pj_dns_dup_options = 8;
pub type pj_dns_dup_options = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_resolver {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_async_query {
    _unused: [u8; 0],
}
pub type pj_dns_callback = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        status: pj_status_t,
        response: *mut pj_dns_parsed_packet,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_dns_settings {
    pub options: ::std::os::raw::c_uint,
    pub qretr_delay: ::std::os::raw::c_uint,
    pub qretr_count: ::std::os::raw::c_uint,
    pub cache_max_ttl: ::std::os::raw::c_uint,
    pub good_ns_ttl: ::std::os::raw::c_uint,
    pub bad_ns_ttl: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_dns_a_record {
    pub name: pj_str_t,
    pub alias: pj_str_t,
    pub addr_count: ::std::os::raw::c_uint,
    pub addr: [pj_in_addr; 8usize],
    pub buf_: [::std::os::raw::c_char; 128usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_dns_addr_record {
    pub name: pj_str_t,
    pub alias: pj_str_t,
    pub addr_count: ::std::os::raw::c_uint,
    pub addr: [pj_dns_addr_record__bindgen_ty_1; 8usize],
    pub buf_: [::std::os::raw::c_char; 128usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_dns_addr_record__bindgen_ty_1 {
    pub af: ::std::os::raw::c_int,
    pub ip: pj_dns_addr_record__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pj_dns_addr_record__bindgen_ty_1__bindgen_ty_1 {
    pub v4: pj_in_addr,
    pub v6: pj_in6_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ioqueue_op_key_t {
    pub internal__: [*mut ::std::os::raw::c_void; 32usize],
    pub activesock_data: *mut ::std::os::raw::c_void,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ioqueue_callback {
    pub on_read_complete: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut pj_ioqueue_key_t,
            op_key: *mut pj_ioqueue_op_key_t,
            bytes_read: pj_ssize_t,
        ),
    >,
    pub on_write_complete: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut pj_ioqueue_key_t,
            op_key: *mut pj_ioqueue_op_key_t,
            bytes_sent: pj_ssize_t,
        ),
    >,
    pub on_accept_complete: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut pj_ioqueue_key_t,
            op_key: *mut pj_ioqueue_op_key_t,
            sock: pj_sock_t,
            status: pj_status_t,
        ),
    >,
    pub on_connect_complete: ::std::option::Option<
        unsafe extern "C" fn(key: *mut pj_ioqueue_key_t, status: pj_status_t),
    >,
}
pub const PJ_IOQUEUE_OP_NONE: pj_ioqueue_operation_e = 0;
pub const PJ_IOQUEUE_OP_READ: pj_ioqueue_operation_e = 1;
pub const PJ_IOQUEUE_OP_RECV: pj_ioqueue_operation_e = 2;
pub const PJ_IOQUEUE_OP_RECV_FROM: pj_ioqueue_operation_e = 4;
pub const PJ_IOQUEUE_OP_WRITE: pj_ioqueue_operation_e = 8;
pub const PJ_IOQUEUE_OP_SEND: pj_ioqueue_operation_e = 16;
pub const PJ_IOQUEUE_OP_SEND_TO: pj_ioqueue_operation_e = 32;
pub const PJ_IOQUEUE_OP_ACCEPT: pj_ioqueue_operation_e = 64;
pub const PJ_IOQUEUE_OP_CONNECT: pj_ioqueue_operation_e = 128;
pub type pj_ioqueue_operation_e = u32;
pub const PJ_QOS_TYPE_BEST_EFFORT: pj_qos_type = 0;
pub const PJ_QOS_TYPE_BACKGROUND: pj_qos_type = 1;
pub const PJ_QOS_TYPE_VIDEO: pj_qos_type = 2;
pub const PJ_QOS_TYPE_VOICE: pj_qos_type = 3;
pub const PJ_QOS_TYPE_CONTROL: pj_qos_type = 4;
pub const PJ_QOS_TYPE_SIGNALLING: pj_qos_type = 5;
pub type pj_qos_type = u32;
pub const PJ_QOS_PARAM_HAS_DSCP: pj_qos_flag = 1;
pub const PJ_QOS_PARAM_HAS_SO_PRIO: pj_qos_flag = 2;
pub const PJ_QOS_PARAM_HAS_WMM: pj_qos_flag = 4;
pub type pj_qos_flag = u32;
pub const PJ_QOS_WMM_PRIO_BULK_EFFORT: pj_qos_wmm_prio = 0;
pub const PJ_QOS_WMM_PRIO_BULK: pj_qos_wmm_prio = 1;
pub const PJ_QOS_WMM_PRIO_VIDEO: pj_qos_wmm_prio = 2;
pub const PJ_QOS_WMM_PRIO_VOICE: pj_qos_wmm_prio = 3;
pub type pj_qos_wmm_prio = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_qos_params {
    pub flags: pj_uint8_t,
    pub dscp_val: pj_uint8_t,
    pub so_prio: pj_uint8_t,
    pub wmm_prio: pj_qos_wmm_prio,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_sock {
    _unused: [u8; 0],
}
pub const PJ_STUN_SOCK_DNS_OP: pj_stun_sock_op = 1;
pub const PJ_STUN_SOCK_BINDING_OP: pj_stun_sock_op = 2;
pub const PJ_STUN_SOCK_KEEP_ALIVE_OP: pj_stun_sock_op = 3;
pub const PJ_STUN_SOCK_MAPPED_ADDR_CHANGE: pj_stun_sock_op = 4;
pub type pj_stun_sock_op = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_stun_sock_cb {
    pub on_rx_data: ::std::option::Option<
        unsafe extern "C" fn(
            stun_sock: *mut pj_stun_sock,
            pkt: *mut ::std::os::raw::c_void,
            pkt_len: ::std::os::raw::c_uint,
            src_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ) -> pj_bool_t,
    >,
    pub on_data_sent: ::std::option::Option<
        unsafe extern "C" fn(
            stun_sock: *mut pj_stun_sock,
            send_key: *mut pj_ioqueue_op_key_t,
            sent: pj_ssize_t,
        ) -> pj_bool_t,
    >,
    pub on_status: ::std::option::Option<
        unsafe extern "C" fn(
            stun_sock: *mut pj_stun_sock,
            op: pj_stun_sock_op,
            status: pj_status_t,
        ) -> pj_bool_t,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_stun_sock_info {
    pub bound_addr: pj_sockaddr,
    pub srv_addr: pj_sockaddr,
    pub mapped_addr: pj_sockaddr,
    pub alias_cnt: ::std::os::raw::c_uint,
    pub aliases: [pj_sockaddr; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_stun_sock_cfg {
    pub grp_lock: *mut pj_grp_lock_t,
    pub max_pkt_size: ::std::os::raw::c_uint,
    pub async_cnt: ::std::os::raw::c_uint,
    pub bound_addr: pj_sockaddr,
    pub port_range: pj_uint16_t,
    pub ka_interval: ::std::os::raw::c_int,
    pub qos_type: pj_qos_type,
    pub qos_params: pj_qos_params,
    pub qos_ignore_error: pj_bool_t,
    pub so_rcvbuf_size: ::std::os::raw::c_uint,
    pub so_sndbuf_size: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_turn_session {
    _unused: [u8; 0],
}
pub const PJ_TURN_TP_UDP: pj_turn_tp_type = 17;
pub const PJ_TURN_TP_TCP: pj_turn_tp_type = 6;
pub const PJ_TURN_TP_TLS: pj_turn_tp_type = 56;
pub type pj_turn_tp_type = u32;
pub const PJ_TURN_STATE_NULL: pj_turn_state_t = 0;
pub const PJ_TURN_STATE_RESOLVING: pj_turn_state_t = 1;
pub const PJ_TURN_STATE_RESOLVED: pj_turn_state_t = 2;
pub const PJ_TURN_STATE_ALLOCATING: pj_turn_state_t = 3;
pub const PJ_TURN_STATE_READY: pj_turn_state_t = 4;
pub const PJ_TURN_STATE_DEALLOCATING: pj_turn_state_t = 5;
pub const PJ_TURN_STATE_DEALLOCATED: pj_turn_state_t = 6;
pub const PJ_TURN_STATE_DESTROYING: pj_turn_state_t = 7;
pub type pj_turn_state_t = u32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pj_turn_channel_data {
    pub ch_number: pj_uint16_t,
    pub length: pj_uint16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_turn_session_cb {
    pub on_send_pkt: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_turn_session,
            pkt: *const pj_uint8_t,
            pkt_len: ::std::os::raw::c_uint,
            dst_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub on_stun_send_pkt: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_turn_session,
            pkt: *const pj_uint8_t,
            pkt_len: ::std::os::raw::c_uint,
            dst_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub on_channel_bound: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_turn_session,
            peer_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
            ch_num: ::std::os::raw::c_uint,
        ),
    >,
    pub on_rx_data: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_turn_session,
            pkt: *mut ::std::os::raw::c_void,
            pkt_len: ::std::os::raw::c_uint,
            peer_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ),
    >,
    pub on_state: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_turn_session,
            old_state: pj_turn_state_t,
            new_state: pj_turn_state_t,
        ),
    >,
    pub on_connection_attempt: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_turn_session,
            conn_id: pj_uint32_t,
            peer_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ),
    >,
    pub on_connection_bind_status: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut pj_turn_session,
            status: pj_status_t,
            conn_id: pj_uint32_t,
            peer_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ),
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_turn_alloc_param {
    pub bandwidth: ::std::os::raw::c_int,
    pub lifetime: ::std::os::raw::c_int,
    pub ka_interval: ::std::os::raw::c_int,
    pub af: ::std::os::raw::c_int,
    pub peer_conn_type: pj_turn_tp_type,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_turn_session_info {
    pub state: pj_turn_state_t,
    pub last_status: pj_status_t,
    pub conn_type: pj_turn_tp_type,
    pub server: pj_sockaddr,
    pub mapped_addr: pj_sockaddr,
    pub relay_addr: pj_sockaddr,
    pub lifetime: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_turn_session_on_rx_pkt_param {
    pub pkt: *mut ::std::os::raw::c_void,
    pub pkt_len: pj_size_t,
    pub parsed_len: pj_size_t,
    pub src_addr: *const pj_sockaddr_t,
    pub src_addr_len: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_sock_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_cert_t {
    _unused: [u8; 0],
}
pub const PJ_SSL_CERT_ESUCCESS: pj_ssl_cert_verify_flag_t = 0;
pub const PJ_SSL_CERT_EISSUER_NOT_FOUND: pj_ssl_cert_verify_flag_t = 1;
pub const PJ_SSL_CERT_EUNTRUSTED: pj_ssl_cert_verify_flag_t = 2;
pub const PJ_SSL_CERT_EVALIDITY_PERIOD: pj_ssl_cert_verify_flag_t = 4;
pub const PJ_SSL_CERT_EINVALID_FORMAT: pj_ssl_cert_verify_flag_t = 8;
pub const PJ_SSL_CERT_EINVALID_PURPOSE: pj_ssl_cert_verify_flag_t = 16;
pub const PJ_SSL_CERT_EISSUER_MISMATCH: pj_ssl_cert_verify_flag_t = 32;
pub const PJ_SSL_CERT_ECRL_FAILURE: pj_ssl_cert_verify_flag_t = 64;
pub const PJ_SSL_CERT_EREVOKED: pj_ssl_cert_verify_flag_t = 128;
pub const PJ_SSL_CERT_ECHAIN_TOO_LONG: pj_ssl_cert_verify_flag_t = 256;
pub const PJ_SSL_CERT_EIDENTITY_NOT_MATCH: pj_ssl_cert_verify_flag_t = 1073741824;
pub const PJ_SSL_CERT_EUNKNOWN: pj_ssl_cert_verify_flag_t = -2147483648;
pub type pj_ssl_cert_verify_flag_t = i32;
pub const PJ_SSL_CERT_NAME_UNKNOWN: pj_ssl_cert_name_type = 0;
pub const PJ_SSL_CERT_NAME_RFC822: pj_ssl_cert_name_type = 1;
pub const PJ_SSL_CERT_NAME_DNS: pj_ssl_cert_name_type = 2;
pub const PJ_SSL_CERT_NAME_URI: pj_ssl_cert_name_type = 3;
pub const PJ_SSL_CERT_NAME_IP: pj_ssl_cert_name_type = 4;
pub type pj_ssl_cert_name_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_cert_info {
    pub version: ::std::os::raw::c_uint,
    pub serial_no: [pj_uint8_t; 20usize],
    pub subject: pj_ssl_cert_info__bindgen_ty_1,
    pub issuer: pj_ssl_cert_info__bindgen_ty_2,
    pub validity: pj_ssl_cert_info__bindgen_ty_3,
    pub subj_alt_name: pj_ssl_cert_info__bindgen_ty_4,
    pub raw: pj_str_t,
    pub raw_chain: pj_ssl_cert_info__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_cert_info__bindgen_ty_1 {
    pub cn: pj_str_t,
    pub info: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_cert_info__bindgen_ty_2 {
    pub cn: pj_str_t,
    pub info: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_cert_info__bindgen_ty_3 {
    pub start: pj_time_val,
    pub end: pj_time_val,
    pub gmt: pj_bool_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_cert_info__bindgen_ty_4 {
    pub cnt: ::std::os::raw::c_uint,
    pub entry: *mut pj_ssl_cert_info__bindgen_ty_4__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_cert_info__bindgen_ty_4__bindgen_ty_1 {
    pub type_: pj_ssl_cert_name_type,
    pub name: pj_str_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_cert_info__bindgen_ty_5 {
    pub cnt: ::std::os::raw::c_uint,
    pub cert_raw: *mut pj_str_t,
}
pub type pj_ssl_cert_buffer = pj_str_t;
pub const PJ_TLS_UNKNOWN_CIPHER: pj_ssl_cipher = -1;
pub const PJ_TLS_NULL_WITH_NULL_NULL: pj_ssl_cipher = 0;
pub const PJ_TLS_RSA_WITH_NULL_MD5: pj_ssl_cipher = 1;
pub const PJ_TLS_RSA_WITH_NULL_SHA: pj_ssl_cipher = 2;
pub const PJ_TLS_RSA_WITH_NULL_SHA256: pj_ssl_cipher = 59;
pub const PJ_TLS_RSA_WITH_RC4_128_MD5: pj_ssl_cipher = 4;
pub const PJ_TLS_RSA_WITH_RC4_128_SHA: pj_ssl_cipher = 5;
pub const PJ_TLS_RSA_WITH_3DES_EDE_CBC_SHA: pj_ssl_cipher = 10;
pub const PJ_TLS_RSA_WITH_AES_128_CBC_SHA: pj_ssl_cipher = 47;
pub const PJ_TLS_RSA_WITH_AES_256_CBC_SHA: pj_ssl_cipher = 53;
pub const PJ_TLS_RSA_WITH_AES_128_CBC_SHA256: pj_ssl_cipher = 60;
pub const PJ_TLS_RSA_WITH_AES_256_CBC_SHA256: pj_ssl_cipher = 61;
pub const PJ_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA: pj_ssl_cipher = 13;
pub const PJ_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA: pj_ssl_cipher = 16;
pub const PJ_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: pj_ssl_cipher = 19;
pub const PJ_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA: pj_ssl_cipher = 22;
pub const PJ_TLS_DH_DSS_WITH_AES_128_CBC_SHA: pj_ssl_cipher = 48;
pub const PJ_TLS_DH_RSA_WITH_AES_128_CBC_SHA: pj_ssl_cipher = 49;
pub const PJ_TLS_DHE_DSS_WITH_AES_128_CBC_SHA: pj_ssl_cipher = 50;
pub const PJ_TLS_DHE_RSA_WITH_AES_128_CBC_SHA: pj_ssl_cipher = 51;
pub const PJ_TLS_DH_DSS_WITH_AES_256_CBC_SHA: pj_ssl_cipher = 54;
pub const PJ_TLS_DH_RSA_WITH_AES_256_CBC_SHA: pj_ssl_cipher = 55;
pub const PJ_TLS_DHE_DSS_WITH_AES_256_CBC_SHA: pj_ssl_cipher = 56;
pub const PJ_TLS_DHE_RSA_WITH_AES_256_CBC_SHA: pj_ssl_cipher = 57;
pub const PJ_TLS_DH_DSS_WITH_AES_128_CBC_SHA256: pj_ssl_cipher = 62;
pub const PJ_TLS_DH_RSA_WITH_AES_128_CBC_SHA256: pj_ssl_cipher = 63;
pub const PJ_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: pj_ssl_cipher = 64;
pub const PJ_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256: pj_ssl_cipher = 103;
pub const PJ_TLS_DH_DSS_WITH_AES_256_CBC_SHA256: pj_ssl_cipher = 104;
pub const PJ_TLS_DH_RSA_WITH_AES_256_CBC_SHA256: pj_ssl_cipher = 105;
pub const PJ_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: pj_ssl_cipher = 106;
pub const PJ_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256: pj_ssl_cipher = 107;
pub const PJ_TLS_DH_anon_WITH_RC4_128_MD5: pj_ssl_cipher = 24;
pub const PJ_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA: pj_ssl_cipher = 27;
pub const PJ_TLS_DH_anon_WITH_AES_128_CBC_SHA: pj_ssl_cipher = 52;
pub const PJ_TLS_DH_anon_WITH_AES_256_CBC_SHA: pj_ssl_cipher = 58;
pub const PJ_TLS_DH_anon_WITH_AES_128_CBC_SHA256: pj_ssl_cipher = 108;
pub const PJ_TLS_DH_anon_WITH_AES_256_CBC_SHA256: pj_ssl_cipher = 109;
pub const PJ_TLS_RSA_EXPORT_WITH_RC4_40_MD5: pj_ssl_cipher = 3;
pub const PJ_TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5: pj_ssl_cipher = 6;
pub const PJ_TLS_RSA_WITH_IDEA_CBC_SHA: pj_ssl_cipher = 7;
pub const PJ_TLS_RSA_EXPORT_WITH_DES40_CBC_SHA: pj_ssl_cipher = 8;
pub const PJ_TLS_RSA_WITH_DES_CBC_SHA: pj_ssl_cipher = 9;
pub const PJ_TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA: pj_ssl_cipher = 11;
pub const PJ_TLS_DH_DSS_WITH_DES_CBC_SHA: pj_ssl_cipher = 12;
pub const PJ_TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA: pj_ssl_cipher = 14;
pub const PJ_TLS_DH_RSA_WITH_DES_CBC_SHA: pj_ssl_cipher = 15;
pub const PJ_TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA: pj_ssl_cipher = 17;
pub const PJ_TLS_DHE_DSS_WITH_DES_CBC_SHA: pj_ssl_cipher = 18;
pub const PJ_TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA: pj_ssl_cipher = 20;
pub const PJ_TLS_DHE_RSA_WITH_DES_CBC_SHA: pj_ssl_cipher = 21;
pub const PJ_TLS_DH_anon_EXPORT_WITH_RC4_40_MD5: pj_ssl_cipher = 23;
pub const PJ_TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA: pj_ssl_cipher = 25;
pub const PJ_TLS_DH_anon_WITH_DES_CBC_SHA: pj_ssl_cipher = 26;
pub const PJ_SSL_FORTEZZA_KEA_WITH_NULL_SHA: pj_ssl_cipher = 28;
pub const PJ_SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA: pj_ssl_cipher = 29;
pub const PJ_SSL_FORTEZZA_KEA_WITH_RC4_128_SHA: pj_ssl_cipher = 30;
pub const PJ_SSL_CK_RC4_128_WITH_MD5: pj_ssl_cipher = 65664;
pub const PJ_SSL_CK_RC4_128_EXPORT40_WITH_MD5: pj_ssl_cipher = 131200;
pub const PJ_SSL_CK_RC2_128_CBC_WITH_MD5: pj_ssl_cipher = 196736;
pub const PJ_SSL_CK_RC2_128_CBC_EXPORT40_WITH_MD5: pj_ssl_cipher = 262272;
pub const PJ_SSL_CK_IDEA_128_CBC_WITH_MD5: pj_ssl_cipher = 327808;
pub const PJ_SSL_CK_DES_64_CBC_WITH_MD5: pj_ssl_cipher = 393280;
pub const PJ_SSL_CK_DES_192_EDE3_CBC_WITH_MD5: pj_ssl_cipher = 458944;
pub type pj_ssl_cipher = i32;
pub const PJ_TLS_UNKNOWN_CURVE: pj_ssl_curve = 0;
pub const PJ_TLS_CURVE_SECT163K1: pj_ssl_curve = 1;
pub const PJ_TLS_CURVE_SECT163R1: pj_ssl_curve = 2;
pub const PJ_TLS_CURVE_SECT163R2: pj_ssl_curve = 3;
pub const PJ_TLS_CURVE_SECT193R1: pj_ssl_curve = 4;
pub const PJ_TLS_CURVE_SECT193R2: pj_ssl_curve = 5;
pub const PJ_TLS_CURVE_SECT233K1: pj_ssl_curve = 6;
pub const PJ_TLS_CURVE_SECT233R1: pj_ssl_curve = 7;
pub const PJ_TLS_CURVE_SECT239K1: pj_ssl_curve = 8;
pub const PJ_TLS_CURVE_SECT283K1: pj_ssl_curve = 9;
pub const PJ_TLS_CURVE_SECT283R1: pj_ssl_curve = 10;
pub const PJ_TLS_CURVE_SECT409K1: pj_ssl_curve = 11;
pub const PJ_TLS_CURVE_SECT409R1: pj_ssl_curve = 12;
pub const PJ_TLS_CURVE_SECT571K1: pj_ssl_curve = 13;
pub const PJ_TLS_CURVE_SECT571R1: pj_ssl_curve = 14;
pub const PJ_TLS_CURVE_SECP160K1: pj_ssl_curve = 15;
pub const PJ_TLS_CURVE_SECP160R1: pj_ssl_curve = 16;
pub const PJ_TLS_CURVE_SECP160R2: pj_ssl_curve = 17;
pub const PJ_TLS_CURVE_SECP192K1: pj_ssl_curve = 18;
pub const PJ_TLS_CURVE_SECP192R1: pj_ssl_curve = 19;
pub const PJ_TLS_CURVE_SECP224K1: pj_ssl_curve = 20;
pub const PJ_TLS_CURVE_SECP224R1: pj_ssl_curve = 21;
pub const PJ_TLS_CURVE_SECP256K1: pj_ssl_curve = 22;
pub const PJ_TLS_CURVE_SECP256R1: pj_ssl_curve = 23;
pub const PJ_TLS_CURVE_SECP384R1: pj_ssl_curve = 24;
pub const PJ_TLS_CURVE_SECP521R1: pj_ssl_curve = 25;
pub const PJ_TLS_CURVE_BRAINPOOLP256R1: pj_ssl_curve = 26;
pub const PJ_TLS_CURVE_BRAINPOOLP384R1: pj_ssl_curve = 27;
pub const PJ_TLS_CURVE_BRAINPOOLP512R1: pj_ssl_curve = 28;
pub const PJ_TLS_CURVE_ARBITRARY_EXPLICIT_PRIME_CURVES: pj_ssl_curve = 65281;
pub const PJ_TLS_CURVE_ARBITRARY_EXPLICIT_CHAR2_CURVES: pj_ssl_curve = 65282;
pub type pj_ssl_curve = u32;
pub const PJ_SSL_ENTROPY_NONE: pj_ssl_entropy = 0;
pub const PJ_SSL_ENTROPY_EGD: pj_ssl_entropy = 1;
pub const PJ_SSL_ENTROPY_RANDOM: pj_ssl_entropy = 2;
pub const PJ_SSL_ENTROPY_URANDOM: pj_ssl_entropy = 3;
pub const PJ_SSL_ENTROPY_FILE: pj_ssl_entropy = 4;
pub const PJ_SSL_ENTROPY_UNKNOWN: pj_ssl_entropy = 15;
pub type pj_ssl_entropy = u32;
pub use self::pj_ssl_entropy as pj_ssl_entropy_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_sock_cb {
    pub on_data_read: ::std::option::Option<
        unsafe extern "C" fn(
            ssock: *mut pj_ssl_sock_t,
            data: *mut ::std::os::raw::c_void,
            size: pj_size_t,
            status: pj_status_t,
            remainder: *mut pj_size_t,
        ) -> pj_bool_t,
    >,
    pub on_data_recvfrom: ::std::option::Option<
        unsafe extern "C" fn(
            ssock: *mut pj_ssl_sock_t,
            data: *mut ::std::os::raw::c_void,
            size: pj_size_t,
            src_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_int,
            status: pj_status_t,
        ) -> pj_bool_t,
    >,
    pub on_data_sent: ::std::option::Option<
        unsafe extern "C" fn(
            ssock: *mut pj_ssl_sock_t,
            send_key: *mut pj_ioqueue_op_key_t,
            sent: pj_ssize_t,
        ) -> pj_bool_t,
    >,
    pub on_accept_complete: ::std::option::Option<
        unsafe extern "C" fn(
            ssock: *mut pj_ssl_sock_t,
            newsock: *mut pj_ssl_sock_t,
            src_addr: *const pj_sockaddr_t,
            src_addr_len: ::std::os::raw::c_int,
        ) -> pj_bool_t,
    >,
    pub on_accept_complete2: ::std::option::Option<
        unsafe extern "C" fn(
            ssock: *mut pj_ssl_sock_t,
            newsock: *mut pj_ssl_sock_t,
            src_addr: *const pj_sockaddr_t,
            src_addr_len: ::std::os::raw::c_int,
            status: pj_status_t,
        ) -> pj_bool_t,
    >,
    pub on_connect_complete: ::std::option::Option<
        unsafe extern "C" fn(ssock: *mut pj_ssl_sock_t, status: pj_status_t) -> pj_bool_t,
    >,
}
pub const PJ_SSL_SOCK_PROTO_DEFAULT: pj_ssl_sock_proto = 0;
pub const PJ_SSL_SOCK_PROTO_SSL2: pj_ssl_sock_proto = 1;
pub const PJ_SSL_SOCK_PROTO_SSL3: pj_ssl_sock_proto = 2;
pub const PJ_SSL_SOCK_PROTO_TLS1: pj_ssl_sock_proto = 4;
pub const PJ_SSL_SOCK_PROTO_TLS1_1: pj_ssl_sock_proto = 8;
pub const PJ_SSL_SOCK_PROTO_TLS1_2: pj_ssl_sock_proto = 16;
pub const PJ_SSL_SOCK_PROTO_TLS1_3: pj_ssl_sock_proto = 32;
pub const PJ_SSL_SOCK_PROTO_SSL23: pj_ssl_sock_proto = 65535;
pub const PJ_SSL_SOCK_PROTO_ALL: pj_ssl_sock_proto = 65535;
pub const PJ_SSL_SOCK_PROTO_DTLS1: pj_ssl_sock_proto = 65536;
pub type pj_ssl_sock_proto = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ssl_sock_info {
    pub established: pj_bool_t,
    pub proto: pj_uint32_t,
    pub cipher: pj_ssl_cipher,
    pub local_addr: pj_sockaddr,
    pub remote_addr: pj_sockaddr,
    pub local_cert_info: *mut pj_ssl_cert_info,
    pub remote_cert_info: *mut pj_ssl_cert_info,
    pub verify_status: pj_uint32_t,
    pub last_native_err: ::std::os::raw::c_ulong,
    pub grp_lock: *mut pj_grp_lock_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_sock_param {
    pub grp_lock: *mut pj_grp_lock_t,
    pub sock_af: ::std::os::raw::c_int,
    pub sock_type: ::std::os::raw::c_int,
    pub ioqueue: *mut pj_ioqueue_t,
    pub timer_heap: *mut pj_timer_heap_t,
    pub cb: pj_ssl_sock_cb,
    pub user_data: *mut ::std::os::raw::c_void,
    pub proto: pj_uint32_t,
    pub async_cnt: ::std::os::raw::c_uint,
    pub concurrency: ::std::os::raw::c_int,
    pub whole_data: pj_bool_t,
    pub send_buffer_size: pj_size_t,
    pub read_buffer_size: pj_size_t,
    pub ciphers_num: ::std::os::raw::c_uint,
    pub ciphers: *mut pj_ssl_cipher,
    pub curves_num: ::std::os::raw::c_uint,
    pub curves: *mut pj_ssl_curve,
    pub sigalgs: pj_str_t,
    pub entropy_type: pj_ssl_entropy_t,
    pub entropy_path: pj_str_t,
    pub timeout: pj_time_val,
    pub verify_peer: pj_bool_t,
    pub require_client_cert: pj_bool_t,
    pub server_name: pj_str_t,
    pub reuse_addr: pj_bool_t,
    pub qos_type: pj_qos_type,
    pub qos_params: pj_qos_params,
    pub qos_ignore_error: pj_bool_t,
    pub sockopt_params: pj_sockopt_params,
    pub sockopt_ignore_error: pj_bool_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ssl_start_connect_param {
    pub pool: *mut pj_pool_t,
    pub localaddr: *const pj_sockaddr_t,
    pub local_port_range: pj_uint16_t,
    pub remaddr: *const pj_sockaddr_t,
    pub addr_len: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_turn_sock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_turn_sock_cb {
    pub on_rx_data: ::std::option::Option<
        unsafe extern "C" fn(
            turn_sock: *mut pj_turn_sock,
            pkt: *mut ::std::os::raw::c_void,
            pkt_len: ::std::os::raw::c_uint,
            peer_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ),
    >,
    pub on_data_sent: ::std::option::Option<
        unsafe extern "C" fn(sock: *mut pj_turn_sock, sent: pj_ssize_t) -> pj_bool_t,
    >,
    pub on_state: ::std::option::Option<
        unsafe extern "C" fn(
            turn_sock: *mut pj_turn_sock,
            old_state: pj_turn_state_t,
            new_state: pj_turn_state_t,
        ),
    >,
    pub on_connection_attempt: ::std::option::Option<
        unsafe extern "C" fn(
            turn_sock: *mut pj_turn_sock,
            conn_id: pj_uint32_t,
            peer_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ) -> pj_status_t,
    >,
    pub on_connection_status: ::std::option::Option<
        unsafe extern "C" fn(
            turn_sock: *mut pj_turn_sock,
            status: pj_status_t,
            conn_id: pj_uint32_t,
            peer_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_uint,
        ),
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_turn_sock_tls_cfg {
    pub ca_list_file: pj_str_t,
    pub ca_list_path: pj_str_t,
    pub cert_file: pj_str_t,
    pub privkey_file: pj_str_t,
    pub ca_buf: pj_ssl_cert_buffer,
    pub cert_buf: pj_ssl_cert_buffer,
    pub privkey_buf: pj_ssl_cert_buffer,
    pub password: pj_str_t,
    pub ssock_param: pj_ssl_sock_param,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_turn_sock_cfg {
    pub grp_lock: *mut pj_grp_lock_t,
    pub max_pkt_size: ::std::os::raw::c_uint,
    pub qos_type: pj_qos_type,
    pub qos_params: pj_qos_params,
    pub qos_ignore_error: pj_bool_t,
    pub bound_addr: pj_sockaddr,
    pub port_range: pj_uint16_t,
    pub so_rcvbuf_size: ::std::os::raw::c_uint,
    pub so_sndbuf_size: ::std::os::raw::c_uint,
    pub tls_cfg: pj_turn_sock_tls_cfg,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ice_strans {
    _unused: [u8; 0],
}
pub const PJ_ICE_STRANS_OP_INIT: pj_ice_strans_op = 0;
pub const PJ_ICE_STRANS_OP_NEGOTIATION: pj_ice_strans_op = 1;
pub const PJ_ICE_STRANS_OP_KEEP_ALIVE: pj_ice_strans_op = 2;
pub const PJ_ICE_STRANS_OP_ADDR_CHANGE: pj_ice_strans_op = 3;
pub type pj_ice_strans_op = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ice_strans_cb {
    pub on_rx_data: ::std::option::Option<
        unsafe extern "C" fn(
            ice_st: *mut pj_ice_strans,
            comp_id: ::std::os::raw::c_uint,
            pkt: *mut ::std::os::raw::c_void,
            size: pj_size_t,
            src_addr: *const pj_sockaddr_t,
            src_addr_len: ::std::os::raw::c_uint,
        ),
    >,
    pub on_data_sent:
        ::std::option::Option<unsafe extern "C" fn(sock: *mut pj_ice_strans, sent: pj_ssize_t)>,
    pub on_valid_pair: ::std::option::Option<unsafe extern "C" fn(ice_st: *mut pj_ice_strans)>,
    pub on_ice_complete: ::std::option::Option<
        unsafe extern "C" fn(ice_st: *mut pj_ice_strans, op: pj_ice_strans_op, status: pj_status_t),
    >,
    pub on_new_candidate: ::std::option::Option<
        unsafe extern "C" fn(
            ice_st: *mut pj_ice_strans,
            cand: *const pj_ice_sess_cand,
            end_of_cand: pj_bool_t,
        ),
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ice_strans_stun_cfg {
    pub af: ::std::os::raw::c_int,
    pub cfg: pj_stun_sock_cfg,
    pub max_host_cands: ::std::os::raw::c_uint,
    pub loop_addr: pj_bool_t,
    pub server: pj_str_t,
    pub port: pj_uint16_t,
    pub ignore_stun_error: pj_bool_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ice_strans_turn_cfg {
    pub af: ::std::os::raw::c_int,
    pub cfg: pj_turn_sock_cfg,
    pub server: pj_str_t,
    pub port: pj_uint16_t,
    pub conn_type: pj_turn_tp_type,
    pub auth_cred: pj_stun_auth_cred,
    pub alloc_param: pj_turn_alloc_param,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pj_ice_strans_cfg {
    pub af: ::std::os::raw::c_int,
    pub stun_cfg: pj_stun_config,
    pub resolver: *mut pj_dns_resolver,
    pub opt: pj_ice_sess_options,
    pub stun: pj_ice_strans_stun_cfg,
    pub stun_tp_cnt: ::std::os::raw::c_uint,
    pub stun_tp: [pj_ice_strans_stun_cfg; 2usize],
    pub turn: pj_ice_strans_turn_cfg,
    pub turn_tp_cnt: ::std::os::raw::c_uint,
    pub turn_tp: [pj_ice_strans_turn_cfg; 3usize],
    pub num_send_buf: ::std::os::raw::c_uint,
    pub send_buf_size: ::std::os::raw::c_uint,
    pub comp: [pj_ice_strans_cfg__bindgen_ty_1; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ice_strans_cfg__bindgen_ty_1 {
    pub qos_type: pj_qos_type,
    pub qos_params: pj_qos_params,
    pub so_rcvbuf_size: ::std::os::raw::c_uint,
    pub so_sndbuf_size: ::std::os::raw::c_uint,
}
pub const PJ_ICE_STRANS_STATE_NULL: pj_ice_strans_state = 0;
pub const PJ_ICE_STRANS_STATE_INIT: pj_ice_strans_state = 1;
pub const PJ_ICE_STRANS_STATE_READY: pj_ice_strans_state = 2;
pub const PJ_ICE_STRANS_STATE_SESS_READY: pj_ice_strans_state = 3;
pub const PJ_ICE_STRANS_STATE_NEGO: pj_ice_strans_state = 4;
pub const PJ_ICE_STRANS_STATE_RUNNING: pj_ice_strans_state = 5;
pub const PJ_ICE_STRANS_STATE_FAILED: pj_ice_strans_state = 6;
pub type pj_ice_strans_state = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_ice_cb {
    pub on_ice_complete: ::std::option::Option<
        unsafe extern "C" fn(tp: *mut pjmedia_transport, op: pj_ice_strans_op, status: pj_status_t),
    >,
    pub on_ice_complete2: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            op: pj_ice_strans_op,
            status: pj_status_t,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub on_new_candidate: ::std::option::Option<
        unsafe extern "C" fn(
            tp: *mut pjmedia_transport,
            cand: *const pj_ice_sess_cand,
            last: pj_bool_t,
        ),
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_ice_transport_info {
    pub active: pj_bool_t,
    pub sess_state: pj_ice_strans_state,
    pub role: pj_ice_sess_role,
    pub comp_cnt: ::std::os::raw::c_uint,
    pub comp: [pjmedia_ice_transport_info__bindgen_ty_1; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_ice_transport_info__bindgen_ty_1 {
    pub lcand_type: pj_ice_cand_type,
    pub lcand_addr: pj_sockaddr,
    pub rcand_type: pj_ice_cand_type,
    pub rcand_addr: pj_sockaddr,
}
pub const PJMEDIA_ICE_NO_SRC_ADDR_CHECKING: pjmedia_transport_ice_options = 1;
pub const PJMEDIA_ICE_DISABLE_ICE_MISMATCH: pjmedia_transport_ice_options = 2;
pub type pjmedia_transport_ice_options = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_loop_tp_setting {
    pub af: ::std::os::raw::c_int,
    pub addr: pj_str_t,
    pub port: ::std::os::raw::c_int,
    pub disable_rx: pj_bool_t,
}
pub const PJMEDIA_SRTP_NO_ENCRYPTION: pjmedia_srtp_crypto_option = 1;
pub const PJMEDIA_SRTP_NO_AUTHENTICATION: pjmedia_srtp_crypto_option = 2;
pub type pjmedia_srtp_crypto_option = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_srtp_crypto {
    pub key: pj_str_t,
    pub name: pj_str_t,
    pub flags: ::std::os::raw::c_uint,
}
pub const PJMEDIA_SRTP_DISABLED: pjmedia_srtp_use = 0;
pub const PJMEDIA_SRTP_UNKNOWN: pjmedia_srtp_use = 0;
pub const PJMEDIA_SRTP_OPTIONAL: pjmedia_srtp_use = 1;
pub const PJMEDIA_SRTP_MANDATORY: pjmedia_srtp_use = 2;
pub type pjmedia_srtp_use = u32;
pub const PJMEDIA_SRTP_KEYING_SDES: pjmedia_srtp_keying_method = 0;
pub const PJMEDIA_SRTP_KEYING_DTLS_SRTP: pjmedia_srtp_keying_method = 1;
pub const PJMEDIA_SRTP_KEYINGS_COUNT: pjmedia_srtp_keying_method = 2;
pub type pjmedia_srtp_keying_method = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_srtp_cb {
    pub on_srtp_nego_complete: ::std::option::Option<
        unsafe extern "C" fn(tp: *mut pjmedia_transport, status: pj_status_t),
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_srtp_setting {
    pub use_: pjmedia_srtp_use,
    pub close_member_tp: pj_bool_t,
    pub crypto_count: ::std::os::raw::c_uint,
    pub crypto: [pjmedia_srtp_crypto; 16usize],
    pub keying_count: ::std::os::raw::c_uint,
    pub keying: [pjmedia_srtp_keying_method; 2usize],
    pub cb: pjmedia_srtp_cb,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_srtp_info {
    pub active: pj_bool_t,
    pub rx_policy: pjmedia_srtp_crypto,
    pub tx_policy: pjmedia_srtp_crypto,
    pub use_: pjmedia_srtp_use,
    pub peer_use: pjmedia_srtp_use,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_srtp_dtls_nego_param {
    pub rem_fingerprint: pj_str_t,
    pub rem_addr: pj_sockaddr,
    pub rem_rtcp: pj_sockaddr,
    pub is_role_active: pj_bool_t,
}
pub const PJMEDIA_UDP_NO_SRC_ADDR_CHECKING: pjmedia_transport_udp_options = 1;
pub type pjmedia_transport_udp_options = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_conf {
    _unused: [u8; 0],
}
pub const PJMEDIA_VID_CONF_LAYOUT_DEFAULT: pjmedia_vid_conf_layout = 0;
pub const PJMEDIA_VID_CONF_LAYOUT_SELECTIVE_FOCUS: pjmedia_vid_conf_layout = 1;
pub const PJMEDIA_VID_CONF_LAYOUT_INTERVAL_FOCUS: pjmedia_vid_conf_layout = 2;
pub const PJMEDIA_VID_CONF_LAYOUT_CUSTOM: pjmedia_vid_conf_layout = 3;
pub type pjmedia_vid_conf_layout = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_conf_setting {
    pub max_slot_cnt: ::std::os::raw::c_uint,
    pub frame_rate: ::std::os::raw::c_uint,
    pub layout: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_vid_conf_port_info {
    pub slot: ::std::os::raw::c_uint,
    pub name: pj_str_t,
    pub format: pjmedia_format,
    pub listener_cnt: ::std::os::raw::c_uint,
    pub listener_slots: *mut ::std::os::raw::c_uint,
    pub transmitter_cnt: ::std::os::raw::c_uint,
    pub transmitter_slots: *mut ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_vid_port_param {
    pub vidparam: pjmedia_vid_dev_param,
    pub active: pj_bool_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_port {
    _unused: [u8; 0],
}
pub const PJMEDIA_VID_STREAM_RC_NONE: pjmedia_vid_stream_rc_method = 0;
pub const PJMEDIA_VID_STREAM_RC_SIMPLE_BLOCKING: pjmedia_vid_stream_rc_method = 1;
pub type pjmedia_vid_stream_rc_method = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_stream_rc_config {
    pub method: pjmedia_vid_stream_rc_method,
    pub bandwidth: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_stream_sk_config {
    pub count: ::std::os::raw::c_uint,
    pub interval: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pjmedia_vid_stream_info {
    pub type_: pjmedia_type,
    pub proto: pjmedia_tp_proto,
    pub dir: pjmedia_dir,
    pub rem_addr: pj_sockaddr,
    pub rem_rtcp: pj_sockaddr,
    pub rtcp_mux: pj_bool_t,
    pub loc_rtcp_fb: pjmedia_rtcp_fb_info,
    pub rem_rtcp_fb: pjmedia_rtcp_fb_info,
    pub tx_pt: ::std::os::raw::c_uint,
    pub rx_pt: ::std::os::raw::c_uint,
    pub ssrc: pj_uint32_t,
    pub cname: pj_str_t,
    pub has_rem_ssrc: pj_bool_t,
    pub rem_ssrc: pj_uint32_t,
    pub rem_cname: pj_str_t,
    pub rtp_ts: pj_uint32_t,
    pub rtp_seq: pj_uint16_t,
    pub rtp_seq_ts_set: pj_uint8_t,
    pub jb_init: ::std::os::raw::c_int,
    pub jb_min_pre: ::std::os::raw::c_int,
    pub jb_max_pre: ::std::os::raw::c_int,
    pub jb_max: ::std::os::raw::c_int,
    pub codec_info: pjmedia_vid_codec_info,
    pub codec_param: *mut pjmedia_vid_codec_param,
    pub rtcp_sdes_bye_disabled: pj_bool_t,
    pub rc_cfg: pjmedia_vid_stream_rc_config,
    pub sk_cfg: pjmedia_vid_stream_sk_config,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_vid_stream {
    _unused: [u8; 0],
}
pub const PJMEDIA_FILE_NO_LOOP: pjmedia_file_player_option = 1;
pub type pjmedia_file_player_option = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_wav_player_info {
    pub fmt_id: pjmedia_format_id,
    pub payload_bits_per_sample: ::std::os::raw::c_uint,
    pub size_bytes: pj_uint32_t,
    pub size_samples: pj_uint32_t,
}
pub const PJMEDIA_FILE_WRITE_PCM: pjmedia_file_writer_option = 0;
pub const PJMEDIA_FILE_WRITE_ALAW: pjmedia_file_writer_option = 1;
pub const PJMEDIA_FILE_WRITE_ULAW: pjmedia_file_writer_option = 2;
pub type pjmedia_file_writer_option = u32;
pub const PJMEDIA_WAVE_FMT_TAG_PCM: pjmedia_wave_fmt_tag = 1;
pub const PJMEDIA_WAVE_FMT_TAG_ALAW: pjmedia_wave_fmt_tag = 6;
pub const PJMEDIA_WAVE_FMT_TAG_ULAW: pjmedia_wave_fmt_tag = 7;
pub type pjmedia_wave_fmt_tag = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_wave_hdr {
    pub riff_hdr: pjmedia_wave_hdr__bindgen_ty_1,
    pub fmt_hdr: pjmedia_wave_hdr__bindgen_ty_2,
    pub data_hdr: pjmedia_wave_hdr__bindgen_ty_3,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_wave_hdr__bindgen_ty_1 {
    pub riff: pj_uint32_t,
    pub file_len: pj_uint32_t,
    pub wave: pj_uint32_t,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_wave_hdr__bindgen_ty_2 {
    pub fmt: pj_uint32_t,
    pub len: pj_uint32_t,
    pub fmt_tag: pj_uint16_t,
    pub nchan: pj_uint16_t,
    pub sample_rate: pj_uint32_t,
    pub bytes_per_sec: pj_uint32_t,
    pub block_align: pj_uint16_t,
    pub bits_per_sample: pj_uint16_t,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_wave_hdr__bindgen_ty_3 {
    pub data: pj_uint32_t,
    pub len: pj_uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_wave_subchunk {
    pub id: pj_uint32_t,
    pub len: pj_uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_wsola {
    _unused: [u8; 0],
}
pub const PJMEDIA_WSOLA_NO_HANNING: pjmedia_wsola_option = 1;
pub const PJMEDIA_WSOLA_NO_PLC: pjmedia_wsola_option = 2;
pub const PJMEDIA_WSOLA_NO_DISCARD: pjmedia_wsola_option = 4;
pub const PJMEDIA_WSOLA_NO_FADING: pjmedia_wsola_option = 8;
pub type pjmedia_wsola_option = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_passthrough_setting {
    pub fmt_cnt: ::std::os::raw::c_uint,
    pub fmts: *mut pjmedia_format,
    pub ilbc_mode: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_audio_codec_config {
    pub speex: pjmedia_audio_codec_config__bindgen_ty_1,
    pub ilbc: pjmedia_audio_codec_config__bindgen_ty_2,
    pub passthrough: pjmedia_audio_codec_config__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_audio_codec_config__bindgen_ty_1 {
    pub option: ::std::os::raw::c_uint,
    pub quality: ::std::os::raw::c_int,
    pub complexity: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_audio_codec_config__bindgen_ty_2 {
    pub mode: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_audio_codec_config__bindgen_ty_3 {
    pub setting: pjmedia_codec_passthrough_setting,
}
extern "C" {
    pub fn pjmedia_audio_codec_config_default(cfg: *mut pjmedia_audio_codec_config);
}
extern "C" {
    pub fn pjmedia_codec_register_audio_codecs(
        endpt: *mut pjmedia_endpt,
        c: *const pjmedia_audio_codec_config,
    ) -> pj_status_t;
}
pub const PJMEDIA_AMR_NO_NB: pjmedia_amr_options = 1;
pub const PJMEDIA_AMR_NO_WB: pjmedia_amr_options = 2;
pub type pjmedia_amr_options = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_amr_config {
    pub octet_align: pj_bool_t,
    pub bitrate: ::std::os::raw::c_uint,
}
pub type pjmedia_codec_amrnb_config = pjmedia_codec_amr_config;
pub type pjmedia_codec_amrwb_config = pjmedia_codec_amr_config;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_opus_config {
    pub sample_rate: ::std::os::raw::c_uint,
    pub channel_cnt: ::std::os::raw::c_uint,
    pub frm_ptime: ::std::os::raw::c_uint,
    pub bit_rate: ::std::os::raw::c_uint,
    pub packet_loss: ::std::os::raw::c_uint,
    pub complexity: ::std::os::raw::c_uint,
    pub cbr: pj_bool_t,
}
extern "C" {
    pub fn pjmedia_codec_opus_init(endpt: *mut pjmedia_endpt) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_opus_deinit() -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_opus_get_config(cfg: *mut pjmedia_codec_opus_config) -> pj_status_t;
}
extern "C" {
    pub fn pjmedia_codec_opus_set_default_param(
        cfg: *const pjmedia_codec_opus_config,
        param: *mut pjmedia_codec_param,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjmedia_codec_silk_setting {
    pub enabled: pj_bool_t,
    pub quality: ::std::os::raw::c_int,
    pub complexity: ::std::os::raw::c_int,
}
pub const PJMEDIA_SPEEX_NO_NB: pjmedia_speex_options = 1;
pub const PJMEDIA_SPEEX_NO_WB: pjmedia_speex_options = 2;
pub const PJMEDIA_SPEEX_NO_UWB: pjmedia_speex_options = 4;
pub type pjmedia_speex_options = u32;
