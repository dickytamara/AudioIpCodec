/* automatically generated by rust-bindgen 0.58.1 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
extern crate pj_sys;
extern crate pjmedia_sys;
use pj_sys::*;
use pjmedia_sys::*;

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_tpmgr {
    _unused: [u8; 0],
}
pub const PJSIP_TRANSPORT_UNSPECIFIED: pjsip_transport_type_e = 0;
pub const PJSIP_TRANSPORT_UDP: pjsip_transport_type_e = 1;
pub const PJSIP_TRANSPORT_TCP: pjsip_transport_type_e = 2;
pub const PJSIP_TRANSPORT_TLS: pjsip_transport_type_e = 3;
pub const PJSIP_TRANSPORT_DTLS: pjsip_transport_type_e = 4;
pub const PJSIP_TRANSPORT_SCTP: pjsip_transport_type_e = 5;
pub const PJSIP_TRANSPORT_LOOP: pjsip_transport_type_e = 6;
pub const PJSIP_TRANSPORT_LOOP_DGRAM: pjsip_transport_type_e = 7;
pub const PJSIP_TRANSPORT_START_OTHER: pjsip_transport_type_e = 8;
pub const PJSIP_TRANSPORT_IPV6: pjsip_transport_type_e = 128;
pub const PJSIP_TRANSPORT_UDP6: pjsip_transport_type_e = 129;
pub const PJSIP_TRANSPORT_TCP6: pjsip_transport_type_e = 130;
pub const PJSIP_TRANSPORT_TLS6: pjsip_transport_type_e = 131;
pub const PJSIP_TRANSPORT_DTLS6: pjsip_transport_type_e = 132;
pub type pjsip_transport_type_e = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_endpoint {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_transaction {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_event {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_module {
    _unused: [u8; 0],
}
pub type pjsip_user_agent = pjsip_module;
pub const PJSIP_ROLE_UAC: pjsip_role_e = 0;
pub const PJSIP_ROLE_UAS: pjsip_role_e = 1;
pub const PJSIP_UAC_ROLE: pjsip_role_e = 0;
pub const PJSIP_UAS_ROLE: pjsip_role_e = 1;
pub type pjsip_role_e = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_buffer {
    pub start: *mut ::std::os::raw::c_char,
    pub cur: *mut ::std::os::raw::c_char,
    pub end: *mut ::std::os::raw::c_char,
}
#[repr(C)]
pub struct pjsip_host_port {
    pub host: pj_str_t,
    pub port: ::std::os::raw::c_int,
}
#[repr(C)]
pub struct pjsip_param {
    pub prev: *mut pjsip_param,
    pub next: *mut pjsip_param,
    pub name: pj_str_t,
    pub value: pj_str_t,
}
pub const PJSIP_URI_IN_REQ_URI: pjsip_uri_context_e = 0;
pub const PJSIP_URI_IN_FROMTO_HDR: pjsip_uri_context_e = 1;
pub const PJSIP_URI_IN_CONTACT_HDR: pjsip_uri_context_e = 2;
pub const PJSIP_URI_IN_ROUTING_HDR: pjsip_uri_context_e = 3;
pub const PJSIP_URI_IN_OTHER: pjsip_uri_context_e = 4;
pub type pjsip_uri_context_e = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_uri_vptr {
    pub p_get_scheme: ::std::option::Option<
        unsafe extern "C" fn(uri: *const ::std::os::raw::c_void) -> *const pj_str_t,
    >,
    pub p_get_uri: ::std::option::Option<
        unsafe extern "C" fn(uri: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub p_print: ::std::option::Option<
        unsafe extern "C" fn(
            context: pjsip_uri_context_e,
            uri: *const ::std::os::raw::c_void,
            buf: *mut ::std::os::raw::c_char,
            size: pj_size_t,
        ) -> pj_ssize_t,
    >,
    pub p_compare: ::std::option::Option<
        unsafe extern "C" fn(
            context: pjsip_uri_context_e,
            uri1: *const ::std::os::raw::c_void,
            uri2: *const ::std::os::raw::c_void,
        ) -> pj_status_t,
    >,
    pub p_clone: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut pj_pool_t,
            uri: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_uri {
    pub vptr: *mut pjsip_uri_vptr,
}
#[repr(C)]
pub struct pjsip_name_addr {
    pub vptr: *mut pjsip_uri_vptr,
    pub display: pj_str_t,
    pub uri: *mut pjsip_uri,
}
pub const PJSIP_INVITE_METHOD: pjsip_method_e = 0;
pub const PJSIP_CANCEL_METHOD: pjsip_method_e = 1;
pub const PJSIP_ACK_METHOD: pjsip_method_e = 2;
pub const PJSIP_BYE_METHOD: pjsip_method_e = 3;
pub const PJSIP_REGISTER_METHOD: pjsip_method_e = 4;
pub const PJSIP_OPTIONS_METHOD: pjsip_method_e = 5;
pub const PJSIP_OTHER_METHOD: pjsip_method_e = 6;
pub type pjsip_method_e = u32;
#[repr(C)]
pub struct pjsip_method {
    pub id: pjsip_method_e,
    pub name: pj_str_t,
}
pub const PJSIP_H_ACCEPT: pjsip_hdr_e = 0;
pub const PJSIP_H_ACCEPT_ENCODING_UNIMP: pjsip_hdr_e = 1;
pub const PJSIP_H_ACCEPT_LANGUAGE_UNIMP: pjsip_hdr_e = 2;
pub const PJSIP_H_ALERT_INFO_UNIMP: pjsip_hdr_e = 3;
pub const PJSIP_H_ALLOW: pjsip_hdr_e = 4;
pub const PJSIP_H_AUTHENTICATION_INFO_UNIMP: pjsip_hdr_e = 5;
pub const PJSIP_H_AUTHORIZATION: pjsip_hdr_e = 6;
pub const PJSIP_H_CALL_ID: pjsip_hdr_e = 7;
pub const PJSIP_H_CALL_INFO_UNIMP: pjsip_hdr_e = 8;
pub const PJSIP_H_CONTACT: pjsip_hdr_e = 9;
pub const PJSIP_H_CONTENT_DISPOSITION_UNIMP: pjsip_hdr_e = 10;
pub const PJSIP_H_CONTENT_ENCODING_UNIMP: pjsip_hdr_e = 11;
pub const PJSIP_H_CONTENT_LANGUAGE_UNIMP: pjsip_hdr_e = 12;
pub const PJSIP_H_CONTENT_LENGTH: pjsip_hdr_e = 13;
pub const PJSIP_H_CONTENT_TYPE: pjsip_hdr_e = 14;
pub const PJSIP_H_CSEQ: pjsip_hdr_e = 15;
pub const PJSIP_H_DATE_UNIMP: pjsip_hdr_e = 16;
pub const PJSIP_H_ERROR_INFO_UNIMP: pjsip_hdr_e = 17;
pub const PJSIP_H_EXPIRES: pjsip_hdr_e = 18;
pub const PJSIP_H_FROM: pjsip_hdr_e = 19;
pub const PJSIP_H_IN_REPLY_TO_UNIMP: pjsip_hdr_e = 20;
pub const PJSIP_H_MAX_FORWARDS: pjsip_hdr_e = 21;
pub const PJSIP_H_MIME_VERSION_UNIMP: pjsip_hdr_e = 22;
pub const PJSIP_H_MIN_EXPIRES: pjsip_hdr_e = 23;
pub const PJSIP_H_ORGANIZATION_UNIMP: pjsip_hdr_e = 24;
pub const PJSIP_H_PRIORITY_UNIMP: pjsip_hdr_e = 25;
pub const PJSIP_H_PROXY_AUTHENTICATE: pjsip_hdr_e = 26;
pub const PJSIP_H_PROXY_AUTHORIZATION: pjsip_hdr_e = 27;
pub const PJSIP_H_PROXY_REQUIRE_UNIMP: pjsip_hdr_e = 28;
pub const PJSIP_H_RECORD_ROUTE: pjsip_hdr_e = 29;
pub const PJSIP_H_REPLY_TO_UNIMP: pjsip_hdr_e = 30;
pub const PJSIP_H_REQUIRE: pjsip_hdr_e = 31;
pub const PJSIP_H_RETRY_AFTER: pjsip_hdr_e = 32;
pub const PJSIP_H_ROUTE: pjsip_hdr_e = 33;
pub const PJSIP_H_SERVER_UNIMP: pjsip_hdr_e = 34;
pub const PJSIP_H_SUBJECT_UNIMP: pjsip_hdr_e = 35;
pub const PJSIP_H_SUPPORTED: pjsip_hdr_e = 36;
pub const PJSIP_H_TIMESTAMP_UNIMP: pjsip_hdr_e = 37;
pub const PJSIP_H_TO: pjsip_hdr_e = 38;
pub const PJSIP_H_UNSUPPORTED: pjsip_hdr_e = 39;
pub const PJSIP_H_USER_AGENT_UNIMP: pjsip_hdr_e = 40;
pub const PJSIP_H_VIA: pjsip_hdr_e = 41;
pub const PJSIP_H_WARNING_UNIMP: pjsip_hdr_e = 42;
pub const PJSIP_H_WWW_AUTHENTICATE: pjsip_hdr_e = 43;
pub const PJSIP_H_OTHER: pjsip_hdr_e = 44;
pub type pjsip_hdr_e = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_hdr_vptr {
    pub clone: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut pj_pool_t,
            hdr: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub shallow_clone: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut pj_pool_t,
            hdr: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub print_on: ::std::option::Option<
        unsafe extern "C" fn(
            hdr: *mut ::std::os::raw::c_void,
            buf: *mut ::std::os::raw::c_char,
            len: pj_size_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
pub struct pjsip_hdr {
    pub prev: *mut pjsip_hdr,
    pub next: *mut pjsip_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
}
#[repr(C)]
pub struct pjsip_request_line {
    pub method: pjsip_method,
    pub uri: *mut pjsip_uri,
}
#[repr(C)]
pub struct pjsip_status_line {
    pub code: ::std::os::raw::c_int,
    pub reason: pj_str_t,
}
pub const PJSIP_SC_NULL: pjsip_status_code = 0;
pub const PJSIP_SC_TRYING: pjsip_status_code = 100;
pub const PJSIP_SC_RINGING: pjsip_status_code = 180;
pub const PJSIP_SC_CALL_BEING_FORWARDED: pjsip_status_code = 181;
pub const PJSIP_SC_QUEUED: pjsip_status_code = 182;
pub const PJSIP_SC_PROGRESS: pjsip_status_code = 183;
pub const PJSIP_SC_EARLY_DIALOG_TERMINATED: pjsip_status_code = 199;
pub const PJSIP_SC_OK: pjsip_status_code = 200;
pub const PJSIP_SC_ACCEPTED: pjsip_status_code = 202;
pub const PJSIP_SC_NO_NOTIFICATION: pjsip_status_code = 204;
pub const PJSIP_SC_MULTIPLE_CHOICES: pjsip_status_code = 300;
pub const PJSIP_SC_MOVED_PERMANENTLY: pjsip_status_code = 301;
pub const PJSIP_SC_MOVED_TEMPORARILY: pjsip_status_code = 302;
pub const PJSIP_SC_USE_PROXY: pjsip_status_code = 305;
pub const PJSIP_SC_ALTERNATIVE_SERVICE: pjsip_status_code = 380;
pub const PJSIP_SC_BAD_REQUEST: pjsip_status_code = 400;
pub const PJSIP_SC_UNAUTHORIZED: pjsip_status_code = 401;
pub const PJSIP_SC_PAYMENT_REQUIRED: pjsip_status_code = 402;
pub const PJSIP_SC_FORBIDDEN: pjsip_status_code = 403;
pub const PJSIP_SC_NOT_FOUND: pjsip_status_code = 404;
pub const PJSIP_SC_METHOD_NOT_ALLOWED: pjsip_status_code = 405;
pub const PJSIP_SC_NOT_ACCEPTABLE: pjsip_status_code = 406;
pub const PJSIP_SC_PROXY_AUTHENTICATION_REQUIRED: pjsip_status_code = 407;
pub const PJSIP_SC_REQUEST_TIMEOUT: pjsip_status_code = 408;
pub const PJSIP_SC_CONFLICT: pjsip_status_code = 409;
pub const PJSIP_SC_GONE: pjsip_status_code = 410;
pub const PJSIP_SC_LENGTH_REQUIRED: pjsip_status_code = 411;
pub const PJSIP_SC_CONDITIONAL_REQUEST_FAILED: pjsip_status_code = 412;
pub const PJSIP_SC_REQUEST_ENTITY_TOO_LARGE: pjsip_status_code = 413;
pub const PJSIP_SC_REQUEST_URI_TOO_LONG: pjsip_status_code = 414;
pub const PJSIP_SC_UNSUPPORTED_MEDIA_TYPE: pjsip_status_code = 415;
pub const PJSIP_SC_UNSUPPORTED_URI_SCHEME: pjsip_status_code = 416;
pub const PJSIP_SC_UNKNOWN_RESOURCE_PRIORITY: pjsip_status_code = 417;
pub const PJSIP_SC_BAD_EXTENSION: pjsip_status_code = 420;
pub const PJSIP_SC_EXTENSION_REQUIRED: pjsip_status_code = 421;
pub const PJSIP_SC_SESSION_TIMER_TOO_SMALL: pjsip_status_code = 422;
pub const PJSIP_SC_INTERVAL_TOO_BRIEF: pjsip_status_code = 423;
pub const PJSIP_SC_BAD_LOCATION_INFORMATION: pjsip_status_code = 424;
pub const PJSIP_SC_USE_IDENTITY_HEADER: pjsip_status_code = 428;
pub const PJSIP_SC_PROVIDE_REFERRER_HEADER: pjsip_status_code = 429;
pub const PJSIP_SC_FLOW_FAILED: pjsip_status_code = 430;
pub const PJSIP_SC_ANONIMITY_DISALLOWED: pjsip_status_code = 433;
pub const PJSIP_SC_BAD_IDENTITY_INFO: pjsip_status_code = 436;
pub const PJSIP_SC_UNSUPPORTED_CERTIFICATE: pjsip_status_code = 437;
pub const PJSIP_SC_INVALID_IDENTITY_HEADER: pjsip_status_code = 438;
pub const PJSIP_SC_FIRST_HOP_LACKS_OUTBOUND_SUPPORT: pjsip_status_code = 439;
pub const PJSIP_SC_MAX_BREADTH_EXCEEDED: pjsip_status_code = 440;
pub const PJSIP_SC_BAD_INFO_PACKAGE: pjsip_status_code = 469;
pub const PJSIP_SC_CONSENT_NEEDED: pjsip_status_code = 470;
pub const PJSIP_SC_TEMPORARILY_UNAVAILABLE: pjsip_status_code = 480;
pub const PJSIP_SC_CALL_TSX_DOES_NOT_EXIST: pjsip_status_code = 481;
pub const PJSIP_SC_LOOP_DETECTED: pjsip_status_code = 482;
pub const PJSIP_SC_TOO_MANY_HOPS: pjsip_status_code = 483;
pub const PJSIP_SC_ADDRESS_INCOMPLETE: pjsip_status_code = 484;
pub const PJSIP_AC_AMBIGUOUS: pjsip_status_code = 485;
pub const PJSIP_SC_BUSY_HERE: pjsip_status_code = 486;
pub const PJSIP_SC_REQUEST_TERMINATED: pjsip_status_code = 487;
pub const PJSIP_SC_NOT_ACCEPTABLE_HERE: pjsip_status_code = 488;
pub const PJSIP_SC_BAD_EVENT: pjsip_status_code = 489;
pub const PJSIP_SC_REQUEST_UPDATED: pjsip_status_code = 490;
pub const PJSIP_SC_REQUEST_PENDING: pjsip_status_code = 491;
pub const PJSIP_SC_UNDECIPHERABLE: pjsip_status_code = 493;
pub const PJSIP_SC_SECURITY_AGREEMENT_NEEDED: pjsip_status_code = 494;
pub const PJSIP_SC_INTERNAL_SERVER_ERROR: pjsip_status_code = 500;
pub const PJSIP_SC_NOT_IMPLEMENTED: pjsip_status_code = 501;
pub const PJSIP_SC_BAD_GATEWAY: pjsip_status_code = 502;
pub const PJSIP_SC_SERVICE_UNAVAILABLE: pjsip_status_code = 503;
pub const PJSIP_SC_SERVER_TIMEOUT: pjsip_status_code = 504;
pub const PJSIP_SC_VERSION_NOT_SUPPORTED: pjsip_status_code = 505;
pub const PJSIP_SC_MESSAGE_TOO_LARGE: pjsip_status_code = 513;
pub const PJSIP_SC_PUSH_NOTIFICATION_SERVICE_NOT_SUPPORTED: pjsip_status_code = 555;
pub const PJSIP_SC_PRECONDITION_FAILURE: pjsip_status_code = 580;
pub const PJSIP_SC_BUSY_EVERYWHERE: pjsip_status_code = 600;
pub const PJSIP_SC_DECLINE: pjsip_status_code = 603;
pub const PJSIP_SC_DOES_NOT_EXIST_ANYWHERE: pjsip_status_code = 604;
pub const PJSIP_SC_NOT_ACCEPTABLE_ANYWHERE: pjsip_status_code = 606;
pub const PJSIP_SC_UNWANTED: pjsip_status_code = 607;
pub const PJSIP_SC_REJECTED: pjsip_status_code = 608;
pub const PJSIP_SC_TSX_TIMEOUT: pjsip_status_code = 408;
pub const PJSIP_SC_TSX_TRANSPORT_ERROR: pjsip_status_code = 503;
pub const PJSIP_SC__force_32bit: pjsip_status_code = 2147483647;
pub type pjsip_status_code = u32;
#[repr(C)]
pub struct pjsip_media_type {
    pub type_: pj_str_t,
    pub subtype: pj_str_t,
    pub param: pjsip_param,
}
#[repr(C)]
pub struct pjsip_msg_body {
    pub content_type: pjsip_media_type,
    pub data: *mut ::std::os::raw::c_void,
    pub len: ::std::os::raw::c_uint,
    pub print_body: ::std::option::Option<
        unsafe extern "C" fn(
            msg_body: *mut pjsip_msg_body,
            buf: *mut ::std::os::raw::c_char,
            size: pj_size_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub clone_data: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut pj_pool_t,
            data: *const ::std::os::raw::c_void,
            len: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
pub const PJSIP_REQUEST_MSG: pjsip_msg_type_e = 0;
pub const PJSIP_RESPONSE_MSG: pjsip_msg_type_e = 1;
pub type pjsip_msg_type_e = u32;
#[repr(C)]
pub struct pjsip_msg {
    pub type_: pjsip_msg_type_e,
    pub line: pjsip_msg__bindgen_ty_1,
    pub hdr: pjsip_hdr,
    pub body: *mut pjsip_msg_body,
}
#[repr(C)]
pub struct pjsip_msg__bindgen_ty_1 {
    pub req: __BindgenUnionField<pjsip_request_line>,
    pub status: __BindgenUnionField<pjsip_status_line>,
    pub bindgen_union_field: [u64; 4usize],
}
#[repr(C)]
pub struct pjsip_generic_int_hdr {
    pub prev: *mut pjsip_generic_int_hdr,
    pub next: *mut pjsip_generic_int_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub ivalue: pj_uint32_t,
}
#[repr(C)]
pub struct pjsip_generic_array_hdr {
    pub prev: *mut pjsip_generic_array_hdr,
    pub next: *mut pjsip_generic_array_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub count: ::std::os::raw::c_uint,
    pub values: [pj_str_t; 32usize],
}
#[repr(C)]
pub struct pjsip_cid_hdr {
    pub prev: *mut pjsip_cid_hdr,
    pub next: *mut pjsip_cid_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub id: pj_str_t,
}
#[repr(C)]
pub struct pjsip_clen_hdr {
    pub prev: *mut pjsip_clen_hdr,
    pub next: *mut pjsip_clen_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub len: ::std::os::raw::c_int,
}
#[repr(C)]
pub struct pjsip_cseq_hdr {
    pub prev: *mut pjsip_cseq_hdr,
    pub next: *mut pjsip_cseq_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub cseq: pj_int32_t,
    pub method: pjsip_method,
}
#[repr(C)]
pub struct pjsip_contact_hdr {
    pub prev: *mut pjsip_contact_hdr,
    pub next: *mut pjsip_contact_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub star: ::std::os::raw::c_int,
    pub uri: *mut pjsip_uri,
    pub q1000: ::std::os::raw::c_int,
    pub expires: pj_uint32_t,
    pub other_param: pjsip_param,
}
#[repr(C)]
pub struct pjsip_ctype_hdr {
    pub prev: *mut pjsip_ctype_hdr,
    pub next: *mut pjsip_ctype_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub media: pjsip_media_type,
}
#[repr(C)]
pub struct pjsip_fromto_hdr {
    pub prev: *mut pjsip_fromto_hdr,
    pub next: *mut pjsip_fromto_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub uri: *mut pjsip_uri,
    pub tag: pj_str_t,
    pub other_param: pjsip_param,
}
pub type pjsip_from_hdr = pjsip_fromto_hdr;
pub type pjsip_to_hdr = pjsip_fromto_hdr;
pub type pjsip_max_fwd_hdr = pjsip_generic_int_hdr;
#[repr(C)]
pub struct pjsip_routing_hdr {
    pub prev: *mut pjsip_routing_hdr,
    pub next: *mut pjsip_routing_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub name_addr: pjsip_name_addr,
    pub other_param: pjsip_param,
}
pub type pjsip_rr_hdr = pjsip_routing_hdr;
pub type pjsip_route_hdr = pjsip_routing_hdr;
pub type pjsip_require_hdr = pjsip_generic_array_hdr;
pub type pjsip_supported_hdr = pjsip_generic_array_hdr;
#[repr(C)]
pub struct pjsip_via_hdr {
    pub prev: *mut pjsip_via_hdr,
    pub next: *mut pjsip_via_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub transport: pj_str_t,
    pub sent_by: pjsip_host_port,
    pub ttl_param: ::std::os::raw::c_int,
    pub rport_param: ::std::os::raw::c_int,
    pub maddr_param: pj_str_t,
    pub recvd_param: pj_str_t,
    pub branch_param: pj_str_t,
    pub other_param: pjsip_param,
    pub comment: pj_str_t,
}
#[repr(C)]
pub struct pjsip_digest_credential {
    pub realm: pj_str_t,
    pub other_param: pjsip_param,
    pub username: pj_str_t,
    pub nonce: pj_str_t,
    pub uri: pj_str_t,
    pub response: pj_str_t,
    pub algorithm: pj_str_t,
    pub cnonce: pj_str_t,
    pub opaque: pj_str_t,
    pub qop: pj_str_t,
    pub nc: pj_str_t,
}
#[repr(C)]
pub struct pjsip_common_challenge {
    pub realm: pj_str_t,
    pub other_param: pjsip_param,
}
#[repr(C)]
pub struct pjsip_digest_challenge {
    pub realm: pj_str_t,
    pub other_param: pjsip_param,
    pub domain: pj_str_t,
    pub nonce: pj_str_t,
    pub opaque: pj_str_t,
    pub stale: ::std::os::raw::c_int,
    pub algorithm: pj_str_t,
    pub qop: pj_str_t,
}
#[repr(C)]
pub struct pjsip_pgp_challenge {
    pub realm: pj_str_t,
    pub other_param: pjsip_param,
    pub version: pj_str_t,
    pub micalgorithm: pj_str_t,
    pub pubalgorithm: pj_str_t,
    pub nonce: pj_str_t,
}
#[repr(C)]
pub struct pjsip_www_authenticate_hdr {
    pub prev: *mut pjsip_www_authenticate_hdr,
    pub next: *mut pjsip_www_authenticate_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub scheme: pj_str_t,
    pub challenge: pjsip_www_authenticate_hdr__bindgen_ty_1,
}
#[repr(C)]
pub struct pjsip_www_authenticate_hdr__bindgen_ty_1 {
    pub common: __BindgenUnionField<pjsip_common_challenge>,
    pub digest: __BindgenUnionField<pjsip_digest_challenge>,
    pub pgp: __BindgenUnionField<pjsip_pgp_challenge>,
    pub bindgen_union_field: [u64; 19usize],
}
pub const PJSIP_AUTH_QOP_NONE: pjsip_auth_qop_type = 0;
pub const PJSIP_AUTH_QOP_AUTH: pjsip_auth_qop_type = 1;
pub const PJSIP_AUTH_QOP_AUTH_INT: pjsip_auth_qop_type = 2;
pub const PJSIP_AUTH_QOP_UNKNOWN: pjsip_auth_qop_type = 3;
pub type pjsip_auth_qop_type = u32;
pub type pjsip_cred_cb = ::std::option::Option<
    unsafe extern "C" fn(
        pool: *mut pj_pool_t,
        chal: *const pjsip_digest_challenge,
        cred: *const pjsip_cred_info,
        method: *const pj_str_t,
        auth: *mut pjsip_digest_credential,
    ) -> pj_status_t,
>;
#[repr(C)]
pub struct pjsip_cred_info {
    pub realm: pj_str_t,
    pub scheme: pj_str_t,
    pub username: pj_str_t,
    pub data_type: ::std::os::raw::c_int,
    pub data: pj_str_t,
    pub ext: pjsip_cred_info__bindgen_ty_1,
}
#[repr(C)]
pub struct pjsip_cred_info__bindgen_ty_1 {
    pub aka: __BindgenUnionField<pjsip_cred_info__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: [u64; 7usize],
}
#[repr(C)]
pub struct pjsip_cred_info__bindgen_ty_1__bindgen_ty_1 {
    pub k: pj_str_t,
    pub op: pj_str_t,
    pub amf: pj_str_t,
    pub cb: pjsip_cred_cb,
}
#[repr(C)]
pub struct pjsip_cached_auth {
    pub prev: *mut pjsip_cached_auth,
    pub next: *mut pjsip_cached_auth,
    pub pool: *mut pj_pool_t,
    pub realm: pj_str_t,
    pub is_proxy: pj_bool_t,
    pub qop_value: pjsip_auth_qop_type,
    pub stale_cnt: ::std::os::raw::c_uint,
    pub nc: pj_uint32_t,
    pub cnonce: pj_str_t,
    pub last_chal: *mut pjsip_www_authenticate_hdr,
}
#[repr(C)]
pub struct pjsip_auth_clt_pref {
    pub initial_auth: pj_bool_t,
    pub algorithm: pj_str_t,
}
#[repr(C)]
pub struct pjsip_auth_clt_sess {
    pub pool: *mut pj_pool_t,
    pub endpt: *mut pjsip_endpoint,
    pub pref: pjsip_auth_clt_pref,
    pub cred_cnt: ::std::os::raw::c_uint,
    pub cred_info: *mut pjsip_cred_info,
    pub cached_auth: pjsip_cached_auth,
}
#[repr(C)]
pub struct pjsip_parser_err_report {
    pub prev: *mut pjsip_parser_err_report,
    pub next: *mut pjsip_parser_err_report,
    pub except_code: ::std::os::raw::c_int,
    pub line: ::std::os::raw::c_int,
    pub col: ::std::os::raw::c_int,
    pub hname: pj_str_t,
}
#[repr(C)]
pub struct pjsip_server_addresses {
    pub count: ::std::os::raw::c_uint,
    pub entry: [pjsip_server_addresses__bindgen_ty_1; 16usize],
}
#[repr(C)]
pub struct pjsip_server_addresses__bindgen_ty_1 {
    pub type_: pjsip_transport_type_e,
    pub priority: ::std::os::raw::c_uint,
    pub weight: ::std::os::raw::c_uint,
    pub addr: pj_sockaddr,
    pub addr_len: ::std::os::raw::c_int,
}
pub const PJSIP_TPSELECTOR_NONE: pjsip_tpselector_type = 0;
pub const PJSIP_TPSELECTOR_TRANSPORT: pjsip_tpselector_type = 1;
pub const PJSIP_TPSELECTOR_LISTENER: pjsip_tpselector_type = 2;
pub type pjsip_tpselector_type = u32;
#[repr(C)]
pub struct pjsip_tpselector {
    pub type_: pjsip_tpselector_type,
    pub disable_connection_reuse: pj_bool_t,
    pub u: pjsip_tpselector__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pjsip_tpselector__bindgen_ty_1 {
    pub transport: *mut pjsip_transport,
    pub listener: *mut pjsip_tpfactory,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[repr(C)]
pub struct pjsip_rx_data_op_key {
    pub op_key: pj_ioqueue_op_key_t,
    pub rdata: *mut pjsip_rx_data,
}
#[repr(C)]
pub struct pjsip_rx_data {
    pub tp_info: pjsip_rx_data__bindgen_ty_1,
    pub pkt_info: pjsip_rx_data__bindgen_ty_2,
    pub msg_info: pjsip_rx_data__bindgen_ty_3,
    pub endpt_info: pjsip_rx_data__bindgen_ty_4,
}
#[repr(C)]
pub struct pjsip_rx_data__bindgen_ty_1 {
    pub pool: *mut pj_pool_t,
    pub transport: *mut pjsip_transport,
    pub tp_data: *mut ::std::os::raw::c_void,
    pub op_key: pjsip_rx_data_op_key,
}
#[repr(C)]
pub struct pjsip_rx_data__bindgen_ty_2 {
    pub timestamp: pj_time_val,
    pub packet: [::std::os::raw::c_char; 4000usize],
    pub zero: pj_uint32_t,
    pub len: pj_ssize_t,
    pub src_addr: pj_sockaddr,
    pub src_addr_len: ::std::os::raw::c_int,
    pub src_name: [::std::os::raw::c_char; 46usize],
    pub src_port: ::std::os::raw::c_int,
}
#[repr(C)]
pub struct pjsip_rx_data__bindgen_ty_3 {
    pub msg_buf: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_int,
    pub msg: *mut pjsip_msg,
    pub info: *mut ::std::os::raw::c_char,
    pub cid: *mut pjsip_cid_hdr,
    pub from: *mut pjsip_from_hdr,
    pub to: *mut pjsip_to_hdr,
    pub via: *mut pjsip_via_hdr,
    pub cseq: *mut pjsip_cseq_hdr,
    pub max_fwd: *mut pjsip_max_fwd_hdr,
    pub route: *mut pjsip_route_hdr,
    pub record_route: *mut pjsip_rr_hdr,
    pub ctype: *mut pjsip_ctype_hdr,
    pub clen: *mut pjsip_clen_hdr,
    pub require: *mut pjsip_require_hdr,
    pub supported: *mut pjsip_supported_hdr,
    pub parse_err: pjsip_parser_err_report,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_rx_data__bindgen_ty_4 {
    pub mod_data: [*mut ::std::os::raw::c_void; 32usize],
}
#[repr(C)]
pub struct pjsip_tx_data_op_key {
    pub key: pj_ioqueue_op_key_t,
    pub tdata: *mut pjsip_tx_data,
    pub token: *mut ::std::os::raw::c_void,
    pub callback: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut pjsip_transport,
            arg2: *mut ::std::os::raw::c_void,
            arg3: pj_ssize_t,
        ),
    >,
}
#[repr(C)]
pub struct pjsip_tx_data {
    pub prev: *mut pjsip_tx_data,
    pub next: *mut pjsip_tx_data,
    pub pool: *mut pj_pool_t,
    pub obj_name: [::std::os::raw::c_char; 32usize],
    pub info: *mut ::std::os::raw::c_char,
    pub rx_timestamp: pj_time_val,
    pub mgr: *mut pjsip_tpmgr,
    pub op_key: pjsip_tx_data_op_key,
    pub lock: *mut pj_lock_t,
    pub msg: *mut pjsip_msg,
    pub saved_strict_route: *mut pjsip_route_hdr,
    pub buf: pjsip_buffer,
    pub ref_cnt: *mut pj_atomic_t,
    pub is_pending: ::std::os::raw::c_int,
    pub token: *mut ::std::os::raw::c_void,
    pub cb: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut pjsip_tx_data,
            arg3: pj_ssize_t,
        ),
    >,
    pub dest_info: pjsip_tx_data__bindgen_ty_1,
    pub tp_info: pjsip_tx_data__bindgen_ty_2,
    pub tp_sel: pjsip_tpselector,
    pub auth_retry: pj_bool_t,
    pub mod_data: [*mut ::std::os::raw::c_void; 32usize],
    pub via_addr: pjsip_host_port,
    pub via_tp: *const ::std::os::raw::c_void,
}
#[repr(C)]
pub struct pjsip_tx_data__bindgen_ty_1 {
    pub name: pj_str_t,
    pub addr: pjsip_server_addresses,
    pub cur_addr: ::std::os::raw::c_uint,
}
#[repr(C)]
pub struct pjsip_tx_data__bindgen_ty_2 {
    pub transport: *mut pjsip_transport,
    pub dst_addr: pj_sockaddr,
    pub dst_addr_len: ::std::os::raw::c_int,
    pub dst_name: [::std::os::raw::c_char; 46usize],
    pub dst_port: ::std::os::raw::c_int,
}
pub type pjsip_transport_callback = ::std::option::Option<
    unsafe extern "C" fn(
        tp: *mut pjsip_transport,
        token: *mut ::std::os::raw::c_void,
        sent_bytes: pj_ssize_t,
    ),
>;
#[repr(C)]
pub struct pjsip_transport_key {
    pub type_: ::std::os::raw::c_long,
    pub rem_addr: pj_sockaddr,
}
pub const PJSIP_TP_DIR_NONE: pjsip_transport_dir = 0;
pub const PJSIP_TP_DIR_OUTGOING: pjsip_transport_dir = 1;
pub const PJSIP_TP_DIR_INCOMING: pjsip_transport_dir = 2;
pub type pjsip_transport_dir = u32;
#[repr(C)]
pub struct pjsip_transport {
    pub obj_name: [::std::os::raw::c_char; 32usize],
    pub pool: *mut pj_pool_t,
    pub ref_cnt: *mut pj_atomic_t,
    pub lock: *mut pj_lock_t,
    pub grp_lock: *mut pj_grp_lock_t,
    pub tracing: pj_bool_t,
    pub is_shutdown: pj_bool_t,
    pub is_destroying: pj_bool_t,
    pub key: pjsip_transport_key,
    pub type_name: *mut ::std::os::raw::c_char,
    pub flag: ::std::os::raw::c_uint,
    pub info: *mut ::std::os::raw::c_char,
    pub addr_len: ::std::os::raw::c_int,
    pub local_addr: pj_sockaddr,
    pub local_name: pjsip_host_port,
    pub remote_name: pjsip_host_port,
    pub dir: pjsip_transport_dir,
    pub endpt: *mut pjsip_endpoint,
    pub tpmgr: *mut pjsip_tpmgr,
    pub factory: *mut pjsip_tpfactory,
    pub idle_timer: pj_timer_entry,
    pub last_recv_ts: pj_timestamp,
    pub last_recv_len: pj_size_t,
    pub data: *mut ::std::os::raw::c_void,
    pub send_msg: ::std::option::Option<
        unsafe extern "C" fn(
            transport: *mut pjsip_transport,
            tdata: *mut pjsip_tx_data,
            rem_addr: *const pj_sockaddr_t,
            addr_len: ::std::os::raw::c_int,
            token: *mut ::std::os::raw::c_void,
            callback: pjsip_transport_callback,
        ) -> pj_status_t,
    >,
    pub do_shutdown:
        ::std::option::Option<unsafe extern "C" fn(transport: *mut pjsip_transport) -> pj_status_t>,
    pub destroy:
        ::std::option::Option<unsafe extern "C" fn(transport: *mut pjsip_transport) -> pj_status_t>,
}
#[repr(C)]
pub struct pjsip_tpfactory {
    pub prev: *mut pjsip_tpfactory,
    pub next: *mut pjsip_tpfactory,
    pub obj_name: [::std::os::raw::c_char; 32usize],
    pub pool: *mut pj_pool_t,
    pub lock: *mut pj_lock_t,
    pub type_: pjsip_transport_type_e,
    pub type_name: *mut ::std::os::raw::c_char,
    pub flag: ::std::os::raw::c_uint,
    pub info: *mut ::std::os::raw::c_char,
    pub local_addr: pj_sockaddr,
    pub addr_name: pjsip_host_port,
    pub create_transport: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjsip_tpfactory,
            mgr: *mut pjsip_tpmgr,
            endpt: *mut pjsip_endpoint,
            rem_addr: *const pj_sockaddr,
            addr_len: ::std::os::raw::c_int,
            transport: *mut *mut pjsip_transport,
        ) -> pj_status_t,
    >,
    pub create_transport2: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *mut pjsip_tpfactory,
            mgr: *mut pjsip_tpmgr,
            endpt: *mut pjsip_endpoint,
            rem_addr: *const pj_sockaddr,
            addr_len: ::std::os::raw::c_int,
            tdata: *mut pjsip_tx_data,
            transport: *mut *mut pjsip_transport,
        ) -> pj_status_t,
    >,
    pub destroy:
        ::std::option::Option<unsafe extern "C" fn(factory: *mut pjsip_tpfactory) -> pj_status_t>,
}
#[repr(C)]
pub struct pjsip_target {
    pub prev: *mut pjsip_target,
    pub next: *mut pjsip_target,
    pub uri: *mut pjsip_uri,
    pub q1000: ::std::os::raw::c_int,
    pub code: pjsip_status_code,
    pub reason: pj_str_t,
}
#[repr(C)]
pub struct pjsip_target_set {
    pub head: pjsip_target,
    pub current: *mut pjsip_target,
}
pub const PJSIP_REDIRECT_REJECT: pjsip_redirect_op = 0;
pub const PJSIP_REDIRECT_ACCEPT: pjsip_redirect_op = 1;
pub const PJSIP_REDIRECT_ACCEPT_REPLACE: pjsip_redirect_op = 2;
pub const PJSIP_REDIRECT_PENDING: pjsip_redirect_op = 3;
pub const PJSIP_REDIRECT_STOP: pjsip_redirect_op = 4;
pub type pjsip_redirect_op = u32;
#[repr(C)]
pub struct pjsip_dlg_party {
    pub info: *mut pjsip_fromto_hdr,
    pub info_str: pj_str_t,
    pub tag_hval: pj_uint32_t,
    pub contact: *mut pjsip_contact_hdr,
    pub first_cseq: pj_int32_t,
    pub cseq: pj_int32_t,
}
pub const PJSIP_DIALOG_STATE_NULL: pjsip_dialog_state = 0;
pub const PJSIP_DIALOG_STATE_ESTABLISHED: pjsip_dialog_state = 1;
pub type pjsip_dialog_state = u32;
#[repr(C)]
pub struct pjsip_dialog {
    pub prev: *mut pjsip_dialog,
    pub next: *mut pjsip_dialog,
    pub obj_name: [::std::os::raw::c_char; 32usize],
    pub pool: *mut pj_pool_t,
    pub ua: *mut pjsip_user_agent,
    pub endpt: *mut pjsip_endpoint,
    pub grp_lock_: *mut pj_grp_lock_t,
    pub dlg_set: *mut ::std::os::raw::c_void,
    pub state: pjsip_dialog_state,
    pub target: *mut pjsip_uri,
    pub target_set: pjsip_target_set,
    pub inv_hdr: pjsip_hdr,
    pub local: pjsip_dlg_party,
    pub remote: pjsip_dlg_party,
    pub rem_cap_hdr: pjsip_hdr,
    pub role: pjsip_role_e,
    pub uac_has_2xx: pj_bool_t,
    pub secure: pj_bool_t,
    pub add_allow: pj_bool_t,
    pub call_id: *mut pjsip_cid_hdr,
    pub route_set: pjsip_route_hdr,
    pub route_set_frozen: pj_bool_t,
    pub auth_sess: pjsip_auth_clt_sess,
    pub sess_count: ::std::os::raw::c_int,
    pub tsx_count: ::std::os::raw::c_int,
    pub tp_sel: pjsip_tpselector,
    pub usage_cnt: ::std::os::raw::c_uint,
    pub usage: [*mut pjsip_module; 32usize],
    pub mod_data: [*mut ::std::os::raw::c_void; 32usize],
    pub via_addr: pjsip_host_port,
    pub via_tp: *const ::std::os::raw::c_void,
}
pub const PJSIP_INV_STATE_NULL: pjsip_inv_state = 0;
pub const PJSIP_INV_STATE_CALLING: pjsip_inv_state = 1;
pub const PJSIP_INV_STATE_INCOMING: pjsip_inv_state = 2;
pub const PJSIP_INV_STATE_EARLY: pjsip_inv_state = 3;
pub const PJSIP_INV_STATE_CONNECTING: pjsip_inv_state = 4;
pub const PJSIP_INV_STATE_CONFIRMED: pjsip_inv_state = 5;
pub const PJSIP_INV_STATE_DISCONNECTED: pjsip_inv_state = 6;
pub type pjsip_inv_state = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_inv_on_rx_offer_cb_param {
    pub offer: *const pjmedia_sdp_session,
    pub rdata: *const pjsip_rx_data,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_inv_callback {
    pub on_state_changed: ::std::option::Option<
        unsafe extern "C" fn(inv: *mut pjsip_inv_session, e: *mut pjsip_event),
    >,
    pub on_new_session: ::std::option::Option<
        unsafe extern "C" fn(inv: *mut pjsip_inv_session, e: *mut pjsip_event),
    >,
    pub on_tsx_state_changed: ::std::option::Option<
        unsafe extern "C" fn(
            inv: *mut pjsip_inv_session,
            tsx: *mut pjsip_transaction,
            e: *mut pjsip_event,
        ),
    >,
    pub on_rx_offer: ::std::option::Option<
        unsafe extern "C" fn(inv: *mut pjsip_inv_session, offer: *const pjmedia_sdp_session),
    >,
    pub on_rx_offer2: ::std::option::Option<
        unsafe extern "C" fn(
            inv: *mut pjsip_inv_session,
            param: *mut pjsip_inv_on_rx_offer_cb_param,
        ),
    >,
    pub on_rx_reinvite: ::std::option::Option<
        unsafe extern "C" fn(
            inv: *mut pjsip_inv_session,
            offer: *const pjmedia_sdp_session,
            rdata: *mut pjsip_rx_data,
        ) -> pj_status_t,
    >,
    pub on_create_offer: ::std::option::Option<
        unsafe extern "C" fn(inv: *mut pjsip_inv_session, p_offer: *mut *mut pjmedia_sdp_session),
    >,
    pub on_media_update: ::std::option::Option<
        unsafe extern "C" fn(inv_ses: *mut pjsip_inv_session, status: pj_status_t),
    >,
    pub on_send_ack: ::std::option::Option<
        unsafe extern "C" fn(inv: *mut pjsip_inv_session, rdata: *mut pjsip_rx_data),
    >,
    pub on_redirected: ::std::option::Option<
        unsafe extern "C" fn(
            inv: *mut pjsip_inv_session,
            target: *const pjsip_uri,
            e: *const pjsip_event,
        ) -> pjsip_redirect_op,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_timer {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct pjsip_inv_session {
    pub obj_name: [::std::os::raw::c_char; 32usize],
    pub pool: *mut pj_pool_t,
    pub pool_prov: *mut pj_pool_t,
    pub pool_active: *mut pj_pool_t,
    pub state: pjsip_inv_state,
    pub cancelling: pj_bool_t,
    pub pending_cancel: pj_bool_t,
    pub pending_bye: *mut pjsip_tx_data,
    pub cause: pjsip_status_code,
    pub cause_text: pj_str_t,
    pub notify: pj_bool_t,
    pub cb_called: ::std::os::raw::c_uint,
    pub dlg: *mut pjsip_dialog,
    pub role: pjsip_role_e,
    pub options: ::std::os::raw::c_uint,
    pub neg: *mut pjmedia_sdp_neg,
    pub sdp_neg_flags: ::std::os::raw::c_uint,
    pub invite_tsx: *mut pjsip_transaction,
    pub invite_req: *mut pjsip_tx_data,
    pub last_answer: *mut pjsip_tx_data,
    pub last_ack: *mut pjsip_tx_data,
    pub last_ack_cseq: pj_int32_t,
    pub mod_data: [*mut ::std::os::raw::c_void; 32usize],
    pub timer: *mut pjsip_timer,
    pub following_fork: pj_bool_t,
    pub ref_cnt: *mut pj_atomic_t,
    pub updated_sdp_answer: pj_bool_t,
}
#[repr(C)]
pub struct pjsip_rdata_sdp_info {
    pub body: pj_str_t,
    pub sdp_err: pj_status_t,
    pub sdp: *mut pjmedia_sdp_session,
}
extern "C" {
    pub fn pjsip_inv_usage_init(
        endpt: *mut pjsip_endpoint,
        cb: *const pjsip_inv_callback,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_usage_instance() -> *mut pjsip_module;
}
extern "C" {
    pub fn pjsip_inv_create_uac(
        dlg: *mut pjsip_dialog,
        local_sdp: *const pjmedia_sdp_session,
        options: ::std::os::raw::c_uint,
        p_inv: *mut *mut pjsip_inv_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_verify_request(
        rdata: *mut pjsip_rx_data,
        options: *mut ::std::os::raw::c_uint,
        sdp: *const pjmedia_sdp_session,
        dlg: *mut pjsip_dialog,
        endpt: *mut pjsip_endpoint,
        tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_verify_request2(
        rdata: *mut pjsip_rx_data,
        options: *mut ::std::os::raw::c_uint,
        offer: *const pjmedia_sdp_session,
        answer: *const pjmedia_sdp_session,
        dlg: *mut pjsip_dialog,
        endpt: *mut pjsip_endpoint,
        tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_verify_request3(
        rdata: *mut pjsip_rx_data,
        tmp_pool: *mut pj_pool_t,
        options: *mut ::std::os::raw::c_uint,
        offer: *const pjmedia_sdp_session,
        answer: *const pjmedia_sdp_session,
        dlg: *mut pjsip_dialog,
        endpt: *mut pjsip_endpoint,
        tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_create_uas(
        dlg: *mut pjsip_dialog,
        rdata: *mut pjsip_rx_data,
        local_sdp: *const pjmedia_sdp_session,
        options: ::std::os::raw::c_uint,
        p_inv: *mut *mut pjsip_inv_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_add_ref(inv: *mut pjsip_inv_session) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_dec_ref(inv: *mut pjsip_inv_session) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_terminate(
        inv: *mut pjsip_inv_session,
        st_code: ::std::os::raw::c_int,
        notify: pj_bool_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_uac_restart(inv: *mut pjsip_inv_session, new_offer: pj_bool_t) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_process_redirect(
        inv: *mut pjsip_inv_session,
        cmd: pjsip_redirect_op,
        e: *mut pjsip_event,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_invite(
        inv: *mut pjsip_inv_session,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_initial_answer(
        inv: *mut pjsip_inv_session,
        rdata: *mut pjsip_rx_data,
        st_code: ::std::os::raw::c_int,
        st_text: *const pj_str_t,
        sdp: *const pjmedia_sdp_session,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_answer(
        inv: *mut pjsip_inv_session,
        st_code: ::std::os::raw::c_int,
        st_text: *const pj_str_t,
        local_sdp: *const pjmedia_sdp_session,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_set_local_sdp(
        inv: *mut pjsip_inv_session,
        sdp: *const pjmedia_sdp_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_set_sdp_answer(
        inv: *mut pjsip_inv_session,
        sdp: *const pjmedia_sdp_session,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_end_session(
        inv: *mut pjsip_inv_session,
        st_code: ::std::os::raw::c_int,
        st_text: *const pj_str_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_cancel_reinvite(
        inv: *mut pjsip_inv_session,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_reinvite(
        inv: *mut pjsip_inv_session,
        new_contact: *const pj_str_t,
        new_offer: *const pjmedia_sdp_session,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_update(
        inv: *mut pjsip_inv_session,
        new_contact: *const pj_str_t,
        offer: *const pjmedia_sdp_session,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_create_ack(
        inv: *mut pjsip_inv_session,
        cseq: ::std::os::raw::c_int,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_inv_send_msg(
        inv: *mut pjsip_inv_session,
        tdata: *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_dlg_get_inv_session(dlg: *mut pjsip_dialog) -> *mut pjsip_inv_session;
}
extern "C" {
    pub fn pjsip_inv_state_name(state: pjsip_inv_state) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pjsip_create_sdp_body(
        pool: *mut pj_pool_t,
        sdp: *mut pjmedia_sdp_session,
        p_body: *mut *mut pjsip_msg_body,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_rdata_get_sdp_info(rdata: *mut pjsip_rx_data) -> *mut pjsip_rdata_sdp_info;
}
extern "C" {
    pub fn pjsip_rdata_get_sdp_info2(
        rdata: *mut pjsip_rx_data,
        med_type: *const pjsip_media_type,
    ) -> *mut pjsip_rdata_sdp_info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_regc {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct pjsip_regc_cbparam {
    pub regc: *mut pjsip_regc,
    pub token: *mut ::std::os::raw::c_void,
    pub status: pj_status_t,
    pub code: ::std::os::raw::c_int,
    pub reason: pj_str_t,
    pub rdata: *mut pjsip_rx_data,
    pub expiration: ::std::os::raw::c_uint,
    pub contact_cnt: ::std::os::raw::c_int,
    pub contact: [*mut pjsip_contact_hdr; 10usize],
    pub is_unreg: pj_bool_t,
}
pub type pjsip_regc_cb =
    ::std::option::Option<unsafe extern "C" fn(param: *mut pjsip_regc_cbparam)>;
#[repr(C)]
pub struct pjsip_regc_tsx_cb_param {
    pub cbparam: pjsip_regc_cbparam,
    pub contact_cnt: ::std::os::raw::c_int,
    pub contact: [pj_str_t; 10usize],
}
pub type pjsip_regc_tsx_cb =
    ::std::option::Option<unsafe extern "C" fn(param: *mut pjsip_regc_tsx_cb_param)>;
#[repr(C)]
pub struct pjsip_regc_info {
    pub server_uri: pj_str_t,
    pub client_uri: pj_str_t,
    pub is_busy: pj_bool_t,
    pub auto_reg: pj_bool_t,
    pub interval: ::std::os::raw::c_uint,
    pub next_reg: ::std::os::raw::c_uint,
    pub transport: *mut pjsip_transport,
}
extern "C" {
    pub fn pjsip_regc_create(
        endpt: *mut pjsip_endpoint,
        token: *mut ::std::os::raw::c_void,
        cb: pjsip_regc_cb,
        p_regc: *mut *mut pjsip_regc,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_destroy(regc: *mut pjsip_regc) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_get_info(regc: *mut pjsip_regc, info: *mut pjsip_regc_info) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_get_pool(regc: *mut pjsip_regc) -> *mut pj_pool_t;
}
extern "C" {
    pub fn pjsip_regc_init(
        regc: *mut pjsip_regc,
        srv_url: *const pj_str_t,
        from_url: *const pj_str_t,
        to_url: *const pj_str_t,
        ccnt: ::std::os::raw::c_int,
        contact: *const pj_str_t,
        expires: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_add_ref(regc: *mut pjsip_regc);
}
extern "C" {
    pub fn pjsip_regc_dec_ref(regc: *mut pjsip_regc) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_set_reg_tsx_cb(
        regc: *mut pjsip_regc,
        tsx_cb: pjsip_regc_tsx_cb,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_set_via_sent_by(
        regc: *mut pjsip_regc,
        via_addr: *mut pjsip_host_port,
        via_tp: *mut pjsip_transport,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_set_delay_before_refresh(
        regc: *mut pjsip_regc,
        delay: pj_uint32_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_set_credentials(
        regc: *mut pjsip_regc,
        count: ::std::os::raw::c_int,
        cred: *const pjsip_cred_info,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_set_prefs(
        regc: *mut pjsip_regc,
        pref: *const pjsip_auth_clt_pref,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_set_route_set(
        regc: *mut pjsip_regc,
        route_set: *const pjsip_route_hdr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_set_transport(
        regc: *mut pjsip_regc,
        sel: *const pjsip_tpselector,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_release_transport(regc: *mut pjsip_regc) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_add_headers(regc: *mut pjsip_regc, hdr_list: *const pjsip_hdr)
        -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_register(
        regc: *mut pjsip_regc,
        autoreg: pj_bool_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_unregister(
        regc: *mut pjsip_regc,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_unregister_all(
        regc: *mut pjsip_regc,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_update_contact(
        regc: *mut pjsip_regc,
        ccnt: ::std::os::raw::c_int,
        contact: *const pj_str_t,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_update_expires(regc: *mut pjsip_regc, expires: pj_uint32_t) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_regc_send(regc: *mut pjsip_regc, tdata: *mut pjsip_tx_data) -> pj_status_t;
}
#[repr(C)]
pub struct pjsip_replaces_hdr {
    pub prev: *mut pjsip_replaces_hdr,
    pub next: *mut pjsip_replaces_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub call_id: pj_str_t,
    pub to_tag: pj_str_t,
    pub from_tag: pj_str_t,
    pub early_only: pj_bool_t,
    pub other_param: pjsip_param,
}
extern "C" {
    pub fn pjsip_replaces_init_module(endpt: *mut pjsip_endpoint) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_replaces_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_replaces_hdr;
}
extern "C" {
    pub fn pjsip_replaces_verify_request(
        rdata: *mut pjsip_rx_data,
        p_dlg: *mut *mut pjsip_dialog,
        lock_dlg: pj_bool_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_evsub {
    _unused: [u8; 0],
}
pub const PJSIP_EVSUB_STATE_NULL: pjsip_evsub_state = 0;
pub const PJSIP_EVSUB_STATE_SENT: pjsip_evsub_state = 1;
pub const PJSIP_EVSUB_STATE_ACCEPTED: pjsip_evsub_state = 2;
pub const PJSIP_EVSUB_STATE_PENDING: pjsip_evsub_state = 3;
pub const PJSIP_EVSUB_STATE_ACTIVE: pjsip_evsub_state = 4;
pub const PJSIP_EVSUB_STATE_TERMINATED: pjsip_evsub_state = 5;
pub const PJSIP_EVSUB_STATE_UNKNOWN: pjsip_evsub_state = 6;
pub type pjsip_evsub_state = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_evsub_user {
    pub on_evsub_state:
        ::std::option::Option<unsafe extern "C" fn(sub: *mut pjsip_evsub, event: *mut pjsip_event)>,
    pub on_tsx_state: ::std::option::Option<
        unsafe extern "C" fn(
            sub: *mut pjsip_evsub,
            tsx: *mut pjsip_transaction,
            event: *mut pjsip_event,
        ),
    >,
    pub on_rx_refresh: ::std::option::Option<
        unsafe extern "C" fn(
            sub: *mut pjsip_evsub,
            rdata: *mut pjsip_rx_data,
            p_st_code: *mut ::std::os::raw::c_int,
            p_st_text: *mut *mut pj_str_t,
            res_hdr: *mut pjsip_hdr,
            p_body: *mut *mut pjsip_msg_body,
        ),
    >,
    pub on_rx_notify: ::std::option::Option<
        unsafe extern "C" fn(
            sub: *mut pjsip_evsub,
            rdata: *mut pjsip_rx_data,
            p_st_code: *mut ::std::os::raw::c_int,
            p_st_text: *mut *mut pj_str_t,
            res_hdr: *mut pjsip_hdr,
            p_body: *mut *mut pjsip_msg_body,
        ),
    >,
    pub on_client_refresh: ::std::option::Option<unsafe extern "C" fn(sub: *mut pjsip_evsub)>,
    pub on_server_timeout: ::std::option::Option<unsafe extern "C" fn(sub: *mut pjsip_evsub)>,
}
extern "C" {
    pub static pjsip_refer_method: pjsip_method;
}
extern "C" {
    pub fn pjsip_get_refer_method() -> *const pjsip_method;
}
extern "C" {
    pub fn pjsip_xfer_init_module(endpt: *mut pjsip_endpoint) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_xfer_create_uac(
        dlg: *mut pjsip_dialog,
        user_cb: *const pjsip_evsub_user,
        p_evsub: *mut *mut pjsip_evsub,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_xfer_create_uas(
        dlg: *mut pjsip_dialog,
        user_cb: *const pjsip_evsub_user,
        rdata: *mut pjsip_rx_data,
        p_evsub: *mut *mut pjsip_evsub,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_xfer_initiate(
        sub: *mut pjsip_evsub,
        refer_to_uri: *const pj_str_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_xfer_accept(
        sub: *mut pjsip_evsub,
        rdata: *mut pjsip_rx_data,
        st_code: ::std::os::raw::c_int,
        hdr_list: *const pjsip_hdr,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_xfer_notify(
        sub: *mut pjsip_evsub,
        state: pjsip_evsub_state,
        xfer_st_code: ::std::os::raw::c_int,
        xfer_st_text: *const pj_str_t,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_xfer_current_notify(
        sub: *mut pjsip_evsub,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_xfer_send_request(sub: *mut pjsip_evsub, tdata: *mut pjsip_tx_data)
        -> pj_status_t;
}
extern "C" {
    pub static pjsip_prack_method: pjsip_method;
}
extern "C" {
    pub fn pjsip_get_prack_method() -> *const pjsip_method;
}
extern "C" {
    pub fn pjsip_100rel_init_module(endpt: *mut pjsip_endpoint) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_100rel_attach(inv: *mut pjsip_inv_session) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_100rel_is_reliable(rdata: *mut pjsip_rx_data) -> pj_bool_t;
}
extern "C" {
    pub fn pjsip_100rel_create_prack(
        inv: *mut pjsip_inv_session,
        rdata: *mut pjsip_rx_data,
        p_tdata: *mut *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_100rel_send_prack(
        inv: *mut pjsip_inv_session,
        tdata: *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_100rel_on_rx_prack(
        inv: *mut pjsip_inv_session,
        rdata: *mut pjsip_rx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_100rel_tx_response(
        inv: *mut pjsip_inv_session,
        tdata: *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_100rel_end_session(inv: *mut pjsip_inv_session) -> pj_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pjsip_timer_setting {
    pub min_se: ::std::os::raw::c_uint,
    pub sess_expires: ::std::os::raw::c_uint,
}
#[repr(C)]
pub struct pjsip_sess_expires_hdr {
    pub prev: *mut pjsip_sess_expires_hdr,
    pub next: *mut pjsip_sess_expires_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub sess_expires: ::std::os::raw::c_uint,
    pub refresher: pj_str_t,
    pub other_param: pjsip_param,
}
#[repr(C)]
pub struct pjsip_min_se_hdr {
    pub prev: *mut pjsip_min_se_hdr,
    pub next: *mut pjsip_min_se_hdr,
    pub type_: pjsip_hdr_e,
    pub name: pj_str_t,
    pub sname: pj_str_t,
    pub vptr: *mut pjsip_hdr_vptr,
    pub min_se: ::std::os::raw::c_uint,
    pub other_param: pjsip_param,
}
extern "C" {
    pub fn pjsip_timer_init_module(endpt: *mut pjsip_endpoint) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_timer_setting_default(setting: *mut pjsip_timer_setting) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_timer_init_session(
        inv: *mut pjsip_inv_session,
        setting: *const pjsip_timer_setting,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_sess_expires_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_sess_expires_hdr;
}
extern "C" {
    pub fn pjsip_min_se_hdr_create(pool: *mut pj_pool_t) -> *mut pjsip_min_se_hdr;
}
extern "C" {
    pub fn pjsip_timer_update_req(
        inv: *mut pjsip_inv_session,
        tdata: *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_timer_process_resp(
        inv: *mut pjsip_inv_session,
        rdata: *const pjsip_rx_data,
        st_code: *mut pjsip_status_code,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_timer_handle_refresh_error(
        inv: *mut pjsip_inv_session,
        event: *mut pjsip_event,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_timer_process_req(
        inv: *mut pjsip_inv_session,
        rdata: *const pjsip_rx_data,
        st_code: *mut pjsip_status_code,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_timer_update_resp(
        inv: *mut pjsip_inv_session,
        tdata: *mut pjsip_tx_data,
    ) -> pj_status_t;
}
extern "C" {
    pub fn pjsip_timer_end_session(inv: *mut pjsip_inv_session) -> pj_status_t;
}
